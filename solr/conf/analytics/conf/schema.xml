<?xml version="1.0" encoding="UTF-8" ?>
<!--
 Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<!--  
 This is the Solr schema file. This file should be named "schema.xml" and
 should be in the conf directory under the solr home
 (i.e. ./solr/conf/schema.xml by default) 
 or located where the classloader for the Solr webapp can find it.

 This example schema is the recommended starting point for users.
 It should be kept correct and concise, usable out-of-the-box.

 For more information, on how to customize this file, please see
 http://wiki.apache.org/solr/SchemaXml

 PERFORMANCE NOTE: this schema includes many optional features and should not
 be used for benchmarking.  To improve performance one could
  - set stored="false" for all fields possible (esp large fields) when you
    only need to search on the field but don't need to return the original
    value.
  - set indexed="false" if you don't need to search on the field, but only
    return the field as a result of searching on other indexed fields.
  - remove all unneeded copyField statements
  - for best index size and searching performance, set "index" to false
    for all general text fields, use copyField to copy them to the
    catchall "text" field, and use that for searching.
  - For maximum indexing performance, use the StreamingUpdateSolrServer
    java client.
  - Remember to run the JVM in server mode, and use a higher logging level
    that avoids logging every request
-->

<schema name="analytics" version="1.5">

    <fields>
        <!-- Valid attributes for fields:
          name: mandatory - the name for the field
          type: mandatory - the name of a field type from the
            <types> fieldType section
          indexed: true if this field should be indexed (searchable or sortable)
          stored: true if this field should be retrievable
          docValues: true if this field should have doc values. Doc values are
            useful for faceting, grouping, sorting and function queries. Although not
            required, doc values will make the index faster to load, more
            NRT-friendly and more memory-efficient. They however come with some
            limitations: they are currently only supported by StrField, UUIDField
            and all Trie*Fields, and depending on the field type, they might
            require the field to be single-valued, be required or have a default
            value (check the documentation of the field type you're interested in
            for more information)
          multiValued: true if this field may contain multiple values per document
          omitNorms: (expert) set to true to omit the norms associated with
            this field (this disables length normalization and index-time
            boosting for the field, and saves some memory).  Only full-text
            fields or fields that need an index-time boost need norms.
            Norms are omitted for primitive (non-analyzed) types by default.
          termVectors: [false] set to true to store the term vector for a
            given field.
            When using MoreLikeThis, fields used for similarity should be
            stored for best performance.
          termPositions: Store position information with the term vector.
            This will increase storage costs.
          termOffsets: Store offset information with the term vector. This
            will increase storage costs.
          required: The field is required.  It will throw an error if the
            value does not exist
          default: a value that should be used if no value is specified
            when adding a document.
        -->

        <!-- field names should consist of alphanumeric or underscore characters only and
           not start with a digit.  This is not currently strictly enforced,
           but other field names will not have first class support from all components
           and back compatibility is not guaranteed.  Names with both leading and
           trailing underscores (e.g. _version_) are reserved.
        -->
        <field name="id" type="uuid" indexed="true" stored="true" required="true" />
        <field name="bioentityIdentifier" type="string" indexed="true" stored="true" required="true"/>
        <field name="identifierSearch" type="text_analytics_search" indexed="true" stored="false"/>
        <field name="species" type="text_lower" indexed="true" stored="true" required="true"/>
        <field name="kingdom" type="text_lower" indexed="true" stored="true" required="true" />
        <field name="experimentAccession" type="string" indexed="true" stored="true" required="true"/>
        <field name="experimentType" type="text_lower" indexed="true" stored="true" required="true"/>
        <field name="defaultQueryFactorType" type="text_lower" indexed="true" stored="true"/>
        <field name="conditionsSearch" type="text_analytics_search" indexed="true" stored="false"/>
        <field name="assayGroupId" type="string" indexed="true" stored="true"/>
        <field name="expressionLevel" type="tdouble4" indexed="true" stored="true"/>
        <field name="contrastId" type="string" indexed="true" stored="true"/>
        <field name="factors" type="text_lower" indexed="true" stored="true" multiValued="true"/>
        <field name="numReplicates" type="string" indexed="true" stored="true"/>
        <field name="foldChange" type="tdouble4" indexed="true" stored="true"/>
        <field name="pValue" type="tdouble4" indexed="true" stored="true"/>
        <field name="tStatistics" type="tdouble4" indexed="true" stored="true"/>
        <field name="regulation" type="text_lower" indexed="true" stored="true" />

        <field name="_version_" type="long" indexed="true" stored="true"/>

    </fields>

    <uniqueKey>id</uniqueKey>

    <types>
        <fieldType name="uuid" class="solr.UUIDField" indexed="true" />

        <fieldType name="regulationEnum" class="solr.EnumField" enumsConfig="enumsConfig.xml" enumName="regulation"/>
        <fieldType name="kingdomEnum" class="solr.EnumField" enumsConfig="enumsConfig.xml" enumName="kingdom"/>

        <!--<fieldType name="experimentType" class="solr.EnumField" enumsConfig="experimentType.xml" enumName="experimentType"/>-->

        <!-- The StrField type is not analyzed, but indexed/stored verbatim.
           It supports doc values but in that case the field needs to be
           single-valued and either required or have a default value.
          -->
        <fieldType name="string" class="solr.StrField" sortMissingLast="true"/>
        <fieldType name="long" class="solr.TrieLongField" precisionStep="0" positionIncrementGap="0"/>
        <fieldType name="tint4" class="solr.TrieIntField" precisionStep="4" positionIncrementGap="0"/>
        <fieldType name="tdouble4" class="solr.TrieDoubleField" precisionStep="4" positionIncrementGap="0"/>


        <!-- A text field that only splits on whitespace for exact matching of words -->
        <fieldType name="text_ws" class="solr.TextField" positionIncrementGap="100">
            <analyzer>
                <tokenizer class="solr.WhitespaceTokenizerFactory"/>
            </analyzer>
        </fieldType>

        <!-- A general text field that has reasonable, generic
             cross-language defaults: it tokenizes with StandardTokenizer,
         removes stop words from case-insensitive "stopwords.txt"
         (empty by default), and down cases.  At query time only, it
         also applies synonyms. -->
        <fieldType name="text_general" class="solr.TextField" positionIncrementGap="100">
            <analyzer type="index">
                <tokenizer class="solr.StandardTokenizerFactory"/>
                <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" />
                <!-- in this example, we will only use synonyms at query time
                <filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/>
                -->
                <filter class="solr.LowerCaseFilterFactory"/>
            </analyzer>
            <analyzer type="query">
                <tokenizer class="solr.StandardTokenizerFactory"/>
                <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" />
                <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
                <filter class="solr.LowerCaseFilterFactory"/>
            </analyzer>
        </fieldType>
        
        <!-- text copied from baselineConditions schema.xml -->

        <!-- <![CDATA[ A text field that uses WordDelimiterFilter to enable splitting and matching of
             words on case-change, alpha numeric boundaries, and non-alphanumeric chars,
             so that a query of "wifi" or "wi fi" could match a document containing "Wi-Fi".
             Synonyms and stopwords are customized by external files, and stemming is enabled.
             Duplicate tokens at the same position (which may result from Stemmed Synonyms or
             WordDelim parts) are removed.
             ]]> -->
        <fieldtype name="text" class="solr.TextField" positionIncrementGap="100">
            <analyzer type="index">
                <tokenizer class="solr.WhitespaceTokenizerFactory"/>
                <!-- <![CDATA[ in this example, we will only use synonyms at query time
                     <filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/>
                     ]]> -->
                <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>
                <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1"
                        catenateWords="1" catenateNumbers="1" catenateAll="0"/>
                <filter class="solr.LowerCaseFilterFactory"/>
                <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
                <filter class="solr.PorterStemFilterFactory"/>
            </analyzer>
            <analyzer type="query">
                <tokenizer class="solr.WhitespaceTokenizerFactory"/>
                <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
                <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>
                <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1"
                        catenateWords="0" catenateNumbers="0" catenateAll="0"/>
                <filter class="solr.LowerCaseFilterFactory"/>
                <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
                <filter class="solr.PorterStemFilterFactory"/>
            </analyzer>
        </fieldtype>

        <!-- Case insensitive, tokenize for analytics syntax e.g. propertyName:{propertyValue} -->
        <fieldType name="text_analytics_search" class="solr.TextField" positionIncrementGap="100">
            <analyzer>
                <tokenizer class="solr.PatternTokenizerFactory" pattern="[ {}:,]"/>
                <filter class="solr.LowerCaseFilterFactory"/>
            </analyzer>
            <analyzer type="query">
                <tokenizer class="solr.PatternTokenizerFactory" pattern="[ {}:,]"/>
                <filter class="solr.LowerCaseFilterFactory"/>
            </analyzer>
        </fieldType>

        <!-- text copied from gxa schema.xml -->

        <fieldType name="text_lower" class="solr.TextField">
            <analyzer type="index">
                <tokenizer class="solr.KeywordTokenizerFactory"/>
                <filter class="solr.LowerCaseFilterFactory"/>
            </analyzer>
            <analyzer type="query">
                <tokenizer class="solr.KeywordTokenizerFactory"/>
                <filter class="solr.LowerCaseFilterFactory"/>
            </analyzer>
        </fieldType>

    </types>

</schema>
