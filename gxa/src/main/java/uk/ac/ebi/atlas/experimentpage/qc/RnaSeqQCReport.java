package uk.ac.ebi.atlas.experimentpage.qc;

import com.google.common.base.Function;
import com.google.common.base.Functions;
import com.google.common.collect.FluentIterable;
import org.apache.commons.lang3.tuple.Pair;
import uk.ac.ebi.atlas.commons.readers.TsvReader;
import uk.ac.ebi.atlas.experimentpage.differential.download.CanStreamSupplier;
import uk.ac.ebi.atlas.model.download.ExternallyAvailableContent;
import uk.ac.ebi.atlas.model.experiment.differential.DifferentialExperiment;
import uk.ac.ebi.atlas.model.resource.AtlasResource;
import uk.ac.ebi.atlas.resource.DataFileHub;

import javax.annotation.Nullable;
import javax.inject.Inject;
import javax.inject.Named;
import java.io.Writer;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.Map;

@Named
public class RnaSeqQCReport extends CanStreamSupplier<DifferentialExperiment> {

    @Override
    public ExternallyAvailableContent.ContentType contentType() {
        return ExternallyAvailableContent.ContentType.SUPPLEMENTARY_INFORMATION;
    }

    private final DataFileHub dataFileHub;

    @Inject
    public RnaSeqQCReport(DataFileHub dataFileHub){
        this.dataFileHub = dataFileHub;
    }

    @Override
    public Collection<ExternallyAvailableContent> get(DifferentialExperiment experiment) {

        List<Pair<String, Function<Writer, Void>>> documents = FluentIterable.from(
                new RnaSeqQCFiles(dataFileHub.getExperimentFiles(experiment.getAccession()).qcFolder).get().entrySet()).transform(
                new Function<Map.Entry<String,AtlasResource<TsvReader>>, Pair<String, Function<Writer, Void>>>() {
                    @Nullable
                    @Override
                    public Pair<String, Function<Writer, Void>> apply(@Nullable Map.Entry<String, AtlasResource<TsvReader>> stringAtlasResourceEntry) {
                        return Pair.of(
                                stringAtlasResourceEntry.getKey(),
                                readFromResourceAndWriteTsv(stringAtlasResourceEntry.getValue(), Functions.<String[]>identity())
                        );
                    }
                }).toList();


        if(! documents.isEmpty()){
            return Collections.singleton(new ExternallyAvailableContent(
                    makeUri("qc"),
                    ExternallyAvailableContent.Description.create("link",
                            "Quality check report (generated by iRAP)"
                    ),
                    documents.size() == 1 ? streamFile(documents.get(0)) : streamFolder(experiment.getAccession()+"-qc", documents)
            ));
        } else {
            return Collections.emptySet();
        }
    }
}
