{"version":3,"sources":["webpack:///./atlas_bundles/baseline-expression/index.js","webpack:///./atlas_bundles/baseline-expression/src/baselineRenderer.jsx","webpack:///./atlas_bundles/baseline-expression/src/BaselineRouter.jsx","webpack:///./atlas_bundles/baseline-expression/src/facets-tree/BaselineFacetsTree.jsx","webpack:///./atlas_bundles/baseline-expression/src/facets-tree/Facet.jsx","webpack:///./atlas_bundles/baseline-expression/src/facets-tree/FacetItem.jsx","webpack:///./atlas_bundles/baseline-expression/src/BaselineHeatmaps.jsx","webpack:///./atlas_bundles/baseline-expression/~/jquery.browser/dist/jquery.browser.js","webpack:///./atlas_bundles/baseline-expression/src/BaselineHeatmapWidget.jsx","webpack:///./atlas_bundles/baseline-expression/~/anatomogram/resources/icons ^\\.\\/.*selected\\.png$","webpack:///./atlas_bundles/baseline-expression/~/anatomogram/resources/svg ^\\.\\/.*$","webpack:///./atlas_bundles/baseline-expression/~/anatomogram/src/SelectionIcon.less","webpack:///./atlas_bundles/baseline-expression/~/anatomogram/src/ContainerLayout.less","webpack:///./atlas_bundles/baseline-expression/~/uncontrollable/index.js","webpack:///./atlas_bundles/baseline-expression/~/uncontrollable/createUncontrollable.js","webpack:///./atlas_bundles/baseline-expression/~/expression-atlas-heatmap-highcharts/src/manipulate/controls/filter/Filter.less","webpack:///./atlas_bundles/baseline-expression/~/expression-atlas-heatmap-highcharts/src/manipulate/tooltips/TooltipStateManager.less","webpack:///./atlas_bundles/baseline-expression/~/highcharts/highcharts.js","webpack:///./atlas_bundles/baseline-expression/~/highcharts/modules/heatmap.js","webpack:///./atlas_bundles/baseline-expression/~/expression-atlas-heatmap-highcharts/src/manipulate/tooltips/Tooltips.less","webpack:///./atlas_bundles/baseline-expression/~/expression-atlas-heatmap-highcharts/src/manipulate/heatmap-legend/DataSeriesHeatmapLegend.less","webpack:///./atlas_bundles/baseline-expression/~/expression-atlas-heatmap-highcharts/src/manipulate/heatmap-legend/GradientHeatmapLegend.less","webpack:///./atlas_bundles/baseline-expression/~/rc-tooltip/lib/Tooltip.js","webpack:///./atlas_bundles/baseline-expression/~/prop-types/index.js","webpack:///./atlas_bundles/baseline-expression/~/prop-types/factoryWithTypeCheckers.js","webpack:///./atlas_bundles/baseline-expression/~/prop-types/lib/ReactPropTypesSecret.js","webpack:///./atlas_bundles/baseline-expression/~/prop-types/checkPropTypes.js","webpack:///./atlas_bundles/baseline-expression/~/rc-trigger/lib/Trigger.js","webpack:///./atlas_bundles/baseline-expression/~/create-react-class/index.js","webpack:///./atlas_bundles/baseline-expression/~/create-react-class/factory.js","webpack:///./atlas_bundles/baseline-expression/~/rc-trigger/lib/Popup.js","webpack:///./atlas_bundles/baseline-expression/~/rc-align/lib/Align.js","webpack:///./atlas_bundles/baseline-expression/~/rc-animate/lib/Animate.js","webpack:///./atlas_bundles/baseline-expression/~/rc-animate/lib/AnimateChild.js","webpack:///./atlas_bundles/baseline-expression/~/rc-trigger/lib/PopupInner.js","webpack:///./atlas_bundles/baseline-expression/~/rc-trigger/lib/LazyRenderBox.js","webpack:///./atlas_bundles/baseline-expression/~/expression-atlas-heatmap-highcharts/src/manipulate/coexpression/CoexpressionOption.less","webpack:///./atlas_bundles/baseline-expression/~/highcharts/highcharts-more.js","webpack:///./atlas_bundles/baseline-expression/~/expression-atlas-heatmap-highcharts/assets ^\\.\\/.*\\-icon\\.png$","webpack:///./atlas_bundles/baseline-expression/src/urlManager.js"],"names":["render","atlasUrl","target","facetsTreeData","geneQuery","conditionQuery","species","document","getElementById","UrlManager","require","BaselineRouter","props","anatomogramDataEventEmitter","setMaxListeners","newQuerySelect","parseBaselineUrlParameter","newShowAnatomograms","Object","keys","length","forEach","factorToPreselect","find","factor","name","toLowerCase","_addElementToObjectOfArrays","baselinePush","state","_transformPropsFacetsObjectToArray","querySelect","showAnatomograms","setChecked","_setChecked","bind","toggleAnatomograms","_toggleAnatomograms","window","addEventListener","setState","organismPartInQuerySelect","_organismPartInQuerySelect","heatmaps","_querySelectToHeatmaps","factorName","checked","JSON","parse","stringify","newFacetsTreeData","facet","facetName","facetItems","_removeElementFromObjectOfArrays","obj","arrayName","element","push","splice","indexOf","some","facetItem","map","value","includes","Component","propTypes","PropTypes","string","isRequired","object","BaselineFacetsTree","facets","disableAnatomogramsCheckbox","arrayOf","shape","bool","func","capitalizeFirstLetter","str","charAt","toUpperCase","slice","Facet","facetItemName","facetItemChecked","FacetItem","AtlasFeedback","BaselineHeatmaps","atlasFeedback","browser","msie","ga","score","comment","heatmap","_hasMoreThanOneSpecies","uniqueSpecies","Set","add","size","instanceOf","BaselineHeatmapWidget","showHeatmapLabel","gene","condition","source","showAnatomogram","Url","QueryString","exports","pushQueryIntoBrowserHistory","replace","currentUrlObject","location","toString","newUrlQueryParams","query","bs","newUrlObject","protocol","host","hash","pathname","history","replaceState","format","pushState","getQuerySelectFromLocation","currentURL","differentialSelectParam"],"mappingsmBCIO,gBAE6B;AAAA,8BADtCC,QACsC;AAAA,SADtCA,QACsC;AAAA,4BADEC,MACF;AAAA,SADEA,MACF,+BADW,gBACX;AAAA,SAD6BC,cAC7B,QAD6BA,cAC7B;AAAA,SAAtCC,SAAsC,QAAtCA,SAAsC;AAAA,SAA3BC,cAA2B,QAA3BA,cAA2B;AAAA,SAAXC,OAAW,QAAXA,OAAW;;;AAExC,wBAASN,MAAT,CACI,0DAAgB,UAAUC,QAA1B;AACgB,yBAAgBE,cADhC;AAEgB,oBAAWC,SAF3B;AAGgB,yBAAgBC,cAHhC;AAIgB,kBAASC;AAJzB,OADJ,EAOIC,SAASC,cAAT,CAAwBN,MAAxB,CAPJ;AAUH,E;;AAnBD;;;;AACA;;;;AAEA;;;;;;AAgBC,E;;;;;;;;;;;;;;;;;ACnBD;;;;AAEA;;;;AAEA;;;;AACA;;;;;;;;;;;;AACA,KAAMO,aAAa,mBAAAC,CAAQ,2BAAR,CAAnB;;KAEMC,c;;;AAEF,6BAAYC,KAAZ,EAAmB;AAAA;;AAAA,qIACTA,KADS;;AAGf,aAAMC,8BAA8B,sBAApC;AACAA,qCAA4BC,eAA5B,CAA4C,CAA5C;;AAEA,aAAMC,iBAAiBN,WAAWO,yBAAX,EAAvB;AACA,aAAIC,sBAAsB,KAA1B;;AAEA,aAAIC,OAAOC,IAAP,CAAYJ,cAAZ,EAA4BK,MAA5B,KAAuC,CAA3C,EAA8C;AAC1CF,oBAAOC,IAAP,CAAY,MAAKP,KAAL,CAAWT,cAAvB,EAAuCkB,OAAvC,CAA+C,mBAAW;AACtD,qBAAMC,oBACF,MAAKV,KAAL,CAAWT,cAAX,CAA0BG,OAA1B,EAAmCiB,IAAnC,CAAwC;AAAA,4BAAUC,OAAOC,IAAP,CAAYC,WAAZ,OAA8B,eAAxC;AAAA,kBAAxC,CADJ;AAEA,qBAAIJ,iBAAJ,EAAuB;AACnB,2BAAKK,2BAAL,CAAiCZ,cAAjC,EAAiDT,OAAjD,EAA0DgB,kBAAkBG,IAA5E;AACAR,2CAAsB,IAAtB;AACH,kBAHD,MAGO,IAAI,MAAKL,KAAL,CAAWT,cAAX,CAA0BG,OAA1B,EAAmCc,MAAvC,EAA+C;AAClD,2BAAKO,2BAAL,CACIZ,cADJ,EACoBT,OADpB,EAC6B,MAAKM,KAAL,CAAWT,cAAX,CAA0BG,OAA1B,EAAmC,CAAnC,EAAsCmB,IADnE;AAEH;AACJ,cAVD;AAWH;;AAEDhB,oBAAWmB,YAAX,CAAwBb,cAAxB,EAAwC,IAAxC;;AAEA,eAAKc,KAAL,GAAa;AACT1B,6BAAgB,MAAK2B,kCAAL,CAAwCf,cAAxC,CADP;AAETgB,0BAAahB,cAFJ;AAGTF,0CAA6BA,2BAHpB;AAITmB,+BAAkBf;AAJT,UAAb;;AAOA,eAAKgB,UAAL,GAAkB,MAAKC,WAAL,CAAiBC,IAAjB,OAAlB;AACA,eAAKC,kBAAL,GAA0B,MAAKC,mBAAL,CAAyBF,IAAzB,OAA1B;AAjCe;AAkClB;;;;6CAEoB;AAAA;;AACjB;AACAG,oBAAOC,gBAAP,CACI,UADJ,EAEI,YAAM;AACF,qBAAMxB,iBAAiBN,WAAWO,yBAAX,EAAvB;AACA,wBAAKwB,QAAL,CAAc;AACVT,kCAAahB,cADH;AAEVZ,qCAAgB,OAAK2B,kCAAL,CAAwCf,cAAxC;AAFN,kBAAd;AAIH,cARL,EASI,KATJ;AAUH;;;kCAES;AACN,iBAAM0B,4BAA4B,KAAKC,0BAAL,EAAlC;AACA,iBAAMC,WAAW,KAAKC,sBAAL,EAAjB;;AAEA,oBACI;AAAA;AAAA,mBAAK,WAAU,KAAf;AACI;AAAA;AAAA,uBAAK,WAAU,iBAAf;AACI;AACI,iCAAU,KAAKf,KAAL,CAAW1B,cADzB;AAEI,qCAAc,KAAK8B,UAFvB;AAGI,2CAAoB,KAAKJ,KAAL,CAAWG,gBAHnC;AAII,6CAAsB,KAAKI,kBAJ/B;AAKI,sDAA+B,CAACK;AALpC;AADJ,kBADJ;AAUI;AAAA;AAAA,uBAAK,WAAU,iBAAf;AACI;AACI,mCAAY,KAAK7B,KAAL,CAAWX,QAD3B;AAEI,oCAAa,KAAKW,KAAL,CAAWR,SAF5B;AAGI,yCAAkB,KAAKQ,KAAL,CAAWP,cAHjC;AAII,mCAAYsC,QAJhB;AAKI,2CAAoB,KAAKd,KAAL,CAAWG,gBALnC;AAMI,sDAA+B,KAAKH,KAAL,CAAWhB;AAN9C;AADJ;AAVJ,cADJ;AAuBH;;;qCAEYP,O,EAASuC,U,EAAYC,O,EAAS;AACvC,iBAAM/B,iBAAiBgC,KAAKC,KAAL,CAAWD,KAAKE,SAAL,CAAe,KAAKpB,KAAL,CAAWE,WAA1B,CAAX,CAAvB;AACA,iBAAMmB,oBAAoBH,KAAKC,KAAL,CAAWD,KAAKE,SAAL,CAAe,KAAKpB,KAAL,CAAW1B,cAA1B,CAAX,CAA1B;;AAEA,iBAAI2C,OAAJ,EAAa;AACT,sBAAKnB,2BAAL,CAAiCZ,cAAjC,EAAiDT,OAAjD,EAA0DuC,UAA1D;AACAK,mCAAkB3B,IAAlB,CAAuB;AAAA,4BAAS4B,MAAMC,SAAN,KAAoB9C,OAA7B;AAAA,kBAAvB,EAA6D+C,UAA7D,CACK9B,IADL,CACU;AAAA,4BAAUC,OAAOC,IAAP,KAAgBoB,UAA1B;AAAA,kBADV,EACgDC,OADhD,GAC0D,IAD1D;AAEH,cAJD,MAIO;AACH,sBAAKQ,gCAAL,CAAsCvC,cAAtC,EAAsDT,OAAtD,EAA+DuC,UAA/D;AACAK,mCAAkB3B,IAAlB,CAAuB;AAAA,4BAAS4B,MAAMC,SAAN,KAAoB9C,OAA7B;AAAA,kBAAvB,EAA6D+C,UAA7D,CACK9B,IADL,CACU;AAAA,4BAAUC,OAAOC,IAAP,KAAgBoB,UAA1B;AAAA,kBADV,EACgDC,OADhD,GAC0D,KAD1D;AAEH;;AAEDrC,wBAAWmB,YAAX,CAAwBb,cAAxB,EAAwC,KAAxC;AACA,kBAAKyB,QAAL,CAAc;AACVrC,iCAAgB+C,iBADN;AAEVnB,8BAAahB;AAFH,cAAd;AAIH;;;qDAE4BwC,G,EAAKC,S,EAAWC,O,EAAS;AAClD,iBAAI,CAACF,IAAIC,SAAJ,CAAL,EAAqB;AACjBD,qBAAIC,SAAJ,IAAiB,EAAjB;AACH;AACDD,iBAAIC,SAAJ,EAAeE,IAAf,CAAoBD,OAApB;AACH;;;0DAEiCF,G,EAAKC,S,EAAWC,O,EAAS;AACvD,oBAAOF,IAAIC,SAAJ,EAAeG,MAAf,CAAsBJ,IAAIC,SAAJ,EAAeI,OAAf,CAAuBH,OAAvB,CAAtB,EAAuD,CAAvD,CAAP;AACA,iBAAIF,IAAIC,SAAJ,EAAepC,MAAf,KAA0B,CAA9B,EAAiC;AAC7B,wBAAOmC,IAAIC,SAAJ,CAAP;AACH;AACJ;;;+CAEqB;AAClB,iBAAIvC,sBAAsB,CAAC,KAAKY,KAAL,CAAWG,gBAAtC;;AAEA,kBAAKQ,QAAL,CAAc;AACVR,mCAAkBf;AADR,cAAd;AAGH;;;sDAEgE;AAAA,iBAAtCc,WAAsC,uEAAxB,KAAKF,KAAL,CAAWE,WAAa;;AAC7D,oBAAOb,OAAOC,IAAP,CAAYY,WAAZ,EACC8B,IADD,CACM;AAAA,wBAAW9B,YAAYzB,OAAZ,EAAqBuD,IAArB,CAA0B;AAAA,4BAAaC,UAAUpC,WAAV,OAA4B,eAAzC;AAAA,kBAA1B,CAAX;AAAA,cADN,CAAP;AAEH;;AAED;;;;4DACoCK,W,EAAa;AAAA;;AAC7C,oBAAOb,OAAOC,IAAP,CAAY,KAAKP,KAAL,CAAWT,cAAvB,EAAuC4D,GAAvC,CAA2C,qBAAa;AAC3D,wBAAO;AACHX,gCAAWA,SADR;AAEHC,iCAAY,OAAKzC,KAAL,CAAWT,cAAX,CAA0BiD,SAA1B,EAAqCW,GAArC,CAAyC,qBAAa;AAC9D,gCAAO;AACHtC,mCAAMqC,UAAUrC,IADb;AAEHuC,oCAAOF,UAAUE,KAFd;AAGHlB,sCAASf,YAAYqB,SAAZ,IAAyBrB,YAAYqB,SAAZ,EAAuBa,QAAvB,CAAgCH,UAAUrC,IAA1C,CAAzB,GAA2E;AAHjF,0BAAP;AAKH,sBANW;AAFT,kBAAP;AAUH,cAXM,CAAP;AAYH;;;kDAEyB;AAAA;;AACtB;;;;;;;;;;AAUA,iBAAIkB,WAAW,EAAf;;AAEA;AACA;AACA,kBAAKd,KAAL,CAAW1B,cAAX,CAA0BkB,OAA1B,CAAkC,iBAAS;AACvC8B,uBAAME,UAAN,CAAiBhC,OAAjB,CAAyB,qBAAa;AAClC,yBAAI,OAAKQ,KAAL,CAAWE,WAAX,CAAuBoB,MAAMC,SAA7B,KACA,OAAKvB,KAAL,CAAWE,WAAX,CAAuBoB,MAAMC,SAA7B,EAAwCa,QAAxC,CAAiDH,UAAUrC,IAA3D,CADJ,EACsE;AAClEkB,kCAASe,IAAT,CAAc;AACVpD,sCAAS6C,MAAMC,SADL;AAEV5B,qCAAQsC;AAFE,0BAAd;AAIH;AACJ,kBARD;AASH,cAVD;;AAYA,oBAAOnB,QAAP;AACH;;;;GA7KwB,gBAAMuB,S;;AAgLnCvD,gBAAewD,SAAf,GAA2B;AACvBlE,eAAU,gBAAMmE,SAAN,CAAgBC,MAAhB,CAAuBC,UADV;AAEvB;;;;;;;AAOAnE,qBAAgB,gBAAMiE,SAAN,CAAgBG,MAAhB,CAAuBD,UAThB;AAUvBlE,gBAAW,gBAAMgE,SAAN,CAAgBC,MAAhB,CAAuBC,UAVX;AAWvBjE,qBAAgB,gBAAM+D,SAAN,CAAgBC,MAAhB,CAAuBC,UAXhB;AAYvBhE,cAAS,gBAAM8D,SAAN,CAAgBC,MAAhB,CAAuBC;AAZT,EAA3B;;mBAee3D,c;;;;;;;;;;;;;;;;;;;;ACvMf;;;;AAEA;;;;;;AAEA,KAAM6D,qBAAqB,SAArBA,kBAAqB,QAAS;AAChC,SAAMC,SAAS7D,MAAM6D,MAAN,CAAaV,GAAb,CAAiB;AAAA,gBAC5B;AACI,kBAAOZ,MAAMC,SADjB;AAEI,wBAAaD,MAAMC,SAFvB;AAGI,yBAAcD,MAAME,UAHxB;AAII,yBAAczC,MAAMqB;AAJxB,WAD4B;AAAA,MAAjB,CAAf;;AASA,YACI;AAAA;AAAA;AACI,kDAAO,MAAK,UAAZ,EAAuB,SAASrB,MAAMoB,gBAAtC,EAAwD,UAAUpB,MAAMwB,kBAAxE,EAA4F,UAAUxB,MAAM8D,2BAA5G,GADJ;AAEI;AAAA;AAAA,eAAO,WAAW9D,MAAM8D,2BAAN,GAAoC,qBAApC,GAA4D,EAA9E;AAAA;AAAA,UAFJ;AAII;AAAA;AAAA;AAAA;AAAA,UAJJ;AAKKD;AALL,MADJ;AASH,EAnBD;;AAqBAD,oBAAmBL,SAAnB,GAA+B;AAC3B;;;;;;;;;;;;;;;;;;AAkBAM,aAAQ,gBAAML,SAAN,CAAgBO,OAAhB,CAAwB,gBAAMP,SAAN,CAAgBQ,KAAhB,CAAsB;AAClDxB,oBAAW,gBAAMgB,SAAN,CAAgBC,MAAhB,CAAuBC,UADgB;AAElDjB,qBAAY,gBAAMe,SAAN,CAAgBO,OAAhB,CAAwB,gBAAMP,SAAN,CAAgBQ,KAAhB,CAAsB;AACtDnD,mBAAM,gBAAM2C,SAAN,CAAgBC,MAAhB,CAAuBC,UADyB;AAEtDN,oBAAO,gBAAMI,SAAN,CAAgBC,MAAhB,CAAuBC,UAFwB;AAGtDxB,sBAAS,gBAAMsB,SAAN,CAAgBS,IAAhB,CAAqBP;AAHwB,UAAtB,CAAxB,EAIRA;AAN8C,MAAtB,CAAxB,EAOJA,UA1BuB;AA2B3BrC,iBAAY,gBAAMmC,SAAN,CAAgBU,IAAhB,CAAqBR,UA3BN;AA4B3BtC,uBAAkB,gBAAMoC,SAAN,CAAgBS,IAAhB,CAAqBP,UA5BZ;AA6B3BlC,yBAAoB,gBAAMgC,SAAN,CAAgBU,IAAhB,CAAqBR,UA7Bd;AA8B3BI,kCAA6B,gBAAMN,SAAN,CAAgBS,IAAhB,CAAqBP;AA9BvB,EAA/B;;mBAiCeE,kB;;;;;;;;;;;;;;;AC1Df;;;;AAEA;;;;;;AAEA,KAAMO,wBAAwB,SAAxBA,qBAAwB;AAAA,YAAOC,IAAIC,MAAJ,CAAW,CAAX,EAAcC,WAAd,KAA8BF,IAAIG,KAAJ,CAAU,CAAV,EAAazD,WAAb,EAArC;AAAA,EAA9B;;AAEA,KAAM0D,QAAQ,SAARA,KAAQ,QAAS;AACnB,SAAM/B,aAAazC,MAAMyC,UAAN,CAAiBU,GAAjB,CAAqB;AAAA,gBACpC;AACI,kBAAQnD,MAAMwC,SAAd,SAA2BU,UAAUrC,IADzC;AAEI,mBAAMqC,UAAUrC,IAFpB;AAGI,oBAAOqC,UAAUE,KAHrB;AAII,sBAASF,UAAUhB,OAJvB;AAKI,yBAAY,oBAACuC,aAAD,EAAgBC,gBAAhB,EAAqC;AAAE1E,uBAAMqB,UAAN,CAAiBrB,MAAMwC,SAAvB,EAAkCiC,aAAlC,EAAiDC,gBAAjD;AAAoE;AAL3H,WADoC;AAAA,MAArB,CAAnB;;AAUA,YACI;AAAA;AAAA,WAAK,WAAU,kBAAf;AACI;AAAA;AAAA;AAAKP,mCAAsBnE,MAAMwC,SAA5B;AAAL,UADJ;AAEKC;AAFL,MADJ;AAMH,EAjBD;;AAmBA+B,OAAMjB,SAAN,GAAkB;AACdf,gBAAW,gBAAMgB,SAAN,CAAgBC,MAAhB,CAAuBC,UADpB;AAEdjB,iBAAY,gBAAMe,SAAN,CAAgBO,OAAhB,CAAwB,gBAAMP,SAAN,CAAgBQ,KAAhB,CAAsB;AACtDnD,eAAM,gBAAM2C,SAAN,CAAgBC,MAAhB,CAAuBC,UADyB;AAEtDN,gBAAO,gBAAMI,SAAN,CAAgBC,MAAhB,CAAuBC,UAFwB;AAGtDxB,kBAAS,gBAAMsB,SAAN,CAAgBS,IAAhB,CAAqBP;AAHwB,MAAtB,CAAxB,EAIRA,UANU;AAOdrC,iBAAY,gBAAMmC,SAAN,CAAgBU,IAAhB,CAAqBR;AAPnB,EAAlB;;mBAUec,K;;;;;;;;;;;;;;;ACnCf;;;;;;AAEA,KAAMG,YAAY,SAAZA,SAAY;AAAA,YACd;AAAA;AAAA;AACI,kDAAO,MAAK,UAAZ,EAAuB,SAAS3E,MAAMkC,OAAtC,EAA+C,UAAU;AAAA,wBAAMlC,MAAMqB,UAAN,CAAiBrB,MAAMa,IAAvB,EAA6B,CAACb,MAAMkC,OAApC,CAAN;AAAA,cAAzD,GADJ;AAEI;AAAA;AAAA;AAAQlC,mBAAMoD;AAAd;AAFJ,MADc;AAAA,EAAlB;;AAMAuB,WAAUpB,SAAV,GAAsB;AAClB1C,WAAM,gBAAM2C,SAAN,CAAgBC,MAAhB,CAAuBC,UADX;AAElBN,YAAO,gBAAMI,SAAN,CAAgBC,MAAhB,CAAuBC,UAFZ;AAGlBxB,cAAS,gBAAMsB,SAAN,CAAgBS,IAAhB,CAAqBP,UAHZ;AAIlBrC,iBAAY,gBAAMmC,SAAN,CAAgBU,IAAhB,CAAqBR;AAJf,EAAtB;;mBAOeiB,S;;;;;;;;;;;;;;;;;ACff;;;;AACA;;;;AACA;;AAEA;;;;AAEA;;;;;;;;;;;;AAEA,KAAMC,gBAAgB,mBAAA9E,CAAQ,qCAAR,CAAtB;;KAEM+E,gB;;;;;;;;;;;kCAEO;AAAA;;AACL,iBAAMC,gBAAgB,iBAAEC,OAAF,CAAUC,IAAV,GAClB,IADkB,GAElB,8BAAC,aAAD;AACI,qCACI,OAAOtD,OAAOuD,EAAd,kBACI,UAACC,KAAD,EAAQC,OAAR,EAAoB;AAAEzD,4BAAOuD,EAAP,CAAU,MAAV,EAAiB,OAAjB,EAAyB,kBAAzB,EAA6C,UAA7C,EAAyDE,OAAzD,EAAkED,KAAlE;AAA0E,kBADpG,GAEI,YAAM,CAAE;AAJpB,eAFJ;;AAUA,oBACI;AAAA;AAAA;AACK,sBAAKlF,KAAL,CAAW+B,QAAX,CAAoBoB,GAApB,CAAwB;AAAA,4BACrB;AACI,8BAAUiC,QAAQ1F,OAAlB,SAA6B0F,QAAQxE,MAAR,CAAeC,IADhD;AAEI,0CAAmB,OAAKb,KAAL,CAAWoB,gBAFlC;AAGI,2CAAoB,OAAKiE,sBAAL,EAHxB;AAII,kCAAWD,QAAQ1F,OAJvB;AAKI,iCAAU0F,QAAQxE,MALtB;AAMI,mCAAY,OAAKZ,KAAL,CAAWX,QAN3B;AAOI,oCAAa,OAAKW,KAAL,CAAWR,SAP5B;AAQI,yCAAkB,OAAKQ,KAAL,CAAWP,cARjC;AASI,sDAA+B,OAAKO,KAAL,CAAWC;AAT9C,uBADqB;AAAA,kBAAxB,CADL;AAcK6E;AAdL,cADJ;AAkBH;;;kDAEyB;AACtB,iBAAMQ,gBAAgB,IAAIC,GAAJ,EAAtB;AACA,kBAAKvF,KAAL,CAAW+B,QAAX,CAAoBtB,OAApB,CAA4B,mBAAW;AAAE6E,+BAAcE,GAAd,CAAkBJ,QAAQ1F,OAA1B;AAAoC,cAA7E;AACA,oBAAO4F,cAAcG,IAAd,GAAqB,CAA5B;AACH;;;;GArC0B,gBAAMnC,S;;AAwCrCuB,kBAAiBtB,SAAjB,GAA6B;AACzBlE,eAAU,gBAAMmE,SAAN,CAAgBC,MAAhB,CAAuBC,UADR;AAEzBlE,gBAAW,gBAAMgE,SAAN,CAAgBC,MAAhB,CAAuBC,UAFT;AAGzBjE,qBAAgB,gBAAM+D,SAAN,CAAgBC,MAHP;AAIzB;;;AAGArC,uBAAkB,gBAAMoC,SAAN,CAAgBS,IAAhB,CAAqBP,UAPd;AAQzB3B,eAAU,gBAAMyB,SAAN,CAAgBO,OAAhB,CAAwB,gBAAMP,SAAN,CAAgBQ,KAAhB,CAAsB;AACpDtE,kBAAS,gBAAM8D,SAAN,CAAgBC,MAAhB,CAAuBC,UADoB;AAEpD9C,iBAAQ,gBAAM4C,SAAN,CAAgBQ,KAAhB,CAAsB;AAC1BnD,mBAAM,gBAAM2C,SAAN,CAAgBC,MAAhB,CAAuBC,UADH;AAE1BN,oBAAO,gBAAMI,SAAN,CAAgBC,MAAhB,CAAuBC;AAFJ,UAAtB;AAF4C,MAAtB,CAAxB,EAMNA,UAdqB;AAezBzD,kCAA6B,gBAAMuD,SAAN,CAAgBkC,UAAhB,mBAAyChC;AAf7C,EAA7B;;mBAkBemB,gB;;;;;;;;;;;;;;ACpEf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL,IAAG;AACH;AACA;AACA,IAAG;AACH;AACA;AACA;AACA,EAAC;AACD;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qBAAoB;AACphMD;;;;AAEA;;;;AACA;;;;AAEA,KAAMV,wBAAwB,SAAxBA,qBAAwB;AAAA,YAAOC,IAAIC,MAAJ,CAAW,CAAX,EAAcC,WAAd,KAA8BF,IAAIG,KAAJ,CAAU,CAAV,EAAazD,WAAb,EAArC;AAAA,EAA9B;;AAEA,KAAM6E,wBAAwB,SAAxBA,qBAAwB;AAAA,YAC1B;AAAA;AAAA;AACI;AAAA;AAAA;AAAK,cAAC3F,MAAM4F,gBAAN,GAA4BzB,sBAAsBnE,MAAMN,OAA5B,CAA5B,gBAAwE,EAAzE,IAA+EM,MAAMY,MAAN,CAAawC;AAAjG,UADJ;AAEI,mGAAwB,UAAUpD,MAAMX,QAAxC;AACwB,oBAAO;AACHwG,uBAAM7F,MAAMR,SADT;AAEHsG,4BAAW9F,MAAMP,cAFd;AAGHC,0BAASM,MAAMN,OAHZ;AAIHqG,yBAAQ/F,MAAMY,MAAN,CAAaC;AAJlB,cAD/B;AAOwB,uBAAU,KAPlC;AAQwB,8BAAiBb,MAAMgG,eAR/C;AASwB,0CAA6BhG,MAAMC;AAT3D;AAFJ,MAD0B;AAAA,EAA9B;;AAiBA0F,uBAAsBpC,SAAtB,GAAkC;AAC9BlE,eAAU,gBAAMmE,SAAN,CAAgBC,MAAhB,CAAuBC,UADH;AAE9BlE,gBAAW,gBAAMgE,SAAN,CAAgBC,MAAhB,CAAuBC,UAFJ;AAG9BjE,qBAAgB,gBAAM+D,SAAN,CAAgBC,MAAhB,CAAuBC,UAHT;AAI9BhE,cAAS,gBAAM8D,SAAN,CAAgBC,MAAhB,CAAuBC,UAJF;AAK9B9C,aAAQ,gBAAM4C,SAAN,CAAgBQ,KAAhB,CAAsB;AAC1BnD,eAAM,gBAAM2C,SAAN,CAAgBC,MAAhB,CAAuBC,UADH;AAE1BN,gBAAO,gBAAMI,SAAN,CAAgBC,MAAhB,CAAuBC;AAFJ,MAAtB,EAGLA,UAR2B;AAS9BsC,sBAAiB,gBAAMxC,SAAN,CAAgBS,IAAhB,CAAqBP,UATR;AAU9BkC,uBAAkB,gBAAMpC,SAAN,CAAgBS,IAAhB,CAAqBP,UAVT;AAW9BzD,kCAA6B,gBAAMuD,SAAN,CAAgBkC,UAAhB,mBAAyChC;AAXxC,EAAlC;;mBAceiC,qtCf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAiC,uDAAuD;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAiC,uDAAuD;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5CA;;AAEA;AACA;AACA;AACA;AACA,0FAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA,iCAAgC,UAAU,EAAE;AAC5C,E;;;;;;;;;;;;;;;;;;;;;;;;ACpBA;;AAEA;AACA;AACA;AACA;AACA,0FAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA,iCAAgC,UAAU,EAAE;AAC5C,E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpBA;;AAEA;;AAEA;;AAEA;;AAEA,uCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,qC;;;;;;;;;AC9BA;;AAEA;;AAEA,oDAAmD,gBAAgB,sBAAsB,OAAO,2BAA2B,0BAA0B,yDAAyD,2BAA2B,EAAE,EAAE,EAAE,eAAe;;AAE9P;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,wCAAuC,6BAA6B,YAAY,EAAE,OAAO,iBAAiB,mBAAmB,uBAAuB,4EAA4E,EAAE,EAAE,sBAAsB,eAAe,EAAE;;AAE3Q,uCAAsC,uCAAuC,gBAAgB;;AAE7F,kDAAiD,0CAA0C,0DAA0D,EAAE;;AAEvJ,kDAAiD,aAAa,uFAAuF,EAAE,uFAAuF;;AAE9O,2CAA0C,+DAA+D,qGAAqG,EAAE,yEAAyE,eAAe,yEAAyE,EAAE,EAAE,uHAAuH;;AAE5e;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,MAAK,IAAI;;AAET;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,wEAAuE,aAAa;AACpF;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,UAAS;AACT;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,0BAAyB;AACzB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,UAAS;;AAET,+BAA8B;AAC9B;AACA,UAAS;;AAET;AACA;;AAEA;AACA,MAAK;;AAEL;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sDAAqD;AACrD;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,6FAA4F,eAAe;AAC3G;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,QAAO;;AAEP;AACA;AACA;AACA;AACA,qlMA;;AAEA;AACA;AACA;AACA;AACA,mGAA6E;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA,iCAAgC,UAAU,EAAE;AAC5C,E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpBA;;AAEA;AACA;AACA;AACA;AACA,gGAA0E;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA,iCAAgC,UAAU,EAAE;AAC5C,E;;;;;;;;;;;;;;;;;;;;;;;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA,EAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,wFAAuF;;AAEvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA2B;AAC3B,4BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB,cAAc,yCAAyC;AAC1E;AACA;AACA;AACA,oBAAmB,QAAQ;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAiC;AACjC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB,0BAA0B;AAC7C,oBAAmB,iBAAiB;AACpC,oBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,kBAAiB;AACjB;AACA;AACA;;AAEA;AACA,kBAAiB;AACjB;AACA;;AAEA;AACA;AACA;;AAEA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA,wBAAuB,OAAO;AAC9B,wBAAuB,OAAO;AAC9B,wBAAuB,OAAO;AAC9B,0BAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,oCAAmC,mBAAmB;AACtD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,sBAAqB;AACrB;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA,0BAAyB,QAAQ;AACjC;AACA,0BAAyB,QAAQ;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kDAAiD;AACjD;;AAEA,kBAAiB;AACjB;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA,wBAAuB,WAAW;AAClC,wBAAuB,OAAO;AAC9B,wBAAuB,MAAM;AAC7B,0BAAyB,MAAM;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gCAA+B,mBAAmB;AAClD;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAU;;;AAGV;AACA;AACA;AACA;AACA;AACA,oBAAmB,OAAO;AAC1B,oBAAmB,OAAO;AAC1B,sBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB,QAAQ;AAC3B;AACA,oBAAmB,OAAO;AAC1B;AACA,oBAAmB,UAAU;AAC7B,sBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,yBAAwB;AACxB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mEAAkE;;AAElE;AACA,8BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,wBAAuB,SAAS;AAChC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,oBAAmB,OAAO;AAC1B,oBAAmB,OAAO;AAC1B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,oBAAmB,OAAO;AAC1B,sBAAqB,QAAQ;AAC7B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,oBAAmB,OAAO;AAC1B,sBAAqB,QAAQ;AAC7B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,oBAAmB,OAAO;AAC1B,oBAAmB,QAAQ;AAC3B;AACA,sBAAqB,QAAQ;AAC7B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,oBAAmB,OAAO;AAC1B,sBAAqB,QAAQ;AAC7B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,oBAAmB,MAAM;AACzB,oBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,oBAAmB,OAAO;AAC1B,sBAAqB,QAAQ;AAC7B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB,OAAO;AAC1B,oBAAmB,cAAc;AACjC,oBAAmB,OAAO;AAC1B,sBAAqB,EAAE;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,kBAAiB;AACjB;AACA;;AAEA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,wBAAuB,EAAE;AACzB,sBAAqB,MAAM;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB,SAAS;AAC9B,sBAAqB,OAAO;AAC5B,sBAAqB,OAAO;AAC5B,sBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,oBAAmB,KAAK;AACxB,sBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB,eAAe;AAClC,oBAAmB,UAAU;AAC7B,sBAAqB;AACrB;AACA;AACA,oCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,sBAAqB,OAAO;AAC5B;;AAEA;AACA;AACA;AACA;AACA;AACA,oBAAmB,OAAO;AAC1B,oBAAmB,OAAO;AAC1B,oBAAmB,UAAU;AAC7B,oBAAmB,OAAO;AAC1B,oBAAmB,QAAQ;AAC3B;AACA,sBAAqB,eAAe;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,oBAAmB,OAAO;AAC1B,oBAAmB,OAAO;AAC1B;AACA,sBAAqB,OAAO;AAC5B;AACA;AACA;AACA,6CAA4C;AAC5C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,oBAAmB,OAAO;AAC1B,oBAAmB,OAAO;AAC1B,oBAAmB,OAAO;AAC1B,sBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA;;AAEA;AACA,sBAAqB,cAAc;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB,aAAa;AAChC,oBAAmB,OAAO;AAC1B,sBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,oBAAmB,OAAO;AAC1B;AACA,oBAAmB,OAAO;AAC1B,oBAAmB,SAAS;AAC5B;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAoB,OAAO;AAC3B,qBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,oEAAmE;AACnE,+DAA8D;AAC9D;AACA;AACA;AACA,oBAAmB,OAAO;AAC1B;AACA,oBAAmB,OAAO;AAC1B,oBAAmB,QAAQ;AAC3B,sBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;;;AAGjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mCAAkC;AAClC;AACA;AACA;AACA,oBAAmB,OAAO;AAC1B,oBAAmB,EAAE;AACrB,sBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA;AACA;;AAEA,2CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB,OAAO;AAC1B,oBAAmB,OAAO;AAC1B;AACA,sBAAqB,OAAO;AAC5B;AACA;AACA;AACA,sBAAqB,MAAM,UAAU,QAAQ;AAC7C,iBAAgB;AAChB;AACA;AACA;AACA;AACA,8BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,gCAA+B;;AAE/B;AACA,8DAA6D;AAC7D;AACA;;AAEA;AACA,gCAA+B,SAAS;AACxC;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,kBAAiB;AACjB;;AAEA;AACA,4CAA2C;AAC3C,sCAAqC;AACrC,yCAAwC,MAAM,EAAE;AAChD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,oBAAmB,OAAO;AAC1B,sBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB,OAAO;AAC1B,oBAAmB,MAAM;AACzB,oBAAmB,OAAO;AAC1B,oBAAmB,QAAQ;AAC3B,oBAAmB,QAAQ;AAC3B;AACA,sBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB,sBAAqB;AACrB;AACA;AACA;AACA;;AAEA;AACA,wBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB,MAAM;AACzB,oBAAmB,SAAS;AAC5B;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA,wBAAuB,YAAY;AACnC,kCAAiC;AACjC;;AAEA;AACA;AACA;AACA,cAAa;;AAEb;AACA,wBAAuB,YAAY;AACnC,qCAAoC;AACpC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB,MAAM;AACzB,sBAAqB,OAAO;AAC5B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB,MAAM;AACzB,sBAAqB,OAAO;AAC5B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB,OAAO;AAC1B,oBAAmB,OAAO;AAC1B;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,oBAAmB,eAAe;AAClC,sBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,oBAAmB,OAAO;AAC1B,oBAAmB,OAAO;AAC1B,sBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB,kBAAkB;AACrC,oBAAmB,OAAO;AAC1B,sBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,0BAAyB,cAAc;AACvC;AACA;AACA;AACA,oBAAmB,yBAAyB;AAC5C;AACA;AACA,sBAAqB,iBAAiB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,oBAAmB,OAAO;AAC1B,oBAAmB,OAAO;AAC1B;AACA,oBAAmB,OAAO;AAC1B;AACA,oBAAmB,OAAO;AAC1B;AACA,sBAAqB,OAAO;AAC5B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,+BAA8B,EAAE;;AAEhC;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,sBAAqB,OAAO;AAC5B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB,eAAe;AAClC,oBAAmB,OAAO;AAC1B,sBAAqB,OAAO;AAC5B;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,oBAAmB,EAAE;AACrB,oBAAmB,IAAI;AACvB,sBAAqB,OAAO;AAC5B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,oBAAmB,MAAM;AACzB,oBAAmB,SAAS;AAC5B;AACA;AACA,sBAAqB,MAAM;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB,MAAM;AACzB,oBAAmB,SAAS;AAC5B;AACA;AACA,sBAAqB,MAAM;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,oBAAmB,MAAM;AACzB,oBAAmB,SAAS;AAC5B;AACA,sBAAqB,MAAM;AAC3B;AACA;AACA;AACA;AACA;;AAEA,mBAAkB,SAAS;AAC3B;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,oBAAmB,eAAe;AAClC,sBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB,WAAW;AAC9B,oBAAmB,OAAO;AAC1B;AACA,sBAAqB;AACrB;AACA;;AAEA;;AAEA;AACA;AACA;AACA,8CAA6C;AAC7C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,oBAAmB,MAAM;AACzB,oBAAmB,SAAS;AAC5B;AACA;AACA;AACA,oBAAmB,OAAO;AAC1B;AACA,0CAAyC;AACzC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,oBAAmB,OAAO;AAC1B,oBAAmB,qBAAqB,MAAM,iBAAiB;AAC/D,oBAAmB,OAAO;AAC1B,oBAAmB,SAAS;AAC5B;AACA,sBAAqB,SAAS;AAC9B;AACA;;AAEA;;AAEA;AACA,gDAA+C;AAC/C;AACA;;AAEA;AACA;AACA;;AAEA;AACA,cAAa;;AAEb;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,iDAAgD,0BAA0B;AAC1E;AACA;AACA;AACA,oBAAmB,OAAO;AAC1B,oBAAmB,OAAO;AAC1B;AACA,oBAAmB,SAAS;AAC5B;AACA,sBAAqB;AACrB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,4BAA2B;AAC3B;;AAEA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBAAqB;AACrB;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA,oDAAmD,0BAA0B;AAC7E;AACA;AACA;AACA,oBAAmB,OAAO;AAC1B,oBAAmB,qBAAqB,MAAM,iBAAiB;AAC/D,oBAAmB,OAAO;AAC1B,oBAAmB,OAAO;AAC1B;AACA,oBAAmB,SAAS;AAC5B;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,kBAAiB;AACjB;AACA;;AAEA,cAAa;;AAEb;AACA;;AAEA,8CAA6C;;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;;;AAGA,4BAA2B,SAAS;AACpC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sBAAqB,OAAO;AAC5B,uBAAsB,OAAO;AAC7B,uBAAsB,OAAO;AAC7B;AACA,uBAAsB,SAAS;AAC/B;AACA,uBAAsB,SAAS;AAC/B;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,oBAAmB,0BAA0B;AAC7C,oBAAmB,OAAO;AAC1B;AACA;AACA,oBAAmB,iBAAiB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,oCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kDAAiD;AACjD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB,OAAO;AAC1B,oBAAmB,OAAO;AAC1B,mCAAkC,aAAa;AAC/C,oBAAmB,OAAO;AAC1B;AACA,oBAAmB,OAAO;AAC1B;AACA,oBAAmB,OAAO;AAC1B,oBAAmB,YAAY;AAC/B,sBAAqB,EAAE,iDAAiD;AACxE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,8BAA6B;AAC7B;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAoB,OAAO;AAC3B;AACA,mCAAkC;AAClC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,UAAS;;AAET;AACA;AACA;AACA;AACA;AACA;;AAEA,+BAA8B;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;;AAErB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,8CAA6C;AAC7C;AACA;AACA,uBAAsB,SAAS;AAC/B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,2BAA0B,SAAS;AACnC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,uBAAsB,YAAY;AAClC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,4BAA2B,YAAY;AACvC;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,yCAAwC,IAAI,eAAe,IAAI,eAAe,IAAI;AAClF;AACA;AACA;AACA,cAAa;AACb;AACA,wCAAuC,IAAI,eAAe,IAAI,eAAe,IAAI;AACjF;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA,wBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sBAAqB;;AAErB;AACA,kBAAiB;;AAEjB;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,0BAAyB;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA,wBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,sBAAqB;;AAErB;AACA,kBAAiB;AACjB;AACA;AACA,sBAAqB;AACrB;AACA,sBAAqB;AACrB;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA,wBAAuB,OAAO;AAC9B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,sBAAqB;;AAErB,kBAAiB;AACjB,gCAA+B,OAAO;AACtC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA,wBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sBAAqB,OAAO;AAC5B;AACA;AACA;AACA,8DAA6D,kBAAkB;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA,aAAY,kBAAkB,qBAAqB,uBAAuB;AAC1E,mBAAkB,uBAAuB,SAAS,uBAAuB,UAAU;AACnF,8BAA6B,MAAM,oBAAoB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAsB;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wBAAuB,YAAY;AACnC,wBAAuB,OAAO;AAC9B,0BAAyB;AACzB;AACA;;AAEA;AACA;AACA;AACA,2BAA0B;AAC1B;AACA;AACA;AACA;;AAEA;AACA;AACA,2BAA0B;AAC1B;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA,wBAAuB,cAAc;AACrC,wBAAuB,iBAAiB;AACxC,wBAAuB,SAAS;AAChC,0BAAyB,WAAW;AACpC;AACA;AACA;AACA;AACA;AACA;AACA,oCAAmC;AACnC;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA,0BAAyB,OAAO;AAChC,2BAA0B,OAAO;AACjC;AACA,2BAA0B,OAAO;AACjC;AACA,2BAA0B,OAAO;AACjC;AACA,2BAA0B,OAAO;AACjC;AACA,2BAA0B,OAAO;AACjC;AACA,2BAA0B,OAAO;AACjC;AACA,2BAA0B,OAAO;AACjC;AACA,2BAA0B,OAAO;AACjC;AACA,2BAA0B,OAAO;AACjC;AACA,2BAA0B,cAAc;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAoC,6BAA6B;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,gBAAgB;AACvC,wBAAuB,OAAO;AAC9B;AACA,wBAAuB,cAAc;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,sBAAqB;;AAErB;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA6B;;AAE7B;AACA;AACA,0BAAyB;AACzB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA,iBAAgB;AAChB;AACA;AACA;AACA;AACA,iBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gCAA+B;AAC/B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,wCAAuC;;AAEvC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA,sBAAqB;AACrB;AACA,cAAa;;AAEb;AACA;AACA,0BAAyB,OAAO;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,qBAAqB;AAC5C;AACA,wBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA,wBAAuB,SAAS;AAChC;AACA,6BAA4B,yBAAyB;AACrD,wBAAuB,QAAQ;AAC/B;AACA;AACA;AACA,0BAAyB,yBAAyB;AAClD,4BAA2B,iBAAiB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,uCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,kBAAiB;;AAEjB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,cAAa;;;AAGb;AACA;AACA;AACA;AACA,wBAAuB,OAAO;AAC9B,wBAAuB,cAAc;AACrC,wBAAuB,SAAS;AAChC;AACA,0BAAyB;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;;AAGb;AACA;AACA;AACA,wBAAuB,OAAO;AAC9B,wBAAuB,QAAQ;AAC/B;AACA;AACA,0BAAyB,WAAW;AACpC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA,yBAAwB,OAAO;AAC/B,yBAAwB;AACxB;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA,yBAAwB,OAAO;AAC/B,yBAAwB,WAAW;AACnC;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA,wBAAuB,OAAO;AAC9B;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB,cAAa;;AAEb;AACA;AACA;AACA,wBAAuB,SAAS;AAChC;AACA,0BAAyB,WAAW;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA,wBAAuB,OAAO;AAC9B,wBAAuB,OAAO;AAC9B,wBAAuB,OAAO;AAC9B,wBAAuB,OAAO;AAC9B,wBAAuB,OAAO;AAC9B,wBAAuB,OAAO;AAC9B;AACA;AACA;AACA,2BAA0B,qDAAqD;AAC/E;AACA;AACA;;AAEA;AACA;AACA,iCAAgC;AAChC;;AAEA;AACA,8DAA6D;;AAE7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sDAAqD;AACrD;AACA;AACA;;AAEA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA,wBAAuB,UAAU;AACjC,0BAAyB,WAAW;AACpC;AACA;AACA;AACA,mCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAkD;AAClD;AACA;AACA;AACA,gEAA+D;AAC/D;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAa;;;AAGb;AACA;AACA;AACA,0BAAyB,OAAO;AAChC;AACA;AACA;AACA;AACA,cAAa;;;AAGb;AACA;AACA,yDAAwD;AACxD;AACA,wBAAuB,OAAO;AAC9B;AACA;AACA;AACA,wBAAuB,SAAS;AAChC,0BAAyB,WAAW;AACpC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iEAAgE;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA,wBAAuB,MAAM;AAC7B;AACA,0BAAyB,WAAW;AACpC;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAa;;AAEb;AACA;AACA;AACA,wBAAuB,OAAO;AAC9B,wBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA,wBAAuB,QAAQ;AAC/B;AACA,0BAAyB,WAAW;AACpC;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAiB,qBAAqB;AACtC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA,0BAAyB,WAAW;AACpC;AACA;AACA;AACA;AACA;AACA,cAAa;;;AAGb;AACA;AACA;AACA,wBAAuB,OAAO;AAC9B;AACA;AACA,wBAAuB,OAAO;AAC9B;AACA,wBAAuB,OAAO;AAC9B;AACA,wBAAuB,OAAO;AAC9B;AACA,wBAAuB,OAAO;AAC9B,wBAAuB,QAAQ;AAC/B;AACA;AACA,wBAAuB,cAAc;AACrC;AACA;AACA;AACA,0BAAyB,WAAW;AACpC;AACA;AACA;AACA;AACA;AACA;AACA,iCAAgC;AAChC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iDAAgD;AAChD;AACA,qDAAoD;AACpD;AACA,oCAAmC;AACnC;;AAEA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,0DAAyD;AACzD,0DAAyD;;AAEzD;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,QAAQ;AAC/B;AACA,wBAAuB,OAAO;AAC9B;AACA;AACA,0BAAyB,OAAO;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;;;AAGA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,8BAA6B;;AAE7B;AACA;AACA;AACA;AACA;AACA,kCAAiC;AACjC;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,0CAAyC;;AAEzC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,0BAAyB;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA,sBAAqB;;AAErB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA,wBAAuB,QAAQ;AAC/B;AACA;AACA;AACA,0BAAyB,WAAW;AACpC;AACA;AACA;AACA;AACA,kBAAiB;AACjB,cAAa;;AAEb;AACA;AACA;AACA;AACA,0BAAyB,WAAW;AACpC;AACA;AACA;AACA;AACA,kBAAiB;AACjB,cAAa;;AAEb;AACA;AACA;AACA;AACA,wBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA,0BAAyB,EAAE;AAC3B;AACA,kBAAiB;AACjB,cAAa;;AAEb;AACA;AACA;AACA,wBAAuB,yBAAyB;AAChD,6DAA4D,sBAAsB;AAClF;AACA,0BAAyB,WAAW;AACpC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA,wBAAuB,6BAA6B;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA,oDAAmD;AACnD;AACA;AACA;AACA;;AAEA;AACA;AACA,+BAA8B;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gCAA+B,0BAA0B;AACzD;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,cAAa;;;AAGb;AACA,0BAAyB,OAAO;AAChC,2BAA0B,OAAO;AACjC,2BAA0B,OAAO;AACjC,2BAA0B,OAAO;AACjC,2BAA0B,OAAO;AACjC,2BAA0B,OAAO;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,sBAAsB;AAC7C;AACA;AACA,wBAAuB,WAAW;AAClC;AACA;AACA;AACA,wBAAuB,QAAQ;AAC/B;AACA,0BAAyB,WAAW;AACpC;AACA;AACA;AACA,2BAA0B,cAAc;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,gCAA+B,kBAAkB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA,0BAAyB;AACzB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA,cAAa;;;;AAIb;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA,2DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA;;AAEA,gDAA+C;AAC/C;AACA;AACA;AACA,cAAa;;;AAGb;AACA,2CAA0C;AAC1C;AACA;AACA,6BAA4B,EAAE;AAC9B;AACA;AACA;;AAEA;AACA,cAAa;;AAEb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAoC;;AAEpC;AACA;AACA;AACA;AACA;AACA,kDAAiD;AACjD;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,4CAA2C;AAC3C;AACA,+CAA8C;AAC9C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,gCAA+B,oCAAoC;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,4FAA2F;AAC3F;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAiE,qBAAqB;AACtF;AACA;AACA,oBAAmB,eAAe;AAClC,oBAAmB,OAAO;AAC1B,oBAAmB,OAAO;AAC1B,oBAAmB,QAAQ;AAC3B;AACA,oBAAmB,QAAQ;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sBAAqB;;AAErB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,2BAA0B;AAC1B;AACA;AACA;AACA;AACA,2BAA0B;AAC1B;AACA;AACA;;AAEA;AACA;AACA,2BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA,yCAAwC;AACxC,qCAAoC;AACpC;AACA;;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA;AACA,0BAAyB;AACzB;;AAEA;AACA;;AAEA;AACA;AACA;AACA,cAAa;;;;AAIb;AACA;AACA;AACA,yBAAwB,UAAU;AAClC,yBAAwB,UAAU;AAClC;AACA;AACA;;AAEA;AACA;;AAEA,kBAAiB;AACjB;AACA,cAAa;AACb;AACA;AACA,wBAAuB,UAAU;AACjC;AACA;AACA;AACA,cAAa;;;AAGb;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB,QAAQ;AACjC;AACA,mCAAkC;AAClC;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iEAAgE;AAChE;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,cAAa;;AAEb;AACA;AACA,iBAAgB,iBAAiB;AACjC,0CAAyC,uBAAuB,GAAG;AACnE,iCAAgC,KAAK,uBAAuB;AAC5D;AACA,wBAAuB,OAAO;AAC9B,0BAAyB,WAAW;AACpC;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,qDAAoD;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,WAAW;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA,sDAAqD,sBAAsB;AAC3E;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,kBAAiB;;AAEjB;AACA;AACA;;AAEA;AACA,0DAAyD;AACzD;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,sBAAqB;AACrB;AACA;;;AAGA;AACA;AACA;AACA,sBAAqB;;;AAGrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,oDAAmD;AACnD;AACA;AACA,+CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA,sFAAqF;AACrF;AACA;AACA,0EAAyE;AACzE;AACA;AACA;AACA,sCAAqC;AACrC;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA,mDAAkD;AAClD;AACA;AACA;AACA,sCAAqC;AACrC,2DAA0D;AAC1D;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,8CAA6C;AAC7C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,sCAAqC;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,kEAAiE;AACjE;AACA;;AAEA;AACA;AACA,sEAAqE;AACrE;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,sDAAqD;AACrD,qEAAoE;AACpE;AACA;AACA;AACA;AACA,2EAA0E;AAC1E;AACA;AACA,8CAA6C,OAAO;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA,sBAAqB;;AAErB;AACA;AACA;AACA;AACA,0DAAyD;AACzD;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAa;;;;AAIb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA,iBAAgB;AAChB;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA,wBAAuB,YAAY;AACnC,0BAAyB,OAAO;AAChC;AACA;AACA;;AAEA;AACA;AACA;AACA,sBAAqB;AACrB,wBAAuB;AACvB,wBAAuB;AACvB;;AAEA;AACA,cAAa;;AAEb;AACA;AACA,wBAAuB,OAAO;AAC9B,wBAAuB,OAAO;AAC9B,wBAAuB,OAAO;AAC9B,wBAAuB,SAAS;AAChC;AACA,wBAAuB,cAAc;AACrC;AACA,wBAAuB,cAAc;AACrC,wBAAuB,cAAc;AACrC;AACA,wBAAuB,cAAc;AACrC;AACA,wBAAuB,OAAO;AAC9B,0BAAyB,YAAY;AACrC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAiB;;;AAGjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA,kBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA,sBAAqB;;;AAGrB;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB,cAAa;;AAEb;AACA;AACA;AACA,wBAAuB,MAAM;AAC7B;AACA,wBAAuB,OAAO;AAC9B,0BAAyB,MAAM;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;;AAGb;AACA;AACA;AACA,wBAAuB,MAAM;AAC7B;AACA;AACA;AACA,2BAA0B,oBAAoB;AAC9C;AACA,0BAAyB,WAAW;AACpC;AACA;AACA;AACA;AACA,wBAAuB,cAAc;AACrC,0BAAyB,WAAW;AACpC;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,kBAAiB,2BAA2B;AAC5C;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA,wBAAuB,OAAO;AAC9B,wBAAuB,OAAO;AAC9B,wBAAuB,OAAO;AAC9B,0BAAyB,WAAW;AACpC;AACA;AACA;AACA;AACA,wBAAuB,cAAc;AACrC,0BAAyB,WAAW;AACpC;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;;AAEA;AACA;AACA;AACA;;AAEA;AACA,cAAa;;AAEb;AACA;AACA,wBAAuB,OAAO;AAC9B,wBAAuB,OAAO;AAC9B,wBAAuB,OAAO;AAC9B,wBAAuB,OAAO;AAC9B,wBAAuB,OAAO;AAC9B;AACA,wBAAuB,OAAO;AAC9B;AACA,0BAAyB,WAAW;AACpC;AACA;AACA;AACA,wBAAuB,cAAc;AACrC,0BAAyB,WAAW;AACpC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,2BAA0B;AAC1B;AACA,cAAa;;AAEb;AACA;AACA,wBAAuB,OAAO;AAC9B,wBAAuB,OAAO;AAC9B,wBAAuB,OAAO;AAC9B,wBAAuB,OAAO;AAC9B,wBAAuB,OAAO;AAC9B,wBAAuB,OAAO;AAC9B;AACA,0BAAyB,WAAW;AACpC;AACA;AACA;AACA,wBAAuB,cAAc;AACrC;AACA,0BAAyB,WAAW;AACpC;AACA;;AAEA;;AAEA;AACA,qEAAoE;AACpE;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;;AAEA;AACA,cAAa;;AAEb;AACA,4BAA2B,sBAAsB;AACjD;AACA,wBAAuB,OAAO;AAC9B,wBAAuB,OAAO;AAC9B,wBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA,0BAAyB;AACzB,sBAAqB;AACrB;AACA,kBAAiB;;AAEjB;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA,wBAAuB,OAAO;AAC9B,6BAA4B,KAAK;AACjC,0BAAyB,WAAW;AACpC;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB,cAAa;;AAEb;AACA;AACA,wBAAuB,OAAO;AAC9B,wBAAuB,OAAO;AAC9B,wBAAuB,OAAO;AAC9B,wBAAuB,OAAO;AAC9B;AACA,wBAAuB,OAAO;AAC9B;AACA,0BAAyB,WAAW;AACpC;AACA;AACA;AACA;AACA,sBAAqB;AACrB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;;AAEA;;AAEA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA,mEAAkE,qBAAqB;AACvF;AACA;AACA;AACA,wBAAuB,OAAO;AAC9B,wBAAuB,OAAO;AAC9B,wBAAuB,OAAO;AAC9B,wBAAuB,OAAO;AAC9B,wBAAuB,OAAO;AAC9B,wBAAuB,OAAO;AAC9B;AACA,wBAAuB,OAAO;AAC9B;AACA,wBAAuB,OAAO;AAC9B;AACA,wBAAuB,OAAO;AAC9B,wBAAuB,QAAQ;AAC/B;AACA,wBAAuB,OAAO;AAC9B;AACA,wBAAuB,OAAO;AAC9B;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;;;AAGA;AACA,kBAAiB;;;AAGjB;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;;;AAGrB;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;;AAEA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA,0BAAyB;;AAEzB;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAqC;AACrC;AACA;;AAEA;AACA,0DAAyD;AACzD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,8BAA6B;AAC7B;AACA,0BAAyB;AACzB;AACA;AACA;;AAEA;AACA,cAAa;;AAEb;AACA,0BAAyB,OAAO;AAChC;AACA;AACA;AACA;AACA,yCAAwC,0BAA0B;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB,kBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,+CAA8C;AAC9C;AACA,kBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sBAAqB;;AAErB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBAAqB,mGAAmG;AACxH;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB,mGAAmG;AACxH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAa;;AAEb;AACA,0BAAyB,WAAW;AACpC,gCAA+B,iBAAiB;AAChD,iBAAgB,2BAA2B,gCAAgC;AAC3E,gCAA+B;AAC/B;AACA;AACA;AACA,2BAA0B,cAAc;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,OAAO;AAC9B,wBAAuB,OAAO;AAC9B,wBAAuB,OAAO;AAC9B,wBAAuB,OAAO;AAC9B,wBAAuB,OAAO;AAC9B,0BAAyB,SAAS;AAClC;AACA;AACA;AACA;;AAEA;AACA;AACA,sBAAqB;;AAErB;AACA;AACA;AACA;;AAEA;AACA,cAAa;;;;;;AAMb;AACA;AACA,wBAAuB,OAAO;AAC9B,wBAAuB,OAAO;AAC9B,wBAAuB,OAAO;AAC9B,wBAAuB,QAAQ;AAC/B;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,gDAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAmC,mBAAmB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA,wBAAuB,QAAQ;AAC/B;AACA,wBAAuB,yBAAyB;AAChD;AACA,0BAAyB,OAAO;AAChC;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA,kBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA,wBAAuB,OAAO;AAC9B,wBAAuB,OAAO;AAC9B,wBAAuB,OAAO;AAC9B,wBAAuB,OAAO;AAC9B,wBAAuB,OAAO;AAC9B;AACA,wBAAuB,OAAO;AAC9B,wBAAuB,QAAQ;AAC/B;AACA,wBAAuB,OAAO;AAC9B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,wCAAuC;AACvC;AACA;;AAEA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,4BAA2B,OAAO;AAClC,4BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;;AAErB;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,8DAA6D;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA,oCAAmC;AACnC;AACA;AACA,8BAA6B,EAAE;AAC/B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAmD;AACnD;AACA;AACA;AACA;AACA;AACA,8BAA6B;AAC7B;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;;AAErB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;;AAErB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAiB;AACjB;AACA,WAAU;;;AAGV;AACA;;AAEA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAa;;AAEb;AACA;AACA,wBAAuB,QAAQ;AAC/B;AACA;AACA,yBAAwB,OAAO;AAC/B;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;;AAEA;AACA;AACA;AACA;AACA,kBAAiB;;;AAGjB,uCAAsC;AACtC;AACA;AACA;AACA;AACA,0BAAyB;AACzB,sBAAqB;AACrB;;;AAGA;AACA,wCAAuC;AACvC;AACA;AACA,sBAAqB;AACrB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,gEAA+D;;;AAG/D;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,0BAAyB;;AAEzB;AACA,gHAA+G;AAC/G;AACA;AACA;AACA;AACA,8BAA6B;AAC7B;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA,sBAAqB;;AAErB;AACA;AACA,sDAAqD;AACrD;;AAEA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA,uCAAsC;AACtC;;AAEA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,OAAO;AAC9B,wBAAuB,OAAO;AAC9B,wBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA6B;AAC7B,0BAAyB;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,6BAA4B;AAC5B;AACA;;AAEA;AACA;AACA;AACA,2CAA0C;AAC1C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;;AAEA;AACA;;AAEA;AACA,sBAAqB;;AAErB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sCAAqC;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAqC,0BAA0B;;AAE/D;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C;AAC7C;AACA,0CAAyC;AACzC;AACA;AACA;AACA;AACA,0CAAyC;AACzC;AACA;AACA;AACA;AACA;AACA,sCAAqC;AACrC;AACA,kCAAiC;;AAEjC;AACA,0BAAyB;AACzB;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAS;;AAET,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,4BAA2B,OAAO;AAClC,4BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA,8DAA6D;AAC7D;;AAEA;AACA;AACA,4CAA2C,MAAM,UAAU,WAAW;AACtE;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,kBAAiB;;AAEjB;AACA;AACA,4BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,oCAAmC;AACnC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,kBAAiB;;AAEjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB,kBAAiB;;AAEjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA,kBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,0BAAyB,6BAA6B;AACtD;AACA,0BAAyB;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA,4CAA2C;AAC3C;AACA;AACA,uBAAsB,4BAA4B;AAClD;AACA;AACA;AACA,sBAAqB;AACrB;AACA,kBAAiB;;AAEjB;AACA;AACA;AACA,4BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,qDAAoD;AACpD;AACA;AACA;AACA;AACA;;AAEA,sBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,2BAA0B;AAC1B;;AAEA;;AAEA,kBAAiB;;AAEjB;AACA;AACA,4BAA2B,OAAO;AAClC;AACA;;AAEA;AACA;AACA,8BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,kBAAiB;;AAEjB;AACA;AACA,4BAA2B,OAAO;AAClC,4BAA2B,SAAS;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;;AAEjB;AACA;AACA;AACA;;AAEA;;AAEA,+CAA8C;AAC9C;;AAEA;AACA;AACA;AACA;AACA,kBAAiB;;AAEjB;AACA;AACA,4BAA2B,eAAe;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,oCAAmC,QAAQ;;AAE3C;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,8BAA6B;AAC7B;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,kBAAiB;AACjB;;AAEA;AACA,yCAAwC;AACxC;AACA,sBAAqB;AACrB;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA,4DAA2D;;AAE3D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA,+CAA8C;AAC9C;AACA,sBAAqB,+BAA+B;AACpD;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA,oDAAmD;;AAEnD;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA,kBAAiB;AACjB;AACA,+CAA8C;AAC9C,uCAAsC;AACtC;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA,kBAAiB;AACjB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA,uCAAsC;;AAEtC;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA,oDAAmD;AACnD,yBAAwB;;AAExB;AACA;AACA,2CAA0C;AAC1C;AACA,sBAAqB;AACrB;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,qCAAoC;;AAEpC;AACA;;;AAGA;AACA;AACA,4BAA2B,OAAO;AAClC,4BAA2B,OAAO;AAClC,4BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,yCAAwC;AACxC;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,+BAA8B,4BAA4B,uBAAuB,EAAE;AACnF;AACA;AACA,0BAAyB;AACzB;AACA;;AAEA;AACA,kBAAiB;;;AAGjB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;;AAEjB;AACA;AACA;AACA;AACA,4BAA2B,OAAO;AAClC,4BAA2B,OAAO;AAClC,4BAA2B,OAAO;AAClC,4BAA2B,OAAO;AAClC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kCAAiC;AACjC;AACA;AACA,0BAAyB;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA6B;AAC7B;AACA,sBAAqB;;AAErB,kBAAiB;;;AAGjB;AACA;AACA;AACA;AACA,4BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA6B;AAC7B;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,8BAA6B;AAC7B;AACA;AACA;AACA,0BAAyB;;AAEzB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,8BAA6B;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kCAAiC;AACjC;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,0BAAyB;AACzB;AACA;;AAEA;AACA;AACA,sBAAqB;;AAErB;;AAEA;;AAEA;;;AAGA,sBAAqB;AACrB,yEAAwE;AACxE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,kBAAiB;;AAEjB;AACA;AACA,4BAA2B,MAAM;AACjC;AACA;AACA,0DAAyD,2BAA2B;AACpF;;AAEA;;AAEA,iCAAgC;AAChC;AACA;AACA;AACA,0BAAyB;AACzB;AACA;;AAEA,sBAAqB,OAAO;AAC5B;AACA;;AAEA;AACA,kBAAiB;;AAEjB;AACA;AACA,4BAA2B,OAAO;AAClC,4BAA2B,OAAO;AAClC,4BAA2B,OAAO;AAClC;AACA;;AAEA;AACA;AACA,4BAA2B,MAAM;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB,2BAA2B;AAChD;AACA;AACA;AACA;AACA,kBAAiB;;AAEjB;AACA;AACA;AACA,4BAA2B,OAAO;AAClC,4BAA2B,OAAO;AAClC,4BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA2C;AAC3C;AACA;AACA;AACA;AACA,sBAAqB;AACrB,kBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA,4BAA2B,OAAO;AAClC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,kBAAiB;;AAEjB;AACA;AACA,4BAA2B,OAAO;AAClC,4BAA2B,OAAO;AAClC,4BAA2B,OAAO;AAClC,4BAA2B,OAAO;AAClC,4BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA;AACA,0BAAyB;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA,kBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;;AAEjB;AACA;AACA,4BAA2B,OAAO;AAClC,4BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA,+EAA8E;;AAE9E;AACA;AACA;AACA;AACA;AACA,sBAAqB;;AAErB;AACA;AACA;AACA;AACA,sBAAqB;AACrB,kBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iDAAgD;AAChD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,sBAAqB;AACrB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,2CAA0C;AAC1C;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;;AAEA;;AAEA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA,4BAA2B,kBAAkB;AAC7C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,oBAAmB;AACnB;AACA;AACA;AACA;AACA;;AAEA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA4B;AAC5B;;AAEA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA4B;AAC5B;AACA,cAAa;;AAEb,4BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,iCAAgC;AAChC,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,kBAAiB;;AAEjB;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA,kBAAiB;AACjB;;AAEA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,cAAa;;AAEb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA,iEAAgE,UAAU;AAC1E;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,+DAA8D,UAAU;AACxE,mDAAkD,YAAY,iBAAiB,YAAY,MAAM,QAAQ;AACzG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;;AAEjB;AACA;AACA;AACA;AACA,kBAAiB;;AAEjB;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA,qBAAoB,SAAS;AAC7B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,4DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA,oBAAmB,OAAO;AAC1B;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB,OAAO;AAC1B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB,sCAAqC;AACrC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kBAAiB,mBAAmB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,kBAAiB,mBAAmB;AACpC;AACA,kBAAiB;AACjB;AACA;;;AAGA;AACA;AACA;AACA;AACA,sBAAqB;;AAErB;AACA;AACA;AACA;AACA;AACA,8BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA,0BAAyB;AACzB,sBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;;AAErB;;AAEA,kBAAiB,kBAAkB;AACnC;AACA;;AAEA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAiB,OAAO;AACxB;AACA;;AAEA;AACA,cAAa;;AAEb;AACA;AACA,cAAa;;AAEb;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA,gCAA+B,OAAO;AACtC;AACA;AACA;AACA;;AAEA,2BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAa;;AAEb;AACA;AACA,wBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;;AAEA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;;AAEjB;AACA,mCAAkC;;AAElC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,uEAAsE;AACtE,uCAAsC;;AAEtC;AACA,kBAAiB;AACjB;AACA;AACA,sBAAqB;AACrB;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;;AAEA,gFAA+E;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oGAAmG;AACnG;AACA;;AAEA;AACA,kBAAiB;AACjB;AACA,kBAAiB;AACjB;AACA;;AAEA;AACA;AACA,0DAAyD;AACzD;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;;AAEA;AACA;AACA;AACA,sBAAqB;AACrB;AACA,sBAAqB;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA,yBAAwB,QAAQ;AAChC,yBAAwB,OAAO;AAC/B,yBAAwB,OAAO;AAC/B,yBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAgC;AAChC;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA,cAAa;;AAEb;AACA;AACA,yBAAwB,OAAO;AAC/B,yBAAwB,OAAO;AAC/B,yBAAwB,OAAO;AAC/B,yBAAwB,OAAO;AAC/B,yBAAwB,OAAO;AAC/B,yBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,0BAAyB;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;;AAErB;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA,yBAAwB,OAAO;AAC/B,yBAAwB,OAAO;AAC/B,yBAAwB,OAAO;AAC/B,yBAAwB,QAAQ;AAChC,yBAAwB,OAAO;AAC/B,yBAAwB,OAAO;AAC/B,yBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sBAAqB;AACrB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sBAAqB;AACrB,gDAA+C;AAC/C;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA,8BAA6B;AAC7B,4BAA2B,QAAQ;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA6D;;AAE7D;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,oBAAmB,OAAO;AAC1B,oBAAmB,OAAO;AAC1B;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sBAAqB;;AAErB;AACA;AACA;AACA;AACA,sBAAqB;AACrB,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA6B;AAC7B;AACA,6BAA4B;AAC5B,oBAAmB;AACnB;AACA;AACA;AACA;AACA,6BAA4B;AAC5B,oBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,kBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;;AAErB;AACA;AACA;AACA;AACA;AACA;;AAEA,kBAAiB;;AAEjB;AACA;AACA;;AAEA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,sDAAqD;AACrD;AACA;AACA,8CAA6C;;AAE7C;;;AAGA;AACA;AACA;;AAEA,8FAA6F;;;AAG7F;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,+CAA8C;;AAE9C;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,kDAAiD;AACjD;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,wDAAuD;AACvD,mCAAkC;AAClC;AACA,sBAAqB;AACrB;AACA;;AAEA;AACA;;AAEA,iDAAgD;;AAEhD;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,kBAAiB;AACjB;;AAEA,kBAAiB,gCAAgC;AACjD;;AAEA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,yIAAwI;AACxI;AACA;AACA;AACA;;AAEA;AACA,oDAAmD;AACnD;AACA,sBAAqB,OAAO;AAC5B,wEAAuE;AACvE;AACA;;AAEA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oGAAmG;AACnG;AACA;AACA,sCAAqC;AACrC,qEAAoE;AACpE;;AAEA;AACA;;AAEA;;AAEA;AACA,0BAAyB;;AAEzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,gCAA+B;AAC/B;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,iCAAgC;;AAEhC;AACA;AACA,2DAA0D;AAC1D,2CAA0C;AAC1C;AACA;;AAEA;AACA,kBAAiB;AACjB,2CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAa;;AAEb;AACA;AACA,wBAAuB,OAAO;AAC9B,wBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA,wBAAuB,OAAO;AAC9B,wBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA,wBAAuB,OAAO;AAC9B,wBAAuB,OAAO;AAC9B,wBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA6B;AAC7B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kDAAiD;AACjD;;AAEA,kBAAiB;AACjB;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,yEAAwE;;AAExE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;;AAEzB,sBAAqB,wEAAwE;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA,sFAAqF,YAAY;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,wDAAuD;AACvD;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,8CAA6C;;AAE7C,sBAAqB;;AAErB;AACA;AACA;AACA;AACA;AACA,iDAAgD,OAAO;AACvD;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,0CAAyC;AACzC;AACA;AACA;;AAEA;AACA,0CAAyC;AACzC;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,oCAAmC;AACnC;AACA;AACA;AACA,kBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB,sBAAqB;AACrB;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;;AAEA;AACA,4HAA2H;AAC3H;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAmE;AACnE;AACA,cAAa;;AAEb;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAuC;AACvC;;AAEA;AACA,kBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,wBAAuB;AACvB,wCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iGAAgG;AAChG;;AAEA,uCAAsC;AACtC;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;;;AAGA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,cAAa;;AAEb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,wDAAuD;;;AAGvD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,yGAAwG;AACxG;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA,sBAAqB;AACrB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,2DAA0D;AAC1D;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mEAAkE;AAClE;AACA,sBAAqB;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA,0BAAyB,QAAQ;AACjC;AACA;AACA,gCAA+B;AAC/B;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,kDAAiD;AACjD;AACA,iDAAgD;AAChD,8BAA6B;AAC7B;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,kBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gDAA+C;AAC/C;AACA;AACA,kBAAiB;;AAEjB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA,cAAa;;AAEb;AACA;AACA,wBAAuB,OAAO;AAC9B,wBAAuB,OAAO;AAC9B,wBAAuB,QAAQ;AAC/B,wBAAuB,eAAe;AACtC;AACA,wBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;;AAEA,6CAA4C;;AAE5C;AACA;AACA,kBAAiB;;AAEjB;AACA;AACA;AACA;AACA,kBAAiB;;AAEjB;AACA,4EAA2E;;AAE3E;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAiB;AACjB,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kEAAiE;;AAEjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gEAA+D;AAC/D,+CAA8C;AAC9C,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAiB;AACjB;AACA,kBAAiB;AACjB;AACA;;AAEA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAiB;AACjB;AACA,kBAAiB;AACjB;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA,0BAAyB,OAAO;AAChC,0BAAyB,MAAM;AAC/B;AACA;AACA;AACA;AACA,4GAA2G;;AAE3G;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA,8FAA6F;;AAE7F;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;;AAEA,kBAAiB,+BAA+B;AAChD;AACA;;AAEA;AACA;;AAEA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB;;AAEnB,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gEAA+D;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;;AAEA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAqC;;AAErC;AACA,kCAAiC;AACjC;AACA;AACA,sCAAqC;AACrC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,0CAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;;AAEjB;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA,wBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,cAAa;;AAEb;AACA;AACA,yBAAwB,OAAO;AAC/B,yBAAwB,OAAO;AAC/B;AACA;AACA;;AAEA;AACA;AACA,kBAAiB;AACjB,2CAA0C;AAC1C;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,sBAAqB;;AAErB;;;AAGA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;;AAEA;AACA;AACA;AACA;;;AAGA,kBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,mBAAkB;AAClB;AACA;AACA,kBAAiB;AACjB;AACA,kBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,6FAA4F;AAC5F;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,qCAAoC;AACpC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA,sBAAqB;;AAErB;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,sBAAqB;;AAErB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA,yBAAwB,OAAO;AAC/B;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,cAAa;;AAEb;AACA;AACA;AACA,yBAAwB,OAAO;AAC/B,yBAAwB,OAAO;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;;AAEjB;AACA;;AAEA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;;AAEA;AACA;AACA,gDAA+C;AAC/C;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,sIAAqI;AACrI;AACA;AACA;AACA,6DAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;;AAEA;AACA,8CAA6C;AAC7C;AACA;AACA,0BAAyB;AACzB;AACA;;AAEA,kBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAiB;;AAEjB;AACA;AACA;AACA;AACA,sBAAqB;AACrB;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAa;;AAEb;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,sBAAqB;AACrB;;AAEA;AACA;AACA;AACA,kBAAiB;;AAEjB,cAAa;;AAEb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA,kCAAiC;AACjC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAiB;;AAEjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA,yBAAwB,OAAO;AAC/B,yBAAwB,OAAO;AAC/B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;;AAEjB;AACA;AACA;AACA,sBAAqB;AACrB,mFAAkF;AAClF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAkC;AAClC;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA6B;AAC7B;;;AAGA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA,8BAA6B;AAC7B;;;AAGA;;AAEA;AACA;AACA,sBAAqB;;AAErB;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAU;;AAEV;;AAEA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB,OAAO;AAC1B,oBAAmB,OAAO;AAC1B,oBAAmB,OAAO;AAC1B,oBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA,iCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gCAA+B;AAC/B;AACA,4EAA2E;;AAE3E,oDAAmD;AACnD;AACA;AACA;;AAEA,oDAAmD;AACnD;AACA;AACA;;AAEA,kDAAiD;AACjD;AACA;AACA;;AAEA,iDAAgD;AAChD;AACA;AACA;;AAEA,mDAAkD;AAClD;AACA;AACA;AACA;;AAEA,kDAAiD;AACjD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,sBAAqB;AACrB;;AAEA;AACA;AACA,sBAAqB;AACrB;AACA;;AAEA,sBAAqB;AACrB;;AAEA;AACA,sBAAqB;AACrB;AACA;;AAEA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;;;AAGA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,wBAAuB,kBAAkB;AACzC;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAiB,4BAA4B;AAC7C;AACA,kBAAiB,OAAO;AACxB;AACA;;AAEA,qCAAoC,wBAAwB;AAC5D;AACA,gCAA+B,oBAAoB;AACnD;AACA,gGAA+F;AAC/F;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB,OAAO;AAC1B,oBAAmB,OAAO;AAC1B;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;AAIA;AACA;AACA;;AAEA,cAAa;;AAEb;AACA;AACA;AACA,yBAAwB,QAAQ;AAChC,yBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA,kBAAiB;AACjB,cAAa;;;;;AAKb;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA6B;;;AAG7B;AACA;AACA;AACA;AACA,8BAA6B;AAC7B;AACA;AACA;;AAEA;;;;AAIA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA,wBAAuB,OAAO;AAC9B,wBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;;AAEjB;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;;AAErB;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA,8CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4EAA2E;AAC3E,sBAAqB;;AAErB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,6BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,0BAAyB;AACzB;AACA,0BAAyB;AACzB;AACA,0BAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA,0BAAyB;AACzB;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA,0BAAyB;AACzB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,cAAa;;AAEb;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,cAAa;;AAEb;AACA;AACA,wBAAuB,aAAa;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAmC;AACnC;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,sBAAqB;;AAErB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,kBAAiB;AACjB;AACA;AACA,+CAA8C;AAC9C;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAiB;;AAEjB;;AAEA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;;AAEA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA,0BAAyB;;AAEzB;AACA;AACA;;;AAGA;AACA;AACA,0BAAyB;;;AAGzB;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;;AAEA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA,oDAAmD;AACnD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,8BAA6B;AAC7B;AACA;;AAEA;AACA;AACA;AACA,sBAAqB;;AAErB;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB,kBAAiB;;AAEjB;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB,kBAAiB;AACjB,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA,yBAAwB,OAAO;AAC/B,yBAAwB,YAAY;AACpC,yBAAwB,OAAO;AAC/B;AACA,yBAAwB,OAAO;AAC/B,yBAAwB,OAAO;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB,2CAA0C;AAC1C;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;;AAEA,iEAAgE;AAChE,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,2DAA0D,UAAU,KAAK,8BAA8B;AACvG;;AAEA;AACA;AACA;AACA,kBAAiB;AACjB,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;;AAEA;;AAEA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB,OAAO;AAC1B,oBAAmB,OAAO;AAC1B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA,wBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,gDAA+C;AAC/C,4EAA2E;AAC3E;AACA;AACA,kBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAiB;AACjB,cAAa;;AAEb;AACA;AACA;AACA,wBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sBAAqB;AACrB,kBAAiB;AACjB;AACA,cAAa;AACb;AACA;AACA,yBAAwB,MAAM;AAC9B,yBAAwB,QAAQ;AAChC,yBAAwB,OAAO;AAC/B,yBAAwB,MAAM;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kGAAiG;AACjG;AACA;AACA;AACA;AACA,2DAA0D;AAC1D;AACA;AACA;AACA,kBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,qDAAoD;AACpD;AACA;AACA,sBAAqB;AACrB;AACA;AACA,sBAAqB;AACrB;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA,kBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8HAA6H;AAC7H;AACA;AACA;AACA,kCAAiC;AACjC,mEAAkE;AAClE;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA,kBAAiB;AACjB;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA,mEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB,mDAAkD;AAClD;AACA;AACA;AACA,sBAAqB;AACrB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB,sBAAqB;AACrB;AACA;AACA,kBAAiB;AACjB,cAAa;;AAEb;AACA;AACA;AACA,kCAAiC,QAAQ;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;;AAEA;AACA;AACA;AACA;AACA,0CAAyC;AACzC;AACA;AACA;AACA;AACA;AACA,8BAA6B;AAC7B;AACA;;AAEA;AACA,kBAAiB;;AAEjB;AACA;AACA;;AAEA;AACA;AACA;AACA,0BAAyB;AACzB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,sBAAqB;;AAErB;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,oEAAmE;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;;AAEjB;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;;AAEA;AACA;AACA,kBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,kCAAiC;AACjC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kCAAiC,gBAAgB;AACjD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kCAAiC;AACjC;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA;AACA,kCAAiC;AACjC,8BAA6B;AAC7B;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,6BAA4B;AAC5B;AACA;AACA,sBAAqB;AACrB,8DAA6D;AAC7D;AACA;AACA;AACA,cAAa;;AAEb;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,cAAa;;;;AAIb;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA,iEAAgE;AAChE;AACA,wDAAuD;AACvD;AACA,cAAa;;AAEb;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,uCAAsC;;AAEtC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,0BAAyB;;AAEzB;AACA,gDAA+C;AAC/C;AACA;;AAEA;AACA,sBAAqB;AACrB;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,cAAa;;AAEb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,sCAAqC;;AAErC;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,kBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAkC;AAClC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sBAAqB;AACrB,qCAAoC;;AAEpC;AACA,kBAAiB;AACjB;;AAEA;AACA,kBAAiB,6BAA6B;;;AAG9C;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,sBAAqB;AACrB;AACA;AACA;;AAEA,kBAAiB;AACjB;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;;AAEA,UAAS;;AAET,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,6BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA6B;AAC7B;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB,kBAAiB;AACjB;AACA;AACA;AACA,sBAAqB;AACrB,kBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA,oCAAmC;AACnC;AACA;AACA;AACA,sBAAqB;AACrB;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA,cAAa;AACb;;AAEA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,sBAAqB;AACrB;AACA,cAAa;;AAEb;;AAEA;;AAEA;;;AAGA;AACA;;AAEA;AACA;AACA,iDAAgD;AAChD;AACA;AACA;AACA;;AAEA,cAAa;;AAEb;AACA;AACA;AACA,wBAAuB,OAAO;AAC9B,wBAAuB,QAAQ;AAC/B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA,wBAAuB,OAAO;AAC9B,wBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;;AAEA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA,sBAAqB;AACrB;;AAEA;;AAEA;AACA,kEAAiE;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,cAAa;;AAEb;AACA;AACA,wBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA,wBAAuB,OAAO;AAC9B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAoC;AACpC,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA6B;AAC7B;AACA,sBAAqB;AACrB;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA6B;;AAE7B;;AAEA;AACA;AACA;AACA;AACA,mDAAkD;AAClD;AACA;AACA,sBAAqB;AACrB;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB,cAAa;;AAEb;AACA;AACA,wBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,2BAA0B;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,0BAAyB;AACzB;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA8C;AAC9C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,kBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAiB;;AAEjB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;;AAEA;AACA;;;;AAIA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;;AAEjB;AACA;AACA;AACA;AACA,sBAAqB;AACrB;;AAEA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA6B;AAC7B,0BAAyB,qBAAqB;AAC9C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;;AAErB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,8BAA6B;AAC7B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA6B;AAC7B;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA6B;AAC7B;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,kBAAiB;AACjB;AACA,8CAA6C;AAC7C;AACA;AACA,sBAAqB;AACrB,yCAAwC;AACxC;;AAEA;AACA,cAAa;;AAEb;AACA;AACA,wBAAuB,OAAO;AAC9B,wBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA,sBAAqB;;;AAGrB;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA,0BAAyB;;;AAGzB;;AAEA;AACA;AACA,sBAAqB;;AAErB;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,wBAAuB,OAAO;AAC9B,wBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;;AAErB,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA,wBAAuB,OAAO;AAC9B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAa;AACb;;AAEA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB,sBAAsB;AACzC;AACA,oBAAmB,aAAa;AAChC,oBAAmB,SAAS;AAC5B;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,0BAAyB,MAAM;AAC/B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;;AAEA;AACA;AACA,wDAAuD;;AAEvD;AACA,8DAA6D;AAC7D,qEAAoE;AACpE;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,0BAAyB;AACzB;AACA,mBAAkB;;AAElB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA,wBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA,uBAAsB,mBAAmB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA,wBAAuB,OAAO;AAC9B,wBAAuB,OAAO;AAC9B,wBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA,wBAAuB,eAAe;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;;AAEjB;AACA,8DAA6D;AAC7D;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;;AAEA,oCAAmC;;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;;AAErB;AACA;;AAEA;AACA;AACA,mDAAkD;AAClD;AACA,0DAAyD;AACzD,iHAAgH;AAChH;AACA,8BAA6B;AAC7B;AACA;AACA;AACA;AACA,sBAAqB;AACrB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;;AAEjB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAiB;AACjB,cAAa;;AAEb;AACA;AACA,2BAA0B,OAAO;AACjC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,4BAA2B,2BAA2B;AACtD;AACA;;AAEA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA,6EAA4E;AAC5E,6EAA4E;AAC5E;;AAEA;AACA;AACA;AACA;AACA,kBAAiB;;AAEjB;AACA;AACA,kBAAiB;;AAEjB;AACA;;AAEA;AACA,kDAAiD;AACjD,kBAAiB;AACjB,cAAa;;;AAGb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB,kBAAiB;AACjB;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB,cAAa;;AAEb;AACA;AACA;AACA,qCAAoC,OAAO;AAC3C,wCAAuC,OAAO;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;;AAErB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,sBAAqB;;AAErB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,+DAA8D;AAC9D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA6B;AAC7B;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;;;AAGA;AACA,kBAAiB;AACjB;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,8BAA6B;AAC7B;AACA;AACA,8BAA6B;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;;AAEjB;AACA,gDAA+C;;AAE/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,0DAAyD;AACzD;AACA;AACA;AACA;AACA;;AAEA;AACA,kBAAiB;AACjB;AACA,8DAA6D;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB,mDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;;AAEjB;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;;;AAGA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAiB;;AAEjB;;AAEA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mHAAkH;AAClH;AACA;AACA;AACA;AACA,mDAAkD;AAClD;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAiB;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAkB;AAClB;AACA;AACA,cAAa;;AAEb;AACA;AACA,wBAAuB,OAAO;AAC9B,wBAAuB,OAAO;AAC9B,wBAAuB,eAAe;AACtC;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,kBAAiB;;;AAGjB;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAiB;;AAEjB,4CAA2C;AAC3C,yCAAwC;;AAExC,sCAAqC;AACrC;;AAEA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA,kBAAiB;AACjB,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,sBAAqB;AACrB,kBAAiB;;AAEjB;AACA;AACA;AACA,kBAAiB;AACjB,iDAAgD;AAChD;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,2EAA0E;AAC1E;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;;AAEA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;;;AAGA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA,sBAAqB;AACrB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,kBAAiB;;;AAGjB;AACA;AACA;AACA;AACA;AACA,kBAAiB,8BAA8B;;AAE/C;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,yDAAwD;;AAExD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAiB;;AAEjB,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA,4EAA2E;AAC3E;AACA;AACA,qHAAoH;AACpH;AACA;AACA,kBAAiB;AACjB,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA6B;AAC7B;AACA;;AAEA,sBAAqB;AACrB;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uEAAsE;;AAEtE;AACA;AACA;AACA,kBAAiB;AACjB;;AAEA;AACA;AACA,qEAAoE;;AAEpE;;AAEA;AACA;AACA,wDAAuD;AACvD;AACA,sBAAqB;AACrB,wCAAuC;AACvC;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;;AAEA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,cAAa;;AAEb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA,0BAAyB;;AAEzB;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAiB;;AAEjB;AACA,iCAAgC;AAChC;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA,cAAa;;;AAGb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mFAAkF;AAClF;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kBAAiB;;AAEjB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,cAAa;;AAEb;AACA;AACA;AACA;;AAEA;AACA;AACA,0DAAyD;AACzD;AACA;AACA,kBAAiB;;AAEjB;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,WAAU;;AAEV,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wBAAuB,OAAO;AAC9B,wBAAuB,OAAO;AAC9B;AACA,wBAAuB,OAAO;AAC9B,0BAAyB,OAAO;AAChC;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,4CAA2C;;AAE3C;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,OAAO;AAC9B,wBAAuB,OAAO;AAC9B,0BAAyB,OAAO;AAChC;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAkB;;AAElB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;;AAEA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA,6BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,iEAAgE;AAChE;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA,0BAAyB,OAAO;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,wDAAuD;AACvD;AACA;AACA;;AAEA,wCAAuC;AACvC;AACA;;AAEA;AACA;AACA;;;AAGA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA,yBAAwB,OAAO;AAC/B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,6BAA4B,cAAc;AAC1C;AACA,mEAAkE,yBAAyB;AAC3F;AACA,+DAA8D,oCAAoC;AAClG,kBAAiB;;AAEjB;AACA;AACA;AACA,kBAAiB;AACjB,cAAa;;AAEb;AACA;AACA,wBAAuB,OAAO;AAC9B,wBAAuB,OAAO;AAC9B,wBAAuB,SAAS;AAChC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,4CAA2C;AAC3C;AACA;AACA;AACA;;AAEA;AACA,cAAa;AACb;AACA;;AAEA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB,OAAO;AAC1B,oBAAmB,OAAO;AAC1B;AACA,gDAA+C;;AAE/C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,uBAAsB;AACtB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA,0BAAyB;AACzB;AACA;;AAEA;;AAEA,sBAAqB;;AAErB;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAa;AACb;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;;AAEA;;AAEA;AACA,kBAAiB;AACjB;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,iDAAgD,YAAY,iBAAiB,YAAY,MAAM,QAAQ;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uEAAsE;AACtE;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kBAAiB;AACjB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA,yBAAwB,MAAM;AAC9B,0BAAyB,OAAO;AAChC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,kBAAiB;AACjB;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;;AAEA,8DAA6D;;AAE7D,uDAAsD;AACtD;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,sBAAqB;;AAErB;AACA;AACA;AACA;;AAEA,kBAAiB;AACjB,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;;AAEA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,sBAAqB;AACrB;AACA,sBAAqB;AACrB;AACA;AACA;;AAEA;;AAEA;AACA;AACA,cAAa;;AAEb;AACA;AACA,wBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA,0DAAyD;AACzD,oEAAmE;AACnE;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,sBAAqB;AACrB;AACA,oCAAmC;AACnC;AACA;;AAEA;AACA;;AAEA,0BAAyB;AACzB;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,4CAA2C;AAC3C;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;;AAEA;AACA;AACA,+CAA8C;AAC9C,kBAAiB;AACjB;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAa;;AAEb;;AAEA;AACA;AACA,wBAAuB,OAAO;AAC9B,wBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;;AAErB,kBAAiB;;AAEjB;AACA;;AAEA,6CAA4C;;AAE5C;AACA;AACA;AACA,sBAAqB;;AAErB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA,oDAAmD;AACnD,wCAAuC,gBAAgB;AACvD;AACA;AACA;AACA,0BAAyB,gCAAgC;AACzD,8CAA6C;AAC7C,4CAA2C,gBAAgB;AAC3D;AACA;AACA;AACA;AACA,8BAA6B,OAAO;AACpC,4CAA2C,gBAAgB;AAC3D;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB,yCAAwC;AACxC;AACA,sBAAqB;AACrB,oCAAmC,gBAAgB;AACnD,yDAAwD;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,qDAAoD;AACpD;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;;AAEA;AACA,0CAAyC;AACzC;AACA;AACA;;AAEA;;AAEA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,4BAA2B,gBAAgB;AAC3C;AACA;AACA;AACA;AACA;;AAEA;AACA,4BAA2B,gBAAgB;AAC3C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;;AAGb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,4BAA2B,yBAAyB;AACpD;AACA;AACA;AACA,2EAA0E;AAC1E;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA,iCAAgC;AAChC,8CAA6C;AAC7C;AACA;AACA;;AAEA;AACA;AACA;AACA,gCAA+B,gBAAgB;AAC/C,kEAAiE;AACjE;AACA;AACA;AACA;AACA,uDAAsD;AACtD;AACA;AACA;;AAEA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,4BAA2B,iBAAiB;;AAE5C;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,iCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA,4CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,4BAA2B,gBAAgB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,wEAAuE;AACvE;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA,mIAAkI;;AAElI;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA,wFAAuF;AACvF,uGAAsG;AACtG;AACA;AACA;AACA,kBAAiB;AACjB,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA;AACA,0BAAyB;AACzB;;AAEA;AACA;;AAEA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,gCAA+B,mBAAmB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,2CAA0C;AAC1C;AACA;AACA,8BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA,0BAAyB;AACzB,+DAA8D;AAC9D;AACA;AACA;;AAEA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA,4DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gCAA+B;AAC/B;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,cAAa;;;AAGb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qFAAoF;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;;AAEjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,uFAAsF;;AAEtF;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,qCAAoC;;AAEpC;AACA,oCAAmC;AACnC;;AAEA;AACA;AACA;;AAEA;AACA,sBAAqB;AACrB;;AAEA,sBAAqB;;AAErB;AACA;;AAEA,0BAAyB,kCAAkC;;AAE3D;;AAEA,0BAAyB;;AAEzB,8CAA6C;AAC7C;AACA;AACA;AACA;AACA;;AAEA,8BAA6B,uBAAuB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,8BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0BAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAiB;;AAEjB;AACA;;AAEA;;AAEA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,kBAAiB;;AAEjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,0BAAyB;;AAEzB,sBAAqB,6BAA6B;;AAElD;AACA;AACA;AACA;AACA,8BAA6B;AAC7B;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,0BAAyB;AACzB;AACA;;AAEA;AACA;AACA,gEAA+D;;AAE/D;;AAEA;AACA;AACA;AACA;AACA,yDAAwD;AACxD;AACA,kBAAiB;AACjB,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA,0BAAyB;AACzB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kCAAiC;AACjC;;AAEA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,qCAAoC;;AAEpC;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAiB;AACjB;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,oBAAmB,EAAE;;AAErB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;;AAEA,wCAAuC;AACvC,2EAA0E;AAC1E;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;;AAEA;AACA;AACA;AACA,sBAAqB;AACrB;;AAEA;AACA;AACA,gCAA+B;AAC/B;AACA;AACA,cAAa;;AAEb;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAiB;AACjB,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,0BAAyB;;AAEzB;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,UAAS,EAAE;;AAEX,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAiD;;AAEjD;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB,qCAAoC;AACpC;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAA+B,SAAS;AACxC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,0BAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA,wBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sBAAqB;AACrB;AACA;AACA,kBAAiB;AACjB;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,8CAA6C;;AAE7C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;;AAEA;;AAEA;AACA;;AAEA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,wBAAuB,OAAO;AAC9B,wBAAuB,QAAQ;AAC/B,wBAAuB,eAAe;AACtC;AACA;AACA,yBAAwB,OAAO;AAC/B;AACA;AACA;AACA;;AAEA;AACA,iDAAgD;;AAEhD;AACA;AACA,sBAAqB;AACrB;;AAEA,oDAAmD;AACnD;AACA;AACA;AACA;AACA,sBAAqB;AACrB;;AAEA;AACA,cAAa;;AAEb;AACA;AACA,wBAAuB,OAAO;AAC9B,wBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;;AAErB,6CAA4C;;AAE5C;AACA,kEAAiE;AACjE;;AAEA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA,wBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA6B;AAC7B;AACA;;AAEA;AACA;AACA;AACA;AACA,sBAAqB;;AAErB;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA,+DAA8D;AAC9D;;AAEA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA,kBAAiB;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA,sBAAqB;AACrB;AACA,sBAAqB;AACrB;;;AAGA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA,8BAA6B;AAC7B;AACA,sBAAqB;;AAErB;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,wDAAuD;AACvD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sBAAqB;AACrB;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA,kBAAiB;;AAEjB;AACA;AACA,uCAAsC;AACtC,sBAAqB;AACrB;;AAEA;AACA;AACA;AACA;AACA,yCAAwC;AACxC,sBAAqB;AACrB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;;;AAGA,UAAS;;AAET;AACA;AACA;AACA;AACA;AACA,wBAAuB,OAAO;AAC9B,wBAAuB,QAAQ;AAC/B,wBAAuB,eAAe;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,uDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gFAA+E;AAC/E;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,yEAAwE;AACxE;AACA;;AAEA,gEAA+D;AAC/D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0CAAyC;AACzC;AACA,kBAAiB;AACjB;AACA;AACA,sBAAqB;AACrB;AACA,cAAa;;AAEb;AACA;AACA,wBAAuB,QAAQ;AAC/B,wBAAuB,eAAe;AACtC;AACA;AACA;AACA;AACA;AACA,UAAS;;AAET;AACA;AACA;AACA;AACA,wBAAuB,OAAO;AAC9B,wBAAuB,QAAQ;AAC/B,wBAAuB,QAAQ;AAC/B;AACA,wBAAuB,yBAAyB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,uEAAsE;AACtE,uDAAsD;;AAEtD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,6CAA4C;AAC5C;AACA,cAAa;;AAEb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,uEAAsE;AACtE;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;;AAEzB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA,wBAAuB,QAAQ;AAC/B,wBAAuB,eAAe;AACtC;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA,kBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAiB;;AAEjB;AACA;AACA,oCAAmC;AACnC;AACA;AACA;AACA;AACA,UAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,kBAAiB;;AAEjB;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,qDAAoD;AACpD;AACA,kBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB,cAAa;;AAEb;AACA;AACA,wBAAuB,MAAM;AAC7B,wBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA,kBAAiB;AACjB;;AAEA,UAAS;;AAET,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gCAA+B,mBAAmB;AAClD;AACA;;AAEA;AACA;AACA,uDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA,sBAAqB;;AAErB;AACA;AACA,sBAAqB;;AAErB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,yEAAwE;AACxE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,8CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA6B;;;AAG7B;AACA;AACA;AACA,0BAAyB;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAA+D;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA,8BAA6B;AAC7B;AACA,sBAAqB;;AAErB;;AAEA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,0BAAyB;AACzB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA6B;AAC7B;AACA;AACA;AACA;AACA,8BAA6B;AAC7B;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,4BAA2B,mBAAmB;AAC9C;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,sEAAqE;AACrE;AACA;AACA;AACA;AACA;AACA,8BAA6B;AAC7B;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,uFAAsF;;AAEtF;AACA;;AAEA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,uBAAsB;;AAEtB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,kBAAiB;;AAEjB;AACA;AACA;;AAEA;AACA,gCAA+B;AAC/B;AACA;AACA;AACA,0BAAyB;;AAEzB,sBAAqB,OAAO;AAC5B;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,8BAA6B;AAC7B;AACA;AACA;AACA;AACA,kBAAiB;AACjB,cAAa;;AAEb;AACA,UAAS;;AAET,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,sBAAqB;AACrB;AACA,wCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wCAAuC;AACvC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,oDAAmD;AACnD;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,4DAA2D;AAC3D,sBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAmE;AACnE;AACA;AACA,UAAS;;AAET,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;;AAET,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,kBAAiB;;AAEjB;AACA;AACA;AACA;AACA;;AAEA,cAAa;AACb;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;;;AAGA,UAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAoC;AACpC;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,4FAA2F;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA,8BAA6B,4CAA4C;AACzE;AACA;AACA;AACA;AACA,sBAAqB;AACrB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,8DAA6D;AAC7D;AACA;;AAEA;AACA,oCAAmC;AACnC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gDAA+C;AAC/C;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iFAAgF;AAChF;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;;AAEjB,cAAa;;AAEb;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,cAAa;;;AAGb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAuD;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,sFAAqF;AACrF;;AAEA;AACA;AACA;AACA;AACA,kFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,cAAa;;;AAGb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,uCAAsC;AACtC;AACA;AACA;;AAEA,0BAAyB;AACzB;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;AAGA;;;AAGA,sBAAqB;AACrB,2DAA0D;AAC1D;AACA,kBAAiB;AACjB,cAAa;;AAEb;AACA;AACA,wBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,8BAA6B;AAC7B;;AAEA,2BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;;AAEA,sBAAqB,OAAO;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA,kCAAiC;AACjC;AACA,0BAAyB;;AAEzB;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;;AAEA;AACA;AACA,UAAS;;AAET,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAS;;AAET,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;;AAEA,oDAAmD,YAAY;AAC/D,wDAAuD,YAAY;;AAEnE,sCAAqC,QAAQ,gBAAgB,QAAQ;AACrE;;AAEA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;;AAET,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,4BAA2B,OAAO;AAClC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAuC;AACvC;AACA,kBAAiB;AACjB;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA6B;;AAE7B;AACA;AACA;AACA;AACA;AACA,8BAA6B;AAC7B;AACA,sBAAqB;;AAErB;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,4BAA2B,SAAS;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,4BAA2B,SAAS;AACpC;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,4BAA2B,SAAS;;AAEpC;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,oFAAmF;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAa;;AAEb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,0BAAyB;;AAEzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kCAAiC;AACjC;;;AAGA;AACA;AACA;AACA;AACA,kCAAiC;AACjC;;AAEA;;AAEA;;AAEA;AACA,kBAAiB;;AAEjB,cAAa;;;AAGb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB,cAAa;;AAEb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA,0BAAyB;AACzB;AACA,UAAS;AACT;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAa;;AAEb;AACA;AACA,wBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,sFAAqF;;AAErF;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;;AAErB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA,wBAAuB,QAAQ;AAC/B,wBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,kFAAiF;;AAEjF;;;AAGA;AACA;AACA;;AAEA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;;AAET,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wFAAuF;AACvF,4DAA2D;AAC3D;;AAEA;AACA;AACA;AACA;AACA,4CAA2C;AAC3C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB,cAAa;;AAEb;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,sBAAqB,EAAE;AACvB;AACA;AACA,kDAAiD;AACjD;AACA;AACA;AACA;AACA,8BAA6B;AAC7B;AACA,8BAA6B;AAC7B,0BAAyB;AACzB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mGAAkG;AAClG,sHAAqH;AACrH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;;AAEjB;AACA;AACA;AACA;AACA,kBAAiB;;AAEjB;AACA;AACA,qCAAoC;AACpC,0EAAyE;AACzE;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA,gCAA+B;AAC/B;AACA,0BAAyB;;AAEzB;AACA;AACA;;AAEA;AACA;AACA,sBAAqB;AACrB;AACA;AACA,sBAAqB;AACrB;AACA;AACA;;;AAGA,kBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,kBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAiB;AACjB,0CAAyC;AACzC;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA4C;;AAE5C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA6B;AAC7B;AACA;AACA,8BAA6B;AAC7B;AACA;AACA,kBAAiB;;;AAGjB;AACA;;AAEA;AACA,4DAA2D;;AAE3D;AACA;;AAEA;AACA;AACA;AACA,kBAAiB;;AAEjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;;AAEA;AACA,gCAA+B,YAAY;;AAE3C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,8BAA6B;AAC7B;AACA;AACA;;AAEA,0BAAyB;AACzB;AACA;;AAEA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAiC;AACjC;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,8BAA6B;AAC7B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,8BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB,kBAAiB,EAAE;;AAEnB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,sCAAqC;;AAErC;AACA;AACA;AACA,kCAAiC;AACjC;;AAEA,8BAA6B;AAC7B;AACA;AACA,0BAAyB;AACzB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAiC;AACjC;AACA;;AAEA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA,8BAA6B;AAC7B;AACA;AACA,kBAAiB;AACjB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gDAA+C;AAC/C;;AAEA,kBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA,kEAAiE;AACjE;;AAEA;AACA,gDAA+C;AAC/C;;AAEA,kBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAiE;AACjE;;AAEA;AACA;AACA;AACA,oGAAmG;AACnG;;AAEA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,6BAA4B;AAC5B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;;AAEA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,uCAAsC;AACtC;AACA;AACA,8BAA6B;AAC7B,0BAAyB;AACzB;AACA,kBAAiB;AACjB;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,UAAS;;AAET;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,wBAAuB,SAAS;AAChC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA,wBAAuB,SAAS;AAChC;;AAEA,gCAA+B,SAAS;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb;;AAEA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA,kBAAiB;;AAEjB;AACA;AACA;AACA,2CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA,kCAAiC;AACjC;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,sCAAqC;AACrC;;AAEA;AACA,sBAAqB;AACrB;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,sDAAqD;AACrD;AACA;AACA,wFAAuF;AACvF;AACA;AACA;AACA;;AAEA;AACA,8BAA6B,yBAAyB;AACtD;AACA;AACA;AACA,kBAAiB;;AAEjB;AACA;AACA;AACA;AACA,sBAAqB;AACrB,kBAAiB,yBAAyB;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA6B;;;AAG7B;AACA;AACA;AACA,8BAA6B;AAC7B;;;AAGA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA;;AAEA,sBAAqB;AACrB;;AAEA;;;AAGA;AACA;;AAEA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mDAAkD;AAClD;AACA,0BAAyB;AACzB;AACA;AACA,sBAAqB;AACrB,cAAa;;AAEb;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAiB;;AAEjB;AACA;AACA;AACA;AACA,2CAA0C;AAC1C;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA,UAAS;;;;AAIT;AACA;;;;AAIA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;;AAEA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA,kBAAiB;AACjB,cAAa;;AAEb;AACA;AACA,wBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sBAAqB;AACrB,kBAAiB,OAAO;AACxB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;;AAEA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;;AAEA,sEAAqE;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iDAAgD;AAChD,kBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA,UAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,QAAQ;AAC/B,wBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA,kBAAiB;AACjB,cAAa;;AAEb;AACA;AACA;AACA,wBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,cAAa;;AAEb;AACA;AACA,wBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,sEAAqE;AACrE;AACA;AACA;AACA;AACA,2DAA0D;AAC1D;AACA;AACA,qDAAoD;AACpD;AACA;AACA;AACA;AACA;AACA;;AAEA,qCAAoC;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,2CAA0C;AAC1C;AACA;AACA;AACA;AACA,sBAAqB,MAAM;;;AAG3B;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAAyB;AACzB,4EAA2E;AAC3E;AACA;AACA,8BAA6B;AAC7B;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,2HAA0H;AAC1H,kEAAiE;AACjE;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA,sBAAqB;AACrB,wCAAuC;;;AAGvC;AACA;AACA;AACA;AACA,sBAAqB;;;AAGrB,kBAAiB;AACjB;AACA;AACA;AACA,sBAAqB;AACrB;;AAEA;AACA,cAAa;;AAEb;AACA;AACA,yBAAwB,OAAO;AAC/B,0BAAyB,MAAM;AAC/B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0CAAyC;;AAEzC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;;AAErB;;;;AAIA;AACA;AACA;;AAEA;AACA,2HAA0H;AAC1H;;AAEA,qDAAoD;AACpD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAa;;AAEb;AACA;AACA;AACA,4BAA2B,QAAQ;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uIAAsI;AACtI;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAiB;;;AAGjB;AACA;AACA;AACA;;;AAGA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;;AAEA;AACA;AACA;AACA,kBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA,cAAa;;;AAGb;AACA;AACA;AACA,iCAAgC,QAAQ;AACxC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,cAAa;;AAEb;AACA,UAAS;;AAET,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,kBAAiB;AACjB;;AAEA;AACA;AACA;AACA;AACA,kBAAiB;AACjB,cAAa;;AAEb;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,kBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,oCAAmC,yBAAyB;AAC5D,gDAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA,4CAA2C;AAC3C;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,MAAK;AACL;AACA,EAAC;;;;;;;;;;AChsuBD;AACA;;AAEA;;AAEA;AACA;AACA,cAAa,wEAAwE,cAAc,aAAa,0IAA0I,yBAAyB,iCAAiC,2BAA2B,eAAe,yBAAyB,wHAAwH,WAAW,YAAY;AACtgB,2BAA0B,SAAS,8BAA8B,oEAAoE,6IAA6I,6CAA6C,sBAAsB,kCAAkC,uBAAuB,IAAI,oCAAoC,EAAE,gCAAgC;AACxd,mBAAkB,aAAa,oBAAoB,6BAA6B,6BAA6B,MAAM,sQAAsQ,SAAS,6BAA6B;AAC/Z,uBAAsB,oBAAoB,8BAA8B,OAAO,UAAU,wLAAwL,EAAE,uBAAuB,0EAA0E,yBAAyB,gBAAgB,EAAE,wBAAwB,oCAAoC,2CAA2C;AACtgB,wBAAuB,2DAA2D,KAAK,sSAAsS,uBAAuB,4CAA4C,oBAAoB,IAAI,EAAE;AAC1d,+BAA8B,UAAU,6CAA6C,OAAO,KAAK,gCAAgC,wCAAwC,eAAe,kBAAkB,EAAE,eAAe,YAAY,4BAA4B,sCAAsC,SAAS,sBAAsB,0DAA0D;AAClY,iDAAgD,2BAA2B,qCAAqC,QAAQ,QAAQ,iCAAiC,kBAAkB,gBAAgB,gCAAgC,iDAAiD,gCAAgC,+LAA+L;AACnf,oEAAmE,SAAS,qBAAqB,iCAAiC,kCAAkC,iEAAiE,6BAA6B,sBAAsB,2BAA2B,IAAI,+HAA+H,6BAA6B;AACnd,qBAAoB,sQAAsQ,0BAA0B,IAAI,qCAAqC;AAC7V,UAAS,sBAAsB,4BAA4B,0BAA0B,iBAAiB,EAAE,qDAAqD,uCAAuC,sBAAsB,2CAA2C,kCAAkC,iEAAiE,sCAAsC,sGAAsG;AACpf,kCAAiC,yBAAyB,KAAK,6CAA6C,uCAAuC,mCAAmC,uCAAuC,UAAU,yBAAyB,6FAA6F,kBAAkB,uBAAuB,uBAAuB,iCAAiC,EAAE,EAAE,+BAA+B,KAAK,EAAE,SAAS,SAAS;AAC1f,iCAAgC,sCAAsC,uFAAuF,EAAE,oCAAoC,6BAA6B,aAAa,kBAAkB,iBAAiB,EAAE,wCAAwC,mCAAmC,0IAA0I;AACve,IAAG,GAAG,8BAA8B,EAAE,6CAA6C,iBAAiB,uCAAuC,mBAAmB,EAAE,EAAE,KAAK,aAAa,kDAAkD,mBAAmB,mBAAmB,yBAAyB,wBAAwB,6BAA6B,sCAAsC,kBAAkB,EAAE,sBAAsB,wCAAwC,iCAAiC;AACnf,OAAM,IAAI,oBAAoB,uRAAuR,qEAAqE,wBAAwB,WAAW;AAC7Z,GAAE,EAAE,0BAA0B,SAAS,gDAAgD,WAAW,KAAK,aAAa,uGAAuG,uBAAuB,2DAA2D,qBAAqB,wBAAwB,gEAAgE,sCAAsC,cAAc,QAAQ,GAAG,QAAQ,GAAG,YAAY,aAAa;AAC7f,SAAQ,QAAQ,aAAa,QAAQ,wBAAwB,uBAAuB,iIAAiI,MAAM,+CAA+C,eAAe,0CAA0C,uCAAuC,sBAAsB,+DAA+D,kCAAkC;AACje,2BAA0B,kSAAkS,0BAA0B,gBAAgB,mBAAmB,aAAa,0EAA0E,EAAE,uBAAuB,uBAAuB;AAChgB,2BAA0B,qCAAqC,OAAO,+IAA+I,kDAAkD,2BAA2B,2BAA2B,oCAAoC,KAAK,KAAK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxB3W;;AAEA;AACA;AACA;AACA;AACA,gGAA0E;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA,iCAAgC,UAAU,EAAE;AAC5C,E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpBA;;AAEA;AACA;AACA;AACA;AACA,gGAA0E;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA,iCAAgC,UAAU,EAAE;AAC5C,E;;;;;;;;;;;;;;;;;;;;;;;;ACpBA;;AAEA;AACA;AACA;AACA;AACA,gGAA0E;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA,iCAAgC,UAAU,EAAE;AAC5C,E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpBA;;AAEA;AACA;AACA,EAAC;;AAED;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,uCAAsC,uCAAuC,kBAAkB;;AAE/F;AACA;;AAEA;AACA;;AAEA;;AAEA,oEAAmE,aAAa;AAChF;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAS,gDAAgD;AACzD;AACA;AACA;AACA,UAAS,kDAAkD;AAC3D;AACA;AACA,MAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;;AAEA;AACA,EAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW;AACX;AACA;AACA;AACA;AACA;AACA,qC;;;;;;;;;AC/JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,EAAC;AACD;AACA;AACA;AACA;;;;;;;;;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,2CAA0C;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,QAAQ;AACrB,eAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAU;AACV,8BAA6B;AAC7B,SAAQ;AACR;AACA;AACA;AACA;AACA,gCAA+B,KAAK;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT,6BAA4B;AAC5B,QAAO;AACP;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB,sBAAsB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,sBAAqB,2BAA2B;AAChD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,sBAAqB,gCAAgC;AACrD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AC7dA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,UAAU;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iGAAgG;AAChG;AACA,UAAS;AACT;AACA;AACA,iGAAgG;AAChG;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;AC5DA;;AAEA;AACA;AACA,EAAC;;AAED;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,uCAAsC,uCAAuC,kBAAkB;;AAE/F;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;;AAEA;AACA;AACA,MAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAoB;AACpB;AACA,qBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAK;AACL,IAAG;AACH;AACA,+BAA8B;AAC9B;AACA,MAAK;AACL,IAAG;AACH;AACA;;AAEA;AACA;AACA;AACA,QAAO;AACP;AACA,IAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAG;AACH;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA,IAAG;AACH;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,IAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP,MAAK;AACL;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;;AAEA;AACA,IAAG;AACH;AACA;AACA;AACA;;AAEA;AACA,IAAG;AACH;AACA;AACA;AACA;;AAEA;AACA,IAAG;AACH;AACA;AACA;AACA;;AAEA;AACA,IAAG;AACH;AACA;AACA;AACA;;AAEA;AACA,IAAG;AACH;AACA;AACA;AACA;;AAEA;AACA,IAAG;AACH;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;;AAEA;AACA;AACA,EAAC;;AAED;AACA,qC;;;;;;;;;AClfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;AACD;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAc;AACd;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAgB;AAChB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAgB;AAChB;AACA;AACA;;AAEA;AACA,iBAAgB;AAChB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAA+B,KAAK;AACpC;AACA;AACA,iBAAgB;AAChB;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,WAAW;AAC1B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,OAAO;AACtB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,OAAO;AACtB,gBAAe,QAAQ;AACvB,gBAAe,QAAQ;AACvB,iBAAgB,QAAQ;AACxB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,OAAO;AACtB,gBAAe,QAAQ;AACvB,gBAAe,QAAQ;AACvB,gBAAe,0BAA0B;AACzC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,OAAO;AACtB,gBAAe,QAAQ;AACvB,gBAAe,QAAQ;AACvB,gBAAe,WAAW;AAC1B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,0BAA0B;AACzC;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA,wBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA,iDAAgD;AAChD,MAAK;AACL;AACA;AACA;AACA;AACA,4CAA2C;AAC3C,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA,yCAAwC;AACxC,MAAK;AACL;AACA;AACA,MAAK;AACL,6BAA4B;;AAE5B;AACA;AACA;AACA;AACA;AACA,+FAA8H;AAC9H;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,YAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iMAAgM;;AAEhM;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa,OAAO;AACpB,cAAa,OAAO;AACpB,eAAc,OAAO;AACrB;AACA;AACA;;AAEA;AACA;AACA,+KAA8K;AAC9K;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa,SAAS;AACtB,cAAa,SAAS;AACtB,eAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa,SAAS;AACtB,cAAa,SAAS;AACtB,eAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa,OAAO;AACpB,cAAa,SAAS;AACtB,eAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2FAA0F,aAAa;AACvG;AACA;;AAEA,yDAAwD;AACxD;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa,OAAO;AACpB;AACA;AACA;AACA,oBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA,iBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAa,OAAO;AACpB,eAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAK;AACL;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;ACntBA;;AAEA;AACA;AACA,EAAC;;AAED;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,uCAAsC,uCAAuC,kBAAkB;;AAE/F;AACA;;AAEA;AACA;;AAEA;;AAEA,oEAAmE,aAAa;AAChF;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA,MAAK;AACL;AACA,MAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gDAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW;AACX;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA0B,sBAAsB;AAChD;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,YAAW;AACX;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW;AACX;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,EAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qC;;;;;;;;;;;;;;ACnQA;;AAEA;AACA;AACA,EAAC;;AAED;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,uCAAsC,uCAAuC,kBAAkB;;AAE/F,oCAAmC,iDAAiD,gBAAgB,iBAAiB,OAAO,mBAAmB,4DAA4D,6DAA6D,wCAAwC,EAAE,EAAE,YAAY;;AAEhU,kDAAiD,0CAA0C,0DAA0D,EAAE;;AAEvJ,kDAAiD,aAAa,uFAAuF,EAAE,uFAAuF;;AAE9O,2CAA0C,+DAA+D,qGAAqG,EAAE,yEAAyE,eAAe,yEAAyE,EAAE,EAAE,uHAAuH;;AAE5e;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA,oEAAmE,aAAa;AAChF;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,MAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,EAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH,iCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA,qC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnLA;;AAEA;AACA;AACA,EAAC;;AAED,oDAAmD,gBAAgB,sBAAsB,OAAO,2BAA2B,0BAA0B,yDAAyD,2BAA2B,EAAE,EAAE,EAAE,eAAe;;AAE9P;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,uCAAsC,uCAAuC,kBAAkB;;AAE/F,oCAAmC,iDAAiD,gBAAgB,iBAAiB,OAAO,mBAAmB,4DAA4D,6DAA6D,wCAAwC,EAAE,EAAE,YAAY;;AAEhU,4CAA2C,kBAAkB,kCAAkC,qEAAqE,EAAE,EAAE,OAAO,kBAAkB,EAAE,YAAY;;AAE/M,kDAAiD,0CAA0C,0DAA0D,EAAE;;AAEvJ,kDAAiD,aAAa,uFAAuF,EAAE,uFAAuF;;AAE9O,2CAA0C,+DAA+D,qGAAqG,EAAE,yEAAyE,eAAe,yEAAyE,EAAE,EAAE,uHAAuH;;AAE5e;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mGAAkG;AAClG,UAAS;AACT;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA,QAAO;AACP,MAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA,QAAO;AACP;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA,QAAO;AACP;AACA;AACA,MAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW;AACX;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,EAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe;AACf;AACA,qBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT,QAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA,qC;;;;;;;;;;;;;;AC5WA;;AAEA;AACA;AACA,EAAC;;AAED,qGAAoG,mBAAmB,EAAE,mBAAmB,8HAA8H;;AAE1Q;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,uCAAsC,uCAAuC,kBAAkB;;AAE/F,oCAAmC,iDAAiD,gBAAgB,iBAAiB,OAAO,mBAAmB,4DAA4D,6DAA6D,wCAAwC,EAAE,EAAE,YAAY;;AAEhU,kDAAiD,0CAA0C,0DAA0D,EAAE;;AAEvJ,kDAAiD,aAAa,uFAAuF,EAAE,uFAAuF;;AAE9O,2CAA0C,+DAA+D,qGAAqG,EAAE,yEAAyE,eAAe,yEAAyE,EAAE,EAAE,uHAAuH;;AAE5e;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP,MAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,EAAC;;AAED;AACA;AACA;AACA;AACA,qC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClIA;;AAEA;AACA;AACA,EAAC;;AAED;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,uCAAsC,uCAAuC,kBAAkB;;AAE/F;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA,UAAS,kEAAkE;AAC3E;AACA;AACA;AACA;;AAEA;AACA,EAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qC;;;;;;;;;AC1EA;;AAEA;AACA;AACA,EAAC;;AAED;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,uCAAsC,uCAAuC,kBAAkB;;AAE/F;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,EAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvEA;;AAEA;AACA;AACA;AACA;AACA,gGAA0E;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA,iCAAgC,UAAU,EAAE;AAC5C,E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpBA;AACA;;AAEA;;AAEA;AACA;AACA,cAAa,wEAAwE,cAAc,aAAa,gBAAgB,eAAe,oEAAoE,eAAe,+BAA+B,aAAa,mBAAmB,kBAAkB,mBAAmB,wBAAwB,uDAAuD,cAAc,WAAW,mBAAmB;AACjc,iDAAgD,mBAAmB,SAAS,oBAAoB,mEAAmE,IAAI,0KAA0K,gCAAgC,gBAAgB,6FAA6F,uBAAuB;AACrf,SAAQ,QAAQ,sHAAsH,EAAE,iBAAiB,6CAA6C,2BAA2B,oEAAoE,gBAAgB,oBAAoB,qCAAqC,6EAA6E,0BAA0B,6BAA6B;AAClf,wBAAuB,sBAAsB,qBAAqB,8BAA8B,cAAc,8BAA8B,uCAAuC,KAAK,QAAQ,EAAE,SAAS,KAAK,aAAa,qGAAqG,mBAAmB,GAAG,8BAA8B,gBAAgB,mBAAmB,gBAAgB,wCAAwC,GAAG,2BAA2B,QAAQ;AACvf,YAAW,qKAAqK,WAAW,UAAU,wBAAwB,wBAAwB,kCAAkC,yDAAyD,wBAAwB,uCAAuC,wBAAwB,yBAAyB,2BAA2B,wBAAwB;AACnf,iEAAgE,8BAA8B,sBAAsB,uBAAuB,mCAAmC,2BAA2B,cAAc,2CAA2C,gGAAgG,+DAA+D;AACja,OAAM,SAAS,+BAA+B,gCAAgC,oNAAoN,mCAAmC;AACrU,GAAE,wBAAwB,yBAAyB,mLAAmL,2BAA2B,+IAA+I,6BAA6B,+BAA+B,uBAAuB,OAAO;AAC1e,oDAAmD,iCAAiC,iKAAiK,gOAAgO,6BAA6B,SAAS;AAC3f,iMAAgM,sEAAsE,GAAG,SAAS,+BAA+B,yDAAyD;AAC1W,4BAA2B,uBAAuB,8HAA8H,qBAAqB,0BAA0B,GAAG,SAAS,6BAA6B,oDAAoD,OAAO,6CAA6C,yBAAyB,2BAA2B,2BAA2B;AAC/b,2CAA0C,MAAM,+EAA+E,sIAAsI,6EAA6E,iBAAiB,iBAAiB;AACpX,4FAA2F,EAAE,iCAAiC,kEAAkE,EAAE,sCAAsC,gBAAgB,2DAA2D,EAAE,mDAAmD,yGAAyG;AACjd,8DAA6D,WAAW,iQAAiQ,QAAQ,mDAAmD,SAAS,EAAE,0CAA0C,gBAAgB;AACzc,0DAAyD,SAAS,EAAE,KAAK,aAAa,yEAAyE,sBAAsB,gDAAgD,uCAAuC,aAAa,0BAA0B,YAAY,YAAY,UAAU,uBAAuB,WAAW,uBAAuB,4BAA4B,4DAA4D,SAAS,OAAO,UAAU;AAChgB,EAAC,qGAAqG,qBAAqB,+DAA+D,mFAAmF,2BAA2B,yBAAyB,sBAAsB,uCAAuC,oCAAoC,uBAAuB,+BAA+B;AACxd,gGAA+F,EAAE,4CAA4C,cAAc,EAAE,0BAA0B,sDAAsD,eAAe,oDAAoD,iBAAiB,eAAe,IAAI,qDAAqD,uCAAuC,KAAK;AACrb,+DAA8D,kEAAkE,uCAAuC,EAAE,iBAAiB,+BAA+B,0CAA0C,KAAK,iBAAiB,iBAAiB,SAAS,iBAAiB,yCAAyC,iBAAiB,wCAAwC,YAAY,cAAc,0BAA0B,SAAS,2BAA2B;AAC9f,sIAAqI,oCAAoC,QAAQ,IAAI,8PAA8P,yDAAyD,QAAQ,IAAI;AACxf,oOAAmO,yDAAyD,UAAU,kBAAkB,2BAA2B,wDAAwD,6CAA6C,EAAE,KAAK,aAAa,mBAAmB;AAC/d,OAAM,6DAA6D,EAAE,KAAK,aAAa,gHAAgH,oDAAoD,4BAA4B,GAAG,qBAAqB,kFAAkF,qBAAqB,uBAAuB,iDAAiD;AAC9d,UAAS,kBAAkB,IAAI,2BAA2B,mDAAmD,8CAA8C,qCAAqC,4KAA4K,EAAE;AAC9W,wDAAuD,uCAAuC,qBAAqB,wCAAwC,6BAA6B,EAAE,KAAK,aAAa,iGAAiG,kBAAkB,YAAY,iHAAiH,QAAQ,SAAS,UAAU,gBAAgB,iBAAiB;AACxf,EAAC,oJAAoJ,2CAA2C,sBAAsB,0BAA0B,oNAAoN;AACpc,sGAAqG,gBAAgB,mBAAmB,aAAa,6GAA6G,aAAa,aAAa,EAAE,uBAAuB,+EAA+E,uBAAuB,uDAAuD,0DAA0D;AAC5gB,UAAS,2DAA2D,+FAA+F,GAAG,EAAE,aAAa,gCAAgC,6CAA6C,SAAS,+EAA+E,kGAAkG,GAAG,qBAAqB,WAAW,2BAA2B;AAC1f,WAAU,YAAY,2CAA2C,aAAa,8BAA8B,uBAAuB,kBAAkB,mBAAmB,uHAAuH,8BAA8B,qCAAqC,uBAAuB,oCAAoC,mBAAmB,sBAAsB,6BAA6B,mCAAmC;AACtgB,EAAC,qBAAqB,cAAc,EAAE,KAAK,aAAa,8DAA8D,sBAAsB,wBAAwB,uCAAuC,YAAY,oCAAoC,YAAY,+BAA+B,WAAW,4BAA4B,SAAS,oBAAoB,aAAa,4BAA4B,SAAS,qBAAqB,UAAU,aAAa;AACxc,uBAAsB,OAAO,gBAAgB,gBAAgB,EAAE,oEAAoE,wCAAwC,6CAA6C,4CAA4C,OAAO,sFAAsF,uCAAuC,sCAAsC,yCAAyC,0BAA0B;AACjf,aAAY,qDAAqD,EAAE,EAAE,uBAAuB,mHAAmH,uBAAuB,uDAAuD,KAAK,KAAK,oBAAoB;AAC3T;AACA,uSAAsS,oCAAoC,wFAAwF,gDAAgD;AACld,mEAAkE,4CAA4C,uFAAuF,oBAAoB,GAAG,EAAE,oBAAoB,EAAE,KAAK,aAAa,qDAAqD,wBAAwB,0DAA0D,uCAAuC,YAAY,0BAA0B,YAAY,YAAY,UAAU,uBAAuB,WAAW,uBAAuB;AACrjB,mBAAkB,EAAE,iEAAiE,qBAAqB,yEAAyE,uBAAuB,gDAAgD,wBAAwB,SAAS,EAAE,+BAA+B,2GAA2G,EAAE,KAAK,aAAa;AAC3b,gCAA+B,wBAAwB,YAAY,UAAU,+EAA+E,OAAO,kBAAkB,EAAE,qCAAqC,+GAA+G,yCAAyC,MAAM,cAAc,IAAI,eAAe,IAAI;AAC/Z;AACA,4UAA2U,yBAAyB,8DAA8D,kCAAkC,QAAQ,IAAI,4BAA4B;AAC5e,uHAAsH,qCAAqC,uDAAuD,qBAAqB,yFAAyF,4BAA4B,2BAA2B,4CAA4C,iDAAiD,mBAAmB,SAAS,yBAAyB;AACzgB,MAAK,yBAAyB,sGAAsG,QAAQ,IAAI,kMAAkM,SAAS,sBAAsB,iCAAiC,iBAAiB,sBAAsB,EAAE,6BAA6B,uBAAuB;AAC/e,YAAW,+CAA+C,QAAQ,IAAI,iGAAiG,wBAAwB,+EAA+E,EAAE,wBAAwB,0CAA0C,4FAA4F,SAAS,oBAAoB,yDAAyD,EAAE;AACtgB,cAAa,8CAA8C,uBAAuB,QAAQ,mBAAmB,OAAO,aAAa,4BAA4B,gCAAgC,gBAAgB,EAAE,uCAAuC,2DAA2D,IAAI,oDAAoD,uBAAuB,sBAAsB,kCAAkC,sCAAsC;AAC9d,6DAA4D,EAAE,KAAK,aAAa,sJAAsJ,sBAAsB,YAAY,qBAAqB,oBAAoB,kCAAkC,SAAS,+CAA+C,OAAO,cAAc,iBAAiB,kDAAkD,OAAO,MAAM,SAAS;AACzf,UAAS,eAAe,QAAQ,GAAG,QAAQ,UAAU,QAAQ,EAAE,4CAA4C,EAAE,6KAA6K,4CAA4C,0CAA0C,oDAAoD,SAAS,4BAA4B;AACzc,yCAAwC,IAAI,eAAe,IAAI,4MAA4M,aAAa,qBAAqB,6BAA6B,8BAA8B,kBAAkB,gBAAgB,0CAA0C,SAAS,qCAAqC,kBAAkB;AACpf,oBAAmB,sBAAsB,mCAAmC,yCAAyC,eAAe,IAAI,0EAA0E,8BAA8B,WAAW,6CAA6C,qCAAqC,6EAA6E,EAAE,qBAAqB;AACjb,SAAQ,YAAY,EAAE,qCAAqC,6FAA6F,qGAAqG,0BAA0B,gBAAgB,2IAA2I,iCAAiC,iBAAiB;AACpe,6LAA4L,EAAE,gBAAgB,wBAAwB,2CAA2C,YAAY,IAAI,iHAAiH,EAAE,uGAAuG;AAC3f,+CAA8C,IAAI,KAAK,aAAa,gBAAgB,uHAAuH,wCAAwC,QAAQ,4DAA4D,6BAA6B,4CAA4C,qEAAqE;AACrc,0CAAyC,iCAAiC,0CAA0C,0BAA0B,sFAAsF,GAAG,kCAAkC,oBAAoB,QAAQ,2CAA2C,2BAA2B,uBAAuB,OAAO,OAAO,UAAU,UAAU,UAAU,UAAU,aAAa,aAAa,gBAAgB,gBAAgB;AAClf,UAAS,gBAAgB,6CAA6C,6CAA6C,sBAAsB,sCAAsC,sCAAsC,kBAAkB,kBAAkB,0BAA0B,0BAA0B,GAAG,mEAAmE,kDAAkD,UAAU,8BAA8B;AAC7c,+DAA8D,cAAc,EAAE,mBAAmB,6BAA6B,UAAU,cAAc,cAAc,qDAAqD,oCAAoC,mCAAmC,uHAAuH,mEAAmE;AAC1d,4KAA2K,SAAS,qGAAqG,4BAA4B,iBAAiB,aAAa,iHAAiH,IAAI,iBAAiB,EAAE;AAC3d,IAAG,iBAAiB,qBAAqB,iBAAiB,QAAQ,WAAW,qBAAqB,IAAI,MAAM,gGAAgG,gBAAgB,iCAAiC,EAAE,2CAA2C,WAAW,SAAS,EAAE,iBAAiB,6DAA6D,yCAAyC,2DAA2D;AAClf,uBAAsB,EAAE,8CAA8C,yCAAyC,6BAA6B,aAAa,2CAA2C,IAAI,mDAAmD,oDAAoD,2EAA2E,6CAA6C;AACva,kMAAiM,GAAG,mCAAmC,oBAAoB,mBAAmB,6BAA6B,gFAAgF,2BAA2B,8FAA8F,EAAE;AACtf,kBAAiB,SAAS,EAAE,0CAA0C,0BAA0B,yCAAyC,mBAAmB,OAAO,aAAa,EAAE,+CAA+C,aAAa,wBAAwB,WAAW,EAAE,EAAE,wCAAwC,oCAAoC,wBAAwB,kBAAkB,EAAE,KAAK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9DlZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAiC,uDAAuD;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjBA,KAAMM,MAAM,mBAAAnG,CAAQ,eAAR,CAAZ;AACA,KAAMoG,cAAc,mBAAApG,CAAQ,uBAAR,CAApB;;AAEA;;;;;AAKAqG,SAAQnF,YAAR,GAAuB,SAASoF,2BAAT,CAAqCjF,WAArC,EAAkDkF,OAAlD,EAA2D;AAC9E,SAAIC,mBAAmBL,IAAI7D,KAAJ,CAAUV,OAAO6E,QAAP,CAAgBC,QAAhB,EAAV,CAAvB;;AAEA,SAAIC,oBAAoBP,YAAY9D,KAAZ,CAAkBkE,iBAAiBI,KAAnC,CAAxB;AACAD,uBAAkBE,EAAlB,GAAuBxE,KAAKE,SAAL,CAAelB,WAAf,CAAvB;;AAEA,SAAIyF,eAAe;AACfC,mBAAUP,iBAAiBO,QADZ;AAEfC,eAAMR,iBAAiBQ,IAFR;AAGfC,eAAMT,iBAAiBS,IAHR;AAIfC,mBAAUV,iBAAiBU,QAJZ;AAKfN,gBAAOD;AALQ,MAAnB;;AAQA,SAAIJ,OAAJ,EAAa;AACTY,iBAAQC,YAAR,CAAqB,IAArB,EAA2B,EAA3B,EAA+BjB,IAAIkB,MAAJ,CAAWP,YAAX,CAA/B;AACH,MAFD,MAEO;AACHK,iBAAQG,SAAR,CAAkB,IAAlB,EAAwB,EAAxB,EAA4BnB,IAAIkB,MAAJ,CAAWP,YAAX,CAA5B;AACH;AACJ,EAnBD;;AAqBAT,SAAQ/F,yBAAR,GAAoC,SAASiH,0BAAT,GAAgE;AAAA,SAA5Bd,QAA4B,uEAAjB7E,OAAO6E,QAAU;;AAChG,SAAIe,aAAarB,IAAI7D,KAAJ,CAAUmE,SAASC,QAAT,EAAV,CAAjB;AACA,SAAIe,0BAA0BrB,YAAY9D,KAAZ,CAAkBkF,WAAWZ,KAA7B,EAAoCC,EAAlE;AACA,YAAOY,0BAA0BpF,KAAKC,KAAL,CAAWmF,uBAAX,CAA1B,GAAgE,EAAvE;AACH,EAJD,C","file":"expressionAtlasBaselineExpression.bundle.js","sourcesContent":["import render from './src/baselineRenderer.jsx';\nexport {render};\n\n\n\n// WEBPACK FOOTER //\n// ./atlas_bundles/baseline-expression/index.js","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport BaselineRouter from './BaselineRouter.jsx';\n\nexport default function (\n    { atlasUrl = `https://www.ebi.ac.uk/gxa`, target = 'gxaBaselineTab', facetsTreeData,\n      geneQuery, conditionQuery, species }) {\n\n    ReactDOM.render(\n        <BaselineRouter atlasUrl={atlasUrl}\n                        facetsTreeData={facetsTreeData}\n                        geneQuery={geneQuery}\n                        conditionQuery={conditionQuery}\n                        species={species}\n        />,\n        document.getElementById(target)\n    );\n\n};\n\n\n\n// WEBPACK FOOTER //\n// ./atlas_bundles/baseline-expression/src/baselineRenderer.jsx","import React from 'react';\n\nimport EventEmitter from 'events';\n\nimport BaselineFacetsTree from './facets-tree/BaselineFacetsTree.jsx';\nimport BaselineHeatmaps from './BaselineHeatmaps.jsx';\nconst UrlManager = require('./urlManager.js');\n\nclass BaselineRouter extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        const anatomogramDataEventEmitter = new EventEmitter();\n        anatomogramDataEventEmitter.setMaxListeners(0);\n\n        const newQuerySelect = UrlManager.parseBaselineUrlParameter();\n        let newShowAnatomograms = false;\n\n        if (Object.keys(newQuerySelect).length === 0) {\n            Object.keys(this.props.facetsTreeData).forEach(species => {\n                const factorToPreselect =\n                    this.props.facetsTreeData[species].find(factor => factor.name.toLowerCase() === 'organism_part');\n                if (factorToPreselect) {\n                    this._addElementToObjectOfArrays(newQuerySelect, species, factorToPreselect.name);\n                    newShowAnatomograms = true;\n                } else if (this.props.facetsTreeData[species].length) {\n                    this._addElementToObjectOfArrays(\n                        newQuerySelect, species, this.props.facetsTreeData[species][0].name);\n                }\n            });\n        }\n\n        UrlManager.baselinePush(newQuerySelect, true);\n\n        this.state = {\n            facetsTreeData: this._transformPropsFacetsObjectToArray(newQuerySelect),\n            querySelect: newQuerySelect,\n            anatomogramDataEventEmitter: anatomogramDataEventEmitter,\n            showAnatomograms: newShowAnatomograms\n        };\n\n        this.setChecked = this._setChecked.bind(this);\n        this.toggleAnatomograms = this._toggleAnatomograms.bind(this);\n    }\n\n    componentDidMount () {\n        // TODO Consider using https://github.com/reactjs/react-router\n        window.addEventListener(\n            'popstate',\n            () => {\n                const newQuerySelect = UrlManager.parseBaselineUrlParameter();\n                this.setState({\n                    querySelect: newQuerySelect,\n                    facetsTreeData: this._transformPropsFacetsObjectToArray(newQuerySelect)\n                });\n            },\n            false);\n    }\n\n    render () {\n        const organismPartInQuerySelect = this._organismPartInQuerySelect();\n        const heatmaps = this._querySelectToHeatmaps();\n\n        return (\n            <div className=\"row\">\n                <div className=\"small-3 columns\">\n                    <BaselineFacetsTree\n                        facets = {this.state.facetsTreeData}\n                        setChecked = {this.setChecked}\n                        showAnatomograms = {this.state.showAnatomograms}\n                        toggleAnatomograms = {this.toggleAnatomograms}\n                        disableAnatomogramsCheckbox = {!organismPartInQuerySelect}\n                    />\n                </div>\n                <div className=\"small-9 columns\">\n                    <BaselineHeatmaps\n                        atlasUrl = {this.props.atlasUrl}\n                        geneQuery = {this.props.geneQuery}\n                        conditionQuery = {this.props.conditionQuery}\n                        heatmaps = {heatmaps}\n                        showAnatomograms = {this.state.showAnatomograms}\n                        anatomogramDataEventEmitter = {this.state.anatomogramDataEventEmitter}\n                    />\n                </div>\n            </div>\n        )\n    }\n\n    _setChecked (species, factorName, checked) {\n        const newQuerySelect = JSON.parse(JSON.stringify(this.state.querySelect));\n        const newFacetsTreeData = JSON.parse(JSON.stringify(this.state.facetsTreeData));\n\n        if (checked) {\n            this._addElementToObjectOfArrays(newQuerySelect, species, factorName);\n            newFacetsTreeData.find(facet => facet.facetName === species).facetItems\n                .find(factor => factor.name === factorName).checked = true;\n        } else {\n            this._removeElementFromObjectOfArrays(newQuerySelect, species, factorName);\n            newFacetsTreeData.find(facet => facet.facetName === species).facetItems\n                .find(factor => factor.name === factorName).checked = false;\n        }\n\n        UrlManager.baselinePush(newQuerySelect, false);\n        this.setState({\n            facetsTreeData: newFacetsTreeData,\n            querySelect: newQuerySelect\n        });\n    }\n\n    _addElementToObjectOfArrays (obj, arrayName, element) {\n        if (!obj[arrayName]) {\n            obj[arrayName] = [];\n        }\n        obj[arrayName].push(element);\n    }\n\n    _removeElementFromObjectOfArrays (obj, arrayName, element) {\n        delete obj[arrayName].splice(obj[arrayName].indexOf(element), 1);\n        if (obj[arrayName].length === 0) {\n            delete obj[arrayName];\n        }\n    }\n\n    _toggleAnatomograms() {\n        let newShowAnatomograms = !this.state.showAnatomograms;\n\n        this.setState({\n            showAnatomograms: newShowAnatomograms\n        })\n    }\n\n    _organismPartInQuerySelect(querySelect = this.state.querySelect) {\n        return Object.keys(querySelect)\n               .some(species => querySelect[species].some(facetItem => facetItem.toLowerCase() === 'organism_part'));\n    }\n\n    // Also syncs this.state.facetsTreeData with querySelect\n    _transformPropsFacetsObjectToArray (querySelect) {\n        return Object.keys(this.props.facetsTreeData).map(facetName => {\n            return {\n                facetName: facetName,\n                facetItems: this.props.facetsTreeData[facetName].map(facetItem => {\n                    return {\n                        name: facetItem.name,\n                        value: facetItem.value,\n                        checked: querySelect[facetName] ? querySelect[facetName].includes(facetItem.name) : false\n                    }\n                })\n            };\n        });\n    }\n\n    _querySelectToHeatmaps () {\n        /*\n         querySelect={ \"Homo sapiens\": [ \"CELL_LINE\", \"ORGANISM_PART\" ] }\n         ->\n         [ { \"species\": \"Homo sapiens\",\n             \"factor\": { \"name\": \"ORGANISM_PART\", \"value\": \"Organism part\"}\n           },\n           { \"species\": \"Homo sapiens\",\n             \"factor\": { \"name\": \"CELL_LINE\", \"value\": \"Cell line\" }\n         ]\n         */\n        let heatmaps = [];\n\n        // We iterate over facetsTreeData instead of over querySelect to get heatmaps in the same order as the facets\n        // tree\n        this.state.facetsTreeData.forEach(facet => {\n            facet.facetItems.forEach(facetItem => {\n                if (this.state.querySelect[facet.facetName] &&\n                    this.state.querySelect[facet.facetName].includes(facetItem.name)) {\n                    heatmaps.push({\n                        species: facet.facetName,\n                        factor: facetItem\n                    })\n                }\n            });\n        });\n\n        return heatmaps;\n    }\n}\n\nBaselineRouter.propTypes = {\n    atlasUrl: React.PropTypes.string.isRequired,\n    /*\n    {\n        \"homo sapiens\": [{ \"name\": \"ORGANISM_PART\", \"value\": \"Organism part\"},\n        { \"name\": \"CELL_LINE\", \"value\": \"Cell line\"}],\n        \"macaca mulatta\": [{ \"name\": \"ORGANISM_PART\", \"value\": \"Organism part\"}]\n    }\n     */\n    facetsTreeData: React.PropTypes.object.isRequired,\n    geneQuery: React.PropTypes.string.isRequired,\n    conditionQuery: React.PropTypes.string.isRequired,\n    species: React.PropTypes.string.isRequired\n};\n\nexport default BaselineRouter;\n\n\n\n// WEBPACK FOOTER //\n// ./atlas_bundles/baseline-expression/src/BaselineRouter.jsx","import React from 'react';\n\nimport Facet from './Facet.jsx';\n\nconst BaselineFacetsTree = props => {\n    const facets = props.facets.map(facet =>\n        <Facet\n            key = {facet.facetName}\n            facetName = {facet.facetName}\n            facetItems = {facet.facetItems}\n            setChecked = {props.setChecked}\n        />\n    );\n\n    return (\n        <div>\n            <input type=\"checkbox\" checked={props.showAnatomograms} onChange={props.toggleAnatomograms} disabled={props.disableAnatomogramsCheckbox}/>\n            <label className={props.disableAnatomogramsCheckbox ? \"gxaDisabledCheckbox\" : \"\"}>Show anatomograms</label>\n\n            <h4>Filter your results</h4>\n            {facets}\n        </div>\n    );\n};\n\nBaselineFacetsTree.propTypes = {\n    /*\n     [\n         {\n             facetName : \"homo sapiens\",\n             facetItems: [\n                 {\"name\": \"CELL_LINE\", \"value\": \"Cell line\", \"checked\": true},\n                 {\"name\": \"ORGANISM_PART\", \"value\": \"Tissue\", \"checked: true}\n             ]\n         },\n         {\n             facetName : \"mus musculus\",\n             facetItems\": [\n                 {\"name\": \"CELL_LINE\", \"value\": \"Cell line\", \"checked\": false},\n                 {\"name\": \"ORGANISM_PART\", \"value\": \"Tissue\", \"checked\": true}\n             ]\n         }\n     ]\n     */\n    facets: React.PropTypes.arrayOf(React.PropTypes.shape({\n        facetName: React.PropTypes.string.isRequired,\n        facetItems: React.PropTypes.arrayOf(React.PropTypes.shape({\n            name: React.PropTypes.string.isRequired,\n            value: React.PropTypes.string.isRequired,\n            checked: React.PropTypes.bool.isRequired\n        })).isRequired\n    })).isRequired,\n    setChecked: React.PropTypes.func.isRequired,\n    showAnatomograms: React.PropTypes.bool.isRequired,\n    toggleAnatomograms: React.PropTypes.func.isRequired,\n    disableAnatomogramsCheckbox: React.PropTypes.bool.isRequired\n};\n\nexport default BaselineFacetsTree;\n\n\n\n// WEBPACK FOOTER //\n// ./atlas_bundles/baseline-expression/src/facets-tree/BaselineFacetsTree.jsx","import React from 'react';\n\nimport FacetItem from './FacetItem.jsx';\n\nconst capitalizeFirstLetter = str => str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();\n\nconst Facet = props => {\n    const facetItems = props.facetItems.map(facetItem =>\n        <FacetItem\n            key={`${props.facetName}_${facetItem.name}`}\n            name={facetItem.name}\n            value={facetItem.value}\n            checked={facetItem.checked}\n            setChecked={(facetItemName, facetItemChecked) => { props.setChecked(props.facetName, facetItemName, facetItemChecked) }}\n        />\n    );\n\n    return (\n        <div className=\"margin-top-large\">\n            <h5>{capitalizeFirstLetter(props.facetName)}</h5>\n            {facetItems}\n        </div>\n    );\n};\n\nFacet.propTypes = {\n    facetName: React.PropTypes.string.isRequired,\n    facetItems: React.PropTypes.arrayOf(React.PropTypes.shape({\n        name: React.PropTypes.string.isRequired,\n        value: React.PropTypes.string.isRequired,\n        checked: React.PropTypes.bool.isRequired\n    })).isRequired,\n    setChecked: React.PropTypes.func.isRequired\n};\n\nexport default Facet;\n\n\n// WEBPACK FOOTER //\n// ./atlas_bundles/baseline-expression/src/facets-tree/Facet.jsx","import React from 'react';\n\nconst FacetItem = props =>\n    <div>\n        <input type=\"checkbox\" checked={props.checked} onChange={() => props.setChecked(props.name, !props.checked)} />\n        <label>{props.value}</label>\n    </div>;\n\nFacetItem.propTypes = {\n    name: React.PropTypes.string.isRequired,\n    value: React.PropTypes.string.isRequired,\n    checked: React.PropTypes.bool.isRequired,\n    setChecked: React.PropTypes.func.isRequired\n};\n\nexport default FacetItem;\n\n\n// WEBPACK FOOTER //\n// ./atlas_bundles/baseline-expression/src/facets-tree/FacetItem.jsx","import React from 'react';\nimport $ from 'jquery';\nimport 'jquery.browser';\n\nimport EventEmitter from 'events';\n\nimport BaselineHeatmapWidget from './BaselineHeatmapWidget.jsx';\n\nconst AtlasFeedback = require('expression-atlas-feedback');\n\nclass BaselineHeatmaps extends React.Component {\n\n    render() {\n        const atlasFeedback = $.browser.msie ?\n            null :\n            <AtlasFeedback\n                collectionCallback = {\n                    typeof window.ga === `function` ?\n                        (score, comment) => { window.ga('send','event','BaselineHeatmaps', 'feedback', comment, score) } :\n                        () => {}\n                }\n            />;\n\n        return (\n            <div>\n                {this.props.heatmaps.map(heatmap =>\n                    <BaselineHeatmapWidget\n                        key = {`${heatmap.species}_${heatmap.factor.name}`}\n                        showAnatomogram = {this.props.showAnatomograms}\n                        showHeatmapLabel = {this._hasMoreThanOneSpecies()}\n                        species = {heatmap.species}\n                        factor = {heatmap.factor}\n                        atlasUrl = {this.props.atlasUrl}\n                        geneQuery = {this.props.geneQuery}\n                        conditionQuery = {this.props.conditionQuery}\n                        anatomogramDataEventEmitter = {this.props.anatomogramDataEventEmitter}\n                    />\n                )}\n                {atlasFeedback}\n            </div>\n        );\n    }\n\n    _hasMoreThanOneSpecies () {\n        const uniqueSpecies = new Set();\n        this.props.heatmaps.forEach(heatmap => { uniqueSpecies.add(heatmap.species) });\n        return uniqueSpecies.size > 1;\n    }\n}\n\nBaselineHeatmaps.propTypes = {\n    atlasUrl: React.PropTypes.string.isRequired,\n    geneQuery: React.PropTypes.string.isRequired,\n    conditionQuery: React.PropTypes.string,\n    /*\n     [{\"species\":\"Homo sapiens\", \"factor\":\"CELL_LINE\"}, {\"species\":\"Mus musculus\", \"factor\":\"ORGANISM_PART\"}]\n     */\n    showAnatomograms: React.PropTypes.bool.isRequired,\n    heatmaps: React.PropTypes.arrayOf(React.PropTypes.shape({\n        species: React.PropTypes.string.isRequired,\n        factor: React.PropTypes.shape({\n            name: React.PropTypes.string.isRequired,\n            value: React.PropTypes.string.isRequired\n        })\n    })).isRequired,\n    anatomogramDataEventEmitter: React.PropTypes.instanceOf(EventEmitter).isRequired\n};\n\nexport default BaselineHeatmaps;\n\n\n\n// WEBPACK FOOTER //\n// ./atlas_bundles/baseline-expression/src/BaselineHeatmaps.jsx","/*!\n * jQuery Browser Plugin 0.1.0\n * https://github.com/gabceb/jquery-browser-plugin\n *\n * Original jquery-browser code Copyright 2005, 2015 jQuery Foundation, Inc. and other contributors\n * http://jquery.org/license\n *\n * Modifications Copyright 2015 Gabriel Cebrian\n * https://github.com/gabceb\n *\n * Released under the MIT license\n *\n * Date: 05-07-2015\n */\n/*global window: false */\n\n(function (factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['jquery'], function ($) {\n      return factory($);\n    });\n  } else if (typeof module === 'object' && typeof module.exports === 'object') {\n    // Node-like environment\n    module.exports = factory(require('jquery'));\n  } else {\n    // Browser globals\n    factory(window.jQuery);\n  }\n}(function(jQuery) {\n  \"use strict\";\n\n  function uaMatch( ua ) {\n    // If an UA is not provided, default to the current browser UA.\n    if ( ua === undefined ) {\n      ua = window.navigator.userAgent;\n    }\n    ua = ua.toLowerCase();\n\n    var match = /(edge)\\/([\\w.]+)/.exec( ua ) ||\n        /(opr)[\\/]([\\w.]+)/.exec( ua ) ||\n        /(chrome)[ \\/]([\\w.]+)/.exec( ua ) ||\n        /(iemobile)[\\/]([\\w.]+)/.exec( ua ) ||\n        /(version)(applewebkit)[ \\/]([\\w.]+).*(safari)[ \\/]([\\w.]+)/.exec( ua ) ||\n        /(webkit)[ \\/]([\\w.]+).*(version)[ \\/]([\\w.]+).*(safari)[ \\/]([\\w.]+)/.exec( ua ) ||\n        /(webkit)[ \\/]([\\w.]+)/.exec( ua ) ||\n        /(opera)(?:.*version|)[ \\/]([\\w.]+)/.exec( ua ) ||\n        /(msie) ([\\w.]+)/.exec( ua ) ||\n        ua.indexOf(\"trident\") >= 0 && /(rv)(?::| )([\\w.]+)/.exec( ua ) ||\n        ua.indexOf(\"compatible\") < 0 && /(mozilla)(?:.*? rv:([\\w.]+)|)/.exec( ua ) ||\n        [];\n\n    var platform_match = /(ipad)/.exec( ua ) ||\n        /(ipod)/.exec( ua ) ||\n        /(windows phone)/.exec( ua ) ||\n        /(iphone)/.exec( ua ) ||\n        /(kindle)/.exec( ua ) ||\n        /(silk)/.exec( ua ) ||\n        /(android)/.exec( ua ) ||\n        /(win)/.exec( ua ) ||\n        /(mac)/.exec( ua ) ||\n        /(linux)/.exec( ua ) ||\n        /(cros)/.exec( ua ) ||\n        /(playbook)/.exec( ua ) ||\n        /(bb)/.exec( ua ) ||\n        /(blackberry)/.exec( ua ) ||\n        [];\n\n    var browser = {},\n        matched = {\n          browser: match[ 5 ] || match[ 3 ] || match[ 1 ] || \"\",\n          version: match[ 2 ] || match[ 4 ] || \"0\",\n          versionNumber: match[ 4 ] || match[ 2 ] || \"0\",\n          platform: platform_match[ 0 ] || \"\"\n        };\n\n    if ( matched.browser ) {\n      browser[ matched.browser ] = true;\n      browser.version = matched.version;\n      browser.versionNumber = parseInt(matched.versionNumber, 10);\n    }\n\n    if ( matched.platform ) {\n      browser[ matched.platform ] = true;\n    }\n\n    // These are all considered mobile platforms, meaning they run a mobile browser\n    if ( browser.android || browser.bb || browser.blackberry || browser.ipad || browser.iphone ||\n      browser.ipod || browser.kindle || browser.playbook || browser.silk || browser[ \"windows phone\" ]) {\n      browser.mobile = true;\n    }\n\n    // These are all considered desktop platforms, meaning they run a desktop browser\n    if ( browser.cros || browser.mac || browser.linux || browser.win ) {\n      browser.desktop = true;\n    }\n\n    // Chrome, Opera 15+ and Safari are webkit based browsers\n    if ( browser.chrome || browser.opr || browser.safari ) {\n      browser.webkit = true;\n    }\n\n    // IE11 has a new token so we will assign it msie to avoid breaking changes\n    if ( browser.rv || browser.iemobile) {\n      var ie = \"msie\";\n\n      matched.browser = ie;\n      browser[ie] = true;\n    }\n\n    // Edge is officially known as Microsoft Edge, so rewrite the key to match\n    if ( browser.edge ) {\n      delete browser.edge;\n      var msedge = \"msedge\";\n\n      matched.browser = msedge;\n      browser[msedge] = true;\n    }\n\n    // Blackberry browsers are marked as Safari on BlackBerry\n    if ( browser.safari && browser.blackberry ) {\n      var blackberry = \"blackberry\";\n\n      matched.browser = blackberry;\n      browser[blackberry] = true;\n    }\n\n    // Playbook browsers are marked as Safari on Playbook\n    if ( browser.safari && browser.playbook ) {\n      var playbook = \"playbook\";\n\n      matched.browser = playbook;\n      browser[playbook] = true;\n    }\n\n    // BB10 is a newer OS version of BlackBerry\n    if ( browser.bb ) {\n      var bb = \"blackberry\";\n\n      matched.browser = bb;\n      browser[bb] = true;\n    }\n\n    // Opera 15+ are identified as opr\n    if ( browser.opr ) {\n      var opera = \"opera\";\n\n      matched.browser = opera;\n      browser[opera] = true;\n    }\n\n    // Stock Android browsers are marked as Safari on Android.\n    if ( browser.safari && browser.android ) {\n      var android = \"android\";\n\n      matched.browser = android;\n      browser[android] = true;\n    }\n\n    // Kindle browsers are marked as Safari on Kindle\n    if ( browser.safari && browser.kindle ) {\n      var kindle = \"kindle\";\n\n      matched.browser = kindle;\n      browser[kindle] = true;\n    }\n\n     // Kindle Silk browsers are marked as Safari on Kindle\n    if ( browser.safari && browser.silk ) {\n      var silk = \"silk\";\n\n      matched.browser = silk;\n      browser[silk] = true;\n    }\n\n    // Assign the name and platform variable\n    browser.name = matched.browser;\n    browser.platform = matched.platform;\n    return browser;\n  }\n\n  // Run the matching process, also assign the function to the returned object\n  // for manual, jQuery-free use if desired\n  window.jQBrowser = uaMatch( window.navigator.userAgent );\n  window.jQBrowser.uaMatch = uaMatch;\n\n  // Only assign to jQuery.browser if jQuery is loaded\n  if ( jQuery ) {\n    jQuery.browser = window.jQBrowser;\n  }\n\n  return window.jQBrowser;\n}));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./atlas_bundles/baseline-expression/~/jquery.browser/dist/jquery.browser.js\n// module id = 2102\n// module chunks = 2","import React from 'react';\n\nimport EventEmitter from 'events';\nimport {ExpressionAtlasHeatmap} from 'expression-atlas-heatmap-highcharts';\n\nconst capitalizeFirstLetter = str => str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();\n\nconst BaselineHeatmapWidget = props =>\n    <div>\n        <h5>{(props.showHeatmapLabel ? `${capitalizeFirstLetter(props.species)} — ` : '') + props.factor.value}</h5>\n        <ExpressionAtlasHeatmap atlasUrl={props.atlasUrl}\n                                query={{\n                                    gene: props.geneQuery,\n                                    condition: props.conditionQuery,\n                                    species: props.species,\n                                    source: props.factor.name\n                                }}\n                                isWidget={false}\n                                showAnatomogram={props.showAnatomogram}\n                                anatomogramDataEventEmitter={props.anatomogramDataEventEmitter}\n        />\n    </div>;\n\n\nBaselineHeatmapWidget.propTypes = {\n    atlasUrl: React.PropTypes.string.isRequired,\n    geneQuery: React.PropTypes.string.isRequired,\n    conditionQuery: React.PropTypes.string.isRequired,\n    species: React.PropTypes.string.isRequired,\n    factor: React.PropTypes.shape({\n        name: React.PropTypes.string.isRequired,\n        value: React.PropTypes.string.isRequired\n    }).isRequired,\n    showAnatomogram: React.PropTypes.bool.isRequired,\n    showHeatmapLabel: React.PropTypes.bool.isRequired,\n    anatomogramDataEventEmitter: React.PropTypes.instanceOf(EventEmitter).isRequired\n};\n\nexport default BaselineHeatmapWidget;\n\n\n\n// WEBPACK FOOTER //\n// ./atlas_bundles/baseline-expression/src/BaselineHeatmapWidget.jsx","var map = {\n\t\"./brain_selected.png\": 2353,\n\t\"./brain_unselected.png\": 2354,\n\t\"./female_selected.png\": 2355,\n\t\"./female_unselected.png\": 2356,\n\t\"./flower_parts_selected.png\": 2357,\n\t\"./flower_parts_unselected.png\": 2358,\n\t\"./male_selected.png\": 2359,\n\t\"./male_unselected.png\": 2360,\n\t\"./whole_plant_selected.png\": 2361,\n\t\"./whole_plant_unselected.png\": 2362\n};\nfunction webpackContext(req) {\n\treturn __webpack_require__(webpackContextResolve(req));\n};\nfunction webpackContextResolve(req) {\n\treturn map[req] || (function() { throw new Error(\"Cannot find module '\" + req + \"'.\") }());\n};\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 2352;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./atlas_bundles/baseline-expression/~/anatomogram/resources/icons ^\\.\\/.*selected\\.png$\n// module id = 2352\n// module chunks = 2","var map = {\n\t\"./anolis_carolinensis.svg\": 2364,\n\t\"./arabidopsis_thaliana_whole_plant.svg\": 2365,\n\t\"./brachypodium_distachyon_flower_parts.svg\": 2366,\n\t\"./brachypodium_distachyon_whole_plant.svg\": 2367,\n\t\"./chicken.svg\": 2368,\n\t\"./cow.svg\": 2369,\n\t\"./hordeum_vulgare_flower_parts.svg\": 2370,\n\t\"./hordeum_vulgare_whole_plant.svg\": 2371,\n\t\"./human_brain.svg\": 2372,\n\t\"./human_female.svg\": 2373,\n\t\"./human_male.svg\": 2374,\n\t\"./macaca_mulatta.svg\": 2375,\n\t\"./monodelphis_domestica.svg\": 2376,\n\t\"./mouse_brain.svg\": 2377,\n\t\"./mouse_female.svg\": 2378,\n\t\"./mouse_male.svg\": 2379,\n\t\"./oryza_sativa_flower_parts.svg\": 2380,\n\t\"./oryza_sativa_whole_plant.svg\": 2381,\n\t\"./papio_anubis.svg\": 2382,\n\t\"./rat.svg\": 2383,\n\t\"./solanum_lycopersicum_flower_parts.svg\": 2384,\n\t\"./solanum_lycopersicum_whole_plant.svg\": 2385,\n\t\"./solanum_tuberosum_whole_plant.svg\": 2386,\n\t\"./sorghum_bicolor_flower_parts.svg\": 2387,\n\t\"./sorghum_bicolor_whole_plant.svg\": 2388,\n\t\"./tetraodon_nigroviridis.svg\": 2389,\n\t\"./triticum_aestivum_flower_parts.svg\": 2390,\n\t\"./triticum_aestivum_whole_plant.svg\": 2391,\n\t\"./xenopus_tropicalis.svg\": 2392,\n\t\"./zea_mays_flower_parts.svg\": 2393,\n\t\"./zea_mays_whole_plant.svg\": 2394\n};\nfunction webpackContext(req) {\n\treturn __webpack_require__(webpackContextResolve(req));\n};\nfunction webpackContextResolve(req) {\n\treturn map[req] || (function() { throw new Error(\"Cannot find module '\" + req + \"'.\") }());\n};\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 2363;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./atlas_bundles/baseline-expression/~/anatomogram/resources/svg ^\\.\\/.*$\n// module id = 2363\n// module chunks = 2","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../css-loader/index.js!../../../../../node_modules/less-loader/index.js!./SelectionIcon.less\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!../../style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../css-loader/index.js!../../../../../node_modules/less-loader/index.js!./SelectionIcon.less\", function() {\n\t\t\tvar newContent = require(\"!!../../css-loader/index.js!../../../../../node_modules/less-loader/index.js!./SelectionIcon.less\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./atlas_bundles/baseline-expression/~/anatomogram/src/SelectionIcon.less\n// module id = 2395\n// module chunks = 2","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../css-loader/index.js!../../../../../node_modules/less-loader/index.js!./ContainerLayout.less\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!../../style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../css-loader/index.js!../../../../../node_modules/less-loader/index.js!./ContainerLayout.less\", function() {\n\t\t\tvar newContent = require(\"!!../../css-loader/index.js!../../../../../node_modules/less-loader/index.js!./ContainerLayout.less\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./atlas_bundles/baseline-expression/~/anatomogram/src/ContainerLayout.less\n// module id = 2399\n// module chunks = 2","'use strict';\n\nexports.__esModule = true;\n\nvar _createUncontrollable = require('./createUncontrollable');\n\nvar _createUncontrollable2 = _interopRequireDefault(_createUncontrollable);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar mixin = {\n  shouldComponentUpdate: function shouldComponentUpdate() {\n    //let the forceUpdate trigger the update\n    return !this._notifying;\n  }\n};\n\nfunction set(component, propName, handler, value, args) {\n  if (handler) {\n    component._notifying = true;\n    handler.call.apply(handler, [component, value].concat(args));\n    component._notifying = false;\n  }\n\n  component._values[propName] = value;\n\n  if (!component.unmounted) component.forceUpdate();\n}\n\nexports.default = (0, _createUncontrollable2.default)(mixin, set);\nmodule.exports = exports['default'];\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./atlas_bundles/baseline-expression/~/uncontrollable/index.js\n// module id = 2404\n// module chunks = 2","'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nexports.default = createUncontrollable;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _invariant = require('invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _utils = require('./utils');\n\nvar utils = _interopRequireWildcard(_utils);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction createUncontrollable(mixin, set) {\n\n  return uncontrollable;\n\n  function uncontrollable(Component, controlledValues) {\n    var _class, _temp;\n\n    var methods = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n\n    var displayName = Component.displayName || Component.name || 'Component',\n        basePropTypes = utils.getType(Component).propTypes,\n        isCompositeComponent = utils.isReactComponent(Component),\n        controlledProps = Object.keys(controlledValues),\n        propTypes;\n\n    var OMIT_PROPS = ['valueLink', 'checkedLink'].concat(controlledProps.map(utils.defaultKey));\n\n    propTypes = utils.uncontrolledPropTypes(controlledValues, basePropTypes, displayName);\n\n    (0, _invariant2.default)(isCompositeComponent || !methods.length, '[uncontrollable] stateless function components cannot pass through methods ' + 'because they have no associated instances. Check component: ' + displayName + ', ' + 'attempting to pass through methods: ' + methods.join(', '));\n\n    methods = utils.transform(methods, function (obj, method) {\n      obj[method] = function () {\n        var _refs$inner;\n\n        return (_refs$inner = this.refs.inner)[method].apply(_refs$inner, arguments);\n      };\n    }, {});\n\n    var component = (_temp = _class = function (_React$Component) {\n      _inherits(component, _React$Component);\n\n      function component() {\n        _classCallCheck(this, component);\n\n        return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));\n      }\n\n      component.prototype.shouldComponentUpdate = function shouldComponentUpdate() {\n        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        return !mixin.shouldComponentUpdate || mixin.shouldComponentUpdate.apply(this, args);\n      };\n\n      component.prototype.componentWillMount = function componentWillMount() {\n        var _this2 = this;\n\n        var props = this.props;\n\n        this._values = {};\n\n        controlledProps.forEach(function (key) {\n          _this2._values[key] = props[utils.defaultKey(key)];\n        });\n      };\n\n      /**\n       * If a prop switches from controlled to Uncontrolled\n       * reset its value to the defaultValue\n       */\n\n\n      component.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n        var _this3 = this;\n\n        var props = this.props;\n\n        if (mixin.componentWillReceiveProps) {\n          mixin.componentWillReceiveProps.call(this, nextProps);\n        }\n\n        controlledProps.forEach(function (key) {\n          if (utils.getValue(nextProps, key) === undefined && utils.getValue(props, key) !== undefined) {\n            _this3._values[key] = nextProps[utils.defaultKey(key)];\n          }\n        });\n      };\n\n      component.prototype.componentWillUnmount = function componentWillUnmount() {\n        this.unmounted = true;\n      };\n\n      component.prototype.getControlledInstance = function getControlledInstance() {\n        return this.refs.inner;\n      };\n\n      component.prototype.render = function render() {\n        var _this4 = this;\n\n        var newProps = {},\n            props = omitProps(this.props);\n\n        utils.each(controlledValues, function (handle, propName) {\n          var linkPropName = utils.getLinkName(propName),\n              prop = _this4.props[propName];\n\n          if (linkPropName && !isProp(_this4.props, propName) && isProp(_this4.props, linkPropName)) {\n            prop = _this4.props[linkPropName].value;\n          }\n\n          newProps[propName] = prop !== undefined ? prop : _this4._values[propName];\n\n          newProps[handle] = setAndNotify.bind(_this4, propName);\n        });\n\n        newProps = _extends({}, props, newProps, {\n          ref: isCompositeComponent ? 'inner' : null\n        });\n\n        return _react2.default.createElement(Component, newProps);\n      };\n\n      return component;\n    }(_react2.default.Component), _class.displayName = 'Uncontrolled(' + displayName + ')', _class.propTypes = propTypes, _temp);\n\n    _extends(component.prototype, methods);\n\n    component.ControlledComponent = Component;\n\n    /**\n     * useful when wrapping a Component and you want to control\n     * everything\n     */\n    component.deferControlTo = function (newComponent) {\n      var additions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var nextMethods = arguments[2];\n\n      return uncontrollable(newComponent, _extends({}, controlledValues, additions), nextMethods);\n    };\n\n    return component;\n\n    function setAndNotify(propName, value) {\n      var linkName = utils.getLinkName(propName),\n          handler = this.props[controlledValues[propName]];\n\n      if (linkName && isProp(this.props, linkName) && !handler) {\n        handler = this.props[linkName].requestChange;\n      }\n\n      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n        args[_key2 - 2] = arguments[_key2];\n      }\n\n      set(this, propName, handler, value, args);\n    }\n\n    function isProp(props, prop) {\n      return props[prop] !== undefined;\n    }\n\n    function omitProps(props) {\n      var result = {};\n\n      utils.each(props, function (value, key) {\n        if (OMIT_PROPS.indexOf(key) === -1) result[key] = value;\n      });\n\n      return result;\n    }\n  }\n}\nmodule.exports = exports['default'];\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./atlas_bundles/baseline-expression/~/uncontrollable/createUncontrollable.js\n// module id = 2405\n// module chunks = 2","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../css-loader/index.js!../../../../../../../../node_modules/less-loader/index.js!./Filter.less\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!../../../../../style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../../../../css-loader/index.js!../../../../../../../../node_modules/less-loader/index.js!./Filter.less\", function() {\n\t\t\tvar newContent = require(\"!!../../../../../css-loader/index.js!../../../../../../../../node_modules/less-loader/index.js!./Filter.less\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./atlas_bundles/baseline-expression/~/expression-atlas-heatmap-highcharts/src/manipulate/controls/filter/Filter.less\n// module id = 2591\n// module chunks = 2","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../css-loader/index.js!../../../../../../../node_modules/less-loader/index.js!./TooltipStateManager.less\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!../../../../style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../../../css-loader/index.js!../../../../../../../node_modules/less-loader/index.js!./TooltipStateManager.less\", function() {\n\t\t\tvar newContent = require(\"!!../../../../css-loader/index.js!../../../../../../../node_modules/less-loader/index.js!./TooltipStateManager.less\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./atlas_bundles/baseline-expression/~/expression-atlas-heatmap-highcharts/src/manipulate/tooltips/TooltipStateManager.less\n// module id = 2615\n// module chunks = 2","/**\n * @license Highcharts JS v5.0.10 (2017-03-31)\n *\n * (c) 2009-2016 Torstein Honsi\n *\n * License: www.highcharts.com/license\n */\n'use strict';\n(function(root, factory) {\n    if (typeof module === 'object' && module.exports) {\n        module.exports = root.document ?\n            factory(root) :\n            factory;\n    } else {\n        root.Highcharts = factory(root);\n    }\n}(typeof window !== 'undefined' ? window : this, function(win) {\n    var Highcharts = (function() {\n        /**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */\n        /* global window */\n        var win = window,\n            doc = win.document;\n\n        var SVG_NS = 'http://www.w3.org/2000/svg',\n            userAgent = (win.navigator && win.navigator.userAgent) || '',\n            svg = doc && doc.createElementNS && !!doc.createElementNS(SVG_NS, 'svg').createSVGRect,\n            isMS = /(edge|msie|trident)/i.test(userAgent) && !window.opera,\n            vml = !svg,\n            isFirefox = /Firefox/.test(userAgent),\n            hasBidiBug = isFirefox && parseInt(userAgent.split('Firefox/')[1], 10) < 4; // issue #38\n\n        var Highcharts = win.Highcharts ? win.Highcharts.error(16, true) : {\n            product: 'Highcharts',\n            version: '5.0.10',\n            deg2rad: Math.PI * 2 / 360,\n            doc: doc,\n            hasBidiBug: hasBidiBug,\n            hasTouch: doc && doc.documentElement.ontouchstart !== undefined,\n            isMS: isMS,\n            isWebKit: /AppleWebKit/.test(userAgent),\n            isFirefox: isFirefox,\n            isTouchDevice: /(Mobile|Android|Windows Phone)/.test(userAgent),\n            SVG_NS: SVG_NS,\n            chartCount: 0,\n            seriesTypes: {},\n            symbolSizes: {},\n            svg: svg,\n            vml: vml,\n            win: win,\n            charts: [],\n            marginNames: ['plotTop', 'marginRight', 'marginBottom', 'plotLeft'],\n            noop: function() {\n                return undefined;\n            }\n        };\n        return Highcharts;\n    }());\n    (function(H) {\n        /**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */\n        /* eslint max-len: [\"warn\", 80, 4] */\n\n        /**\n         * The Highcharts object is the placeholder for all other members, and various\n         * utility functions.\n         * @namespace Highcharts\n         */\n\n        var timers = [];\n\n        var charts = H.charts,\n            doc = H.doc,\n            win = H.win;\n\n        /**\n         * Provide error messages for debugging, with links to online explanation. This\n         * function can be overridden to provide custom error handling.\n         *\n         * @function #error\n         * @memberOf Highcharts\n         * @param {Number|String} code - The error code. See [errors.xml]{@link \n         *     https://github.com/highcharts/highcharts/blob/master/errors/errors.xml}\n         *     for available codes. If it is a string, the error message is printed\n         *     directly in the console.\n         * @param {Boolean} [stop=false] - Whether to throw an error or just log a \n         *     warning in the console.\n         */\n        H.error = function(code, stop) {\n            var msg = H.isNumber(code) ?\n                'Highcharts error #' + code + ': www.highcharts.com/errors/' + code :\n                code;\n            if (stop) {\n                throw new Error(msg);\n            }\n            // else ...\n            if (win.console) {\n                console.log(msg); // eslint-disable-line no-console\n            }\n        };\n\n        /**\n         * An animator object. One instance applies to one property (attribute or style\n         * prop) on one element.\n         *\n         * @constructor Fx\n         * @memberOf Highcharts\n         * @param {HTMLDOMElement|SVGElement} elem - The element to animate.\n         * @param {AnimationOptions} options - Animation options.\n         * @param {string} prop - The single attribute or CSS property to animate.\n         */\n        H.Fx = function(elem, options, prop) {\n            this.options = options;\n            this.elem = elem;\n            this.prop = prop;\n        };\n        H.Fx.prototype = {\n\n            /**\n             * Set the current step of a path definition on SVGElement.\n             *\n             * @function #dSetter\n             * @memberOf Highcharts.Fx\n             */\n            dSetter: function() {\n                var start = this.paths[0],\n                    end = this.paths[1],\n                    ret = [],\n                    now = this.now,\n                    i = start.length,\n                    startVal;\n\n                // Land on the final path without adjustment points appended in the ends\n                if (now === 1) {\n                    ret = this.toD;\n\n                } else if (i === end.length && now < 1) {\n                    while (i--) {\n                        startVal = parseFloat(start[i]);\n                        ret[i] =\n                            isNaN(startVal) ? // a letter instruction like M or L\n                            start[i] :\n                            now * (parseFloat(end[i] - startVal)) + startVal;\n\n                    }\n                    // If animation is finished or length not matching, land on right value\n                } else {\n                    ret = end;\n                }\n                this.elem.attr('d', ret, null, true);\n            },\n\n            /**\n             * Update the element with the current animation step.\n             *\n             * @function #update\n             * @memberOf Highcharts.Fx\n             */\n            update: function() {\n                var elem = this.elem,\n                    prop = this.prop, // if destroyed, it is null\n                    now = this.now,\n                    step = this.options.step;\n\n                // Animation setter defined from outside\n                if (this[prop + 'Setter']) {\n                    this[prop + 'Setter']();\n\n                    // Other animations on SVGElement\n                } else if (elem.attr) {\n                    if (elem.element) {\n                        elem.attr(prop, now, null, true);\n                    }\n\n                    // HTML styles, raw HTML content like container size\n                } else {\n                    elem.style[prop] = now + this.unit;\n                }\n\n                if (step) {\n                    step.call(elem, now, this);\n                }\n\n            },\n\n            /**\n             * Run an animation.\n             *\n             * @function #run\n             * @memberOf Highcharts.Fx\n             * @param {Number} from - The current value, value to start from.\n             * @param {Number} to - The end value, value to land on.\n             * @param {String} [unit] - The property unit, for example `px`.\n             * @returns {void}\n             */\n            run: function(from, to, unit) {\n                var self = this,\n                    timer = function(gotoEnd) {\n                        return timer.stopped ? false : self.step(gotoEnd);\n                    },\n                    i;\n\n                this.startTime = +new Date();\n                this.start = from;\n                this.end = to;\n                this.unit = unit;\n                this.now = this.start;\n                this.pos = 0;\n\n                timer.elem = this.elem;\n                timer.prop = this.prop;\n\n                if (timer() && timers.push(timer) === 1) {\n                    timer.timerId = setInterval(function() {\n\n                        for (i = 0; i < timers.length; i++) {\n                            if (!timers[i]()) {\n                                timers.splice(i--, 1);\n                            }\n                        }\n\n                        if (!timers.length) {\n                            clearInterval(timer.timerId);\n                        }\n                    }, 13);\n                }\n            },\n\n            /**\n             * Run a single step in the animation.\n             *\n             * @function #step\n             * @memberOf Highcharts.Fx\n             * @param   {Boolean} [gotoEnd] - Whether to go to the endpoint of the\n             *     animation after abort.\n             * @returns {Boolean} Returns `true` if animation continues.\n             */\n            step: function(gotoEnd) {\n                var t = +new Date(),\n                    ret,\n                    done,\n                    options = this.options,\n                    elem = this.elem,\n                    complete = options.complete,\n                    duration = options.duration,\n                    curAnim = options.curAnim,\n                    i;\n\n                if (elem.attr && !elem.element) { // #2616, element is destroyed\n                    ret = false;\n\n                } else if (gotoEnd || t >= duration + this.startTime) {\n                    this.now = this.end;\n                    this.pos = 1;\n                    this.update();\n\n                    curAnim[this.prop] = true;\n\n                    done = true;\n                    for (i in curAnim) {\n                        if (curAnim[i] !== true) {\n                            done = false;\n                        }\n                    }\n\n                    if (done && complete) {\n                        complete.call(elem);\n                    }\n                    ret = false;\n\n                } else {\n                    this.pos = options.easing((t - this.startTime) / duration);\n                    this.now = this.start + ((this.end - this.start) * this.pos);\n                    this.update();\n                    ret = true;\n                }\n                return ret;\n            },\n\n            /**\n             * Prepare start and end values so that the path can be animated one to one.\n             *\n             * @function #initPath\n             * @memberOf Highcharts.Fx\n             * @param {SVGElement} elem - The SVGElement item.\n             * @param {String} fromD - Starting path definition.\n             * @param {Array} toD - Ending path definition.\n             * @returns {Array} An array containing start and end paths in array form\n             * so that they can be animated in parallel.\n             */\n            initPath: function(elem, fromD, toD) {\n                fromD = fromD || '';\n                var shift,\n                    startX = elem.startX,\n                    endX = elem.endX,\n                    bezier = fromD.indexOf('C') > -1,\n                    numParams = bezier ? 7 : 3,\n                    fullLength,\n                    slice,\n                    i,\n                    start = fromD.split(' '),\n                    end = toD.slice(), // copy\n                    isArea = elem.isArea,\n                    positionFactor = isArea ? 2 : 1,\n                    reverse;\n\n                /**\n                 * In splines make moveTo and lineTo points have six parameters like\n                 * bezier curves, to allow animation one-to-one.\n                 */\n                function sixify(arr) {\n                    var isOperator,\n                        nextIsOperator;\n                    i = arr.length;\n                    while (i--) {\n\n                        // Fill in dummy coordinates only if the next operator comes\n                        // three places behind (#5788)\n                        isOperator = arr[i] === 'M' || arr[i] === 'L';\n                        nextIsOperator = /[a-zA-Z]/.test(arr[i + 3]);\n                        if (isOperator && nextIsOperator) {\n                            arr.splice(\n                                i + 1, 0,\n                                arr[i + 1], arr[i + 2],\n                                arr[i + 1], arr[i + 2]\n                            );\n                        }\n                    }\n                }\n\n                /**\n                 * Insert an array at the given position of another array\n                 */\n                function insertSlice(arr, subArr, index) {\n                    [].splice.apply(\n                        arr, [index, 0].concat(subArr)\n                    );\n                }\n\n                /**\n                 * If shifting points, prepend a dummy point to the end path. \n                 */\n                function prepend(arr, other) {\n                    while (arr.length < fullLength) {\n\n                        // Move to, line to or curve to?\n                        arr[0] = other[fullLength - arr.length];\n\n                        // Prepend a copy of the first point\n                        insertSlice(arr, arr.slice(0, numParams), 0);\n\n                        // For areas, the bottom path goes back again to the left, so we\n                        // need to append a copy of the last point.\n                        if (isArea) {\n                            insertSlice(\n                                arr,\n                                arr.slice(arr.length - numParams), arr.length\n                            );\n                            i--;\n                        }\n                    }\n                    arr[0] = 'M';\n                }\n\n                /**\n                 * Copy and append last point until the length matches the end length\n                 */\n                function append(arr, other) {\n                    var i = (fullLength - arr.length) / numParams;\n                    while (i > 0 && i--) {\n\n                        // Pull out the slice that is going to be appended or inserted.\n                        // In a line graph, the positionFactor is 1, and the last point\n                        // is sliced out. In an area graph, the positionFactor is 2,\n                        // causing the middle two points to be sliced out, since an area\n                        // path starts at left, follows the upper path then turns and\n                        // follows the bottom back. \n                        slice = arr.slice().splice(\n                            (arr.length / positionFactor) - numParams,\n                            numParams * positionFactor\n                        );\n\n                        // Move to, line to or curve to?\n                        slice[0] = other[fullLength - numParams - (i * numParams)];\n\n                        // Disable first control point\n                        if (bezier) {\n                            slice[numParams - 6] = slice[numParams - 2];\n                            slice[numParams - 5] = slice[numParams - 1];\n                        }\n\n                        // Now insert the slice, either in the middle (for areas) or at\n                        // the end (for lines)\n                        insertSlice(arr, slice, arr.length / positionFactor);\n\n                        if (isArea) {\n                            i--;\n                        }\n                    }\n                }\n\n                if (bezier) {\n                    sixify(start);\n                    sixify(end);\n                }\n\n                // For sideways animation, find out how much we need to shift to get the\n                // start path Xs to match the end path Xs.\n                if (startX && endX) {\n                    for (i = 0; i < startX.length; i++) {\n                        // Moving left, new points coming in on right\n                        if (startX[i] === endX[0]) {\n                            shift = i;\n                            break;\n                            // Moving right\n                        } else if (startX[0] ===\n                            endX[endX.length - startX.length + i]) {\n                            shift = i;\n                            reverse = true;\n                            break;\n                        }\n                    }\n                    if (shift === undefined) {\n                        start = [];\n                    }\n                }\n\n                if (start.length && H.isNumber(shift)) {\n\n                    // The common target length for the start and end array, where both \n                    // arrays are padded in opposite ends\n                    fullLength = end.length + shift * positionFactor * numParams;\n\n                    if (!reverse) {\n                        prepend(end, start);\n                        append(start, end);\n                    } else {\n                        prepend(start, end);\n                        append(end, start);\n                    }\n                }\n\n                return [start, end];\n            }\n        }; // End of Fx prototype\n\n\n        /**\n         * Utility function to extend an object with the members of another.\n         *\n         * @function #extend\n         * @memberOf Highcharts\n         * @param {Object} a - The object to be extended.\n         * @param {Object} b - The object to add to the first one.\n         * @returns {Object} Object a, the original object.\n         */\n        H.extend = function(a, b) {\n            var n;\n            if (!a) {\n                a = {};\n            }\n            for (n in b) {\n                a[n] = b[n];\n            }\n            return a;\n        };\n\n        /**\n         * Utility function to deep merge two or more objects and return a third object.\n         * If the first argument is true, the contents of the second object is copied\n         * into the first object. The merge function can also be used with a single \n         * object argument to create a deep copy of an object.\n         *\n         * @function #merge\n         * @memberOf Highcharts\n         * @param {Boolean} [extend] - Whether to extend the left-side object (a) or\n                  return a whole new object.\n         * @param {Object} a - The first object to extend. When only this is given, the\n                  function returns a deep copy.\n         * @param {...Object} [n] - An object to merge into the previous one.\n         * @returns {Object} - The merged object. If the first argument is true, the \n         * return is the same as the second argument.\n         */\n        H.merge = function() {\n            var i,\n                args = arguments,\n                len,\n                ret = {},\n                doCopy = function(copy, original) {\n                    var value, key;\n\n                    // An object is replacing a primitive\n                    if (typeof copy !== 'object') {\n                        copy = {};\n                    }\n\n                    for (key in original) {\n                        if (original.hasOwnProperty(key)) {\n                            value = original[key];\n\n                            // Copy the contents of objects, but not arrays or DOM nodes\n                            if (H.isObject(value, true) &&\n                                key !== 'renderTo' &&\n                                typeof value.nodeType !== 'number') {\n                                copy[key] = doCopy(copy[key] || {}, value);\n\n                                // Primitives and arrays are copied over directly\n                            } else {\n                                copy[key] = original[key];\n                            }\n                        }\n                    }\n                    return copy;\n                };\n\n            // If first argument is true, copy into the existing object. Used in\n            // setOptions.\n            if (args[0] === true) {\n                ret = args[1];\n                args = Array.prototype.slice.call(args, 2);\n            }\n\n            // For each argument, extend the return\n            len = args.length;\n            for (i = 0; i < len; i++) {\n                ret = doCopy(ret, args[i]);\n            }\n\n            return ret;\n        };\n\n        /**\n         * Shortcut for parseInt\n         * @ignore\n         * @param {Object} s\n         * @param {Number} mag Magnitude\n         */\n        H.pInt = function(s, mag) {\n            return parseInt(s, mag || 10);\n        };\n\n        /**\n         * Utility function to check for string type.\n         *\n         * @function #isString\n         * @memberOf Highcharts\n         * @param {Object} s - The item to check.\n         * @returns {Boolean} - True if the argument is a string.\n         */\n        H.isString = function(s) {\n            return typeof s === 'string';\n        };\n\n        /**\n         * Utility function to check if an item is an array.\n         *\n         * @function #isArray\n         * @memberOf Highcharts\n         * @param {Object} obj - The item to check.\n         * @returns {Boolean} - True if the argument is an array.\n         */\n        H.isArray = function(obj) {\n            var str = Object.prototype.toString.call(obj);\n            return str === '[object Array]' || str === '[object Array Iterator]';\n        };\n\n        /**\n         * Utility function to check if an item is of type object.\n         *\n         * @function #isObject\n         * @memberOf Highcharts\n         * @param {Object} obj - The item to check.\n         * @param {Boolean} [strict=false] - Also checks that the object is not an\n         *    array.\n         * @returns {Boolean} - True if the argument is an object.\n         */\n        H.isObject = function(obj, strict) {\n            return obj && typeof obj === 'object' && (!strict || !H.isArray(obj));\n        };\n\n        /**\n         * Utility function to check if an item is of type number.\n         *\n         * @function #isNumber\n         * @memberOf Highcharts\n         * @param {Object} n - The item to check.\n         * @returns {Boolean} - True if the item is a number and is not NaN.\n         */\n        H.isNumber = function(n) {\n            return typeof n === 'number' && !isNaN(n);\n        };\n\n        /**\n         * Remove the last occurence of an item from an array.\n         *\n         * @function #erase\n         * @memberOf Highcharts\n         * @param {Array} arr - The array.\n         * @param {*} item - The item to remove.\n         */\n        H.erase = function(arr, item) {\n            var i = arr.length;\n            while (i--) {\n                if (arr[i] === item) {\n                    arr.splice(i, 1);\n                    break;\n                }\n            }\n        };\n\n        /**\n         * Check if an object is null or undefined.\n         *\n         * @function #defined\n         * @memberOf Highcharts\n         * @param {Object} obj - The object to check.\n         * @returns {Boolean} - False if the object is null or undefined, otherwise\n         *        true.\n         */\n        H.defined = function(obj) {\n            return obj !== undefined && obj !== null;\n        };\n\n        /**\n         * Set or get an attribute or an object of attributes. To use as a setter, pass\n         * a key and a value, or let the second argument be a collection of keys and\n         * values. To use as a getter, pass only a string as the second argument.\n         *\n         * @function #attr\n         * @memberOf Highcharts\n         * @param {Object} elem - The DOM element to receive the attribute(s).\n         * @param {String|Object} [prop] - The property or an object of key-value pairs.\n         * @param {String} [value] - The value if a single property is set.\n         * @returns {*} When used as a getter, return the value.\n         */\n        H.attr = function(elem, prop, value) {\n            var key,\n                ret;\n\n            // if the prop is a string\n            if (H.isString(prop)) {\n                // set the value\n                if (H.defined(value)) {\n                    elem.setAttribute(prop, value);\n\n                    // get the value\n                } else if (elem && elem.getAttribute) {\n                    ret = elem.getAttribute(prop);\n                }\n\n                // else if prop is defined, it is a hash of key/value pairs\n            } else if (H.defined(prop) && H.isObject(prop)) {\n                for (key in prop) {\n                    elem.setAttribute(key, prop[key]);\n                }\n            }\n            return ret;\n        };\n\n        /**\n         * Check if an element is an array, and if not, make it into an array.\n         *\n         * @function #splat\n         * @memberOf Highcharts\n         * @param obj {*} - The object to splat.\n         * @returns {Array} The produced or original array.\n         */\n        H.splat = function(obj) {\n            return H.isArray(obj) ? obj : [obj];\n        };\n\n        /**\n         * Set a timeout if the delay is given, otherwise perform the function\n         * synchronously.\n         *\n         * @function #syncTimeout\n         * @memberOf Highcharts\n         * @param   {Function} fn - The function callback.\n         * @param   {Number}   delay - Delay in milliseconds.\n         * @param   {Object}   [context] - The context.\n         * @returns {Number} An identifier for the timeout that can later be cleared\n         * with clearTimeout.\n         */\n        H.syncTimeout = function(fn, delay, context) {\n            if (delay) {\n                return setTimeout(fn, delay, context);\n            }\n            fn.call(0, context);\n        };\n\n\n        /**\n         * Return the first value that is not null or undefined.\n         *\n         * @function #pick\n         * @memberOf Highcharts\n         * @param {...*} items - Variable number of arguments to inspect.\n         * @returns {*} The value of the first argument that is not null or undefined.\n         */\n        H.pick = function() {\n            var args = arguments,\n                i,\n                arg,\n                length = args.length;\n            for (i = 0; i < length; i++) {\n                arg = args[i];\n                if (arg !== undefined && arg !== null) {\n                    return arg;\n                }\n            }\n        };\n\n        /**\n         * @typedef {Object} CSSObject - A style object with camel case property names.\n         * The properties can be whatever styles are supported on the given SVG or HTML\n         * element.\n         * @example\n         * {\n         *    fontFamily: 'monospace',\n         *    fontSize: '1.2em'\n         * }\n         */\n        /**\n         * Set CSS on a given element.\n         *\n         * @function #css\n         * @memberOf Highcharts\n         * @param {HTMLDOMElement} el - A HTML DOM element.\n         * @param {CSSObject} styles - Style object with camel case property names.\n         * @returns {void}\n         */\n        H.css = function(el, styles) {\n            if (H.isMS && !H.svg) { // #2686\n                if (styles && styles.opacity !== undefined) {\n                    styles.filter = 'alpha(opacity=' + (styles.opacity * 100) + ')';\n                }\n            }\n            H.extend(el.style, styles);\n        };\n\n        /**\n         * A HTML DOM element.\n         * @typedef {Object} HTMLDOMElement\n         */\n\n        /**\n         * Utility function to create an HTML element with attributes and styles.\n         *\n         * @function #createElement\n         * @memberOf Highcharts\n         * @param {String} tag - The HTML tag.\n         * @param {Object} [attribs] - Attributes as an object of key-value pairs.\n         * @param {CSSObject} [styles] - Styles as an object of key-value pairs.\n         * @param {Object} [parent] - The parent HTML object.\n         * @param {Boolean} [nopad=false] - If true, remove all padding, border and\n         *    margin.\n         * @returns {HTMLDOMElement} The created DOM element.\n         */\n        H.createElement = function(tag, attribs, styles, parent, nopad) {\n            var el = doc.createElement(tag),\n                css = H.css;\n            if (attribs) {\n                H.extend(el, attribs);\n            }\n            if (nopad) {\n                css(el, {\n                    padding: 0,\n                    border: 'none',\n                    margin: 0\n                });\n            }\n            if (styles) {\n                css(el, styles);\n            }\n            if (parent) {\n                parent.appendChild(el);\n            }\n            return el;\n        };\n\n        /**\n         * Extend a prototyped class by new members.\n         *\n         * @function #extendClass\n         * @memberOf Highcharts\n         * @param {Object} parent - The parent prototype to inherit.\n         * @param {Object} members - A collection of prototype members to add or\n         *        override compared to the parent prototype.\n         * @returns {Object} A new prototype.\n         */\n        H.extendClass = function(parent, members) {\n            var object = function() {};\n            object.prototype = new parent(); // eslint-disable-line new-cap\n            H.extend(object.prototype, members);\n            return object;\n        };\n\n        /**\n         * Left-pad a string to a given length by adding a character repetetively.\n         *\n         * @function #pad\n         * @memberOf Highcharts\n         * @param {Number} number - The input string or number.\n         * @param {Number} length - The desired string length.\n         * @param {String} [padder=0] - The character to pad with.\n         * @returns {String} The padded string.\n         */\n        H.pad = function(number, length, padder) {\n            return new Array((length || 2) + 1 -\n                String(number).length).join(padder || 0) + number;\n        };\n\n        /**\n         * @typedef {Number|String} RelativeSize - If a number is given, it defines the\n         *    pixel length. If a percentage string is given, like for example `'50%'`,\n         *    the setting defines a length relative to a base size, for example the size\n         *    of a container.\n         */\n        /**\n         * Return a length based on either the integer value, or a percentage of a base.\n         *\n         * @function #relativeLength\n         * @memberOf Highcharts\n         * @param {RelativeSize} value - A percentage string or a number.\n         * @param {Number} base - The full length that represents 100%.\n         * @returns {Number} The computed length.\n         */\n        H.relativeLength = function(value, base) {\n            return (/%$/).test(value) ?\n                base * parseFloat(value) / 100 :\n                parseFloat(value);\n        };\n\n        /**\n         * Wrap a method with extended functionality, preserving the original function.\n         *\n         * @function #wrap\n         * @memberOf Highcharts\n         * @param {Object} obj - The context object that the method belongs to. In real\n         *        cases, this is often a prototype.\n         * @param {String} method - The name of the method to extend.\n         * @param {Function} func - A wrapper function callback. This function is called\n         *        with the same arguments as the original function, except that the\n         *        original function is unshifted and passed as the first argument.\n         * @returns {void}\n         */\n        H.wrap = function(obj, method, func) {\n            var proceed = obj[method];\n            obj[method] = function() {\n                var args = Array.prototype.slice.call(arguments),\n                    outerArgs = arguments,\n                    ctx = this,\n                    ret;\n                ctx.proceed = function() {\n                    proceed.apply(ctx, arguments.length ? arguments : outerArgs);\n                };\n                args.unshift(proceed);\n                ret = func.apply(this, args);\n                ctx.proceed = null;\n                return ret;\n            };\n        };\n\n        /**\n         * Get the time zone offset based on the current timezone information as set in\n         * the global options.\n         *\n         * @function #getTZOffset\n         * @memberOf Highcharts\n         * @param  {Number} timestamp - The JavaScript timestamp to inspect.\n         * @return {Number} - The timezone offset in minutes compared to UTC.\n         */\n        H.getTZOffset = function(timestamp) {\n            var d = H.Date;\n            return ((d.hcGetTimezoneOffset && d.hcGetTimezoneOffset(timestamp)) ||\n                d.hcTimezoneOffset || 0) * 60000;\n        };\n\n        /**\n         * Format a date, based on the syntax for PHP's [strftime]{@link\n         * http://www.php.net/manual/en/function.strftime.php} function.\n         *\n         * @function #dateFormat\n         * @memberOf Highcharts\n         * @param {String} format - The desired format where various time\n         *        representations are prefixed with %.\n         * @param {Number} timestamp - The JavaScript timestamp.\n         * @param {Boolean} [capitalize=false] - Upper case first letter in the return.\n         * @returns {String} The formatted date.\n         */\n        H.dateFormat = function(format, timestamp, capitalize) {\n            if (!H.defined(timestamp) || isNaN(timestamp)) {\n                return H.defaultOptions.lang.invalidDate || '';\n            }\n            format = H.pick(format, '%Y-%m-%d %H:%M:%S');\n\n            var D = H.Date,\n                date = new D(timestamp - H.getTZOffset(timestamp)),\n                key, // used in for constuct below\n                // get the basic time values\n                hours = date[D.hcGetHours](),\n                day = date[D.hcGetDay](),\n                dayOfMonth = date[D.hcGetDate](),\n                month = date[D.hcGetMonth](),\n                fullYear = date[D.hcGetFullYear](),\n                lang = H.defaultOptions.lang,\n                langWeekdays = lang.weekdays,\n                shortWeekdays = lang.shortWeekdays,\n                pad = H.pad,\n\n                // List all format keys. Custom formats can be added from the outside. \n                replacements = H.extend({\n\n                    //-- Day\n                    // Short weekday, like 'Mon'\n                    'a': shortWeekdays ?\n                        shortWeekdays[day] : langWeekdays[day].substr(0, 3),\n                    // Long weekday, like 'Monday'\n                    'A': langWeekdays[day],\n                    // Two digit day of the month, 01 to 31\n                    'd': pad(dayOfMonth),\n                    // Day of the month, 1 through 31\n                    'e': pad(dayOfMonth, 2, ' '),\n                    'w': day,\n\n                    // Week (none implemented)\n                    //'W': weekNumber(),\n\n                    //-- Month\n                    // Short month, like 'Jan'\n                    'b': lang.shortMonths[month],\n                    // Long month, like 'January'\n                    'B': lang.months[month],\n                    // Two digit month number, 01 through 12\n                    'm': pad(month + 1),\n\n                    //-- Year\n                    // Two digits year, like 09 for 2009\n                    'y': fullYear.toString().substr(2, 2),\n                    // Four digits year, like 2009\n                    'Y': fullYear,\n\n                    //-- Time\n                    // Two digits hours in 24h format, 00 through 23\n                    'H': pad(hours),\n                    // Hours in 24h format, 0 through 23\n                    'k': hours,\n                    // Two digits hours in 12h format, 00 through 11\n                    'I': pad((hours % 12) || 12),\n                    // Hours in 12h format, 1 through 12\n                    'l': (hours % 12) || 12,\n                    // Two digits minutes, 00 through 59\n                    'M': pad(date[D.hcGetMinutes]()),\n                    // Upper case AM or PM\n                    'p': hours < 12 ? 'AM' : 'PM',\n                    // Lower case AM or PM\n                    'P': hours < 12 ? 'am' : 'pm',\n                    // Two digits seconds, 00 through  59\n                    'S': pad(date.getSeconds()),\n                    // Milliseconds (naming from Ruby)\n                    'L': pad(Math.round(timestamp % 1000), 3)\n                }, H.dateFormats);\n\n\n            // Do the replaces\n            for (key in replacements) {\n                // Regex would do it in one line, but this is faster\n                while (format.indexOf('%' + key) !== -1) {\n                    format = format.replace(\n                        '%' + key,\n                        typeof replacements[key] === 'function' ?\n                        replacements[key](timestamp) :\n                        replacements[key]\n                    );\n                }\n            }\n\n            // Optionally capitalize the string and return\n            return capitalize ?\n                format.substr(0, 1).toUpperCase() + format.substr(1) :\n                format;\n        };\n\n        /**\n         * Format a single variable. Similar to sprintf, without the % prefix.\n         *\n         * @example\n         * formatSingle('.2f', 5); // => '5.00'.\n         *\n         * @function #formatSingle\n         * @memberOf Highcharts\n         * @param {String} format The format string.\n         * @param {*} val The value.\n         * @returns {String} The formatted representation of the value.\n         */\n        H.formatSingle = function(format, val) {\n            var floatRegex = /f$/,\n                decRegex = /\\.([0-9])/,\n                lang = H.defaultOptions.lang,\n                decimals;\n\n            if (floatRegex.test(format)) { // float\n                decimals = format.match(decRegex);\n                decimals = decimals ? decimals[1] : -1;\n                if (val !== null) {\n                    val = H.numberFormat(\n                        val,\n                        decimals,\n                        lang.decimalPoint,\n                        format.indexOf(',') > -1 ? lang.thousandsSep : ''\n                    );\n                }\n            } else {\n                val = H.dateFormat(format, val);\n            }\n            return val;\n        };\n\n        /**\n         * Format a string according to a subset of the rules of Python's String.format\n         * method.\n         *\n         * @function #format\n         * @memberOf Highcharts\n         * @param {String} str The string to format.\n         * @param {Object} ctx The context, a collection of key-value pairs where each\n         *        key is replaced by its value.\n         * @returns {String} The formatted string.\n         *\n         * @example\n         * var s = Highcharts.format(\n         *     'The {color} fox was {len:.2f} feet long',\n         *     { color: 'red', len: Math.PI }\n         * );\n         * // => The red fox was 3.14 feet long\n         */\n        H.format = function(str, ctx) {\n            var splitter = '{',\n                isInside = false,\n                segment,\n                valueAndFormat,\n                path,\n                i,\n                len,\n                ret = [],\n                val,\n                index;\n\n            while (str) {\n                index = str.indexOf(splitter);\n                if (index === -1) {\n                    break;\n                }\n\n                segment = str.slice(0, index);\n                if (isInside) { // we're on the closing bracket looking back\n\n                    valueAndFormat = segment.split(':');\n                    path = valueAndFormat.shift().split('.'); // get first and leave\n                    len = path.length;\n                    val = ctx;\n\n                    // Assign deeper paths\n                    for (i = 0; i < len; i++) {\n                        val = val[path[i]];\n                    }\n\n                    // Format the replacement\n                    if (valueAndFormat.length) {\n                        val = H.formatSingle(valueAndFormat.join(':'), val);\n                    }\n\n                    // Push the result and advance the cursor\n                    ret.push(val);\n\n                } else {\n                    ret.push(segment);\n\n                }\n                str = str.slice(index + 1); // the rest\n                isInside = !isInside; // toggle\n                splitter = isInside ? '}' : '{'; // now look for next matching bracket\n            }\n            ret.push(str);\n            return ret.join('');\n        };\n\n        /**\n         * Get the magnitude of a number.\n         *\n         * @function #getMagnitude\n         * @memberOf Highcharts\n         * @param {Number} number The number.\n         * @returns {Number} The magnitude, where 1-9 are magnitude 1, 10-99 magnitude 2\n         *        etc.\n         */\n        H.getMagnitude = function(num) {\n            return Math.pow(10, Math.floor(Math.log(num) / Math.LN10));\n        };\n\n        /**\n         * Take an interval and normalize it to multiples of round numbers.\n         *\n         * @todo  Move this function to the Axis prototype. It is here only for\n         *        historical reasons.\n         * @function #normalizeTickInterval\n         * @memberOf Highcharts\n         * @param {Number} interval - The raw, un-rounded interval.\n         * @param {Array} [multiples] - Allowed multiples.\n         * @param {Number} [magnitude] - The magnitude of the number.\n         * @param {Boolean} [allowDecimals] - Whether to allow decimals.\n         * @param {Boolean} [hasTickAmount] - If it has tickAmount, avoid landing\n         *        on tick intervals lower than original.\n         * @returns {Number} The normalized interval.\n         */\n        H.normalizeTickInterval = function(interval, multiples, magnitude,\n            allowDecimals, hasTickAmount) {\n            var normalized,\n                i,\n                retInterval = interval;\n\n            // round to a tenfold of 1, 2, 2.5 or 5\n            magnitude = H.pick(magnitude, 1);\n            normalized = interval / magnitude;\n\n            // multiples for a linear scale\n            if (!multiples) {\n                multiples = hasTickAmount ?\n                    // Finer grained ticks when the tick amount is hard set, including\n                    // when alignTicks is true on multiple axes (#4580).\n                    [1, 1.2, 1.5, 2, 2.5, 3, 4, 5, 6, 8, 10] :\n\n                    // Else, let ticks fall on rounder numbers\n                    [1, 2, 2.5, 5, 10];\n\n\n                // the allowDecimals option\n                if (allowDecimals === false) {\n                    if (magnitude === 1) {\n                        multiples = H.grep(multiples, function(num) {\n                            return num % 1 === 0;\n                        });\n                    } else if (magnitude <= 0.1) {\n                        multiples = [1 / magnitude];\n                    }\n                }\n            }\n\n            // normalize the interval to the nearest multiple\n            for (i = 0; i < multiples.length; i++) {\n                retInterval = multiples[i];\n                // only allow tick amounts smaller than natural\n                if ((hasTickAmount && retInterval * magnitude >= interval) ||\n                    (!hasTickAmount && (normalized <= (multiples[i] +\n                        (multiples[i + 1] || multiples[i])) / 2))) {\n                    break;\n                }\n            }\n\n            // Multiply back to the correct magnitude. Correct floats to appropriate \n            // precision (#6085).\n            retInterval = H.correctFloat(\n                retInterval * magnitude, -Math.round(Math.log(0.001) / Math.LN10)\n            );\n\n            return retInterval;\n        };\n\n\n        /**\n         * Sort an object array and keep the order of equal items. The ECMAScript\n         * standard does not specify the behaviour when items are equal.\n         *\n         * @function #stableSort\n         * @memberOf Highcharts\n         * @param {Array} arr - The array to sort.\n         * @param {Function} sortFunction - The function to sort it with, like with \n         *        regular Array.prototype.sort.\n         * @returns {void}\n         */\n        H.stableSort = function(arr, sortFunction) {\n            var length = arr.length,\n                sortValue,\n                i;\n\n            // Add index to each item\n            for (i = 0; i < length; i++) {\n                arr[i].safeI = i; // stable sort index\n            }\n\n            arr.sort(function(a, b) {\n                sortValue = sortFunction(a, b);\n                return sortValue === 0 ? a.safeI - b.safeI : sortValue;\n            });\n\n            // Remove index from items\n            for (i = 0; i < length; i++) {\n                delete arr[i].safeI; // stable sort index\n            }\n        };\n\n        /**\n         * Non-recursive method to find the lowest member of an array. `Math.min` raises\n         * a maximum call stack size exceeded error in Chrome when trying to apply more\n         * than 150.000 points. This method is slightly slower, but safe.\n         *\n         * @function #arrayMin\n         * @memberOf  Highcharts\n         * @param {Array} data An array of numbers.\n         * @returns {Number} The lowest number.\n         */\n        H.arrayMin = function(data) {\n            var i = data.length,\n                min = data[0];\n\n            while (i--) {\n                if (data[i] < min) {\n                    min = data[i];\n                }\n            }\n            return min;\n        };\n\n        /**\n         * Non-recursive method to find the lowest member of an array. `Math.max` raises\n         * a maximum call stack size exceeded error in Chrome when trying to apply more\n         * than 150.000 points. This method is slightly slower, but safe.\n         *\n         * @function #arrayMax\n         * @memberOf  Highcharts\n         * @param {Array} data - An array of numbers.\n         * @returns {Number} The highest number.\n         */\n        H.arrayMax = function(data) {\n            var i = data.length,\n                max = data[0];\n\n            while (i--) {\n                if (data[i] > max) {\n                    max = data[i];\n                }\n            }\n            return max;\n        };\n\n        /**\n         * Utility method that destroys any SVGElement instances that are properties on\n         * the given object. It loops all properties and invokes destroy if there is a\n         * destroy method. The property is then delete.\n         *\n         * @function #destroyObjectProperties\n         * @memberOf Highcharts\n         * @param {Object} obj - The object to destroy properties on.\n         * @param {Object} [except] - Exception, do not destroy this property, only\n         *    delete it.\n         * @returns {void}\n         */\n        H.destroyObjectProperties = function(obj, except) {\n            var n;\n            for (n in obj) {\n                // If the object is non-null and destroy is defined\n                if (obj[n] && obj[n] !== except && obj[n].destroy) {\n                    // Invoke the destroy\n                    obj[n].destroy();\n                }\n\n                // Delete the property from the object.\n                delete obj[n];\n            }\n        };\n\n\n        /**\n         * Discard a HTML element by moving it to the bin and delete.\n         *\n         * @function #discardElement\n         * @memberOf Highcharts\n         * @param {HTMLDOMElement} element - The HTML node to discard.\n         * @returns {void}\n         */\n        H.discardElement = function(element) {\n            var garbageBin = H.garbageBin;\n            // create a garbage bin element, not part of the DOM\n            if (!garbageBin) {\n                garbageBin = H.createElement('div');\n            }\n\n            // move the node and empty bin\n            if (element) {\n                garbageBin.appendChild(element);\n            }\n            garbageBin.innerHTML = '';\n        };\n\n        /**\n         * Fix JS round off float errors.\n         *\n         * @function #correctFloat\n         * @memberOf Highcharts\n         * @param {Number} num - A float number to fix.\n         * @param {Number} [prec=14] - The precision.\n         * @returns {Number} The corrected float number.\n         */\n        H.correctFloat = function(num, prec) {\n            return parseFloat(\n                num.toPrecision(prec || 14)\n            );\n        };\n\n        /**\n         * Set the global animation to either a given value, or fall back to the given\n         * chart's animation option.\n         *\n         * @function #setAnimation\n         * @memberOf Highcharts\n         * @param {Boolean|Animation} animation - The animation object.\n         * @param {Object} chart - The chart instance.\n         * @returns {void}\n         * @todo This function always relates to a chart, and sets a property on the\n         *        renderer, so it should be moved to the SVGRenderer.\n         */\n        H.setAnimation = function(animation, chart) {\n            chart.renderer.globalAnimation = H.pick(\n                animation,\n                chart.options.chart.animation,\n                true\n            );\n        };\n\n        /**\n         * Get the animation in object form, where a disabled animation is always\n         * returned as `{ duration: 0 }`.\n         *\n         * @function #animObject\n         * @memberOf Highcharts\n         * @param {Boolean|AnimationOptions} animation - An animation setting. Can be an\n         *        object with duration, complete and easing properties, or a boolean to\n         *        enable or disable.\n         * @returns {AnimationOptions} An object with at least a duration property.\n         */\n        H.animObject = function(animation) {\n            return H.isObject(animation) ?\n                H.merge(animation) : {\n                    duration: animation ? 500 : 0\n                };\n        };\n\n        /**\n         * The time unit lookup\n         */\n        H.timeUnits = {\n            millisecond: 1,\n            second: 1000,\n            minute: 60000,\n            hour: 3600000,\n            day: 24 * 3600000,\n            week: 7 * 24 * 3600000,\n            month: 28 * 24 * 3600000,\n            year: 364 * 24 * 3600000\n        };\n\n        /**\n         * Format a number and return a string based on input settings.\n         *\n         * @function #numberFormat\n         * @memberOf Highcharts\n         * @param {Number} number - The input number to format.\n         * @param {Number} decimals - The amount of decimals. A value of -1 preserves\n         *        the amount in the input number.\n         * @param {String} [decimalPoint] - The decimal point, defaults to the one given\n         *        in the lang options.\n         * @param {String} [thousandsSep] - The thousands separator, defaults to the one\n         *        given in the lang options.\n         * @returns {String} The formatted number.\n         */\n        H.numberFormat = function(number, decimals, decimalPoint, thousandsSep) {\n            number = +number || 0;\n            decimals = +decimals;\n\n            var lang = H.defaultOptions.lang,\n                origDec = (number.toString().split('.')[1] || '').length,\n                strinteger,\n                thousands,\n                ret,\n                roundedNumber;\n\n            if (decimals === -1) {\n                // Preserve decimals. Not huge numbers (#3793).\n                decimals = Math.min(origDec, 20);\n            } else if (!H.isNumber(decimals)) {\n                decimals = 2;\n            }\n\n            // Add another decimal to avoid rounding errors of float numbers. (#4573)\n            // Then use toFixed to handle rounding.\n            roundedNumber = (\n                Math.abs(number) + Math.pow(10, -Math.max(decimals, origDec) - 1)\n            ).toFixed(decimals);\n\n            // A string containing the positive integer component of the number\n            strinteger = String(H.pInt(roundedNumber));\n\n            // Leftover after grouping into thousands. Can be 0, 1 or 3.\n            thousands = strinteger.length > 3 ? strinteger.length % 3 : 0;\n\n            // Language\n            decimalPoint = H.pick(decimalPoint, lang.decimalPoint);\n            thousandsSep = H.pick(thousandsSep, lang.thousandsSep);\n\n            // Start building the return\n            ret = number < 0 ? '-' : '';\n\n            // Add the leftover after grouping into thousands. For example, in the\n            // number 42 000 000, this line adds 42.\n            ret += thousands ? strinteger.substr(0, thousands) + thousandsSep : '';\n\n            // Add the remaining thousands groups, joined by the thousands separator\n            ret += strinteger\n                .substr(thousands)\n                .replace(/(\\d{3})(?=\\d)/g, '$1' + thousandsSep);\n\n            // Add the decimal point and the decimal component\n            if (decimals) {\n                // Get the decimal component\n                ret += decimalPoint + roundedNumber.slice(-decimals);\n            }\n\n            return ret;\n        };\n\n        /**\n         * Easing definition\n         * @ignore\n         * @param   {Number} pos Current position, ranging from 0 to 1.\n         */\n        Math.easeInOutSine = function(pos) {\n            return -0.5 * (Math.cos(Math.PI * pos) - 1);\n        };\n\n        /**\n         * Get the computed CSS value for given element and property, only for numerical\n         * properties. For width and height, the dimension of the inner box (excluding\n         * padding) is returned. Used for fitting the chart within the container.\n         *\n         * @function #getStyle\n         * @memberOf Highcharts\n         * @param {HTMLDOMElement} el - A HTML element.\n         * @param {String} prop - The property name.\n         * @returns {Number} - The numeric value.\n         */\n        H.getStyle = function(el, prop) {\n\n            var style;\n\n            // For width and height, return the actual inner pixel size (#4913)\n            if (prop === 'width') {\n                return Math.min(el.offsetWidth, el.scrollWidth) -\n                    H.getStyle(el, 'padding-left') -\n                    H.getStyle(el, 'padding-right');\n            } else if (prop === 'height') {\n                return Math.min(el.offsetHeight, el.scrollHeight) -\n                    H.getStyle(el, 'padding-top') -\n                    H.getStyle(el, 'padding-bottom');\n            }\n\n            // Otherwise, get the computed style\n            style = win.getComputedStyle(el, undefined);\n            return style && H.pInt(style.getPropertyValue(prop));\n        };\n\n        /**\n         * Search for an item in an array.\n         *\n         * @function #inArray\n         * @memberOf Highcharts\n         * @param {*} item - The item to search for.\n         * @param {arr} arr - The array or node collection to search in.\n         * @returns {Number} - The index within the array, or -1 if not found.\n         */\n        H.inArray = function(item, arr) {\n            return arr.indexOf ? arr.indexOf(item) : [].indexOf.call(arr, item);\n        };\n\n        /**\n         * Filter an array by a callback.\n         *\n         * @function #grep\n         * @memberOf Highcharts\n         * @param {Array} arr - The array to filter.\n         * @param {Function} callback - The callback function. The function receives the\n         *        item as the first argument. Return `true` if the item is to be\n         *        preserved.\n         * @returns {Array} - A new, filtered array.\n         */\n        H.grep = function(arr, callback) {\n            return [].filter.call(arr, callback);\n        };\n\n        /**\n         * Return the value of the first element in the array that satisfies the \n         * provided testing function.\n         *\n         * @function #find\n         * @memberOf Highcharts\n         * @param {Array} arr - The array to test.\n         * @param {Function} callback - The callback function. The function receives the\n         *        item as the first argument. Return `true` if this item satisfies the\n         *        condition.\n         * @returns {Mixed} - The value of the element.\n         */\n        H.find = function(arr, callback) {\n            return [].find.call(arr, callback);\n        };\n\n        /**\n         * Map an array by a callback.\n         *\n         * @function #map\n         * @memberOf Highcharts\n         * @param {Array} arr - The array to map.\n         * @param {Function} fn - The callback function. Return the new value for the \n         *        new array.\n         * @returns {Array} - A new array item with modified items.\n         */\n        H.map = function(arr, fn) {\n            var results = [],\n                i = 0,\n                len = arr.length;\n\n            for (; i < len; i++) {\n                results[i] = fn.call(arr[i], arr[i], i, arr);\n            }\n\n            return results;\n        };\n\n        /**\n         * Get the element's offset position, corrected for `overflow: auto`.\n         *\n         * @function #offset\n         * @memberOf Highcharts\n         * @param {HTMLDOMElement} el - The HTML element.\n         * @returns {Object} An object containing `left` and `top` properties for the\n         * position in the page.\n         */\n        H.offset = function(el) {\n            var docElem = doc.documentElement,\n                box = el.getBoundingClientRect();\n\n            return {\n                top: box.top + (win.pageYOffset || docElem.scrollTop) -\n                    (docElem.clientTop || 0),\n                left: box.left + (win.pageXOffset || docElem.scrollLeft) -\n                    (docElem.clientLeft || 0)\n            };\n        };\n\n        /**\n         * Stop running animation.\n         *\n         * @todo A possible extension to this would be to stop a single property, when\n         * we want to continue animating others. Then assign the prop to the timer\n         * in the Fx.run method, and check for the prop here. This would be an\n         * improvement in all cases where we stop the animation from .attr. Instead of\n         * stopping everything, we can just stop the actual attributes we're setting.\n         *\n         * @function #stop\n         * @memberOf Highcharts\n         * @param {SVGElement} el - The SVGElement to stop animation on.\n         * @param {string} [prop] - The property to stop animating. If given, the stop\n         *    method will stop a single property from animating, while others continue.\n         * @returns {void}\n         */\n        H.stop = function(el, prop) {\n\n            var i = timers.length;\n\n            // Remove timers related to this element (#4519)\n            while (i--) {\n                if (timers[i].elem === el && (!prop || prop === timers[i].prop)) {\n                    timers[i].stopped = true; // #4667\n                }\n            }\n        };\n\n        /**\n         * Iterate over an array.\n         *\n         * @function #each\n         * @memberOf Highcharts\n         * @param {Array} arr - The array to iterate over.\n         * @param {Function} fn - The iterator callback. It passes three arguments:\n         * * item - The array item.\n         * * index - The item's index in the array.\n         * * arr - The array that each is being applied to.\n         * @param {Object} [ctx] The context.\n         */\n        H.each = function(arr, fn, ctx) { // modern browsers\n            return Array.prototype.forEach.call(arr, fn, ctx);\n        };\n\n        /**\n         * Add an event listener.\n         *\n         * @function #addEvent\n         * @memberOf Highcharts\n         * @param {Object} el - The element or object to add a listener to. It can be a\n         *        {@link HTMLDOMElement}, an {@link SVGElement} or any other object.\n         * @param {String} type - The event type.\n         * @param {Function} fn - The function callback to execute when the event is \n         *        fired.\n         * @returns {Function} A callback function to remove the added event.\n         */\n        H.addEvent = function(el, type, fn) {\n\n            var events = el.hcEvents = el.hcEvents || {};\n\n            function wrappedFn(e) {\n                e.target = e.srcElement || win; // #2820\n                fn.call(el, e);\n            }\n\n            // Handle DOM events in modern browsers\n            if (el.addEventListener) {\n                el.addEventListener(type, fn, false);\n\n                // Handle old IE implementation\n            } else if (el.attachEvent) {\n\n                if (!el.hcEventsIE) {\n                    el.hcEventsIE = {};\n                }\n\n                // Link wrapped fn with original fn, so we can get this in removeEvent\n                el.hcEventsIE[fn.toString()] = wrappedFn;\n\n                el.attachEvent('on' + type, wrappedFn);\n            }\n\n            if (!events[type]) {\n                events[type] = [];\n            }\n\n            events[type].push(fn);\n\n            // Return a function that can be called to remove this event.\n            return function() {\n                H.removeEvent(el, type, fn);\n            };\n        };\n\n        /**\n         * Remove an event that was added with {@link Highcharts#addEvent}.\n         *\n         * @function #removeEvent\n         * @memberOf Highcharts\n         * @param {Object} el - The element to remove events on.\n         * @param {String} [type] - The type of events to remove. If undefined, all\n         *        events are removed from the element.\n         * @param {Function} [fn] - The specific callback to remove. If undefined, all\n         *        events that match the element and optionally the type are removed.\n         * @returns {void}\n         */\n        H.removeEvent = function(el, type, fn) {\n\n            var events,\n                hcEvents = el.hcEvents,\n                index;\n\n            function removeOneEvent(type, fn) {\n                if (el.removeEventListener) {\n                    el.removeEventListener(type, fn, false);\n                } else if (el.attachEvent) {\n                    fn = el.hcEventsIE[fn.toString()];\n                    el.detachEvent('on' + type, fn);\n                }\n            }\n\n            function removeAllEvents() {\n                var types,\n                    len,\n                    n;\n\n                if (!el.nodeName) {\n                    return; // break on non-DOM events\n                }\n\n                if (type) {\n                    types = {};\n                    types[type] = true;\n                } else {\n                    types = hcEvents;\n                }\n\n                for (n in types) {\n                    if (hcEvents[n]) {\n                        len = hcEvents[n].length;\n                        while (len--) {\n                            removeOneEvent(n, hcEvents[n][len]);\n                        }\n                    }\n                }\n            }\n\n            if (hcEvents) {\n                if (type) {\n                    events = hcEvents[type] || [];\n                    if (fn) {\n                        index = H.inArray(fn, events);\n                        if (index > -1) {\n                            events.splice(index, 1);\n                            hcEvents[type] = events;\n                        }\n                        removeOneEvent(type, fn);\n\n                    } else {\n                        removeAllEvents();\n                        hcEvents[type] = [];\n                    }\n                } else {\n                    removeAllEvents();\n                    el.hcEvents = {};\n                }\n            }\n        };\n\n        /**\n         * Fire an event that was registered with {@link Highcharts#addEvent}.\n         *\n         * @function #fireEvent\n         * @memberOf Highcharts\n         * @param {Object} el - The object to fire the event on. It can be a\n         *        {@link HTMLDOMElement}, an {@link SVGElement} or any other object.\n         * @param {String} type - The type of event.\n         * @param {Object} [eventArguments] - Custom event arguments that are passed on\n         *        as an argument to the event handler.\n         * @param {Function} [defaultFunction] - The default function to execute if the \n         *        other listeners haven't returned false.\n         * @returns {void}\n         */\n        H.fireEvent = function(el, type, eventArguments, defaultFunction) {\n            var e,\n                hcEvents = el.hcEvents,\n                events,\n                len,\n                i,\n                fn;\n\n            eventArguments = eventArguments || {};\n\n            if (doc.createEvent && (el.dispatchEvent || el.fireEvent)) {\n                e = doc.createEvent('Events');\n                e.initEvent(type, true, true);\n                //e.target = el;\n\n                H.extend(e, eventArguments);\n\n                if (el.dispatchEvent) {\n                    el.dispatchEvent(e);\n                } else {\n                    el.fireEvent(type, e);\n                }\n\n            } else if (hcEvents) {\n\n                events = hcEvents[type] || [];\n                len = events.length;\n\n                if (!eventArguments.target) { // We're running a custom event\n\n                    H.extend(eventArguments, {\n                        // Attach a simple preventDefault function to skip default\n                        // handler if called. The built-in defaultPrevented property is\n                        // not overwritable (#5112)\n                        preventDefault: function() {\n                            eventArguments.defaultPrevented = true;\n                        },\n                        // Setting target to native events fails with clicking the\n                        // zoom-out button in Chrome.\n                        target: el,\n                        // If the type is not set, we're running a custom event (#2297).\n                        // If it is set, we're running a browser event, and setting it\n                        // will cause en error in IE8 (#2465).\t\t\n                        type: type\n                    });\n                }\n\n\n                for (i = 0; i < len; i++) {\n                    fn = events[i];\n\n                    // If the event handler return false, prevent the default handler\n                    // from executing\n                    if (fn && fn.call(el, eventArguments) === false) {\n                        eventArguments.preventDefault();\n                    }\n                }\n            }\n\n            // Run the default if not prevented\n            if (defaultFunction && !eventArguments.defaultPrevented) {\n                defaultFunction(eventArguments);\n            }\n        };\n\n        /**\n         * An animation configuration. Animation configurations can also be defined as\n         * booleans, where `false` turns off animation and `true` defaults to a duration\n         * of 500ms.\n         * @typedef {Object} AnimationOptions\n         * @property {Number} duration - The animation duration in milliseconds.\n         * @property {String} [easing] - The name of an easing function as defined on\n         *     the `Math` object.\n         * @property {Function} [complete] - A callback function to exectute when the\n         *     animation finishes.\n         * @property {Function} [step] - A callback function to execute on each step of\n         *     each attribute or CSS property that's being animated. The first argument\n         *     contains information about the animation and progress.\n         */\n\n\n        /**\n         * The global animate method, which uses Fx to create individual animators.\n         *\n         * @function #animate\n         * @memberOf Highcharts\n         * @param {HTMLDOMElement|SVGElement} el - The element to animate.\n         * @param {Object} params - An object containing key-value pairs of the\n         *        properties to animate. Supports numeric as pixel-based CSS properties\n         *        for HTML objects and attributes for SVGElements.\n         * @param {AnimationOptions} [opt] - Animation options.\n         */\n        H.animate = function(el, params, opt) {\n            var start,\n                unit = '',\n                end,\n                fx,\n                args,\n                prop;\n\n            if (!H.isObject(opt)) { // Number or undefined/null\n                args = arguments;\n                opt = {\n                    duration: args[2],\n                    easing: args[3],\n                    complete: args[4]\n                };\n            }\n            if (!H.isNumber(opt.duration)) {\n                opt.duration = 400;\n            }\n            opt.easing = typeof opt.easing === 'function' ?\n                opt.easing :\n                (Math[opt.easing] || Math.easeInOutSine);\n            opt.curAnim = H.merge(params);\n\n            for (prop in params) {\n\n                // Stop current running animation of this property\n                H.stop(el, prop);\n\n                fx = new H.Fx(el, opt, prop);\n                end = null;\n\n                if (prop === 'd') {\n                    fx.paths = fx.initPath(\n                        el,\n                        el.d,\n                        params.d\n                    );\n                    fx.toD = params.d;\n                    start = 0;\n                    end = 1;\n                } else if (el.attr) {\n                    start = el.attr(prop);\n                } else {\n                    start = parseFloat(H.getStyle(el, prop)) || 0;\n                    if (prop !== 'opacity') {\n                        unit = 'px';\n                    }\n                }\n\n                if (!end) {\n                    end = params[prop];\n                }\n                if (end && end.match && end.match('px')) {\n                    end = end.replace(/px/g, ''); // #4351\n                }\n                fx.run(start, end, unit);\n            }\n        };\n\n        /**\n         * Factory to create new series prototypes.\n         *\n         * @function #seriesType\n         * @memberOf Highcharts\n         *\n         * @param {String} type - The series type name.\n         * @param {String} parent - The parent series type name. Use `line` to inherit\n         *        from the basic {@link Series} object.\n         * @param {Object} options - The additional default options that is merged with\n         *        the parent's options.\n         * @param {Object} props - The properties (functions and primitives) to set on\n         *        the new prototype.\n         * @param {Object} [pointProps] - Members for a series-specific extension of the\n         *        {@link Point} prototype if needed.\n         * @returns {*} - The newly created prototype as extended from {@link Series}\n         * or its derivatives.\n         */\n        // docs: add to API + extending Highcharts\n        H.seriesType = function(type, parent, options, props, pointProps) {\n            var defaultOptions = H.getOptions(),\n                seriesTypes = H.seriesTypes;\n\n            // Merge the options\n            defaultOptions.plotOptions[type] = H.merge(\n                defaultOptions.plotOptions[parent],\n                options\n            );\n\n            // Create the class\n            seriesTypes[type] = H.extendClass(seriesTypes[parent] ||\n                function() {}, props);\n            seriesTypes[type].prototype.type = type;\n\n            // Create the point class if needed\n            if (pointProps) {\n                seriesTypes[type].prototype.pointClass =\n                    H.extendClass(H.Point, pointProps);\n            }\n\n            return seriesTypes[type];\n        };\n\n        /**\n         * Get a unique key for using in internal element id's and pointers. The key\n         * is composed of a random hash specific to this Highcharts instance, and a \n         * counter.\n         * @function #uniqueKey\n         * @memberOf Highcharts\n         * @return {string} The key.\n         * @example\n         * var id = H.uniqueKey(); // => 'highcharts-x45f6hp-0'\n         */\n        H.uniqueKey = (function() {\n\n            var uniqueKeyHash = Math.random().toString(36).substring(2, 9),\n                idCounter = 0;\n\n            return function() {\n                return 'highcharts-' + uniqueKeyHash + '-' + idCounter++;\n            };\n        }());\n\n        /**\n         * Register Highcharts as a plugin in jQuery\n         */\n        if (win.jQuery) {\n            win.jQuery.fn.highcharts = function() {\n                var args = [].slice.call(arguments);\n\n                if (this[0]) { // this[0] is the renderTo div\n\n                    // Create the chart\n                    if (args[0]) {\n                        new H[ // eslint-disable-line no-new\n                            // Constructor defaults to Chart\n                            H.isString(args[0]) ? args.shift() : 'Chart'\n                        ](this[0], args[0], args[1]);\n                        return this;\n                    }\n\n                    // When called without parameters or with the return argument,\n                    // return an existing chart\n                    return charts[H.attr(this[0], 'data-highcharts-chart')];\n                }\n            };\n        }\n\n\n        /**\n         * Compatibility section to add support for legacy IE. This can be removed if\n         * old IE support is not needed.\n         */\n        if (doc && !doc.defaultView) {\n            H.getStyle = function(el, prop) {\n                var val,\n                    alias = {\n                        width: 'clientWidth',\n                        height: 'clientHeight'\n                    }[prop];\n\n                if (el.style[prop]) {\n                    return H.pInt(el.style[prop]);\n                }\n                if (prop === 'opacity') {\n                    prop = 'filter';\n                }\n\n                // Getting the rendered width and height\n                if (alias) {\n                    el.style.zoom = 1;\n                    return Math.max(el[alias] - 2 * H.getStyle(el, 'padding'), 0);\n                }\n\n                val = el.currentStyle[prop.replace(/\\-(\\w)/g, function(a, b) {\n                    return b.toUpperCase();\n                })];\n                if (prop === 'filter') {\n                    val = val.replace(\n                        /alpha\\(opacity=([0-9]+)\\)/,\n                        function(a, b) {\n                            return b / 100;\n                        }\n                    );\n                }\n\n                return val === '' ? 1 : H.pInt(val);\n            };\n        }\n\n        if (!Array.prototype.forEach) {\n            H.each = function(arr, fn, ctx) { // legacy\n                var i = 0,\n                    len = arr.length;\n                for (; i < len; i++) {\n                    if (fn.call(ctx, arr[i], i, arr) === false) {\n                        return i;\n                    }\n                }\n            };\n        }\n\n        if (!Array.prototype.indexOf) {\n            H.inArray = function(item, arr) {\n                var len,\n                    i = 0;\n\n                if (arr) {\n                    len = arr.length;\n\n                    for (; i < len; i++) {\n                        if (arr[i] === item) {\n                            return i;\n                        }\n                    }\n                }\n\n                return -1;\n            };\n        }\n\n        if (!Array.prototype.filter) {\n            H.grep = function(elements, fn) {\n                var ret = [],\n                    i = 0,\n                    length = elements.length;\n\n                for (; i < length; i++) {\n                    if (fn(elements[i], i)) {\n                        ret.push(elements[i]);\n                    }\n                }\n\n                return ret;\n            };\n        }\n\n        if (!Array.prototype.find) {\n            H.find = function(arr, fn) {\n                var i,\n                    length = arr.length;\n\n                for (i = 0; i < length; i++) {\n                    if (fn(arr[i], i)) {\n                        return arr[i];\n                    }\n                }\n            };\n        }\n\n        //--- End compatibility section ---\n\n    }(Highcharts));\n    (function(H) {\n        /**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */\n        var each = H.each,\n            isNumber = H.isNumber,\n            map = H.map,\n            merge = H.merge,\n            pInt = H.pInt;\n\n        /**\n         * @typedef {string} ColorString\n         * A valid color to be parsed and handled by Highcharts. Highcharts internally \n         * supports hex colors like `#ffffff`, rgb colors like `rgb(255,255,255)` and\n         * rgba colors like `rgba(255,255,255,1)`. Other colors may be supported by the\n         * browsers and displayed correctly, but Highcharts is not able to process them\n         * and apply concepts like opacity and brightening.\n         */\n        /**\n         * Handle color operations. The object methods are chainable.\n         * @param {String} input The input color in either rbga or hex format\n         */\n        H.Color = function(input) {\n            // Backwards compatibility, allow instanciation without new\n            if (!(this instanceof H.Color)) {\n                return new H.Color(input);\n            }\n            // Initialize\n            this.init(input);\n        };\n        H.Color.prototype = {\n\n            // Collection of parsers. This can be extended from the outside by pushing parsers\n            // to Highcharts.Color.prototype.parsers.\n            parsers: [{\n                // RGBA color\n                regex: /rgba\\(\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*,\\s*([0-9]?(?:\\.[0-9]+)?)\\s*\\)/,\n                parse: function(result) {\n                    return [pInt(result[1]), pInt(result[2]), pInt(result[3]), parseFloat(result[4], 10)];\n                }\n            }, {\n                // RGB color\n                regex: /rgb\\(\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*\\)/,\n                parse: function(result) {\n                    return [pInt(result[1]), pInt(result[2]), pInt(result[3]), 1];\n                }\n            }],\n\n            // Collection of named colors. Can be extended from the outside by adding\n            // colors to Highcharts.Color.prototype.names.\n            names: {\n                white: '#ffffff',\n                black: '#000000'\n            },\n\n            /**\n             * Parse the input color to rgba array\n             * @param {String} input\n             */\n            init: function(input) {\n                var result,\n                    rgba,\n                    i,\n                    parser,\n                    len;\n\n                this.input = input = this.names[\n                    input && input.toLowerCase ?\n                    input.toLowerCase() :\n                    ''\n                ] || input;\n\n                // Gradients\n                if (input && input.stops) {\n                    this.stops = map(input.stops, function(stop) {\n                        return new H.Color(stop[1]);\n                    });\n\n                    // Solid colors\n                } else {\n\n                    // Check if it's possible to do bitmasking instead of regex\n                    if (input && input[0] === '#') {\n\n                        len = input.length;\n                        input = parseInt(input.substr(1), 16);\n\n                        // Handle long-form, e.g. #AABBCC\n                        if (len === 7) {\n\n                            rgba = [\n                                (input & 0xFF0000) >> 16,\n                                (input & 0xFF00) >> 8,\n                                (input & 0xFF),\n                                1\n                            ];\n\n                            // Handle short-form, e.g. #ABC\n                            // In short form, the value is assumed to be the same \n                            // for both nibbles for each component. e.g. #ABC = #AABBCC\n                        } else if (len === 4) {\n\n                            rgba = [\n                                ((input & 0xF00) >> 4) | (input & 0xF00) >> 8,\n                                ((input & 0xF0) >> 4) | (input & 0xF0),\n                                ((input & 0xF) << 4) | (input & 0xF),\n                                1\n                            ];\n                        }\n                    }\n\n                    // Otherwise, check regex parsers\n                    if (!rgba) {\n                        i = this.parsers.length;\n                        while (i-- && !rgba) {\n                            parser = this.parsers[i];\n                            result = parser.regex.exec(input);\n                            if (result) {\n                                rgba = parser.parse(result);\n                            }\n                        }\n                    }\n                }\n                this.rgba = rgba || [];\n            },\n\n            /**\n             * Return the color a specified format\n             * @param {String} format\n             */\n            get: function(format) {\n                var input = this.input,\n                    rgba = this.rgba,\n                    ret;\n\n                if (this.stops) {\n                    ret = merge(input);\n                    ret.stops = [].concat(ret.stops);\n                    each(this.stops, function(stop, i) {\n                        ret.stops[i] = [ret.stops[i][0], stop.get(format)];\n                    });\n\n                    // it's NaN if gradient colors on a column chart\n                } else if (rgba && isNumber(rgba[0])) {\n                    if (format === 'rgb' || (!format && rgba[3] === 1)) {\n                        ret = 'rgb(' + rgba[0] + ',' + rgba[1] + ',' + rgba[2] + ')';\n                    } else if (format === 'a') {\n                        ret = rgba[3];\n                    } else {\n                        ret = 'rgba(' + rgba.join(',') + ')';\n                    }\n                } else {\n                    ret = input;\n                }\n                return ret;\n            },\n\n            /**\n             * Brighten the color\n             * @param {Number} alpha\n             */\n            brighten: function(alpha) {\n                var i,\n                    rgba = this.rgba;\n\n                if (this.stops) {\n                    each(this.stops, function(stop) {\n                        stop.brighten(alpha);\n                    });\n\n                } else if (isNumber(alpha) && alpha !== 0) {\n                    for (i = 0; i < 3; i++) {\n                        rgba[i] += pInt(alpha * 255);\n\n                        if (rgba[i] < 0) {\n                            rgba[i] = 0;\n                        }\n                        if (rgba[i] > 255) {\n                            rgba[i] = 255;\n                        }\n                    }\n                }\n                return this;\n            },\n\n            /**\n             * Set the color's opacity to a given alpha value\n             * @param {Number} alpha\n             */\n            setOpacity: function(alpha) {\n                this.rgba[3] = alpha;\n                return this;\n            }\n        };\n        H.color = function(input) {\n            return new H.Color(input);\n        };\n\n    }(Highcharts));\n    (function(H) {\n        /**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */\n        var SVGElement,\n            SVGRenderer,\n\n            addEvent = H.addEvent,\n            animate = H.animate,\n            attr = H.attr,\n            charts = H.charts,\n            color = H.color,\n            css = H.css,\n            createElement = H.createElement,\n            defined = H.defined,\n            deg2rad = H.deg2rad,\n            destroyObjectProperties = H.destroyObjectProperties,\n            doc = H.doc,\n            each = H.each,\n            extend = H.extend,\n            erase = H.erase,\n            grep = H.grep,\n            hasTouch = H.hasTouch,\n            inArray = H.inArray,\n            isArray = H.isArray,\n            isFirefox = H.isFirefox,\n            isMS = H.isMS,\n            isObject = H.isObject,\n            isString = H.isString,\n            isWebKit = H.isWebKit,\n            merge = H.merge,\n            noop = H.noop,\n            pick = H.pick,\n            pInt = H.pInt,\n            removeEvent = H.removeEvent,\n            splat = H.splat,\n            stop = H.stop,\n            svg = H.svg,\n            SVG_NS = H.SVG_NS,\n            symbolSizes = H.symbolSizes,\n            win = H.win;\n\n        /**\n         * @typedef {Object} SVGDOMElement - An SVG DOM element.\n         */\n        /**\n         * The SVGElement prototype is a JavaScript wrapper for SVG elements used in the\n         * rendering layer of Highcharts. Combined with the {@link SVGRenderer} object,\n         * these prototypes allow freeform annotation in the charts or even in HTML\n         * pages without instanciating a chart. The SVGElement can also wrap HTML\n         * labels, when `text` or `label` elements are created with the `useHTML`\n         * parameter.\n         *\n         * The SVGElement instances are created through factory functions on the \n         * {@link SVGRenderer} object, like [rect]{@link SVGRenderer#rect},\n         * [path]{@link SVGRenderer#path}, [text]{@link SVGRenderer#text}, [label]{@link\n         * SVGRenderer#label}, [g]{@link SVGRenderer#g} and more.\n         *\n         * @class\n         */\n        SVGElement = H.SVGElement = function() {\n            return this;\n        };\n        SVGElement.prototype = {\n\n            // Default base for animation\n            opacity: 1,\n            SVG_NS: SVG_NS,\n\n            /**\n             * For labels, these CSS properties are applied to the `text` node directly.\n             * @type {Array.<string>}\n             */\n            textProps: ['direction', 'fontSize', 'fontWeight', 'fontFamily',\n                'fontStyle', 'color', 'lineHeight', 'width', 'textAlign',\n                'textDecoration', 'textOverflow', 'textOutline'\n            ],\n\n            /**\n             * Initialize the SVG renderer. This function only exists to make the\n             * initiation process overridable. It should not be called directly.\n             *\n             * @param {SVGRenderer} renderer The SVGRenderer instance to initialize to.\n             * @param {String} nodeName The SVG node name.\n             * @returns {void}\n             */\n            init: function(renderer, nodeName) {\n\n                /** \n                 * The DOM node. Each SVGRenderer instance wraps a main DOM node, but \n                 * may also represent more nodes.\n                 * @type {SVGDOMNode|HTMLDOMNode}\n                 */\n                this.element = nodeName === 'span' ?\n                    createElement(nodeName) :\n                    doc.createElementNS(this.SVG_NS, nodeName);\n\n                /**\n                 * The renderer that the SVGElement belongs to.\n                 * @type {SVGRenderer}\n                 */\n                this.renderer = renderer;\n            },\n\n            /**\n             * Animate to given attributes or CSS properties.\n             * \n             * @param {SVGAttributes} params SVG attributes or CSS to animate.\n             * @param {AnimationOptions} [options] Animation options.\n             * @param {Function} [complete] Function to perform at the end of animation.\n             * @returns {SVGElement} Returns the SVGElement for chaining.\n             */\n            animate: function(params, options, complete) {\n                var animOptions = H.animObject(\n                    pick(options, this.renderer.globalAnimation, true)\n                );\n                if (animOptions.duration !== 0) {\n                    if (complete) { // allows using a callback with the global animation without overwriting it\n                        animOptions.complete = complete;\n                    }\n                    animate(this, params, animOptions);\n                } else {\n                    this.attr(params, null, complete);\n                    if (animOptions.step) {\n                        animOptions.step.call(this);\n                    }\n                }\n                return this;\n            },\n\n            /**\n             * @typedef {Object} GradientOptions\n             * @property {Object} linearGradient Holds an object that defines the start\n             *    position and the end position relative to the shape.\n             * @property {Number} linearGradient.x1 Start horizontal position of the\n             *    gradient. Ranges 0-1.\n             * @property {Number} linearGradient.x2 End horizontal position of the\n             *    gradient. Ranges 0-1.\n             * @property {Number} linearGradient.y1 Start vertical position of the\n             *    gradient. Ranges 0-1.\n             * @property {Number} linearGradient.y2 End vertical position of the\n             *    gradient. Ranges 0-1.\n             * @property {Object} radialGradient Holds an object that defines the center\n             *    position and the radius.\n             * @property {Number} radialGradient.cx Center horizontal position relative\n             *    to the shape. Ranges 0-1.\n             * @property {Number} radialGradient.cy Center vertical position relative\n             *    to the shape. Ranges 0-1.\n             * @property {Number} radialGradient.r Radius relative to the shape. Ranges\n             *    0-1.\n             * @property {Array.<Array>} stops The first item in each tuple is the\n             *    position in the gradient, where 0 is the start of the gradient and 1\n             *    is the end of the gradient. Multiple stops can be applied. The second\n             *    item is the color for each stop. This color can also be given in the\n             *    rgba format.\n             *\n             * @example\n             * // Linear gradient used as a color option\n             * color: {\n             *     linearGradient: { x1: 0, x2: 0, y1: 0, y2: 1 },\n             *         stops: [\n             *             [0, '#003399'], // start\n             *             [0.5, '#ffffff'], // middle\n             *             [1, '#3366AA'] // end\n             *         ]\n             *     }\n             * }\n             */\n            /**\n             * Build and apply an SVG gradient out of a common JavaScript configuration\n             * object. This function is called from the attribute setters.\n             *\n             * @private\n             * @param {GradientOptions} color The gradient options structure.\n             * @param {string} prop The property to apply, can either be `fill` or\n             * `stroke`. \n             * @param {SVGDOMElement} elem SVG DOM element to apply the gradient on.\n             */\n            colorGradient: function(color, prop, elem) {\n                var renderer = this.renderer,\n                    colorObject,\n                    gradName,\n                    gradAttr,\n                    radAttr,\n                    gradients,\n                    gradientObject,\n                    stops,\n                    stopColor,\n                    stopOpacity,\n                    radialReference,\n                    n,\n                    id,\n                    key = [],\n                    value;\n\n                // Apply linear or radial gradients\n                if (color.radialGradient) {\n                    gradName = 'radialGradient';\n                } else if (color.linearGradient) {\n                    gradName = 'linearGradient';\n                }\n\n                if (gradName) {\n                    gradAttr = color[gradName];\n                    gradients = renderer.gradients;\n                    stops = color.stops;\n                    radialReference = elem.radialReference;\n\n                    // Keep < 2.2 kompatibility\n                    if (isArray(gradAttr)) {\n                        color[gradName] = gradAttr = {\n                            x1: gradAttr[0],\n                            y1: gradAttr[1],\n                            x2: gradAttr[2],\n                            y2: gradAttr[3],\n                            gradientUnits: 'userSpaceOnUse'\n                        };\n                    }\n\n                    // Correct the radial gradient for the radial reference system\n                    if (\n                        gradName === 'radialGradient' &&\n                        radialReference &&\n                        !defined(gradAttr.gradientUnits)\n                    ) {\n                        radAttr = gradAttr; // Save the radial attributes for updating\n                        gradAttr = merge(\n                            gradAttr,\n                            renderer.getRadialAttr(radialReference, radAttr), {\n                                gradientUnits: 'userSpaceOnUse'\n                            }\n                        );\n                    }\n\n                    // Build the unique key to detect whether we need to create a new element (#1282)\n                    for (n in gradAttr) {\n                        if (n !== 'id') {\n                            key.push(n, gradAttr[n]);\n                        }\n                    }\n                    for (n in stops) {\n                        key.push(stops[n]);\n                    }\n                    key = key.join(',');\n\n                    // Check if a gradient object with the same config object is created within this renderer\n                    if (gradients[key]) {\n                        id = gradients[key].attr('id');\n\n                    } else {\n\n                        // Set the id and create the element\n                        gradAttr.id = id = H.uniqueKey();\n                        gradients[key] = gradientObject = renderer.createElement(gradName)\n                            .attr(gradAttr)\n                            .add(renderer.defs);\n\n                        gradientObject.radAttr = radAttr;\n\n                        // The gradient needs to keep a list of stops to be able to destroy them\n                        gradientObject.stops = [];\n                        each(stops, function(stop) {\n                            var stopObject;\n                            if (stop[1].indexOf('rgba') === 0) {\n                                colorObject = H.color(stop[1]);\n                                stopColor = colorObject.get('rgb');\n                                stopOpacity = colorObject.get('a');\n                            } else {\n                                stopColor = stop[1];\n                                stopOpacity = 1;\n                            }\n                            stopObject = renderer.createElement('stop').attr({\n                                offset: stop[0],\n                                'stop-color': stopColor,\n                                'stop-opacity': stopOpacity\n                            }).add(gradientObject);\n\n                            // Add the stop element to the gradient\n                            gradientObject.stops.push(stopObject);\n                        });\n                    }\n\n                    // Set the reference to the gradient object\n                    value = 'url(' + renderer.url + '#' + id + ')';\n                    elem.setAttribute(prop, value);\n                    elem.gradient = key;\n\n                    // Allow the color to be concatenated into tooltips formatters etc. (#2995)\n                    color.toString = function() {\n                        return value;\n                    };\n                }\n            },\n\n            /**\n             * Apply a text outline through a custom CSS property, by copying the text\n             * element and apply stroke to the copy. Used internally. Contrast checks\n             * at http://jsfiddle.net/highcharts/43soe9m1/2/ .\n             *\n             * @private\n             * @param {String} textOutline A custom CSS `text-outline` setting, defined\n             *    by `width color`. \n             * @example\n             * // Specific color\n             * text.css({\n             *    textOutline: '1px black'\n             * });\n             * // Automatic contrast\n             * text.css({\n             *    color: '#000000', // black text\n             *    textOutline: '1px contrast' // => white outline\n             * });\n             */\n            applyTextOutline: function(textOutline) {\n                var elem = this.element,\n                    tspans,\n                    tspan,\n                    hasContrast = textOutline.indexOf('contrast') !== -1,\n                    styles = {},\n                    color,\n                    strokeWidth,\n                    firstRealChild,\n                    i;\n\n                // When the text shadow is set to contrast, use dark stroke for light\n                // text and vice versa.\n                if (hasContrast) {\n                    styles.textOutline = textOutline = textOutline.replace(\n                        /contrast/g,\n                        this.renderer.getContrast(elem.style.fill)\n                    );\n                }\n\n                // Extract the stroke width and color\n                textOutline = textOutline.split(' ');\n                color = textOutline[textOutline.length - 1];\n                strokeWidth = textOutline[0];\n\n                if (strokeWidth && strokeWidth !== 'none' && H.svg) {\n\n                    this.fakeTS = true; // Fake text shadow\n\n                    tspans = [].slice.call(elem.getElementsByTagName('tspan'));\n\n                    // In order to get the right y position of the clone,\n                    // copy over the y setter\n                    this.ySetter = this.xSetter;\n\n                    // Since the stroke is applied on center of the actual outline, we\n                    // need to double it to get the correct stroke-width outside the \n                    // glyphs.\n                    strokeWidth = strokeWidth.replace(\n                        /(^[\\d\\.]+)(.*?)$/g,\n                        function(match, digit, unit) {\n                            return (2 * digit) + unit;\n                        }\n                    );\n\n                    // Remove shadows from previous runs. Iterate from the end to\n                    // support removing items inside the cycle (#6472).\n                    i = tspans.length;\n                    while (i--) {\n                        tspan = tspans[i];\n                        if (tspan.getAttribute('class') === 'highcharts-text-outline') {\n                            // Remove then erase\n                            erase(tspans, elem.removeChild(tspan));\n                        }\n                    }\n\n                    // For each of the tspans, create a stroked copy behind it.\n                    firstRealChild = elem.firstChild;\n                    each(tspans, function(tspan, y) {\n                        var clone;\n\n                        // Let the first line start at the correct X position\n                        if (y === 0) {\n                            tspan.setAttribute('x', elem.getAttribute('x'));\n                            y = elem.getAttribute('y');\n                            tspan.setAttribute('y', y || 0);\n                            if (y === null) {\n                                elem.setAttribute('y', 0);\n                            }\n                        }\n\n                        // Create the clone and apply outline properties\n                        clone = tspan.cloneNode(1);\n                        attr(clone, {\n                            'class': 'highcharts-text-outline',\n                            'fill': color,\n                            'stroke': color,\n                            'stroke-width': strokeWidth,\n                            'stroke-linejoin': 'round'\n                        });\n                        elem.insertBefore(clone, firstRealChild);\n                    });\n                }\n            },\n\n            /**\n             *\n             * @typedef {Object} SVGAttributes An object of key-value pairs for SVG\n             *   attributes. Attributes in Highcharts elements for the most parts\n             *   correspond to SVG, but some are specific to Highcharts, like `zIndex`,\n             *   `rotation`, `translateX`, `translateY`, `scaleX` and `scaleY`. SVG\n             *   attributes containing a hyphen are _not_ camel-cased, they should be\n             *   quoted to preserve the hyphen.\n             * @example\n             * {\n             *     'stroke': '#ff0000', // basic\n             *     'stroke-width': 2, // hyphenated\n             *     'rotation': 45 // custom\n             *     'd': ['M', 10, 10, 'L', 30, 30, 'z'] // path definition, note format\n             * }\n             */\n            /**\n             * Apply native and custom attributes to the SVG elements.\n             * \n             * In order to set the rotation center for rotation, set x and y to 0 and\n             * use `translateX` and `translateY` attributes to position the element\n             * instead.\n             *\n             * Attributes frequently used in Highcharts are `fill`, `stroke`,\n             * `stroke-width`.\n             *\n             * @param {SVGAttributes|String} hash - The native and custom SVG\n             *    attributes. \n             * @param {string} [val] - If the type of the first argument is `string`, \n             *    the second can be a value, which will serve as a single attribute\n             *    setter. If the first argument is a string and the second is undefined,\n             *    the function serves as a getter and the current value of the property\n             *    is returned.\n             * @param {Function} complete - A callback function to execute after setting\n             *    the attributes. This makes the function compliant and interchangeable\n             *    with the {@link SVGElement#animate} function.\n             * @param {boolean} continueAnimation - Used internally when `.attr` is\n             *    called as part of an animation step. Otherwise, calling `.attr` for an\n             *    attribute will stop animation for that attribute.\n             *    \n             * @returns {SVGElement|string|number} If used as a setter, it returns the \n             *    current {@link SVGElement} so the calls can be chained. If used as a \n             *    getter, the current value of the attribute is returned.\n             * \n             * @example\n             * // Set multiple attributes\n             * element.attr({\n             *     stroke: 'red',\n             *     fill: 'blue',\n             *     x: 10,\n             *     y: 10\n             * });\n             *\n             * // Set a single attribute\n             * element.attr('stroke', 'red');\n             *\n             * // Get an attribute\n             * element.attr('stroke'); // => 'red'\n             * \n             */\n            attr: function(hash, val, complete, continueAnimation) {\n                var key,\n                    value,\n                    element = this.element,\n                    hasSetSymbolSize,\n                    ret = this,\n                    skipAttr,\n                    setter;\n\n                // single key-value pair\n                if (typeof hash === 'string' && val !== undefined) {\n                    key = hash;\n                    hash = {};\n                    hash[key] = val;\n                }\n\n                // used as a getter: first argument is a string, second is undefined\n                if (typeof hash === 'string') {\n                    ret = (this[hash + 'Getter'] || this._defaultGetter).call(this, hash, element);\n\n                    // setter\n                } else {\n\n                    for (key in hash) {\n                        value = hash[key];\n                        skipAttr = false;\n\n                        // Unless .attr is from the animator update, stop current\n                        // running animation of this property\n                        if (!continueAnimation) {\n                            stop(this, key);\n                        }\n\n                        // Special handling of symbol attributes\n                        if (\n                            this.symbolName &&\n                            /^(x|y|width|height|r|start|end|innerR|anchorX|anchorY)$/\n                            .test(key)\n                        ) {\n                            if (!hasSetSymbolSize) {\n                                this.symbolAttr(hash);\n                                hasSetSymbolSize = true;\n                            }\n                            skipAttr = true;\n                        }\n\n                        if (this.rotation && (key === 'x' || key === 'y')) {\n                            this.doTransform = true;\n                        }\n\n                        if (!skipAttr) {\n                            setter = this[key + 'Setter'] || this._defaultSetter;\n                            setter.call(this, value, key, element);\n\n\n                            // Let the shadow follow the main element\n                            if (this.shadows && /^(width|height|visibility|x|y|d|transform|cx|cy|r)$/.test(key)) {\n                                this.updateShadows(key, value, setter);\n                            }\n\n                        }\n                    }\n\n                    // Update transform. Do this outside the loop to prevent redundant updating for batch setting\n                    // of attributes.\n                    if (this.doTransform) {\n                        this.updateTransform();\n                        this.doTransform = false;\n                    }\n\n                }\n\n                // In accordance with animate, run a complete callback\n                if (complete) {\n                    complete();\n                }\n\n                return ret;\n            },\n\n\n            /**\n             * Update the shadow elements with new attributes.\n             *\n             * @private\n             * @param {String} key - The attribute name.\n             * @param {String|Number} value - The value of the attribute.\n             * @param {Function} setter - The setter function, inherited from the\n             *   parent wrapper\n             * @returns {void}\n             */\n            updateShadows: function(key, value, setter) {\n                var shadows = this.shadows,\n                    i = shadows.length;\n\n                while (i--) {\n                    setter.call(\n                        shadows[i],\n                        key === 'height' ?\n                        Math.max(value - (shadows[i].cutHeight || 0), 0) :\n                        key === 'd' ? this.d : value,\n                        key,\n                        shadows[i]\n                    );\n                }\n            },\n\n\n            /**\n             * Add a class name to an element.\n             *\n             * @param {string} className - The new class name to add.\n             * @param {boolean} [replace=false] - When true, the existing class name(s)\n             *    will be overwritten with the new one. When false, the new one is\n             *    added.\n             * @returns {SVGElement} Return the SVG element for chainability.\n             */\n            addClass: function(className, replace) {\n                var currentClassName = this.attr('class') || '';\n\n                if (currentClassName.indexOf(className) === -1) {\n                    if (!replace) {\n                        className =\n                            (currentClassName + (currentClassName ? ' ' : '') +\n                                className).replace('  ', ' ');\n                    }\n                    this.attr('class', className);\n                }\n                return this;\n            },\n\n            /**\n             * Check if an element has the given class name.\n             * @param  {string}  className - The class name to check for.\n             * @return {Boolean}\n             */\n            hasClass: function(className) {\n                return attr(this.element, 'class').indexOf(className) !== -1;\n            },\n\n            /**\n             * Remove a class name from the element.\n             * @param  {string} className The class name to remove.\n             * @return {SVGElement} Returns the SVG element for chainability.\n             */\n            removeClass: function(className) {\n                attr(this.element, 'class', (attr(this.element, 'class') || '').replace(className, ''));\n                return this;\n            },\n\n            /**\n             * If one of the symbol size affecting parameters are changed,\n             * check all the others only once for each call to an element's\n             * .attr() method\n             * @param {Object} hash - The attributes to set.\n             * @private\n             */\n            symbolAttr: function(hash) {\n                var wrapper = this;\n\n                each(['x', 'y', 'r', 'start', 'end', 'width', 'height', 'innerR', 'anchorX', 'anchorY'], function(key) {\n                    wrapper[key] = pick(hash[key], wrapper[key]);\n                });\n\n                wrapper.attr({\n                    d: wrapper.renderer.symbols[wrapper.symbolName](\n                        wrapper.x,\n                        wrapper.y,\n                        wrapper.width,\n                        wrapper.height,\n                        wrapper\n                    )\n                });\n            },\n\n            /**\n             * Apply a clipping rectangle to this element.\n             * \n             * @param {ClipRect} [clipRect] - The clipping rectangle. If skipped, the\n             *    current clip is removed.\n             * @returns {SVGElement} Returns the SVG element to allow chaining.\n             */\n            clip: function(clipRect) {\n                return this.attr(\n                    'clip-path',\n                    clipRect ?\n                    'url(' + this.renderer.url + '#' + clipRect.id + ')' :\n                    'none'\n                );\n            },\n\n            /**\n             * Calculate the coordinates needed for drawing a rectangle crisply and\n             * return the calculated attributes.\n             * \n             * @param {Object} rect - A rectangle.\n             * @param {number} rect.x - The x position.\n             * @param {number} rect.y - The y position.\n             * @param {number} rect.width - The width.\n             * @param {number} rect.height - The height.\n             * @param {number} [strokeWidth] - The stroke width to consider when\n             *    computing crisp positioning. It can also be set directly on the rect\n             *    parameter.\n             *\n             * @returns {{x: Number, y: Number, width: Number, height: Number}} The\n             *    modified rectangle arguments.\n             */\n            crisp: function(rect, strokeWidth) {\n\n                var wrapper = this,\n                    key,\n                    attribs = {},\n                    normalizer;\n\n                strokeWidth = strokeWidth || rect.strokeWidth || 0;\n                normalizer = Math.round(strokeWidth) % 2 / 2; // Math.round because strokeWidth can sometimes have roundoff errors\n\n                // normalize for crisp edges\n                rect.x = Math.floor(rect.x || wrapper.x || 0) + normalizer;\n                rect.y = Math.floor(rect.y || wrapper.y || 0) + normalizer;\n                rect.width = Math.floor((rect.width || wrapper.width || 0) - 2 * normalizer);\n                rect.height = Math.floor((rect.height || wrapper.height || 0) - 2 * normalizer);\n                if (defined(rect.strokeWidth)) {\n                    rect.strokeWidth = strokeWidth;\n                }\n\n                for (key in rect) {\n                    if (wrapper[key] !== rect[key]) { // only set attribute if changed\n                        wrapper[key] = attribs[key] = rect[key];\n                    }\n                }\n\n                return attribs;\n            },\n\n            /**\n             * Set styles for the element. In addition to CSS styles supported by \n             * native SVG and HTML elements, there are also some custom made for \n             * Highcharts, like `width`, `ellipsis` and `textOverflow` for SVG text\n             * elements.\n             * @param {CSSObject} styles The new CSS styles.\n             * @returns {SVGElement} Return the SVG element for chaining.\n             */\n            css: function(styles) {\n                var oldStyles = this.styles,\n                    newStyles = {},\n                    elem = this.element,\n                    textWidth,\n                    n,\n                    serializedCss = '',\n                    hyphenate,\n                    hasNew = !oldStyles,\n                    // These CSS properties are interpreted internally by the SVG\n                    // renderer, but are not supported by SVG and should not be added to\n                    // the DOM. In styled mode, no CSS should find its way to the DOM\n                    // whatsoever (#6173, #6474).\n                    svgPseudoProps = ['textOutline', 'textOverflow', 'width'];\n\n                // convert legacy\n                if (styles && styles.color) {\n                    styles.fill = styles.color;\n                }\n\n                // Filter out existing styles to increase performance (#2640)\n                if (oldStyles) {\n                    for (n in styles) {\n                        if (styles[n] !== oldStyles[n]) {\n                            newStyles[n] = styles[n];\n                            hasNew = true;\n                        }\n                    }\n                }\n                if (hasNew) {\n\n                    // Merge the new styles with the old ones\n                    if (oldStyles) {\n                        styles = extend(\n                            oldStyles,\n                            newStyles\n                        );\n                    }\n\n                    // Get the text width from style\n                    textWidth = this.textWidth = (\n                        styles &&\n                        styles.width &&\n                        styles.width !== 'auto' &&\n                        elem.nodeName.toLowerCase() === 'text' &&\n                        pInt(styles.width)\n                    );\n\n                    // store object\n                    this.styles = styles;\n\n                    if (textWidth && (!svg && this.renderer.forExport)) {\n                        delete styles.width;\n                    }\n\n                    // serialize and set style attribute\n                    if (isMS && !svg) {\n                        css(this.element, styles);\n                    } else {\n                        hyphenate = function(a, b) {\n                            return '-' + b.toLowerCase();\n                        };\n                        for (n in styles) {\n                            if (inArray(n, svgPseudoProps) === -1) {\n                                serializedCss +=\n                                    n.replace(/([A-Z])/g, hyphenate) + ':' +\n                                    styles[n] + ';';\n                            }\n                        }\n                        if (serializedCss) {\n                            attr(elem, 'style', serializedCss); // #1881\n                        }\n                    }\n\n\n                    if (this.added) {\n\n                        // Rebuild text after added. Cache mechanisms in the buildText\n                        // will prevent building if there are no significant changes.\n                        if (this.element.nodeName === 'text') {\n                            this.renderer.buildText(this);\n                        }\n\n                        // Apply text outline after added\n                        if (styles && styles.textOutline) {\n                            this.applyTextOutline(styles.textOutline);\n                        }\n                    }\n                }\n\n                return this;\n            },\n\n\n            /**\n             * Get the current stroke width. In classic mode, the setter registers it \n             * directly on the element.\n             * @returns {number} The stroke width in pixels.\n             * @ignore\n             */\n            strokeWidth: function() {\n                return this['stroke-width'] || 0;\n            },\n\n\n            /**\n             * Add an event listener. This is a simple setter that replaces all other\n             * events of the same type, opposed to the {@link Highcharts#addEvent}\n             * function.\n             * @param {string} eventType - The event type. If the type is `click`, \n             *    Highcharts will internally translate it to a `touchstart` event on \n             *    touch devices, to prevent the browser from waiting for a click event\n             *    from firing.\n             * @param {Function} handler - The handler callback.\n             * @returns {SVGElement} The SVGElement for chaining.\n             */\n            on: function(eventType, handler) {\n                var svgElement = this,\n                    element = svgElement.element;\n\n                // touch\n                if (hasTouch && eventType === 'click') {\n                    element.ontouchstart = function(e) {\n                        svgElement.touchEventFired = Date.now(); // #2269\n                        e.preventDefault();\n                        handler.call(element, e);\n                    };\n                    element.onclick = function(e) {\n                        if (win.navigator.userAgent.indexOf('Android') === -1 ||\n                            Date.now() - (svgElement.touchEventFired || 0) > 1100) {\n                            handler.call(element, e);\n                        }\n                    };\n                } else {\n                    // simplest possible event model for internal use\n                    element['on' + eventType] = handler;\n                }\n                return this;\n            },\n\n            /**\n             * Set the coordinates needed to draw a consistent radial gradient across\n             * a shape regardless of positioning inside the chart. Used on pie slices\n             * to make all the slices have the same radial reference point.\n             *\n             * @param {Array} coordinates The center reference. The format is\n             *    `[centerX, centerY, diameter]` in pixels.\n             * @returns {SVGElement} Returns the SVGElement for chaining.\n             */\n            setRadialReference: function(coordinates) {\n                var existingGradient = this.renderer.gradients[this.element.gradient];\n\n                this.element.radialReference = coordinates;\n\n                // On redrawing objects with an existing gradient, the gradient needs\n                // to be repositioned (#3801)\n                if (existingGradient && existingGradient.radAttr) {\n                    existingGradient.animate(\n                        this.renderer.getRadialAttr(\n                            coordinates,\n                            existingGradient.radAttr\n                        )\n                    );\n                }\n\n                return this;\n            },\n\n            /**\n             * Move an object and its children by x and y values.\n             * \n             * @param {number} x - The x value.\n             * @param {number} y - The y value.\n             */\n            translate: function(x, y) {\n                return this.attr({\n                    translateX: x,\n                    translateY: y\n                });\n            },\n\n            /**\n             * Invert a group, rotate and flip. This is used internally on inverted \n             * charts, where the points and graphs are drawn as if not inverted, then\n             * the series group elements are inverted.\n             *\n             * @param {boolean} inverted - Whether to invert or not. An inverted shape\n             *    can be un-inverted by setting it to false.\n             * @returns {SVGElement} Return the SVGElement for chaining.\n             */\n            invert: function(inverted) {\n                var wrapper = this;\n                wrapper.inverted = inverted;\n                wrapper.updateTransform();\n                return wrapper;\n            },\n\n            /**\n             * Update the transform attribute based on internal properties. Deals with\n             * the custom `translateX`, `translateY`, `rotation`, `scaleX` and `scaleY`\n             * attributes and updates the SVG `transform` attribute.\n             * @private\n             * @returns {void}\n             */\n            updateTransform: function() {\n                var wrapper = this,\n                    translateX = wrapper.translateX || 0,\n                    translateY = wrapper.translateY || 0,\n                    scaleX = wrapper.scaleX,\n                    scaleY = wrapper.scaleY,\n                    inverted = wrapper.inverted,\n                    rotation = wrapper.rotation,\n                    element = wrapper.element,\n                    transform;\n\n                // flipping affects translate as adjustment for flipping around the group's axis\n                if (inverted) {\n                    translateX += wrapper.width;\n                    translateY += wrapper.height;\n                }\n\n                // Apply translate. Nearly all transformed elements have translation, so instead\n                // of checking for translate = 0, do it always (#1767, #1846).\n                transform = ['translate(' + translateX + ',' + translateY + ')'];\n\n                // apply rotation\n                if (inverted) {\n                    transform.push('rotate(90) scale(-1,1)');\n                } else if (rotation) { // text rotation\n                    transform.push('rotate(' + rotation + ' ' + (element.getAttribute('x') || 0) + ' ' + (element.getAttribute('y') || 0) + ')');\n\n                    // Delete bBox memo when the rotation changes\n                    //delete wrapper.bBox;\n                }\n\n                // apply scale\n                if (defined(scaleX) || defined(scaleY)) {\n                    transform.push('scale(' + pick(scaleX, 1) + ' ' + pick(scaleY, 1) + ')');\n                }\n\n                if (transform.length) {\n                    element.setAttribute('transform', transform.join(' '));\n                }\n            },\n\n            /**\n             * Bring the element to the front.\n             *\n             * @returns {SVGElement} Returns the SVGElement for chaining.\n             */\n            toFront: function() {\n                var element = this.element;\n                element.parentNode.appendChild(element);\n                return this;\n            },\n\n\n            /**\n             * Align the element relative to the chart or another box.\n             * ß\n             * @param {Object} [alignOptions] The alignment options. The function can be\n             *   called without this parameter in order to re-align an element after the\n             *   box has been updated.\n             * @param {string} [alignOptions.align=left] Horizontal alignment. Can be\n             *   one of `left`, `center` and `right`.\n             * @param {string} [alignOptions.verticalAlign=top] Vertical alignment. Can\n             *   be one of `top`, `middle` and `bottom`.\n             * @param {number} [alignOptions.x=0] Horizontal pixel offset from\n             *   alignment.\n             * @param {number} [alignOptions.y=0] Vertical pixel offset from alignment.\n             * @param {Boolean} [alignByTranslate=false] Use the `transform` attribute\n             *   with translateX and translateY custom attributes to align this elements\n             *   rather than `x` and `y` attributes.\n             * @param {String|Object} box The box to align to, needs a width and height.\n             *   When the box is a string, it refers to an object in the Renderer. For\n             *   example, when box is `spacingBox`, it refers to `Renderer.spacingBox`\n             *   which holds `width`, `height`, `x` and `y` properties.\n             * @returns {SVGElement} Returns the SVGElement for chaining.\n             */\n            align: function(alignOptions, alignByTranslate, box) {\n                var align,\n                    vAlign,\n                    x,\n                    y,\n                    attribs = {},\n                    alignTo,\n                    renderer = this.renderer,\n                    alignedObjects = renderer.alignedObjects,\n                    alignFactor,\n                    vAlignFactor;\n\n                // First call on instanciate\n                if (alignOptions) {\n                    this.alignOptions = alignOptions;\n                    this.alignByTranslate = alignByTranslate;\n                    if (!box || isString(box)) { // boxes other than renderer handle this internally\n                        this.alignTo = alignTo = box || 'renderer';\n                        erase(alignedObjects, this); // prevent duplicates, like legendGroup after resize\n                        alignedObjects.push(this);\n                        box = null; // reassign it below\n                    }\n\n                    // When called on resize, no arguments are supplied\n                } else {\n                    alignOptions = this.alignOptions;\n                    alignByTranslate = this.alignByTranslate;\n                    alignTo = this.alignTo;\n                }\n\n                box = pick(box, renderer[alignTo], renderer);\n\n                // Assign variables\n                align = alignOptions.align;\n                vAlign = alignOptions.verticalAlign;\n                x = (box.x || 0) + (alignOptions.x || 0); // default: left align\n                y = (box.y || 0) + (alignOptions.y || 0); // default: top align\n\n                // Align\n                if (align === 'right') {\n                    alignFactor = 1;\n                } else if (align === 'center') {\n                    alignFactor = 2;\n                }\n                if (alignFactor) {\n                    x += (box.width - (alignOptions.width || 0)) / alignFactor;\n                }\n                attribs[alignByTranslate ? 'translateX' : 'x'] = Math.round(x);\n\n\n                // Vertical align\n                if (vAlign === 'bottom') {\n                    vAlignFactor = 1;\n                } else if (vAlign === 'middle') {\n                    vAlignFactor = 2;\n                }\n                if (vAlignFactor) {\n                    y += (box.height - (alignOptions.height || 0)) / vAlignFactor;\n                }\n                attribs[alignByTranslate ? 'translateY' : 'y'] = Math.round(y);\n\n                // Animate only if already placed\n                this[this.placed ? 'animate' : 'attr'](attribs);\n                this.placed = true;\n                this.alignAttr = attribs;\n\n                return this;\n            },\n\n            /**\n             * Get the bounding box (width, height, x and y) for the element. Generally\n             * used to get rendered text size. Since this is called a lot in charts,\n             * the results are cached based on text properties, in order to save DOM\n             * traffic. The returned bounding box includes the rotation, so for example\n             * a single text line of rotation 90 will report a greater height, and a\n             * width corresponding to the line-height.\n             *\n             * @param {boolean} [reload] Skip the cache and get the updated DOM bouding\n             *   box.\n             * @param {number} [rot] Override the element's rotation. This is internally\n             *   used on axis labels with a value of 0 to find out what the bounding box\n             *   would be have been if it were not rotated.\n             * @returns {Object} The bounding box with `x`, `y`, `width` and `height`\n             * properties.\n             */\n            getBBox: function(reload, rot) {\n                var wrapper = this,\n                    bBox, // = wrapper.bBox,\n                    renderer = wrapper.renderer,\n                    width,\n                    height,\n                    rotation,\n                    rad,\n                    element = wrapper.element,\n                    styles = wrapper.styles,\n                    fontSize,\n                    textStr = wrapper.textStr,\n                    toggleTextShadowShim,\n                    cache = renderer.cache,\n                    cacheKeys = renderer.cacheKeys,\n                    cacheKey;\n\n                rotation = pick(rot, wrapper.rotation);\n                rad = rotation * deg2rad;\n\n\n                fontSize = styles && styles.fontSize;\n\n\n                if (textStr !== undefined) {\n\n                    cacheKey = textStr.toString();\n\n                    // Since numbers are monospaced, and numerical labels appear a lot\n                    // in a chart, we assume that a label of n characters has the same\n                    // bounding box as others of the same length. Unless there is inner\n                    // HTML in the label. In that case, leave the numbers as is (#5899).\n                    if (cacheKey.indexOf('<') === -1) {\n                        cacheKey = cacheKey.replace(/[0-9]/g, '0');\n                    }\n\n                    // Properties that affect bounding box\n                    cacheKey += [\n                            '',\n                            rotation || 0,\n                            fontSize,\n                            styles && styles.width,\n                            styles && styles.textOverflow // #5968\n                        ]\n                        .join(',');\n\n                }\n\n                if (cacheKey && !reload) {\n                    bBox = cache[cacheKey];\n                }\n\n                // No cache found\n                if (!bBox) {\n\n                    // SVG elements\n                    if (element.namespaceURI === wrapper.SVG_NS || renderer.forExport) {\n                        try { // Fails in Firefox if the container has display: none.\n\n                            // When the text shadow shim is used, we need to hide the fake shadows\n                            // to get the correct bounding box (#3872)\n                            toggleTextShadowShim = this.fakeTS && function(display) {\n                                each(element.querySelectorAll('.highcharts-text-outline'), function(tspan) {\n                                    tspan.style.display = display;\n                                });\n                            };\n\n                            // Workaround for #3842, Firefox reporting wrong bounding box for shadows\n                            if (toggleTextShadowShim) {\n                                toggleTextShadowShim('none');\n                            }\n\n                            bBox = element.getBBox ?\n                                // SVG: use extend because IE9 is not allowed to change width and height in case\n                                // of rotation (below)\n                                extend({}, element.getBBox()) : {\n\n                                    // Legacy IE in export mode\n                                    width: element.offsetWidth,\n                                    height: element.offsetHeight\n                                };\n\n                            // #3842\n                            if (toggleTextShadowShim) {\n                                toggleTextShadowShim('');\n                            }\n                        } catch (e) {}\n\n                        // If the bBox is not set, the try-catch block above failed. The other condition\n                        // is for Opera that returns a width of -Infinity on hidden elements.\n                        if (!bBox || bBox.width < 0) {\n                            bBox = {\n                                width: 0,\n                                height: 0\n                            };\n                        }\n\n\n                        // VML Renderer or useHTML within SVG\n                    } else {\n\n                        bBox = wrapper.htmlGetBBox();\n\n                    }\n\n                    // True SVG elements as well as HTML elements in modern browsers using the .useHTML option\n                    // need to compensated for rotation\n                    if (renderer.isSVG) {\n                        width = bBox.width;\n                        height = bBox.height;\n\n                        // Workaround for wrong bounding box in IE, Edge and Chrome on\n                        // Windows. With Highcharts' default font, IE and Edge report\n                        // a box height of 16.899 and Chrome rounds it to 17. If this \n                        // stands uncorrected, it results in more padding added below\n                        // the text than above when adding a label border or background.\n                        // Also vertical positioning is affected.\n                        // http://jsfiddle.net/highcharts/em37nvuj/\n                        // (#1101, #1505, #1669, #2568, #6213).\n                        if (\n                            styles &&\n                            styles.fontSize === '11px' &&\n                            Math.round(height) === 17\n                        ) {\n                            bBox.height = height = 14;\n                        }\n\n                        // Adjust for rotated text\n                        if (rotation) {\n                            bBox.width = Math.abs(height * Math.sin(rad)) + Math.abs(width * Math.cos(rad));\n                            bBox.height = Math.abs(height * Math.cos(rad)) + Math.abs(width * Math.sin(rad));\n                        }\n                    }\n\n                    // Cache it. When loading a chart in a hidden iframe in Firefox and IE/Edge, the\n                    // bounding box height is 0, so don't cache it (#5620).\n                    if (cacheKey && bBox.height > 0) {\n\n                        // Rotate (#4681)\n                        while (cacheKeys.length > 250) {\n                            delete cache[cacheKeys.shift()];\n                        }\n\n                        if (!cache[cacheKey]) {\n                            cacheKeys.push(cacheKey);\n                        }\n                        cache[cacheKey] = bBox;\n                    }\n                }\n                return bBox;\n            },\n\n            /**\n             * Show the element after it has been hidden. \n             *\n             * @param {boolean} [inherit=false] Set the visibility attribute to\n             * `inherit` rather than `visible`. The difference is that an element with\n             * `visibility=\"visible\"` will be visible even if the parent is hidden.\n             *\n             * @returns {SVGElement} Returns the SVGElement for chaining.\n             */\n            show: function(inherit) {\n                return this.attr({\n                    visibility: inherit ? 'inherit' : 'visible'\n                });\n            },\n\n            /**\n             * Hide the element, equivalent to setting the `visibility` attribute to\n             * `hidden`.\n             *\n             * @returns {SVGElement} Returns the SVGElement for chaining.\n             */\n            hide: function() {\n                return this.attr({\n                    visibility: 'hidden'\n                });\n            },\n\n            /**\n             * Fade out an element by animating its opacity down to 0, and hide it on\n             * complete. Used internally for the tooltip.\n             * \n             * @param {number} [duration=150] The fade duration in milliseconds.\n             */\n            fadeOut: function(duration) {\n                var elemWrapper = this;\n                elemWrapper.animate({\n                    opacity: 0\n                }, {\n                    duration: duration || 150,\n                    complete: function() {\n                        elemWrapper.attr({\n                            y: -9999\n                        }); // #3088, assuming we're only using this for tooltips\n                    }\n                });\n            },\n\n            /**\n             * Add the element to the DOM. All elements must be added this way.\n             * \n             * @param {SVGElement|SVGDOMElement} [parent] The parent item to add it to.\n             *   If undefined, the element is added to the {@link SVGRenderer.box}.\n             *\n             * @returns {SVGElement} Returns the SVGElement for chaining.\n             *\n             * @sample highcharts/members/renderer-g - Elements added to a group\n             */\n            add: function(parent) {\n\n                var renderer = this.renderer,\n                    element = this.element,\n                    inserted;\n\n                if (parent) {\n                    this.parentGroup = parent;\n                }\n\n                // mark as inverted\n                this.parentInverted = parent && parent.inverted;\n\n                // build formatted text\n                if (this.textStr !== undefined) {\n                    renderer.buildText(this);\n                }\n\n                // Mark as added\n                this.added = true;\n\n                // If we're adding to renderer root, or other elements in the group\n                // have a z index, we need to handle it\n                if (!parent || parent.handleZ || this.zIndex) {\n                    inserted = this.zIndexSetter();\n                }\n\n                // If zIndex is not handled, append at the end\n                if (!inserted) {\n                    (parent ? parent.element : renderer.box).appendChild(element);\n                }\n\n                // fire an event for internal hooks\n                if (this.onAdd) {\n                    this.onAdd();\n                }\n\n                return this;\n            },\n\n            /**\n             * Removes an element from the DOM.\n             *\n             * @private\n             * @param {SVGDOMElement|HTMLDOMElement} element The DOM node to remove.\n             */\n            safeRemoveChild: function(element) {\n                var parentNode = element.parentNode;\n                if (parentNode) {\n                    parentNode.removeChild(element);\n                }\n            },\n\n            /**\n             * Destroy the element and element wrapper and clear up the DOM and event\n             * hooks.\n             *\n             * @returns {void}\n             */\n            destroy: function() {\n                var wrapper = this,\n                    element = wrapper.element || {},\n                    parentToClean = wrapper.renderer.isSVG && element.nodeName === 'SPAN' && wrapper.parentGroup,\n                    grandParent,\n                    key,\n                    i;\n\n                // remove events\n                element.onclick = element.onmouseout = element.onmouseover = element.onmousemove = element.point = null;\n                stop(wrapper); // stop running animations\n\n                if (wrapper.clipPath) {\n                    // Look for existing references to this clipPath and remove them\n                    // before destroying the element (#6196).\n                    each(\n                        wrapper.element.ownerSVGElement.querySelectorAll('[clip-path]'),\n                        function(el) {\n                            if (el.getAttribute('clip-path')\n                                .indexOf(wrapper.clipPath.element.id) > -1) {\n                                el.removeAttribute('clip-path');\n                            }\n                        }\n                    );\n                    wrapper.clipPath = wrapper.clipPath.destroy();\n                }\n\n                // Destroy stops in case this is a gradient object\n                if (wrapper.stops) {\n                    for (i = 0; i < wrapper.stops.length; i++) {\n                        wrapper.stops[i] = wrapper.stops[i].destroy();\n                    }\n                    wrapper.stops = null;\n                }\n\n                // remove element\n                wrapper.safeRemoveChild(element);\n\n\n                wrapper.destroyShadows();\n\n\n                // In case of useHTML, clean up empty containers emulating SVG groups (#1960, #2393, #2697).\n                while (parentToClean && parentToClean.div && parentToClean.div.childNodes.length === 0) {\n                    grandParent = parentToClean.parentGroup;\n                    wrapper.safeRemoveChild(parentToClean.div);\n                    delete parentToClean.div;\n                    parentToClean = grandParent;\n                }\n\n                // remove from alignObjects\n                if (wrapper.alignTo) {\n                    erase(wrapper.renderer.alignedObjects, wrapper);\n                }\n\n                for (key in wrapper) {\n                    delete wrapper[key];\n                }\n\n                return null;\n            },\n\n\n            /**\n             * @typedef {Object} ShadowOptions\n             * @property {string} [color=#000000] The shadow color.\n             * @property {number} [offsetX=1] The horizontal offset from the element.\n             * @property {number} [offsetY=1] The vertical offset from the element.\n             * @property {number} [opacity=0.15] The shadow opacity.\n             * @property {number} [width=3] The shadow width or distance from the\n             *    element.\n             */\n            /**\n             * Add a shadow to the element. Must be called after the element is added to\n             * the DOM. In styled mode, this method is not used, instead use `defs` and\n             * filters.\n             * \n             * @param {boolean|ShadowOptions} shadowOptions The shadow options. If\n             *    `true`, the default options are applied. If `false`, the current\n             *    shadow will be removed.\n             * @param {SVGElement} [group] The SVG group element where the shadows will \n             *    be applied. The default is to add it to the same parent as the current\n             *    element. Internally, this is ised for pie slices, where all the\n             *    shadows are added to an element behind all the slices.\n             * @param {boolean} [cutOff] Used internally for column shadows.\n             *\n             * @returns {SVGElement} Returns the SVGElement for chaining.\n             *\n             * @example\n             * renderer.rect(10, 100, 100, 100)\n             *     .attr({ fill: 'red' })\n             *     .shadow(true);\n             */\n            shadow: function(shadowOptions, group, cutOff) {\n                var shadows = [],\n                    i,\n                    shadow,\n                    element = this.element,\n                    strokeWidth,\n                    shadowWidth,\n                    shadowElementOpacity,\n\n                    // compensate for inverted plot area\n                    transform;\n\n                if (!shadowOptions) {\n                    this.destroyShadows();\n\n                } else if (!this.shadows) {\n                    shadowWidth = pick(shadowOptions.width, 3);\n                    shadowElementOpacity = (shadowOptions.opacity || 0.15) / shadowWidth;\n                    transform = this.parentInverted ?\n                        '(-1,-1)' :\n                        '(' + pick(shadowOptions.offsetX, 1) + ', ' + pick(shadowOptions.offsetY, 1) + ')';\n                    for (i = 1; i <= shadowWidth; i++) {\n                        shadow = element.cloneNode(0);\n                        strokeWidth = (shadowWidth * 2) + 1 - (2 * i);\n                        attr(shadow, {\n                            'isShadow': 'true',\n                            'stroke': shadowOptions.color || '#000000',\n                            'stroke-opacity': shadowElementOpacity * i,\n                            'stroke-width': strokeWidth,\n                            'transform': 'translate' + transform,\n                            'fill': 'none'\n                        });\n                        if (cutOff) {\n                            attr(shadow, 'height', Math.max(attr(shadow, 'height') - strokeWidth, 0));\n                            shadow.cutHeight = strokeWidth;\n                        }\n\n                        if (group) {\n                            group.element.appendChild(shadow);\n                        } else {\n                            element.parentNode.insertBefore(shadow, element);\n                        }\n\n                        shadows.push(shadow);\n                    }\n\n                    this.shadows = shadows;\n                }\n                return this;\n\n            },\n\n            /**\n             * Destroy shadows on the element.\n             * @private\n             */\n            destroyShadows: function() {\n                each(this.shadows || [], function(shadow) {\n                    this.safeRemoveChild(shadow);\n                }, this);\n                this.shadows = undefined;\n            },\n\n\n\n            xGetter: function(key) {\n                if (this.element.nodeName === 'circle') {\n                    if (key === 'x') {\n                        key = 'cx';\n                    } else if (key === 'y') {\n                        key = 'cy';\n                    }\n                }\n                return this._defaultGetter(key);\n            },\n\n            /**\n             * Get the current value of an attribute or pseudo attribute, used mainly\n             * for animation. Called internally from the {@link SVGRenderer#attr}\n             * function.\n             *\n             * @private\n             */\n            _defaultGetter: function(key) {\n                var ret = pick(this[key], this.element ? this.element.getAttribute(key) : null, 0);\n\n                if (/^[\\-0-9\\.]+$/.test(ret)) { // is numerical\n                    ret = parseFloat(ret);\n                }\n                return ret;\n            },\n\n\n            dSetter: function(value, key, element) {\n                if (value && value.join) { // join path\n                    value = value.join(' ');\n                }\n                if (/(NaN| {2}|^$)/.test(value)) {\n                    value = 'M 0 0';\n                }\n                element.setAttribute(key, value);\n\n                this[key] = value;\n            },\n\n            dashstyleSetter: function(value) {\n                var i,\n                    strokeWidth = this['stroke-width'];\n\n                // If \"inherit\", like maps in IE, assume 1 (#4981). With HC5 and the new strokeWidth \n                // function, we should be able to use that instead.\n                if (strokeWidth === 'inherit') {\n                    strokeWidth = 1;\n                }\n                value = value && value.toLowerCase();\n                if (value) {\n                    value = value\n                        .replace('shortdashdotdot', '3,1,1,1,1,1,')\n                        .replace('shortdashdot', '3,1,1,1')\n                        .replace('shortdot', '1,1,')\n                        .replace('shortdash', '3,1,')\n                        .replace('longdash', '8,3,')\n                        .replace(/dot/g, '1,3,')\n                        .replace('dash', '4,3,')\n                        .replace(/,$/, '')\n                        .split(','); // ending comma\n\n                    i = value.length;\n                    while (i--) {\n                        value[i] = pInt(value[i]) * strokeWidth;\n                    }\n                    value = value.join(',')\n                        .replace(/NaN/g, 'none'); // #3226\n                    this.element.setAttribute('stroke-dasharray', value);\n                }\n            },\n\n            alignSetter: function(value) {\n                var convert = {\n                    left: 'start',\n                    center: 'middle',\n                    right: 'end'\n                };\n                this.element.setAttribute('text-anchor', convert[value]);\n            },\n            opacitySetter: function(value, key, element) {\n                this[key] = value;\n                element.setAttribute(key, value);\n            },\n            titleSetter: function(value) {\n                var titleNode = this.element.getElementsByTagName('title')[0];\n                if (!titleNode) {\n                    titleNode = doc.createElementNS(this.SVG_NS, 'title');\n                    this.element.appendChild(titleNode);\n                }\n\n                // Remove text content if it exists\n                if (titleNode.firstChild) {\n                    titleNode.removeChild(titleNode.firstChild);\n                }\n\n                titleNode.appendChild(\n                    doc.createTextNode(\n                        (String(pick(value), '')).replace(/<[^>]*>/g, '') // #3276, #3895\n                    )\n                );\n            },\n            textSetter: function(value) {\n                if (value !== this.textStr) {\n                    // Delete bBox memo when the text changes\n                    delete this.bBox;\n\n                    this.textStr = value;\n                    if (this.added) {\n                        this.renderer.buildText(this);\n                    }\n                }\n            },\n            fillSetter: function(value, key, element) {\n                if (typeof value === 'string') {\n                    element.setAttribute(key, value);\n                } else if (value) {\n                    this.colorGradient(value, key, element);\n                }\n            },\n            visibilitySetter: function(value, key, element) {\n                // IE9-11 doesn't handle visibilty:inherit well, so we remove the attribute instead (#2881, #3909)\n                if (value === 'inherit') {\n                    element.removeAttribute(key);\n                } else {\n                    element.setAttribute(key, value);\n                }\n            },\n            zIndexSetter: function(value, key) {\n                var renderer = this.renderer,\n                    parentGroup = this.parentGroup,\n                    parentWrapper = parentGroup || renderer,\n                    parentNode = parentWrapper.element || renderer.box,\n                    childNodes,\n                    otherElement,\n                    otherZIndex,\n                    element = this.element,\n                    inserted,\n                    run = this.added,\n                    i;\n\n                if (defined(value)) {\n                    element.zIndex = value; // So we can read it for other elements in the group\n                    value = +value;\n                    if (this[key] === value) { // Only update when needed (#3865)\n                        run = false;\n                    }\n                    this[key] = value;\n                }\n\n                // Insert according to this and other elements' zIndex. Before .add() is called,\n                // nothing is done. Then on add, or by later calls to zIndexSetter, the node\n                // is placed on the right place in the DOM.\n                if (run) {\n                    value = this.zIndex;\n\n                    if (value && parentGroup) {\n                        parentGroup.handleZ = true;\n                    }\n\n                    childNodes = parentNode.childNodes;\n                    for (i = 0; i < childNodes.length && !inserted; i++) {\n                        otherElement = childNodes[i];\n                        otherZIndex = otherElement.zIndex;\n                        if (otherElement !== element && (\n                                // Insert before the first element with a higher zIndex\n                                pInt(otherZIndex) > value ||\n                                // If no zIndex given, insert before the first element with a zIndex\n                                (!defined(value) && defined(otherZIndex)) ||\n                                // Negative zIndex versus no zIndex:\n                                // On all levels except the highest. If the parent is <svg>,\n                                // then we don't want to put items before <desc> or <defs>\n                                (value < 0 && !defined(otherZIndex) && parentNode !== renderer.box)\n\n                            )) {\n                            parentNode.insertBefore(element, otherElement);\n                            inserted = true;\n                        }\n                    }\n                    if (!inserted) {\n                        parentNode.appendChild(element);\n                    }\n                }\n                return inserted;\n            },\n            _defaultSetter: function(value, key, element) {\n                element.setAttribute(key, value);\n            }\n        };\n\n        // Some shared setters and getters\n        SVGElement.prototype.yGetter = SVGElement.prototype.xGetter;\n        SVGElement.prototype.translateXSetter = SVGElement.prototype.translateYSetter =\n            SVGElement.prototype.rotationSetter = SVGElement.prototype.verticalAlignSetter =\n            SVGElement.prototype.scaleXSetter = SVGElement.prototype.scaleYSetter = function(value, key) {\n                this[key] = value;\n                this.doTransform = true;\n            };\n\n\n        // WebKit and Batik have problems with a stroke-width of zero, so in this case we remove the \n        // stroke attribute altogether. #1270, #1369, #3065, #3072.\n        SVGElement.prototype['stroke-widthSetter'] = SVGElement.prototype.strokeSetter = function(value, key, element) {\n            this[key] = value;\n            // Only apply the stroke attribute if the stroke width is defined and larger than 0\n            if (this.stroke && this['stroke-width']) {\n                SVGElement.prototype.fillSetter.call(this, this.stroke, 'stroke', element); // use prototype as instance may be overridden\n                element.setAttribute('stroke-width', this['stroke-width']);\n                this.hasStroke = true;\n            } else if (key === 'stroke-width' && value === 0 && this.hasStroke) {\n                element.removeAttribute('stroke');\n                this.hasStroke = false;\n            }\n        };\n\n\n        /**\n         * Allows direct access to the Highcharts rendering layer in order to draw\n         * primitive shapes like circles, rectangles, paths or text directly on a chart,\n         * or independent from any chart. The SVGRenderer represents a wrapper object\n         * for SVGin modern browsers and through the VMLRenderer, for VML in IE < 8.\n         *\n         * An existing chart's renderer can be accessed through {@link Chart#renderer}.\n         * The renderer can also be used completely decoupled from a chart.\n         *\n         * @param {HTMLDOMElement} container - Where to put the SVG in the web page.\n         * @param {number} width - The width of the SVG.\n         * @param {number} height - The height of the SVG.\n         * @param {boolean} [forExport=false] - Whether the rendered content is intended\n         *   for export.\n         * @param {boolean} [allowHTML=true] - Whether the renderer is allowed to\n         *   include HTML text, which will be projected on top of the SVG.\n         *\n         * @example\n         * // Use directly without a chart object.\n         * var renderer = new Highcharts.Renderer(parentNode, 600, 400);\n         *\n         * @sample highcharts/members/renderer-on-chart - Annotating a chart programmatically.\n         * @sample highcharts/members/renderer-basic - Independedt SVG drawing.\n         *\n         * @class\n         */\n        SVGRenderer = H.SVGRenderer = function() {\n            this.init.apply(this, arguments);\n        };\n        SVGRenderer.prototype = {\n            /**\n             * A pointer to the renderer's associated Element class. The VMLRenderer\n             * will have a pointer to VMLElement here.\n             * @type {SVGElement}\n             */\n            Element: SVGElement,\n            SVG_NS: SVG_NS,\n            /**\n             * Initialize the SVGRenderer. Overridable initiator function that takes\n             * the same parameters as the constructor.\n             */\n            init: function(container, width, height, style, forExport, allowHTML) {\n                var renderer = this,\n                    boxWrapper,\n                    element,\n                    desc;\n\n                boxWrapper = renderer.createElement('svg')\n                    .attr({\n                        'version': '1.1',\n                        'class': 'highcharts-root'\n                    })\n\n                    .css(this.getStyle(style));\n                element = boxWrapper.element;\n                container.appendChild(element);\n\n                // For browsers other than IE, add the namespace attribute (#1978)\n                if (container.innerHTML.indexOf('xmlns') === -1) {\n                    attr(element, 'xmlns', this.SVG_NS);\n                }\n\n                // object properties\n                renderer.isSVG = true;\n\n                /** \n                 * The root `svg` node of the renderer.\n                 * @type {SVGDOMElement}\n                 */\n                this.box = element;\n                /** \n                 * The wrapper for the root `svg` node of the renderer.\n                 * @type {SVGElement}\n                 */\n                this.boxWrapper = boxWrapper;\n                renderer.alignedObjects = [];\n\n                /**\n                 * Page url used for internal references.\n                 * @type {string}\n                 */\n                // #24, #672, #1070\n                this.url = (isFirefox || isWebKit) && doc.getElementsByTagName('base').length ?\n                    win.location.href\n                    .replace(/#.*?$/, '') // remove the hash\n                    .replace(/<[^>]*>/g, '') // wing cut HTML\n                    .replace(/([\\('\\)])/g, '\\\\$1') // escape parantheses and quotes\n                    .replace(/ /g, '%20') : // replace spaces (needed for Safari only)\n                    '';\n\n                // Add description\n                desc = this.createElement('desc').add();\n                desc.element.appendChild(doc.createTextNode('Created with Highcharts 5.0.10'));\n\n\n                renderer.defs = this.createElement('defs').add();\n                renderer.allowHTML = allowHTML;\n                renderer.forExport = forExport;\n                renderer.gradients = {}; // Object where gradient SvgElements are stored\n                renderer.cache = {}; // Cache for numerical bounding boxes\n                renderer.cacheKeys = [];\n                renderer.imgCount = 0;\n\n                renderer.setSize(width, height, false);\n\n\n\n                // Issue 110 workaround:\n                // In Firefox, if a div is positioned by percentage, its pixel position may land\n                // between pixels. The container itself doesn't display this, but an SVG element\n                // inside this container will be drawn at subpixel precision. In order to draw\n                // sharp lines, this must be compensated for. This doesn't seem to work inside\n                // iframes though (like in jsFiddle).\n                var subPixelFix, rect;\n                if (isFirefox && container.getBoundingClientRect) {\n                    subPixelFix = function() {\n                        css(container, {\n                            left: 0,\n                            top: 0\n                        });\n                        rect = container.getBoundingClientRect();\n                        css(container, {\n                            left: (Math.ceil(rect.left) - rect.left) + 'px',\n                            top: (Math.ceil(rect.top) - rect.top) + 'px'\n                        });\n                    };\n\n                    // run the fix now\n                    subPixelFix();\n\n                    // run it on resize\n                    renderer.unSubPixelFix = addEvent(win, 'resize', subPixelFix);\n                }\n            },\n\n\n\n            /**\n             * Get the global style setting for the renderer.\n             * @private\n             * @param  {CSSObject} style - Style settings.\n             * @return {CSSObject} The style settings mixed with defaults.\n             */\n            getStyle: function(style) {\n                this.style = extend({\n\n                    fontFamily: '\"Lucida Grande\", \"Lucida Sans Unicode\", Arial, Helvetica, sans-serif', // default font\n                    fontSize: '12px'\n\n                }, style);\n                return this.style;\n            },\n            /**\n             * Apply the global style on the renderer, mixed with the default styles.\n             * @param {CSSObject} style - CSS to apply.\n             */\n            setStyle: function(style) {\n                this.boxWrapper.css(this.getStyle(style));\n            },\n\n\n            /**\n             * Detect whether the renderer is hidden. This happens when one of the\n             * parent elements has display: none. Used internally to detect when we need\n             * to render preliminarily in another div to get the text bounding boxes \n             * right.\n             *\n             * @returns {boolean} True if it is hidden.\n             */\n            isHidden: function() { // #608\n                return !this.boxWrapper.getBBox().width;\n            },\n\n            /**\n             * Destroys the renderer and its allocated members.\n             */\n            destroy: function() {\n                var renderer = this,\n                    rendererDefs = renderer.defs;\n                renderer.box = null;\n                renderer.boxWrapper = renderer.boxWrapper.destroy();\n\n                // Call destroy on all gradient elements\n                destroyObjectProperties(renderer.gradients || {});\n                renderer.gradients = null;\n\n                // Defs are null in VMLRenderer\n                // Otherwise, destroy them here.\n                if (rendererDefs) {\n                    renderer.defs = rendererDefs.destroy();\n                }\n\n                // Remove sub pixel fix handler (#982)\n                if (renderer.unSubPixelFix) {\n                    renderer.unSubPixelFix();\n                }\n\n                renderer.alignedObjects = null;\n\n                return null;\n            },\n\n            /**\n             * Create a wrapper for an SVG element. Serves as a factory for \n             * {@link SVGElement}, but this function is itself mostly called from \n             * primitive factories like {@link SVGRenderer#path}, {@link\n             * SVGRenderer#rect} or {@link SVGRenderer#text}.\n             * \n             * @param {string} nodeName - The node name, for example `rect`, `g` etc.\n             * @returns {SVGElement} The generated SVGElement.\n             */\n            createElement: function(nodeName) {\n                var wrapper = new this.Element();\n                wrapper.init(this, nodeName);\n                return wrapper;\n            },\n\n            /**\n             * Dummy function for plugins, called every time the renderer is updated.\n             * Prior to Highcharts 5, this was used for the canvg renderer.\n             * @function\n             */\n            draw: noop,\n\n            /**\n             * Get converted radial gradient attributes according to the radial\n             * reference. Used internally from the {@link SVGElement#colorGradient}\n             * function.\n             *\n             * @private\n             */\n            getRadialAttr: function(radialReference, gradAttr) {\n                return {\n                    cx: (radialReference[0] - radialReference[2] / 2) + gradAttr.cx * radialReference[2],\n                    cy: (radialReference[1] - radialReference[2] / 2) + gradAttr.cy * radialReference[2],\n                    r: gradAttr.r * radialReference[2]\n                };\n            },\n\n            getSpanWidth: function(wrapper, tspan) {\n                var renderer = this,\n                    bBox = wrapper.getBBox(true),\n                    actualWidth = bBox.width;\n\n                // Old IE cannot measure the actualWidth for SVG elements (#2314)\n                if (!svg && renderer.forExport) {\n                    actualWidth = renderer.measureSpanWidth(tspan.firstChild.data, wrapper.styles);\n                }\n                return actualWidth;\n            },\n\n            applyEllipsis: function(wrapper, tspan, text, width) {\n                var renderer = this,\n                    actualWidth = renderer.getSpanWidth(wrapper, tspan),\n                    wasTooLong = actualWidth > width,\n                    str = text,\n                    currentIndex,\n                    minIndex = 0,\n                    maxIndex = text.length,\n                    updateTSpan = function(s) {\n                        tspan.removeChild(tspan.firstChild);\n                        if (s) {\n                            tspan.appendChild(doc.createTextNode(s));\n                        }\n                    };\n                if (wasTooLong) {\n                    while (minIndex <= maxIndex) {\n                        currentIndex = Math.ceil((minIndex + maxIndex) / 2);\n                        str = text.substring(0, currentIndex) + '\\u2026';\n                        updateTSpan(str);\n                        actualWidth = renderer.getSpanWidth(wrapper, tspan);\n                        if (minIndex === maxIndex) {\n                            // Complete\n                            minIndex = maxIndex + 1;\n                        } else if (actualWidth > width) {\n                            // Too large. Set max index to current.\n                            maxIndex = currentIndex - 1;\n                        } else {\n                            // Within width. Set min index to current.\n                            minIndex = currentIndex;\n                        }\n                    }\n                    // If max index was 0 it means just ellipsis was also to large.\n                    if (maxIndex === 0) {\n                        // Remove ellipses.\n                        updateTSpan('');\n                    }\n                }\n                return wasTooLong;\n            },\n\n            /**\n             * Parse a simple HTML string into SVG tspans. Called internally when text\n             *   is set on an SVGElement. The function supports a subset of HTML tags,\n             *   CSS text features like `width`, `text-overflow`, `white-space`, and\n             *   also attributes like `href` and `style`.\n             * @private\n             * @param {SVGElement} wrapper The parent SVGElement.\n             */\n            buildText: function(wrapper) {\n                var textNode = wrapper.element,\n                    renderer = this,\n                    forExport = renderer.forExport,\n                    textStr = pick(wrapper.textStr, '').toString(),\n                    hasMarkup = textStr.indexOf('<') !== -1,\n                    lines,\n                    childNodes = textNode.childNodes,\n                    clsRegex,\n                    styleRegex,\n                    hrefRegex,\n                    wasTooLong,\n                    parentX = attr(textNode, 'x'),\n                    textStyles = wrapper.styles,\n                    width = wrapper.textWidth,\n                    textLineHeight = textStyles && textStyles.lineHeight,\n                    textOutline = textStyles && textStyles.textOutline,\n                    ellipsis = textStyles && textStyles.textOverflow === 'ellipsis',\n                    noWrap = textStyles && textStyles.whiteSpace === 'nowrap',\n                    fontSize = textStyles && textStyles.fontSize,\n                    textCache,\n                    isSubsequentLine,\n                    i = childNodes.length,\n                    tempParent = width && !wrapper.added && this.box,\n                    getLineHeight = function(tspan) {\n                        var fontSizeStyle;\n\n                        fontSizeStyle = /(px|em)$/.test(tspan && tspan.style.fontSize) ?\n                            tspan.style.fontSize :\n                            (fontSize || renderer.style.fontSize || 12);\n\n\n                        return textLineHeight ?\n                            pInt(textLineHeight) :\n                            renderer.fontMetrics(\n                                fontSizeStyle,\n                                // Get the computed size from parent if not explicit\n                                tspan.getAttribute('style') ? tspan : textNode\n                            ).h;\n                    },\n                    unescapeAngleBrackets = function(inputStr) {\n                        return inputStr.replace(/&lt;/g, '<').replace(/&gt;/g, '>');\n                    };\n\n                // The buildText code is quite heavy, so if we're not changing something\n                // that affects the text, skip it (#6113).\n                textCache = [\n                    textStr,\n                    ellipsis,\n                    noWrap,\n                    textLineHeight,\n                    textOutline,\n                    fontSize,\n                    width\n                ].join(',');\n                if (textCache === wrapper.textCache) {\n                    return;\n                }\n                wrapper.textCache = textCache;\n\n                /// remove old text\n                while (i--) {\n                    textNode.removeChild(childNodes[i]);\n                }\n\n                // Skip tspans, add text directly to text node. The forceTSpan is a hook\n                // used in text outline hack.\n                if (!hasMarkup && !textOutline && !ellipsis && !width && textStr.indexOf(' ') === -1) {\n                    textNode.appendChild(doc.createTextNode(unescapeAngleBrackets(textStr)));\n\n                    // Complex strings, add more logic\n                } else {\n\n                    clsRegex = /<.*class=\"([^\"]+)\".*>/;\n                    styleRegex = /<.*style=\"([^\"]+)\".*>/;\n                    hrefRegex = /<.*href=\"(http[^\"]+)\".*>/;\n\n                    if (tempParent) {\n                        tempParent.appendChild(textNode); // attach it to the DOM to read offset width\n                    }\n\n                    if (hasMarkup) {\n                        lines = textStr\n\n                            .replace(/<(b|strong)>/g, '<span style=\"font-weight:bold\">')\n                            .replace(/<(i|em)>/g, '<span style=\"font-style:italic\">')\n\n                            .replace(/<a/g, '<span')\n                            .replace(/<\\/(b|strong|i|em|a)>/g, '</span>')\n                            .split(/<br.*?>/g);\n\n                    } else {\n                        lines = [textStr];\n                    }\n\n\n                    // Trim empty lines (#5261)\n                    lines = grep(lines, function(line) {\n                        return line !== '';\n                    });\n\n\n                    // build the lines\n                    each(lines, function buildTextLines(line, lineNo) {\n                        var spans,\n                            spanNo = 0;\n                        line = line\n                            .replace(/^\\s+|\\s+$/g, '') // Trim to prevent useless/costly process on the spaces (#5258)\n                            .replace(/<span/g, '|||<span')\n                            .replace(/<\\/span>/g, '</span>|||');\n                        spans = line.split('|||');\n\n                        each(spans, function buildTextSpans(span) {\n                            if (span !== '' || spans.length === 1) {\n                                var attributes = {},\n                                    tspan = doc.createElementNS(renderer.SVG_NS, 'tspan'),\n                                    spanCls,\n                                    spanStyle; // #390\n                                if (clsRegex.test(span)) {\n                                    spanCls = span.match(clsRegex)[1];\n                                    attr(tspan, 'class', spanCls);\n                                }\n                                if (styleRegex.test(span)) {\n                                    spanStyle = span.match(styleRegex)[1].replace(/(;| |^)color([ :])/, '$1fill$2');\n                                    attr(tspan, 'style', spanStyle);\n                                }\n                                if (hrefRegex.test(span) && !forExport) { // Not for export - #1529\n                                    attr(tspan, 'onclick', 'onclick=window.open(\\\"'+ span.match(hrefRegex)[1] +'\\\",\\\"_blank\\\")');\n                                    css(tspan, {\n                                        cursor: 'pointer'\n                                    });\n                                }\n\n                                span = unescapeAngleBrackets(span.replace(/<(.|\\n)*?>/g, '') || ' ');\n\n                                // Nested tags aren't supported, and cause crash in Safari (#1596)\n                                if (span !== ' ') {\n\n                                    // add the text node\n                                    tspan.appendChild(doc.createTextNode(span));\n\n                                    if (!spanNo) { // first span in a line, align it to the left\n                                        if (lineNo && parentX !== null) {\n                                            attributes.x = parentX;\n                                        }\n                                    } else {\n                                        attributes.dx = 0; // #16\n                                    }\n\n                                    // add attributes\n                                    attr(tspan, attributes);\n\n                                    // Append it\n                                    textNode.appendChild(tspan);\n\n                                    // first span on subsequent line, add the line height\n                                    if (!spanNo && isSubsequentLine) {\n\n                                        // allow getting the right offset height in exporting in IE\n                                        if (!svg && forExport) {\n                                            css(tspan, {\n                                                display: 'block'\n                                            });\n                                        }\n\n                                        // Set the line height based on the font size of either\n                                        // the text element or the tspan element\n                                        attr(\n                                            tspan,\n                                            'dy',\n                                            getLineHeight(tspan)\n                                        );\n                                    }\n\n                                    /*if (width) {\n                                    \trenderer.breakText(wrapper, width);\n                                    }*/\n\n                                    // Check width and apply soft breaks or ellipsis\n                                    if (width) {\n                                        var words = span.replace(/([^\\^])-/g, '$1- ').split(' '), // #1273\n                                            hasWhiteSpace = spans.length > 1 || lineNo || (words.length > 1 && !noWrap),\n                                            tooLong,\n                                            rest = [],\n                                            actualWidth,\n                                            dy = getLineHeight(tspan),\n                                            rotation = wrapper.rotation;\n\n                                        if (ellipsis) {\n                                            wasTooLong = renderer.applyEllipsis(wrapper, tspan, span, width);\n                                        }\n\n                                        while (!ellipsis && hasWhiteSpace && (words.length || rest.length)) {\n                                            wrapper.rotation = 0; // discard rotation when computing box\n                                            actualWidth = renderer.getSpanWidth(wrapper, tspan);\n                                            tooLong = actualWidth > width;\n\n                                            // For ellipsis, do a binary search for the correct string length\n                                            if (wasTooLong === undefined) {\n                                                wasTooLong = tooLong; // First time\n                                            }\n\n                                            // Looping down, this is the first word sequence that is not too long,\n                                            // so we can move on to build the next line.\n                                            if (!tooLong || words.length === 1) {\n                                                words = rest;\n                                                rest = [];\n\n                                                if (words.length && !noWrap) {\n                                                    tspan = doc.createElementNS(SVG_NS, 'tspan');\n                                                    attr(tspan, {\n                                                        dy: dy,\n                                                        x: parentX\n                                                    });\n                                                    if (spanStyle) { // #390\n                                                        attr(tspan, 'style', spanStyle);\n                                                    }\n                                                    textNode.appendChild(tspan);\n                                                }\n                                                if (actualWidth > width) { // a single word is pressing it out\n                                                    width = actualWidth;\n                                                }\n                                            } else { // append to existing line tspan\n                                                tspan.removeChild(tspan.firstChild);\n                                                rest.unshift(words.pop());\n                                            }\n                                            if (words.length) {\n                                                tspan.appendChild(doc.createTextNode(words.join(' ').replace(/- /g, '-')));\n                                            }\n                                        }\n                                        wrapper.rotation = rotation;\n                                    }\n\n                                    spanNo++;\n                                }\n                            }\n                        });\n                        // To avoid beginning lines that doesn't add to the textNode (#6144)\n                        isSubsequentLine = isSubsequentLine || textNode.childNodes.length;\n                    });\n\n                    if (wasTooLong) {\n                        wrapper.attr('title', wrapper.textStr);\n                    }\n                    if (tempParent) {\n                        tempParent.removeChild(textNode); // attach it to the DOM to read offset width\n                    }\n\n                    // Apply the text outline\n                    if (textOutline && wrapper.applyTextOutline) {\n                        wrapper.applyTextOutline(textOutline);\n                    }\n                }\n            },\n\n\n\n            /*\n            breakText: function (wrapper, width) {\n            \tvar bBox = wrapper.getBBox(),\n            \t\tnode = wrapper.element,\n            \t\ttextLength = node.textContent.length,\n            \t\tpos = Math.round(width * textLength / bBox.width), // try this position first, based on average character width\n            \t\tincrement = 0,\n            \t\tfinalPos;\n\n            \tif (bBox.width > width) {\n            \t\twhile (finalPos === undefined) {\n            \t\t\ttextLength = node.getSubStringLength(0, pos);\n\n            \t\t\tif (textLength <= width) {\n            \t\t\t\tif (increment === -1) {\n            \t\t\t\t\tfinalPos = pos;\n            \t\t\t\t} else {\n            \t\t\t\t\tincrement = 1;\n            \t\t\t\t}\n            \t\t\t} else {\n            \t\t\t\tif (increment === 1) {\n            \t\t\t\t\tfinalPos = pos - 1;\n            \t\t\t\t} else {\n            \t\t\t\t\tincrement = -1;\n            \t\t\t\t}\n            \t\t\t}\n            \t\t\tpos += increment;\n            \t\t}\n            \t}\n            \tconsole.log('width', width, 'stringWidth', node.getSubStringLength(0, finalPos))\n            },\n            */\n\n            /**\n             * Returns white for dark colors and black for bright colors.\n             *\n             * @param {ColorString} rgba - The color to get the contrast for.\n             * @returns {string} The contrast color, either `#000000` or `#FFFFFF`.\n             */\n            getContrast: function(rgba) {\n                rgba = color(rgba).rgba;\n\n                // The threshold may be discussed. Here's a proposal for adding\n                // different weight to the color channels (#6216)\n                /*\n        rgba[0] *= 1; // red\n        rgba[1] *= 1.2; // green\n        rgba[2] *= 0.7; // blue\n        */\n\n                return rgba[0] + rgba[1] + rgba[2] > 2 * 255 ? '#000000' : '#FFFFFF';\n            },\n\n            /**\n             * Create a button with preset states.\n             * @param {string} text - The text or HTML to draw.\n             * @param {number} x - The x position of the button's left side.\n             * @param {number} y - The y position of the button's top side.\n             * @param {Function} callback - The function to execute on button click or \n             *    touch.\n             * @param {SVGAttributes} [normalState] - SVG attributes for the normal\n             *    state.\n             * @param {SVGAttributes} [hoverState] - SVG attributes for the hover state.\n             * @param {SVGAttributes} [pressedState] - SVG attributes for the pressed\n             *    state.\n             * @param {SVGAttributes} [disabledState] - SVG attributes for the disabled\n             *    state.\n             * @param {Symbol} [shape=rect] - The shape type.\n             * @returns {SVGRenderer} The button element.\n             */\n            button: function(text, x, y, callback, normalState, hoverState, pressedState, disabledState, shape) {\n                var label = this.label(text, x, y, shape, null, null, null, null, 'button'),\n                    curState = 0;\n\n                // Default, non-stylable attributes\n                label.attr(merge({\n                    'padding': 8,\n                    'r': 2\n                }, normalState));\n\n\n                // Presentational\n                var normalStyle,\n                    hoverStyle,\n                    pressedStyle,\n                    disabledStyle;\n\n                // Normal state - prepare the attributes\n                normalState = merge({\n                    fill: '#f7f7f7',\n                    stroke: '#cccccc',\n                    'stroke-width': 1,\n                    style: {\n                        color: '#333333',\n                        cursor: 'pointer',\n                        fontWeight: 'normal'\n                    }\n                }, normalState);\n                normalStyle = normalState.style;\n                delete normalState.style;\n\n                // Hover state\n                hoverState = merge(normalState, {\n                    fill: '#e6e6e6'\n                }, hoverState);\n                hoverStyle = hoverState.style;\n                delete hoverState.style;\n\n                // Pressed state\n                pressedState = merge(normalState, {\n                    fill: '#e6ebf5',\n                    style: {\n                        color: '#000000',\n                        fontWeight: 'bold'\n                    }\n                }, pressedState);\n                pressedStyle = pressedState.style;\n                delete pressedState.style;\n\n                // Disabled state\n                disabledState = merge(normalState, {\n                    style: {\n                        color: '#cccccc'\n                    }\n                }, disabledState);\n                disabledStyle = disabledState.style;\n                delete disabledState.style;\n\n\n                // Add the events. IE9 and IE10 need mouseover and mouseout to funciton (#667).\n                addEvent(label.element, isMS ? 'mouseover' : 'mouseenter', function() {\n                    if (curState !== 3) {\n                        label.setState(1);\n                    }\n                });\n                addEvent(label.element, isMS ? 'mouseout' : 'mouseleave', function() {\n                    if (curState !== 3) {\n                        label.setState(curState);\n                    }\n                });\n\n                label.setState = function(state) {\n                    // Hover state is temporary, don't record it\n                    if (state !== 1) {\n                        label.state = curState = state;\n                    }\n                    // Update visuals\n                    label.removeClass(/highcharts-button-(normal|hover|pressed|disabled)/)\n                        .addClass('highcharts-button-' + ['normal', 'hover', 'pressed', 'disabled'][state || 0]);\n\n\n                    label.attr([normalState, hoverState, pressedState, disabledState][state || 0])\n                        .css([normalStyle, hoverStyle, pressedStyle, disabledStyle][state || 0]);\n\n                };\n\n\n\n                // Presentational attributes\n                label\n                    .attr(normalState)\n                    .css(extend({\n                        cursor: 'default'\n                    }, normalStyle));\n\n\n                return label\n                    .on('click', function(e) {\n                        if (curState !== 3) {\n                            callback.call(label, e);\n                        }\n                    });\n            },\n\n            /**\n             * Make a straight line crisper by not spilling out to neighbour pixels.\n             * \n             * @param {Array} points - The original points on the format `['M', 0, 0,\n             *    'L', 100, 0]`.\n             * @param {number} width - The width of the line.\n             * @returns {Array} The original points array, but modified to render\n             * crisply.\n             */\n            crispLine: function(points, width) {\n                // normalize to a crisp line\n                if (points[1] === points[4]) {\n                    // Substract due to #1129. Now bottom and left axis gridlines behave the same.\n                    points[1] = points[4] = Math.round(points[1]) - (width % 2 / 2);\n                }\n                if (points[2] === points[5]) {\n                    points[2] = points[5] = Math.round(points[2]) + (width % 2 / 2);\n                }\n                return points;\n            },\n\n\n            /**\n             * Draw a path, wraps the SVG `path` element.\n             * \n             * @param {Array} [path] An SVG path definition in array form.\n             * \n             * @example\n             * var path = renderer.path(['M', 10, 10, 'L', 30, 30, 'z'])\n             *     .attr({ stroke: '#ff00ff' })\n             *     .add();\n             * @returns {SVGElement} The generated wrapper element.\n             */\n            /**\n             * Draw a path, wraps the SVG `path` element.\n             * \n             * @param {SVGAttributes} [attribs] The initial attributes.\n             * @returns {SVGElement} The generated wrapper element.\n             */\n            path: function(path) {\n                var attribs = {\n\n                    fill: 'none'\n\n                };\n                if (isArray(path)) {\n                    attribs.d = path;\n                } else if (isObject(path)) { // attributes\n                    extend(attribs, path);\n                }\n                return this.createElement('path').attr(attribs);\n            },\n\n            /**\n             * Draw a circle, wraps the SVG `circle` element.\n             * \n             * @param {number} [x] The center x position.\n             * @param {number} [y] The center y position.\n             * @param {number} [r] The radius.\n             * @returns {SVGElement} The generated wrapper element.\n             */\n            /**\n             * Draw a circle, wraps the SVG `circle` element.\n             * \n             * @param {SVGAttributes} [attribs] The initial attributes.\n             * @returns {SVGElement} The generated wrapper element.\n             */\n            circle: function(x, y, r) {\n                var attribs = isObject(x) ? x : {\n                        x: x,\n                        y: y,\n                        r: r\n                    },\n                    wrapper = this.createElement('circle');\n\n                // Setting x or y translates to cx and cy\n                wrapper.xSetter = wrapper.ySetter = function(value, key, element) {\n                    element.setAttribute('c' + key, value);\n                };\n\n                return wrapper.attr(attribs);\n            },\n\n            /**\n             * Draw and return an arc.\n             * @param {number} [x=0] Center X position.\n             * @param {number} [y=0] Center Y position.\n             * @param {number} [r=0] The outer radius of the arc.\n             * @param {number} [innerR=0] Inner radius like used in donut charts.\n             * @param {number} [start=0] The starting angle of the arc in radians, where\n             *    0 is to the right and `-Math.PI/2` is up.\n             * @param {number} [end=0] The ending angle of the arc in radians, where 0\n             *    is to the right and `-Math.PI/2` is up.\n             * @returns {SVGElement} The generated wrapper element.\n             */\n            /**\n             * Draw and return an arc. Overloaded function that takes arguments object.\n             * @param {SVGAttributes} attribs Initial SVG attributes.\n             * @returns {SVGElement} The generated wrapper element.\n             */\n            arc: function(x, y, r, innerR, start, end) {\n                var arc,\n                    options;\n\n                if (isObject(x)) {\n                    options = x;\n                    y = options.y;\n                    r = options.r;\n                    innerR = options.innerR;\n                    start = options.start;\n                    end = options.end;\n                    x = options.x;\n                } else {\n                    options = {\n                        innerR: innerR,\n                        start: start,\n                        end: end\n                    };\n                }\n\n                // Arcs are defined as symbols for the ability to set\n                // attributes in attr and animate\n                arc = this.symbol('arc', x, y, r, r, options);\n                arc.r = r; // #959\n                return arc;\n            },\n\n            /**\n             * Draw and return a rectangle.\n             * @param {number} [x] Left position.\n             * @param {number} [y] Top position.\n             * @param {number} [width] Width of the rectangle.\n             * @param {number} [height] Height of the rectangle.\n             * @param {number} [r] Border corner radius.\n             * @param {number} [strokeWidth] A stroke width can be supplied to allow\n             *    crisp drawing.\n             * @returns {SVGElement} The generated wrapper element.\n             */\n            /**\n             * Draw and return a rectangle.\n             * @param {SVGAttributes} [attributes] General SVG attributes for the \n             *    rectangle.\n             * @returns {SVGElement} The generated wrapper element.\n             */\n            rect: function(x, y, width, height, r, strokeWidth) {\n\n                r = isObject(x) ? x.r : r;\n\n                var wrapper = this.createElement('rect'),\n                    attribs = isObject(x) ? x : x === undefined ? {} : {\n                        x: x,\n                        y: y,\n                        width: Math.max(width, 0),\n                        height: Math.max(height, 0)\n                    };\n\n\n                if (strokeWidth !== undefined) {\n                    attribs.strokeWidth = strokeWidth;\n                    attribs = wrapper.crisp(attribs);\n                }\n                attribs.fill = 'none';\n\n\n                if (r) {\n                    attribs.r = r;\n                }\n\n                wrapper.rSetter = function(value, key, element) {\n                    attr(element, {\n                        rx: value,\n                        ry: value\n                    });\n                };\n\n                return wrapper.attr(attribs);\n            },\n\n            /**\n             * Resize the {@link SVGRenderer#box} and re-align all aligned child\n             * elements.\n             * @param {number} width The new pixel width.\n             * @param {number} height The new pixel height.\n             * @param {boolean} animate Whether to animate.\n             */\n            setSize: function(width, height, animate) {\n                var renderer = this,\n                    alignedObjects = renderer.alignedObjects,\n                    i = alignedObjects.length;\n\n                renderer.width = width;\n                renderer.height = height;\n\n                renderer.boxWrapper.animate({\n                    width: width,\n                    height: height\n                }, {\n                    step: function() {\n                        this.attr({\n                            viewBox: '0 0 ' + this.attr('width') + ' ' + this.attr('height')\n                        });\n                    },\n                    duration: pick(animate, true) ? undefined : 0\n                });\n\n                while (i--) {\n                    alignedObjects[i].align();\n                }\n            },\n\n            /**\n             * Create and return an svg group element.\n             * \n             * @param {string} [name] The group will be given a class name of\n             * `highcharts-{name}`. This can be used for styling and scripting.\n             * @returns {SVGElement} The generated wrapper element.\n             */\n            g: function(name) {\n                var elem = this.createElement('g');\n                return name ? elem.attr({\n                    'class': 'highcharts-' + name\n                }) : elem;\n            },\n\n            /**\n             * Display an image.\n             * @param {string} src The image source.\n             * @param {number} [x] The X position.\n             * @param {number} [y] The Y position.\n             * @param {number} [width] The image width. If omitted, it defaults to the \n             *    image file width.\n             * @param {number} [height] The image height. If omitted it defaults to the\n             *    image file height.\n             * @returns {SVGElement} The generated wrapper element.\n             */\n            image: function(src, x, y, width, height) {\n                var attribs = {\n                        preserveAspectRatio: 'none'\n                    },\n                    elemWrapper;\n\n                // optional properties\n                if (arguments.length > 1) {\n                    extend(attribs, {\n                        x: x,\n                        y: y,\n                        width: width,\n                        height: height\n                    });\n                }\n\n                elemWrapper = this.createElement('image').attr(attribs);\n\n                // set the href in the xlink namespace\n                if (elemWrapper.element.setAttributeNS) {\n                    elemWrapper.element.setAttributeNS('http://www.w3.org/1999/xlink',\n                        'href', src);\n                } else {\n                    // could be exporting in IE\n                    // using href throws \"not supported\" in ie7 and under, requries regex shim to fix later\n                    elemWrapper.element.setAttribute('hc-svg-href', src);\n                }\n                return elemWrapper;\n            },\n\n            /**\n             * Draw a symbol out of pre-defined shape paths from {@SVGRenderer#symbols}.\n             * It is used in Highcharts for point makers, which cake a `symbol` option,\n             * and label and button backgrounds like in the tooltip and stock flags.\n             *\n             * @param {Symbol} symbol - The symbol name.\n             * @param {number} x - The X coordinate for the top left position.\n             * @param {number} y - The Y coordinate for the top left position.\n             * @param {number} width - The pixel width.\n             * @param {number} height - The pixel height.\n             * @param {Object} [options] - Additional options, depending on the actual\n             *    symbol drawn. \n             * @param {number} [options.anchorX] - The anchor X position for the\n             *    `callout` symbol. This is where the chevron points to.\n             * @param {number} [options.anchorY] - The anchor Y position for the\n             *    `callout` symbol. This is where the chevron points to.\n             * @param {number} [options.end] - The end angle of an `arc` symbol.\n             * @param {boolean} [options.open] - Whether to draw `arc` symbol open or\n             *    closed.\n             * @param {number} [options.r] - The radius of an `arc` symbol, or the\n             *    border radius for the `callout` symbol.\n             * @param {number} [options.start] - The start angle of an `arc` symbol.\n             */\n            symbol: function(symbol, x, y, width, height, options) {\n\n                var ren = this,\n                    obj,\n\n                    // get the symbol definition function\n                    symbolFn = this.symbols[symbol],\n\n                    // check if there's a path defined for this symbol\n                    path = defined(x) && symbolFn && this.symbols[symbol](\n                        Math.round(x),\n                        Math.round(y),\n                        width,\n                        height,\n                        options\n                    ),\n                    imageRegex = /^url\\((.*?)\\)$/,\n                    imageSrc,\n                    centerImage;\n\n                if (symbolFn) {\n                    obj = this.path(path);\n\n\n                    obj.attr('fill', 'none');\n\n\n                    // expando properties for use in animate and attr\n                    extend(obj, {\n                        symbolName: symbol,\n                        x: x,\n                        y: y,\n                        width: width,\n                        height: height\n                    });\n                    if (options) {\n                        extend(obj, options);\n                    }\n\n\n                    // image symbols\n                } else if (imageRegex.test(symbol)) {\n\n\n                    imageSrc = symbol.match(imageRegex)[1];\n\n                    // Create the image synchronously, add attribs async\n                    obj = this.image(imageSrc);\n\n                    // The image width is not always the same as the symbol width. The\n                    // image may be centered within the symbol, as is the case when\n                    // image shapes are used as label backgrounds, for example in flags.\n                    obj.imgwidth = pick(\n                        symbolSizes[imageSrc] && symbolSizes[imageSrc].width,\n                        options && options.width\n                    );\n                    obj.imgheight = pick(\n                        symbolSizes[imageSrc] && symbolSizes[imageSrc].height,\n                        options && options.height\n                    );\n                    /**\n                     * Set the size and position\n                     */\n                    centerImage = function() {\n                        obj.attr({\n                            width: obj.width,\n                            height: obj.height\n                        });\n                    };\n\n                    /**\n                     * Width and height setters that take both the image's physical size\n                     * and the label size into consideration, and translates the image\n                     * to center within the label.\n                     */\n                    each(['width', 'height'], function(key) {\n                        obj[key + 'Setter'] = function(value, key) {\n                            var attribs = {},\n                                imgSize = this['img' + key],\n                                trans = key === 'width' ? 'translateX' : 'translateY';\n                            this[key] = value;\n                            if (defined(imgSize)) {\n                                if (this.element) {\n                                    this.element.setAttribute(key, imgSize);\n                                }\n                                if (!this.alignByTranslate) {\n                                    attribs[trans] = ((this[key] || 0) - imgSize) / 2;\n                                    this.attr(attribs);\n                                }\n                            }\n                        };\n                    });\n\n\n                    if (defined(x)) {\n                        obj.attr({\n                            x: x,\n                            y: y\n                        });\n                    }\n                    obj.isImg = true;\n\n                    if (defined(obj.imgwidth) && defined(obj.imgheight)) {\n                        centerImage();\n                    } else {\n                        // Initialize image to be 0 size so export will still function if there's no cached sizes.\n                        obj.attr({\n                            width: 0,\n                            height: 0\n                        });\n\n                        // Create a dummy JavaScript image to get the width and height. Due to a bug in IE < 8,\n                        // the created element must be assigned to a variable in order to load (#292).\n                        createElement('img', {\n                            onload: function() {\n\n                                var chart = charts[ren.chartIndex];\n\n                                // Special case for SVGs on IE11, the width is not accessible until the image is\n                                // part of the DOM (#2854).\n                                if (this.width === 0) {\n                                    css(this, {\n                                        position: 'absolute',\n                                        top: '-999em'\n                                    });\n                                    doc.body.appendChild(this);\n                                }\n\n                                // Center the image\n                                symbolSizes[imageSrc] = { // Cache for next\t\n                                    width: this.width,\n                                    height: this.height\n                                };\n                                obj.imgwidth = this.width;\n                                obj.imgheight = this.height;\n\n                                if (obj.element) {\n                                    centerImage();\n                                }\n\n                                // Clean up after #2854 workaround.\n                                if (this.parentNode) {\n                                    this.parentNode.removeChild(this);\n                                }\n\n                                // Fire the load event when all external images are loaded\n                                ren.imgCount--;\n                                if (!ren.imgCount && chart && chart.onload) {\n                                    chart.onload();\n                                }\n                            },\n                            src: imageSrc\n                        });\n                        this.imgCount++;\n                    }\n                }\n\n                return obj;\n            },\n\n            /**\n             * @typedef {string} Symbol\n             * \n             * Can be one of `arc`, `callout`, `circle`, `diamond`, `square`,\n             * `triangle`, `triangle-down`. Symbols are used internally for point\n             * markers, button and label borders and backgrounds, or custom shapes.\n             * Extendable by adding to {@link SVGRenderer#symbols}.\n             */\n            /**\n             * An extendable collection of functions for defining symbol paths.\n             */\n            symbols: {\n                'circle': function(x, y, w, h) {\n                    // Return a full arc\n                    return this.arc(x + w / 2, y + h / 2, w / 2, h / 2, {\n                        start: 0,\n                        end: Math.PI * 2,\n                        open: false\n                    });\n                },\n\n                'square': function(x, y, w, h) {\n                    return [\n                        'M', x, y,\n                        'L', x + w, y,\n                        x + w, y + h,\n                        x, y + h,\n                        'Z'\n                    ];\n                },\n\n                'triangle': function(x, y, w, h) {\n                    return [\n                        'M', x + w / 2, y,\n                        'L', x + w, y + h,\n                        x, y + h,\n                        'Z'\n                    ];\n                },\n\n                'triangle-down': function(x, y, w, h) {\n                    return [\n                        'M', x, y,\n                        'L', x + w, y,\n                        x + w / 2, y + h,\n                        'Z'\n                    ];\n                },\n                'diamond': function(x, y, w, h) {\n                    return [\n                        'M', x + w / 2, y,\n                        'L', x + w, y + h / 2,\n                        x + w / 2, y + h,\n                        x, y + h / 2,\n                        'Z'\n                    ];\n                },\n                'arc': function(x, y, w, h, options) {\n                    var start = options.start,\n                        rx = options.r || w,\n                        ry = options.r || h || w,\n                        end = options.end - 0.001, // to prevent cos and sin of start and end from becoming equal on 360 arcs (related: #1561)\n                        innerRadius = options.innerR,\n                        open = options.open,\n                        cosStart = Math.cos(start),\n                        sinStart = Math.sin(start),\n                        cosEnd = Math.cos(end),\n                        sinEnd = Math.sin(end),\n                        longArc = options.end - start < Math.PI ? 0 : 1,\n                        arc;\n\n                    arc = [\n                        'M',\n                        x + rx * cosStart,\n                        y + ry * sinStart,\n                        'A', // arcTo\n                        rx, // x radius\n                        ry, // y radius\n                        0, // slanting\n                        longArc, // long or short arc\n                        1, // clockwise\n                        x + rx * cosEnd,\n                        y + ry * sinEnd\n                    ];\n\n                    if (defined(innerRadius)) {\n                        arc.push(\n                            open ? 'M' : 'L',\n                            x + innerRadius * cosEnd,\n                            y + innerRadius * sinEnd,\n                            'A', // arcTo\n                            innerRadius, // x radius\n                            innerRadius, // y radius\n                            0, // slanting\n                            longArc, // long or short arc\n                            0, // clockwise\n                            x + innerRadius * cosStart,\n                            y + innerRadius * sinStart\n                        );\n                    }\n\n                    arc.push(open ? '' : 'Z'); // close\n                    return arc;\n                },\n\n                /**\n                 * Callout shape used for default tooltips, also used for rounded rectangles in VML\n                 */\n                callout: function(x, y, w, h, options) {\n                    var arrowLength = 6,\n                        halfDistance = 6,\n                        r = Math.min((options && options.r) || 0, w, h),\n                        safeDistance = r + halfDistance,\n                        anchorX = options && options.anchorX,\n                        anchorY = options && options.anchorY,\n                        path;\n\n                    path = [\n                        'M', x + r, y,\n                        'L', x + w - r, y, // top side\n                        'C', x + w, y, x + w, y, x + w, y + r, // top-right corner\n                        'L', x + w, y + h - r, // right side\n                        'C', x + w, y + h, x + w, y + h, x + w - r, y + h, // bottom-right corner\n                        'L', x + r, y + h, // bottom side\n                        'C', x, y + h, x, y + h, x, y + h - r, // bottom-left corner\n                        'L', x, y + r, // left side\n                        'C', x, y, x, y, x + r, y // top-left corner\n                    ];\n\n                    // Anchor on right side\n                    if (anchorX && anchorX > w) {\n\n                        // Chevron\n                        if (anchorY > y + safeDistance && anchorY < y + h - safeDistance) {\n                            path.splice(13, 3,\n                                'L', x + w, anchorY - halfDistance,\n                                x + w + arrowLength, anchorY,\n                                x + w, anchorY + halfDistance,\n                                x + w, y + h - r\n                            );\n\n                            // Simple connector\n                        } else {\n                            path.splice(13, 3,\n                                'L', x + w, h / 2,\n                                anchorX, anchorY,\n                                x + w, h / 2,\n                                x + w, y + h - r\n                            );\n                        }\n\n                        // Anchor on left side\n                    } else if (anchorX && anchorX < 0) {\n\n                        // Chevron\n                        if (anchorY > y + safeDistance && anchorY < y + h - safeDistance) {\n                            path.splice(33, 3,\n                                'L', x, anchorY + halfDistance,\n                                x - arrowLength, anchorY,\n                                x, anchorY - halfDistance,\n                                x, y + r\n                            );\n\n                            // Simple connector\n                        } else {\n                            path.splice(33, 3,\n                                'L', x, h / 2,\n                                anchorX, anchorY,\n                                x, h / 2,\n                                x, y + r\n                            );\n                        }\n\n                    } else if (anchorY && anchorY > h && anchorX > x + safeDistance && anchorX < x + w - safeDistance) { // replace bottom\n                        path.splice(23, 3,\n                            'L', anchorX + halfDistance, y + h,\n                            anchorX, y + h + arrowLength,\n                            anchorX - halfDistance, y + h,\n                            x + r, y + h\n                        );\n                    } else if (anchorY && anchorY < 0 && anchorX > x + safeDistance && anchorX < x + w - safeDistance) { // replace top\n                        path.splice(3, 3,\n                            'L', anchorX - halfDistance, y,\n                            anchorX, y - arrowLength,\n                            anchorX + halfDistance, y,\n                            w - r, y\n                        );\n                    }\n\n                    return path;\n                }\n            },\n\n            /**\n             * @typedef {SVGElement} ClipRect - A clipping rectangle that can be applied\n             * to one or more {@link SVGElement} instances. It is instanciated with the\n             * {@link SVGRenderer#clipRect} function and applied with the {@link \n             * SVGElement#clip} function.\n             *\n             * @example\n             * var circle = renderer.circle(100, 100, 100)\n             *     .attr({ fill: 'red' })\n             *     .add();\n             * var clipRect = renderer.clipRect(100, 100, 100, 100);\n             *\n             * // Leave only the lower right quarter visible\n             * circle.clip(clipRect);\n             */\n            /**\n             * Define a clipping rectangle\n             * @param {String} id\n             * @param {number} x\n             * @param {number} y\n             * @param {number} width\n             * @param {number} height\n             * @returns {ClipRect} A clipping rectangle.\n             */\n            clipRect: function(x, y, width, height) {\n                var wrapper,\n                    id = H.uniqueKey(),\n\n                    clipPath = this.createElement('clipPath').attr({\n                        id: id\n                    }).add(this.defs);\n\n                wrapper = this.rect(x, y, width, height, 0).add(clipPath);\n                wrapper.id = id;\n                wrapper.clipPath = clipPath;\n                wrapper.count = 0;\n\n                return wrapper;\n            },\n\n\n\n\n\n            /**\n             * Add text to the SVG object\n             * @param {String} str\n             * @param {number} x Left position\n             * @param {number} y Top position\n             * @param {Boolean} useHTML Use HTML to render the text\n             */\n            text: function(str, x, y, useHTML) {\n\n                // declare variables\n                var renderer = this,\n                    fakeSVG = !svg && renderer.forExport,\n                    wrapper,\n                    attribs = {};\n\n                if (useHTML && (renderer.allowHTML || !renderer.forExport)) {\n                    return renderer.html(str, x, y);\n                }\n\n                attribs.x = Math.round(x || 0); // X is always needed for line-wrap logic\n                if (y) {\n                    attribs.y = Math.round(y);\n                }\n                if (str || str === 0) {\n                    attribs.text = str;\n                }\n\n                wrapper = renderer.createElement('text')\n                    .attr(attribs);\n\n                // Prevent wrapping from creating false offsetWidths in export in legacy IE (#1079, #1063)\n                if (fakeSVG) {\n                    wrapper.css({\n                        position: 'absolute'\n                    });\n                }\n\n                if (!useHTML) {\n                    wrapper.xSetter = function(value, key, element) {\n                        var tspans = element.getElementsByTagName('tspan'),\n                            tspan,\n                            parentVal = element.getAttribute(key),\n                            i;\n                        for (i = 0; i < tspans.length; i++) {\n                            tspan = tspans[i];\n                            // If the x values are equal, the tspan represents a linebreak\n                            if (tspan.getAttribute(key) === parentVal) {\n                                tspan.setAttribute(key, value);\n                            }\n                        }\n                        element.setAttribute(key, value);\n                    };\n                }\n\n                return wrapper;\n            },\n\n            /**\n             * Utility to return the baseline offset and total line height from the font\n             * size.\n             *\n             * @param {?string} fontSize The current font size to inspect. If not given,\n             *   the font size will be found from the DOM element.\n             * @param {SVGElement|SVGDOMElement} [elem] The element to inspect for a\n             *   current font size.\n             * @returns {Object} An object containing `h`: the line height, `b`: the\n             * baseline relative to the top of the box, and `f`: the font size.\n             */\n            fontMetrics: function(fontSize, elem) {\n                var lineHeight,\n                    baseline;\n\n\n                fontSize = fontSize ||\n                    // When the elem is a DOM element (#5932)\n                    (elem && elem.style && elem.style.fontSize) ||\n                    // Fall back on the renderer style default\n                    (this.style && this.style.fontSize);\n\n\n\n                // Handle different units\n                if (/px/.test(fontSize)) {\n                    fontSize = pInt(fontSize);\n                } else if (/em/.test(fontSize)) {\n                    // The em unit depends on parent items\n                    fontSize = parseFloat(fontSize) *\n                        (elem ? this.fontMetrics(null, elem.parentNode).f : 16);\n                } else {\n                    fontSize = 12;\n                }\n\n                // Empirical values found by comparing font size and bounding box\n                // height. Applies to the default font family.\n                // http://jsfiddle.net/highcharts/7xvn7/\n                lineHeight = fontSize < 24 ? fontSize + 3 : Math.round(fontSize * 1.2);\n                baseline = Math.round(lineHeight * 0.8);\n\n                return {\n                    h: lineHeight,\n                    b: baseline,\n                    f: fontSize\n                };\n            },\n\n            /**\n             * Correct X and Y positioning of a label for rotation (#1764)\n             */\n            rotCorr: function(baseline, rotation, alterY) {\n                var y = baseline;\n                if (rotation && alterY) {\n                    y = Math.max(y * Math.cos(rotation * deg2rad), 4);\n                }\n                return {\n                    x: (-baseline / 3) * Math.sin(rotation * deg2rad),\n                    y: y\n                };\n            },\n\n            /**\n             * Add a label, a text item that can hold a colored or gradient background\n             * as well as a border and shadow. Supported custom attributes include\n             * `padding`. \n             * \n             * @param {string} str\n             * @param {number} x\n             * @param {number} y\n             * @param {String} shape\n             * @param {number} anchorX In case the shape has a pointer, like a flag, this is the\n             *\tcoordinates it should be pinned to\n             * @param {number} anchorY\n             * @param {Boolean} baseline Whether to position the label relative to the text baseline,\n             *\tlike renderer.text, or to the upper border of the rectangle.\n             * @param {String} className Class name for the group\n             */\n            label: function(str, x, y, shape, anchorX, anchorY, useHTML, baseline, className) {\n\n                var renderer = this,\n                    wrapper = renderer.g(className !== 'button' && 'label'),\n                    text = wrapper.text = renderer.text('', 0, 0, useHTML)\n                    .attr({\n                        zIndex: 1\n                    }),\n                    box,\n                    bBox,\n                    alignFactor = 0,\n                    padding = 3,\n                    paddingLeft = 0,\n                    width,\n                    height,\n                    wrapperX,\n                    wrapperY,\n                    textAlign,\n                    deferredAttr = {},\n                    strokeWidth,\n                    baselineOffset,\n                    hasBGImage = /^url\\((.*?)\\)$/.test(shape),\n                    needsBox = hasBGImage,\n                    getCrispAdjust,\n                    updateBoxSize,\n                    updateTextPadding,\n                    boxAttr;\n\n                if (className) {\n                    wrapper.addClass('highcharts-' + className);\n                }\n\n\n                needsBox = hasBGImage;\n                getCrispAdjust = function() {\n                    return (strokeWidth || 0) % 2 / 2;\n                };\n\n\n\n                /**\n                 * This function runs after the label is added to the DOM (when the bounding box is\n                 * available), and after the text of the label is updated to detect the new bounding\n                 * box and reflect it in the border box.\n                 */\n                updateBoxSize = function() {\n                    var style = text.element.style,\n                        crispAdjust,\n                        attribs = {};\n\n                    bBox = (width === undefined || height === undefined || textAlign) && defined(text.textStr) &&\n                        text.getBBox(); //#3295 && 3514 box failure when string equals 0\n                    wrapper.width = (width || bBox.width || 0) + 2 * padding + paddingLeft;\n                    wrapper.height = (height || bBox.height || 0) + 2 * padding;\n\n                    // Update the label-scoped y offset\n                    baselineOffset = padding + renderer.fontMetrics(style && style.fontSize, text).b;\n\n\n                    if (needsBox) {\n\n                        // Create the border box if it is not already present\n                        if (!box) {\n                            wrapper.box = box = renderer.symbols[shape] || hasBGImage ? // Symbol definition exists (#5324)\n                                renderer.symbol(shape) :\n                                renderer.rect();\n\n                            box.addClass(\n                                (className === 'button' ? '' : 'highcharts-label-box') + // Don't use label className for buttons\n                                (className ? ' highcharts-' + className + '-box' : '')\n                            );\n\n                            box.add(wrapper);\n\n                            crispAdjust = getCrispAdjust();\n                            attribs.x = crispAdjust;\n                            attribs.y = (baseline ? -baselineOffset : 0) + crispAdjust;\n                        }\n\n                        // Apply the box attributes\n                        attribs.width = Math.round(wrapper.width);\n                        attribs.height = Math.round(wrapper.height);\n\n                        box.attr(extend(attribs, deferredAttr));\n                        deferredAttr = {};\n                    }\n                };\n\n                /**\n                 * This function runs after setting text or padding, but only if padding is changed\n                 */\n                updateTextPadding = function() {\n                    var textX = paddingLeft + padding,\n                        textY;\n\n                    // determin y based on the baseline\n                    textY = baseline ? 0 : baselineOffset;\n\n                    // compensate for alignment\n                    if (defined(width) && bBox && (textAlign === 'center' || textAlign === 'right')) {\n                        textX += {\n                            center: 0.5,\n                            right: 1\n                        }[textAlign] * (width - bBox.width);\n                    }\n\n                    // update if anything changed\n                    if (textX !== text.x || textY !== text.y) {\n                        text.attr('x', textX);\n                        if (textY !== undefined) {\n                            text.attr('y', textY);\n                        }\n                    }\n\n                    // record current values\n                    text.x = textX;\n                    text.y = textY;\n                };\n\n                /**\n                 * Set a box attribute, or defer it if the box is not yet created\n                 * @param {Object} key\n                 * @param {Object} value\n                 */\n                boxAttr = function(key, value) {\n                    if (box) {\n                        box.attr(key, value);\n                    } else {\n                        deferredAttr[key] = value;\n                    }\n                };\n\n                /**\n                 * After the text element is added, get the desired size of the border box\n                 * and add it before the text in the DOM.\n                 */\n                wrapper.onAdd = function() {\n                    text.add(wrapper);\n                    wrapper.attr({\n                        text: (str || str === 0) ? str : '', // alignment is available now // #3295: 0 not rendered if given as a value\n                        x: x,\n                        y: y\n                    });\n\n                    if (box && defined(anchorX)) {\n                        wrapper.attr({\n                            anchorX: anchorX,\n                            anchorY: anchorY\n                        });\n                    }\n                };\n\n                /*\n                 * Add specific attribute setters.\n                 */\n\n                // only change local variables\n                wrapper.widthSetter = function(value) {\n                    width = H.isNumber(value) ? value : null; // width:auto => null\n                };\n                wrapper.heightSetter = function(value) {\n                    height = value;\n                };\n                wrapper['text-alignSetter'] = function(value) {\n                    textAlign = value;\n                };\n                wrapper.paddingSetter = function(value) {\n                    if (defined(value) && value !== padding) {\n                        padding = wrapper.padding = value;\n                        updateTextPadding();\n                    }\n                };\n                wrapper.paddingLeftSetter = function(value) {\n                    if (defined(value) && value !== paddingLeft) {\n                        paddingLeft = value;\n                        updateTextPadding();\n                    }\n                };\n\n\n                // change local variable and prevent setting attribute on the group\n                wrapper.alignSetter = function(value) {\n                    value = {\n                        left: 0,\n                        center: 0.5,\n                        right: 1\n                    }[value];\n                    if (value !== alignFactor) {\n                        alignFactor = value;\n                        if (bBox) { // Bounding box exists, means we're dynamically changing\n                            wrapper.attr({\n                                x: wrapperX\n                            }); // #5134\n                        }\n                    }\n                };\n\n                // apply these to the box and the text alike\n                wrapper.textSetter = function(value) {\n                    if (value !== undefined) {\n                        text.textSetter(value);\n                    }\n                    updateBoxSize();\n                    updateTextPadding();\n                };\n\n                // apply these to the box but not to the text\n                wrapper['stroke-widthSetter'] = function(value, key) {\n                    if (value) {\n                        needsBox = true;\n                    }\n                    strokeWidth = this['stroke-width'] = value;\n                    boxAttr(key, value);\n                };\n\n                wrapper.strokeSetter = wrapper.fillSetter = wrapper.rSetter = function(value, key) {\n                    if (key === 'fill' && value) {\n                        needsBox = true;\n                    }\n                    boxAttr(key, value);\n                };\n\n                wrapper.anchorXSetter = function(value, key) {\n                    anchorX = value;\n                    boxAttr(key, Math.round(value) - getCrispAdjust() - wrapperX);\n                };\n                wrapper.anchorYSetter = function(value, key) {\n                    anchorY = value;\n                    boxAttr(key, value - wrapperY);\n                };\n\n                // rename attributes\n                wrapper.xSetter = function(value) {\n                    wrapper.x = value; // for animation getter\n                    if (alignFactor) {\n                        value -= alignFactor * ((width || bBox.width) + 2 * padding);\n                    }\n                    wrapperX = Math.round(value);\n                    wrapper.attr('translateX', wrapperX);\n                };\n                wrapper.ySetter = function(value) {\n                    wrapperY = wrapper.y = Math.round(value);\n                    wrapper.attr('translateY', wrapperY);\n                };\n\n                // Redirect certain methods to either the box or the text\n                var baseCss = wrapper.css;\n                return extend(wrapper, {\n                    /**\n                     * Pick up some properties and apply them to the text instead of the\n                     * wrapper.\n                     * @ignore\n                     */\n                    css: function(styles) {\n                        if (styles) {\n                            var textStyles = {};\n                            styles = merge(styles); // create a copy to avoid altering the original object (#537)\n                            each(wrapper.textProps, function(prop) {\n                                if (styles[prop] !== undefined) {\n                                    textStyles[prop] = styles[prop];\n                                    delete styles[prop];\n                                }\n                            });\n                            text.css(textStyles);\n                        }\n                        return baseCss.call(wrapper, styles);\n                    },\n                    /**\n                     * Return the bounding box of the box, not the group.\n                     * @ignore\n                     */\n                    getBBox: function() {\n                        return {\n                            width: bBox.width + 2 * padding,\n                            height: bBox.height + 2 * padding,\n                            x: bBox.x - padding,\n                            y: bBox.y - padding\n                        };\n                    },\n\n                    /**\n                     * Apply the shadow to the box.\n                     * @ignore\n                     */\n                    shadow: function(b) {\n                        if (b) {\n                            updateBoxSize();\n                            if (box) {\n                                box.shadow(b);\n                            }\n                        }\n                        return wrapper;\n                    },\n\n                    /**\n                     * Destroy and release memory.\n                     * @ignore\n                     */\n                    destroy: function() {\n\n                        // Added by button implementation\n                        removeEvent(wrapper.element, 'mouseenter');\n                        removeEvent(wrapper.element, 'mouseleave');\n\n                        if (text) {\n                            text = text.destroy();\n                        }\n                        if (box) {\n                            box = box.destroy();\n                        }\n                        // Call base implementation to destroy the rest\n                        SVGElement.prototype.destroy.call(wrapper);\n\n                        // Release local pointers (#1298)\n                        wrapper = renderer = updateBoxSize = updateTextPadding = boxAttr = null;\n                    }\n                });\n            }\n        }; // end SVGRenderer\n\n\n        // general renderer\n        H.Renderer = SVGRenderer;\n\n    }(Highcharts));\n    (function(H) {\n        /**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */\n        var attr = H.attr,\n            createElement = H.createElement,\n            css = H.css,\n            defined = H.defined,\n            each = H.each,\n            extend = H.extend,\n            isFirefox = H.isFirefox,\n            isMS = H.isMS,\n            isWebKit = H.isWebKit,\n            pInt = H.pInt,\n            SVGElement = H.SVGElement,\n            SVGRenderer = H.SVGRenderer,\n            win = H.win,\n            wrap = H.wrap;\n\n        // Extend SvgElement for useHTML option\n        extend(SVGElement.prototype, /** @lends SVGElement.prototype */ {\n            /**\n             * Apply CSS to HTML elements. This is used in text within SVG rendering and\n             * by the VML renderer\n             */\n            htmlCss: function(styles) {\n                var wrapper = this,\n                    element = wrapper.element,\n                    textWidth = styles && element.tagName === 'SPAN' && styles.width;\n\n                if (textWidth) {\n                    delete styles.width;\n                    wrapper.textWidth = textWidth;\n                    wrapper.updateTransform();\n                }\n                if (styles && styles.textOverflow === 'ellipsis') {\n                    styles.whiteSpace = 'nowrap';\n                    styles.overflow = 'hidden';\n                }\n                wrapper.styles = extend(wrapper.styles, styles);\n                css(wrapper.element, styles);\n\n                return wrapper;\n            },\n\n            /**\n             * VML and useHTML method for calculating the bounding box based on offsets\n             * @param {Boolean} refresh Whether to force a fresh value from the DOM or to\n             * use the cached value\n             *\n             * @return {Object} A hash containing values for x, y, width and height\n             */\n\n            htmlGetBBox: function() {\n                var wrapper = this,\n                    element = wrapper.element;\n\n                // faking getBBox in exported SVG in legacy IE\n                // faking getBBox in exported SVG in legacy IE (is this a duplicate of the fix for #1079?)\n                if (element.nodeName === 'text') {\n                    element.style.position = 'absolute';\n                }\n\n                return {\n                    x: element.offsetLeft,\n                    y: element.offsetTop,\n                    width: element.offsetWidth,\n                    height: element.offsetHeight\n                };\n            },\n\n            /**\n             * VML override private method to update elements based on internal\n             * properties based on SVG transform\n             */\n            htmlUpdateTransform: function() {\n                // aligning non added elements is expensive\n                if (!this.added) {\n                    this.alignOnAdd = true;\n                    return;\n                }\n\n                var wrapper = this,\n                    renderer = wrapper.renderer,\n                    elem = wrapper.element,\n                    translateX = wrapper.translateX || 0,\n                    translateY = wrapper.translateY || 0,\n                    x = wrapper.x || 0,\n                    y = wrapper.y || 0,\n                    align = wrapper.textAlign || 'left',\n                    alignCorrection = {\n                        left: 0,\n                        center: 0.5,\n                        right: 1\n                    }[align],\n                    styles = wrapper.styles;\n\n                // apply translate\n                css(elem, {\n                    marginLeft: translateX,\n                    marginTop: translateY\n                });\n\n\n                if (wrapper.shadows) { // used in labels/tooltip\n                    each(wrapper.shadows, function(shadow) {\n                        css(shadow, {\n                            marginLeft: translateX + 1,\n                            marginTop: translateY + 1\n                        });\n                    });\n                }\n\n\n                // apply inversion\n                if (wrapper.inverted) { // wrapper is a group\n                    each(elem.childNodes, function(child) {\n                        renderer.invertChild(child, elem);\n                    });\n                }\n\n                if (elem.tagName === 'SPAN') {\n\n                    var rotation = wrapper.rotation,\n                        baseline,\n                        textWidth = pInt(wrapper.textWidth),\n                        whiteSpace = styles && styles.whiteSpace,\n                        currentTextTransform = [rotation, align, elem.innerHTML, wrapper.textWidth, wrapper.textAlign].join(',');\n\n                    if (currentTextTransform !== wrapper.cTT) { // do the calculations and DOM access only if properties changed\n\n\n                        baseline = renderer.fontMetrics(elem.style.fontSize).b;\n\n                        // Renderer specific handling of span rotation\n                        if (defined(rotation)) {\n                            wrapper.setSpanRotation(rotation, alignCorrection, baseline);\n                        }\n\n                        // Reset multiline/ellipsis in order to read width (#4928, #5417)\n                        css(elem, {\n                            width: '',\n                            whiteSpace: whiteSpace || 'nowrap'\n                        });\n\n                        // Update textWidth\n                        if (elem.offsetWidth > textWidth && /[ \\-]/.test(elem.textContent || elem.innerText)) { // #983, #1254\n                            css(elem, {\n                                width: textWidth + 'px',\n                                display: 'block',\n                                whiteSpace: whiteSpace || 'normal' // #3331\n                            });\n                        }\n\n\n                        wrapper.getSpanCorrection(elem.offsetWidth, baseline, alignCorrection, rotation, align);\n                    }\n\n                    // apply position with correction\n                    css(elem, {\n                        left: (x + (wrapper.xCorr || 0)) + 'px',\n                        top: (y + (wrapper.yCorr || 0)) + 'px'\n                    });\n\n                    // force reflow in webkit to apply the left and top on useHTML element (#1249)\n                    if (isWebKit) {\n                        baseline = elem.offsetHeight; // assigned to baseline for lint purpose\n                    }\n\n                    // record current text transform\n                    wrapper.cTT = currentTextTransform;\n                }\n            },\n\n            /**\n             * Set the rotation of an individual HTML span\n             */\n            setSpanRotation: function(rotation, alignCorrection, baseline) {\n                var rotationStyle = {},\n                    cssTransformKey = isMS ? '-ms-transform' : isWebKit ? '-webkit-transform' : isFirefox ? 'MozTransform' : win.opera ? '-o-transform' : '';\n\n                rotationStyle[cssTransformKey] = rotationStyle.transform = 'rotate(' + rotation + 'deg)';\n                rotationStyle[cssTransformKey + (isFirefox ? 'Origin' : '-origin')] = rotationStyle.transformOrigin = (alignCorrection * 100) + '% ' + baseline + 'px';\n                css(this.element, rotationStyle);\n            },\n\n            /**\n             * Get the correction in X and Y positioning as the element is rotated.\n             */\n            getSpanCorrection: function(width, baseline, alignCorrection) {\n                this.xCorr = -width * alignCorrection;\n                this.yCorr = -baseline;\n            }\n        });\n\n        // Extend SvgRenderer for useHTML option.\n        extend(SVGRenderer.prototype, /** @lends SVGRenderer.prototype */ {\n            /**\n             * Create HTML text node. This is used by the VML renderer as well as the SVG\n             * renderer through the useHTML option.\n             *\n             * @param {String} str\n             * @param {Number} x\n             * @param {Number} y\n             */\n            html: function(str, x, y) {\n                var wrapper = this.createElement('span'),\n                    element = wrapper.element,\n                    renderer = wrapper.renderer,\n                    isSVG = renderer.isSVG,\n                    addSetters = function(element, style) {\n                        // These properties are set as attributes on the SVG group, and as\n                        // identical CSS properties on the div. (#3542)\n                        each(['opacity', 'visibility'], function(prop) {\n                            wrap(element, prop + 'Setter', function(proceed, value, key, elem) {\n                                proceed.call(this, value, key, elem);\n                                style[key] = value;\n                            });\n                        });\n                    };\n\n                // Text setter\n                wrapper.textSetter = function(value) {\n                    if (value !== element.innerHTML) {\n                        delete this.bBox;\n                    }\n                    element.innerHTML = this.textStr = value;\n                    wrapper.htmlUpdateTransform();\n                };\n\n                // Add setters for the element itself (#4938)\n                if (isSVG) { // #4938, only for HTML within SVG\n                    addSetters(wrapper, wrapper.element.style);\n                }\n\n                // Various setters which rely on update transform\n                wrapper.xSetter = wrapper.ySetter = wrapper.alignSetter = wrapper.rotationSetter = function(value, key) {\n                    if (key === 'align') {\n                        key = 'textAlign'; // Do not overwrite the SVGElement.align method. Same as VML.\n                    }\n                    wrapper[key] = value;\n                    wrapper.htmlUpdateTransform();\n                };\n\n                // Set the default attributes\n                wrapper\n                    .attr({\n                        text: str,\n                        x: Math.round(x),\n                        y: Math.round(y)\n                    })\n                    .css({\n\n                        fontFamily: this.style.fontFamily,\n                        fontSize: this.style.fontSize,\n\n                        position: 'absolute'\n                    });\n\n                // Keep the whiteSpace style outside the wrapper.styles collection\n                element.style.whiteSpace = 'nowrap';\n\n                // Use the HTML specific .css method\n                wrapper.css = wrapper.htmlCss;\n\n                // This is specific for HTML within SVG\n                if (isSVG) {\n                    wrapper.add = function(svgGroupWrapper) {\n\n                        var htmlGroup,\n                            container = renderer.box.parentNode,\n                            parentGroup,\n                            parents = [];\n\n                        this.parentGroup = svgGroupWrapper;\n\n                        // Create a mock group to hold the HTML elements\n                        if (svgGroupWrapper) {\n                            htmlGroup = svgGroupWrapper.div;\n                            if (!htmlGroup) {\n\n                                // Read the parent chain into an array and read from top down\n                                parentGroup = svgGroupWrapper;\n                                while (parentGroup) {\n\n                                    parents.push(parentGroup);\n\n                                    // Move up to the next parent group\n                                    parentGroup = parentGroup.parentGroup;\n                                }\n\n                                // Ensure dynamically updating position when any parent is translated\n                                each(parents.reverse(), function(parentGroup) {\n                                    var htmlGroupStyle,\n                                        cls = attr(parentGroup.element, 'class');\n\n                                    if (cls) {\n                                        cls = {\n                                            className: cls\n                                        };\n                                    } // else null\n\n                                    // Create a HTML div and append it to the parent div to emulate\n                                    // the SVG group structure\n                                    htmlGroup = parentGroup.div = parentGroup.div || createElement('div', cls, {\n                                        position: 'absolute',\n                                        left: (parentGroup.translateX || 0) + 'px',\n                                        top: (parentGroup.translateY || 0) + 'px',\n                                        display: parentGroup.display,\n                                        opacity: parentGroup.opacity, // #5075\n                                        pointerEvents: parentGroup.styles && parentGroup.styles.pointerEvents // #5595\n                                    }, htmlGroup || container); // the top group is appended to container\n\n                                    // Shortcut\n                                    htmlGroupStyle = htmlGroup.style;\n\n                                    // Set listeners to update the HTML div's position whenever the SVG group\n                                    // position is changed\n                                    extend(parentGroup, {\n                                        on: function() {\n                                            wrapper.on.apply({\n                                                element: parents[0].div\n                                            }, arguments);\n                                            return parentGroup;\n                                        },\n                                        translateXSetter: function(value, key) {\n                                            htmlGroupStyle.left = value + 'px';\n                                            parentGroup[key] = value;\n                                            parentGroup.doTransform = true;\n                                        },\n                                        translateYSetter: function(value, key) {\n                                            htmlGroupStyle.top = value + 'px';\n                                            parentGroup[key] = value;\n                                            parentGroup.doTransform = true;\n                                        }\n                                    });\n                                    addSetters(parentGroup, htmlGroupStyle);\n                                });\n\n                            }\n                        } else {\n                            htmlGroup = container;\n                        }\n\n                        htmlGroup.appendChild(element);\n\n                        // Shared with VML:\n                        wrapper.added = true;\n                        if (wrapper.alignOnAdd) {\n                            wrapper.htmlUpdateTransform();\n                        }\n\n                        return wrapper;\n                    };\n                }\n                return wrapper;\n            }\n        });\n\n    }(Highcharts));\n    (function(H) {\n        /**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */\n\n        var VMLRenderer,\n            VMLRendererExtension,\n            VMLElement,\n\n            createElement = H.createElement,\n            css = H.css,\n            defined = H.defined,\n            deg2rad = H.deg2rad,\n            discardElement = H.discardElement,\n            doc = H.doc,\n            each = H.each,\n            erase = H.erase,\n            extend = H.extend,\n            extendClass = H.extendClass,\n            isArray = H.isArray,\n            isNumber = H.isNumber,\n            isObject = H.isObject,\n            merge = H.merge,\n            noop = H.noop,\n            pick = H.pick,\n            pInt = H.pInt,\n            svg = H.svg,\n            SVGElement = H.SVGElement,\n            SVGRenderer = H.SVGRenderer,\n            win = H.win;\n\n        /* ****************************************************************************\n         *                                                                            *\n         * START OF INTERNET EXPLORER <= 8 SPECIFIC CODE                              *\n         *                                                                            *\n         * For applications and websites that don't need IE support, like platform    *\n         * targeted mobile apps and web apps, this code can be removed.               *\n         *                                                                            *\n         *****************************************************************************/\n\n        /**\n         * @constructor\n         */\n        if (!svg) {\n\n            /**\n             * The VML element wrapper.\n             */\n            VMLElement = {\n\n                docMode8: doc && doc.documentMode === 8,\n\n                /**\n                 * Initialize a new VML element wrapper. It builds the markup as a string\n                 * to minimize DOM traffic.\n                 * @param {Object} renderer\n                 * @param {Object} nodeName\n                 */\n                init: function(renderer, nodeName) {\n                    var wrapper = this,\n                        markup = ['<', nodeName, ' filled=\"f\" stroked=\"f\"'],\n                        style = ['position: ', 'absolute', ';'],\n                        isDiv = nodeName === 'div';\n\n                    // divs and shapes need size\n                    if (nodeName === 'shape' || isDiv) {\n                        style.push('left:0;top:0;width:1px;height:1px;');\n                    }\n                    style.push('visibility: ', isDiv ? 'hidden' : 'visible');\n\n                    markup.push(' style=\"', style.join(''), '\"/>');\n\n                    // create element with default attributes and style\n                    if (nodeName) {\n                        markup = isDiv || nodeName === 'span' || nodeName === 'img' ?\n                            markup.join('') :\n                            renderer.prepVML(markup);\n                        wrapper.element = createElement(markup);\n                    }\n\n                    wrapper.renderer = renderer;\n                },\n\n                /**\n                 * Add the node to the given parent\n                 * @param {Object} parent\n                 */\n                add: function(parent) {\n                    var wrapper = this,\n                        renderer = wrapper.renderer,\n                        element = wrapper.element,\n                        box = renderer.box,\n                        inverted = parent && parent.inverted,\n\n                        // get the parent node\n                        parentNode = parent ?\n                        parent.element || parent :\n                        box;\n\n                    if (parent) {\n                        this.parentGroup = parent;\n                    }\n\n                    // if the parent group is inverted, apply inversion on all children\n                    if (inverted) { // only on groups\n                        renderer.invertChild(element, parentNode);\n                    }\n\n                    // append it\n                    parentNode.appendChild(element);\n\n                    // align text after adding to be able to read offset\n                    wrapper.added = true;\n                    if (wrapper.alignOnAdd && !wrapper.deferUpdateTransform) {\n                        wrapper.updateTransform();\n                    }\n\n                    // fire an event for internal hooks\n                    if (wrapper.onAdd) {\n                        wrapper.onAdd();\n                    }\n\n                    // IE8 Standards can't set the class name before the element is appended\n                    if (this.className) {\n                        this.attr('class', this.className);\n                    }\n\n                    return wrapper;\n                },\n\n                /**\n                 * VML always uses htmlUpdateTransform\n                 */\n                updateTransform: SVGElement.prototype.htmlUpdateTransform,\n\n                /**\n                 * Set the rotation of a span with oldIE's filter\n                 */\n                setSpanRotation: function() {\n                    // Adjust for alignment and rotation. Rotation of useHTML content is not yet implemented\n                    // but it can probably be implemented for Firefox 3.5+ on user request. FF3.5+\n                    // has support for CSS3 transform. The getBBox method also needs to be updated\n                    // to compensate for the rotation, like it currently does for SVG.\n                    // Test case: http://jsfiddle.net/highcharts/Ybt44/\n\n                    var rotation = this.rotation,\n                        costheta = Math.cos(rotation * deg2rad),\n                        sintheta = Math.sin(rotation * deg2rad);\n\n                    css(this.element, {\n                        filter: rotation ? ['progid:DXImageTransform.Microsoft.Matrix(M11=', costheta,\n                            ', M12=', -sintheta, ', M21=', sintheta, ', M22=', costheta,\n                            ', sizingMethod=\\'auto expand\\')'\n                        ].join('') : 'none'\n                    });\n                },\n\n                /**\n                 * Get the positioning correction for the span after rotating.\n                 */\n                getSpanCorrection: function(width, baseline, alignCorrection, rotation, align) {\n\n                    var costheta = rotation ? Math.cos(rotation * deg2rad) : 1,\n                        sintheta = rotation ? Math.sin(rotation * deg2rad) : 0,\n                        height = pick(this.elemHeight, this.element.offsetHeight),\n                        quad,\n                        nonLeft = align && align !== 'left';\n\n                    // correct x and y\n                    this.xCorr = costheta < 0 && -width;\n                    this.yCorr = sintheta < 0 && -height;\n\n                    // correct for baseline and corners spilling out after rotation\n                    quad = costheta * sintheta < 0;\n                    this.xCorr += sintheta * baseline * (quad ? 1 - alignCorrection : alignCorrection);\n                    this.yCorr -= costheta * baseline * (rotation ? (quad ? alignCorrection : 1 - alignCorrection) : 1);\n                    // correct for the length/height of the text\n                    if (nonLeft) {\n                        this.xCorr -= width * alignCorrection * (costheta < 0 ? -1 : 1);\n                        if (rotation) {\n                            this.yCorr -= height * alignCorrection * (sintheta < 0 ? -1 : 1);\n                        }\n                        css(this.element, {\n                            textAlign: align\n                        });\n                    }\n                },\n\n                /**\n                 * Converts a subset of an SVG path definition to its VML counterpart. Takes an array\n                 * as the parameter and returns a string.\n                 */\n                pathToVML: function(value) {\n                    // convert paths\n                    var i = value.length,\n                        path = [];\n\n                    while (i--) {\n\n                        // Multiply by 10 to allow subpixel precision.\n                        // Substracting half a pixel seems to make the coordinates\n                        // align with SVG, but this hasn't been tested thoroughly\n                        if (isNumber(value[i])) {\n                            path[i] = Math.round(value[i] * 10) - 5;\n                        } else if (value[i] === 'Z') { // close the path\n                            path[i] = 'x';\n                        } else {\n                            path[i] = value[i];\n\n                            // When the start X and end X coordinates of an arc are too close,\n                            // they are rounded to the same value above. In this case, substract or\n                            // add 1 from the end X and Y positions. #186, #760, #1371, #1410.\n                            if (value.isArc && (value[i] === 'wa' || value[i] === 'at')) {\n                                // Start and end X\n                                if (path[i + 5] === path[i + 7]) {\n                                    path[i + 7] += value[i + 7] > value[i + 5] ? 1 : -1;\n                                }\n                                // Start and end Y\n                                if (path[i + 6] === path[i + 8]) {\n                                    path[i + 8] += value[i + 8] > value[i + 6] ? 1 : -1;\n                                }\n                            }\n                        }\n                    }\n\n\n                    // Loop up again to handle path shortcuts (#2132)\n                    /*while (i++ < path.length) {\n                    \tif (path[i] === 'H') { // horizontal line to\n                    \t\tpath[i] = 'L';\n                    \t\tpath.splice(i + 2, 0, path[i - 1]);\n                    \t} else if (path[i] === 'V') { // vertical line to\n                    \t\tpath[i] = 'L';\n                    \t\tpath.splice(i + 1, 0, path[i - 2]);\n                    \t}\n                    }*/\n                    return path.join(' ') || 'x';\n                },\n\n                /**\n                 * Set the element's clipping to a predefined rectangle\n                 *\n                 * @param {String} id The id of the clip rectangle\n                 */\n                clip: function(clipRect) {\n                    var wrapper = this,\n                        clipMembers,\n                        cssRet;\n\n                    if (clipRect) {\n                        clipMembers = clipRect.members;\n                        erase(clipMembers, wrapper); // Ensure unique list of elements (#1258)\n                        clipMembers.push(wrapper);\n                        wrapper.destroyClip = function() {\n                            erase(clipMembers, wrapper);\n                        };\n                        cssRet = clipRect.getCSS(wrapper);\n\n                    } else {\n                        if (wrapper.destroyClip) {\n                            wrapper.destroyClip();\n                        }\n                        cssRet = {\n                            clip: wrapper.docMode8 ? 'inherit' : 'rect(auto)'\n                        }; // #1214\n                    }\n\n                    return wrapper.css(cssRet);\n\n                },\n\n                /**\n                 * Set styles for the element\n                 * @param {Object} styles\n                 */\n                css: SVGElement.prototype.htmlCss,\n\n                /**\n                 * Removes a child either by removeChild or move to garbageBin.\n                 * Issue 490; in VML removeChild results in Orphaned nodes according to sIEve, discardElement does not.\n                 */\n                safeRemoveChild: function(element) {\n                    // discardElement will detach the node from its parent before attaching it\n                    // to the garbage bin. Therefore it is important that the node is attached and have parent.\n                    if (element.parentNode) {\n                        discardElement(element);\n                    }\n                },\n\n                /**\n                 * Extend element.destroy by removing it from the clip members array\n                 */\n                destroy: function() {\n                    if (this.destroyClip) {\n                        this.destroyClip();\n                    }\n\n                    return SVGElement.prototype.destroy.apply(this);\n                },\n\n                /**\n                 * Add an event listener. VML override for normalizing event parameters.\n                 * @param {String} eventType\n                 * @param {Function} handler\n                 */\n                on: function(eventType, handler) {\n                    // simplest possible event model for internal use\n                    this.element['on' + eventType] = function() {\n                        var evt = win.event;\n                        evt.target = evt.srcElement;\n                        handler(evt);\n                    };\n                    return this;\n                },\n\n                /**\n                 * In stacked columns, cut off the shadows so that they don't overlap\n                 */\n                cutOffPath: function(path, length) {\n\n                    var len;\n\n                    path = path.split(/[ ,]/); // The extra comma tricks the trailing comma remover in \"gulp scripts\" task\n                    len = path.length;\n\n                    if (len === 9 || len === 11) {\n                        path[len - 4] = path[len - 2] = pInt(path[len - 2]) - 10 * length;\n                    }\n                    return path.join(' ');\n                },\n\n                /**\n                 * Apply a drop shadow by copying elements and giving them different strokes\n                 * @param {Boolean|Object} shadowOptions\n                 */\n                shadow: function(shadowOptions, group, cutOff) {\n                    var shadows = [],\n                        i,\n                        element = this.element,\n                        renderer = this.renderer,\n                        shadow,\n                        elemStyle = element.style,\n                        markup,\n                        path = element.path,\n                        strokeWidth,\n                        modifiedPath,\n                        shadowWidth,\n                        shadowElementOpacity;\n\n                    // some times empty paths are not strings\n                    if (path && typeof path.value !== 'string') {\n                        path = 'x';\n                    }\n                    modifiedPath = path;\n\n                    if (shadowOptions) {\n                        shadowWidth = pick(shadowOptions.width, 3);\n                        shadowElementOpacity = (shadowOptions.opacity || 0.15) / shadowWidth;\n                        for (i = 1; i <= 3; i++) {\n\n                            strokeWidth = (shadowWidth * 2) + 1 - (2 * i);\n\n                            // Cut off shadows for stacked column items\n                            if (cutOff) {\n                                modifiedPath = this.cutOffPath(path.value, strokeWidth + 0.5);\n                            }\n\n                            markup = ['<shape isShadow=\"true\" strokeweight=\"', strokeWidth,\n                                '\" filled=\"false\" path=\"', modifiedPath,\n                                '\" coordsize=\"10 10\" style=\"', element.style.cssText, '\" />'\n                            ];\n\n                            shadow = createElement(renderer.prepVML(markup),\n                                null, {\n                                    left: pInt(elemStyle.left) + pick(shadowOptions.offsetX, 1),\n                                    top: pInt(elemStyle.top) + pick(shadowOptions.offsetY, 1)\n                                }\n                            );\n                            if (cutOff) {\n                                shadow.cutOff = strokeWidth + 1;\n                            }\n\n                            // apply the opacity\n                            markup = [\n                                '<stroke color=\"',\n                                shadowOptions.color || '#000000',\n                                '\" opacity=\"', shadowElementOpacity * i, '\"/>'\n                            ];\n                            createElement(renderer.prepVML(markup), null, null, shadow);\n\n\n                            // insert it\n                            if (group) {\n                                group.element.appendChild(shadow);\n                            } else {\n                                element.parentNode.insertBefore(shadow, element);\n                            }\n\n                            // record it\n                            shadows.push(shadow);\n\n                        }\n\n                        this.shadows = shadows;\n                    }\n                    return this;\n                },\n                updateShadows: noop, // Used in SVG only\n\n                setAttr: function(key, value) {\n                    if (this.docMode8) { // IE8 setAttribute bug\n                        this.element[key] = value;\n                    } else {\n                        this.element.setAttribute(key, value);\n                    }\n                },\n                classSetter: function(value) {\n                    // IE8 Standards mode has problems retrieving the className unless set like this.\n                    // IE8 Standards can't set the class name before the element is appended.\n                    (this.added ? this.element : this).className = value;\n                },\n                dashstyleSetter: function(value, key, element) {\n                    var strokeElem = element.getElementsByTagName('stroke')[0] ||\n                        createElement(this.renderer.prepVML(['<stroke/>']), null, null, element);\n                    strokeElem[key] = value || 'solid';\n                    this[key] = value;\n                    /* because changing stroke-width will change the dash length\n\t\t\t\tand cause an epileptic effect */\n                },\n                dSetter: function(value, key, element) {\n                    var i,\n                        shadows = this.shadows;\n                    value = value || [];\n                    this.d = value.join && value.join(' '); // used in getter for animation\n\n                    element.path = value = this.pathToVML(value);\n\n                    // update shadows\n                    if (shadows) {\n                        i = shadows.length;\n                        while (i--) {\n                            shadows[i].path = shadows[i].cutOff ? this.cutOffPath(value, shadows[i].cutOff) : value;\n                        }\n                    }\n                    this.setAttr(key, value);\n                },\n                fillSetter: function(value, key, element) {\n                    var nodeName = element.nodeName;\n                    if (nodeName === 'SPAN') { // text color\n                        element.style.color = value;\n                    } else if (nodeName !== 'IMG') { // #1336\n                        element.filled = value !== 'none';\n                        this.setAttr('fillcolor', this.renderer.color(value, element, key, this));\n                    }\n                },\n                'fill-opacitySetter': function(value, key, element) {\n                    createElement(\n                        this.renderer.prepVML(['<', key.split('-')[0], ' opacity=\"', value, '\"/>']),\n                        null,\n                        null,\n                        element\n                    );\n                },\n                opacitySetter: noop, // Don't bother - animation is too slow and filters introduce artifacts\n                rotationSetter: function(value, key, element) {\n                    var style = element.style;\n                    this[key] = style[key] = value; // style is for #1873\n\n                    // Correction for the 1x1 size of the shape container. Used in gauge needles.\n                    style.left = -Math.round(Math.sin(value * deg2rad) + 1) + 'px';\n                    style.top = Math.round(Math.cos(value * deg2rad)) + 'px';\n                },\n                strokeSetter: function(value, key, element) {\n                    this.setAttr('strokecolor', this.renderer.color(value, element, key, this));\n                },\n                'stroke-widthSetter': function(value, key, element) {\n                    element.stroked = !!value; // VML \"stroked\" attribute\n                    this[key] = value; // used in getter, issue #113\n                    if (isNumber(value)) {\n                        value += 'px';\n                    }\n                    this.setAttr('strokeweight', value);\n                },\n                titleSetter: function(value, key) {\n                    this.setAttr(key, value);\n                },\n                visibilitySetter: function(value, key, element) {\n\n                    // Handle inherited visibility\n                    if (value === 'inherit') {\n                        value = 'visible';\n                    }\n\n                    // Let the shadow follow the main element\n                    if (this.shadows) {\n                        each(this.shadows, function(shadow) {\n                            shadow.style[key] = value;\n                        });\n                    }\n\n                    // Instead of toggling the visibility CSS property, move the div out of the viewport.\n                    // This works around #61 and #586\n                    if (element.nodeName === 'DIV') {\n                        value = value === 'hidden' ? '-999em' : 0;\n\n                        // In order to redraw, IE7 needs the div to be visible when tucked away\n                        // outside the viewport. So the visibility is actually opposite of\n                        // the expected value. This applies to the tooltip only.\n                        if (!this.docMode8) {\n                            element.style[key] = value ? 'visible' : 'hidden';\n                        }\n                        key = 'top';\n                    }\n                    element.style[key] = value;\n                },\n                xSetter: function(value, key, element) {\n                    this[key] = value; // used in getter\n\n                    if (key === 'x') {\n                        key = 'left';\n                    } else if (key === 'y') {\n                        key = 'top';\n                    }\n                    /* else {\n                    \t\t\t\tvalue = Math.max(0, value); // don't set width or height below zero (#311)\n                    \t\t\t}*/\n\n                    // clipping rectangle special\n                    if (this.updateClipping) {\n                        this[key] = value; // the key is now 'left' or 'top' for 'x' and 'y'\n                        this.updateClipping();\n                    } else {\n                        // normal\n                        element.style[key] = value;\n                    }\n                },\n                zIndexSetter: function(value, key, element) {\n                    element.style[key] = value;\n                }\n            };\n            VMLElement['stroke-opacitySetter'] = VMLElement['fill-opacitySetter'];\n            H.VMLElement = VMLElement = extendClass(SVGElement, VMLElement);\n\n            // Some shared setters\n            VMLElement.prototype.ySetter =\n                VMLElement.prototype.widthSetter =\n                VMLElement.prototype.heightSetter =\n                VMLElement.prototype.xSetter;\n\n\n            /**\n             * The VML renderer\n             */\n            VMLRendererExtension = { // inherit SVGRenderer\n\n                Element: VMLElement,\n                isIE8: win.navigator.userAgent.indexOf('MSIE 8.0') > -1,\n\n\n                /**\n                 * Initialize the VMLRenderer\n                 * @param {Object} container\n                 * @param {Number} width\n                 * @param {Number} height\n                 */\n                init: function(container, width, height) {\n                    var renderer = this,\n                        boxWrapper,\n                        box,\n                        css;\n\n                    renderer.alignedObjects = [];\n\n                    boxWrapper = renderer.createElement('div')\n                        .css({\n                            position: 'relative'\n                        });\n                    box = boxWrapper.element;\n                    container.appendChild(boxWrapper.element);\n\n\n                    // generate the containing box\n                    renderer.isVML = true;\n                    renderer.box = box;\n                    renderer.boxWrapper = boxWrapper;\n                    renderer.gradients = {};\n                    renderer.cache = {}; // Cache for numerical bounding boxes\n                    renderer.cacheKeys = [];\n                    renderer.imgCount = 0;\n\n\n                    renderer.setSize(width, height, false);\n\n                    // The only way to make IE6 and IE7 print is to use a global namespace. However,\n                    // with IE8 the only way to make the dynamic shapes visible in screen and print mode\n                    // seems to be to add the xmlns attribute and the behaviour style inline.\n                    if (!doc.namespaces.hcv) {\n\n                        doc.namespaces.add('hcv', 'urn:schemas-microsoft-com:vml');\n\n                        // Setup default CSS (#2153, #2368, #2384)\n                        css = 'hcv\\\\:fill, hcv\\\\:path, hcv\\\\:shape, hcv\\\\:stroke' +\n                            '{ behavior:url(#default#VML); display: inline-block; } ';\n                        try {\n                            doc.createStyleSheet().cssText = css;\n                        } catch (e) {\n                            doc.styleSheets[0].cssText += css;\n                        }\n\n                    }\n                },\n\n\n                /**\n                 * Detect whether the renderer is hidden. This happens when one of the parent elements\n                 * has display: none\n                 */\n                isHidden: function() {\n                    return !this.box.offsetWidth;\n                },\n\n                /**\n                 * Define a clipping rectangle. In VML it is accomplished by storing the values\n                 * for setting the CSS style to all associated members.\n                 *\n                 * @param {Number} x\n                 * @param {Number} y\n                 * @param {Number} width\n                 * @param {Number} height\n                 */\n                clipRect: function(x, y, width, height) {\n\n                    // create a dummy element\n                    var clipRect = this.createElement(),\n                        isObj = isObject(x);\n\n                    // mimic a rectangle with its style object for automatic updating in attr\n                    return extend(clipRect, {\n                        members: [],\n                        count: 0,\n                        left: (isObj ? x.x : x) + 1,\n                        top: (isObj ? x.y : y) + 1,\n                        width: (isObj ? x.width : width) - 1,\n                        height: (isObj ? x.height : height) - 1,\n                        getCSS: function(wrapper) {\n                            var element = wrapper.element,\n                                nodeName = element.nodeName,\n                                isShape = nodeName === 'shape',\n                                inverted = wrapper.inverted,\n                                rect = this,\n                                top = rect.top - (isShape ? element.offsetTop : 0),\n                                left = rect.left,\n                                right = left + rect.width,\n                                bottom = top + rect.height,\n                                ret = {\n                                    clip: 'rect(' +\n                                        Math.round(inverted ? left : top) + 'px,' +\n                                        Math.round(inverted ? bottom : right) + 'px,' +\n                                        Math.round(inverted ? right : bottom) + 'px,' +\n                                        Math.round(inverted ? top : left) + 'px)'\n                                };\n\n                            // issue 74 workaround\n                            if (!inverted && wrapper.docMode8 && nodeName === 'DIV') {\n                                extend(ret, {\n                                    width: right + 'px',\n                                    height: bottom + 'px'\n                                });\n                            }\n                            return ret;\n                        },\n\n                        // used in attr and animation to update the clipping of all members\n                        updateClipping: function() {\n                            each(clipRect.members, function(member) {\n                                // Member.element is falsy on deleted series, like in\n                                // stock/members/series-remove demo. Should be removed\n                                // from members, but this will do.\n                                if (member.element) {\n                                    member.css(clipRect.getCSS(member));\n                                }\n                            });\n                        }\n                    });\n\n                },\n\n\n                /**\n                 * Take a color and return it if it's a string, make it a gradient if it's a\n                 * gradient configuration object, and apply opacity.\n                 *\n                 * @param {Object} color The color or config object\n                 */\n                color: function(color, elem, prop, wrapper) {\n                    var renderer = this,\n                        colorObject,\n                        regexRgba = /^rgba/,\n                        markup,\n                        fillType,\n                        ret = 'none';\n\n                    // Check for linear or radial gradient\n                    if (color && color.linearGradient) {\n                        fillType = 'gradient';\n                    } else if (color && color.radialGradient) {\n                        fillType = 'pattern';\n                    }\n\n\n                    if (fillType) {\n\n                        var stopColor,\n                            stopOpacity,\n                            gradient = color.linearGradient || color.radialGradient,\n                            x1,\n                            y1,\n                            x2,\n                            y2,\n                            opacity1,\n                            opacity2,\n                            color1,\n                            color2,\n                            fillAttr = '',\n                            stops = color.stops,\n                            firstStop,\n                            lastStop,\n                            colors = [],\n                            addFillNode = function() {\n                                // Add the fill subnode. When colors attribute is used, the meanings of opacity and o:opacity2\n                                // are reversed.\n                                markup = ['<fill colors=\"' + colors.join(',') +\n                                    '\" opacity=\"', opacity2, '\" o:opacity2=\"',\n                                    opacity1, '\" type=\"', fillType, '\" ', fillAttr,\n                                    'focus=\"100%\" method=\"any\" />'\n                                ];\n                                createElement(renderer.prepVML(markup), null, null, elem);\n                            };\n\n                        // Extend from 0 to 1\n                        firstStop = stops[0];\n                        lastStop = stops[stops.length - 1];\n                        if (firstStop[0] > 0) {\n                            stops.unshift([\n                                0,\n                                firstStop[1]\n                            ]);\n                        }\n                        if (lastStop[0] < 1) {\n                            stops.push([\n                                1,\n                                lastStop[1]\n                            ]);\n                        }\n\n                        // Compute the stops\n                        each(stops, function(stop, i) {\n                            if (regexRgba.test(stop[1])) {\n                                colorObject = H.color(stop[1]);\n                                stopColor = colorObject.get('rgb');\n                                stopOpacity = colorObject.get('a');\n                            } else {\n                                stopColor = stop[1];\n                                stopOpacity = 1;\n                            }\n\n                            // Build the color attribute\n                            colors.push((stop[0] * 100) + '% ' + stopColor);\n\n                            // Only start and end opacities are allowed, so we use the first and the last\n                            if (!i) {\n                                opacity1 = stopOpacity;\n                                color2 = stopColor;\n                            } else {\n                                opacity2 = stopOpacity;\n                                color1 = stopColor;\n                            }\n                        });\n\n                        // Apply the gradient to fills only.\n                        if (prop === 'fill') {\n\n                            // Handle linear gradient angle\n                            if (fillType === 'gradient') {\n                                x1 = gradient.x1 || gradient[0] || 0;\n                                y1 = gradient.y1 || gradient[1] || 0;\n                                x2 = gradient.x2 || gradient[2] || 0;\n                                y2 = gradient.y2 || gradient[3] || 0;\n                                fillAttr = 'angle=\"' + (90 - Math.atan(\n                                    (y2 - y1) / // y vector\n                                    (x2 - x1) // x vector\n                                ) * 180 / Math.PI) + '\"';\n\n                                addFillNode();\n\n                                // Radial (circular) gradient\n                            } else {\n\n                                var r = gradient.r,\n                                    sizex = r * 2,\n                                    sizey = r * 2,\n                                    cx = gradient.cx,\n                                    cy = gradient.cy,\n                                    radialReference = elem.radialReference,\n                                    bBox,\n                                    applyRadialGradient = function() {\n                                        if (radialReference) {\n                                            bBox = wrapper.getBBox();\n                                            cx += (radialReference[0] - bBox.x) / bBox.width - 0.5;\n                                            cy += (radialReference[1] - bBox.y) / bBox.height - 0.5;\n                                            sizex *= radialReference[2] / bBox.width;\n                                            sizey *= radialReference[2] / bBox.height;\n                                        }\n                                        fillAttr = 'src=\"' + H.getOptions().global.VMLRadialGradientURL + '\" ' +\n                                            'size=\"' + sizex + ',' + sizey + '\" ' +\n                                            'origin=\"0.5,0.5\" ' +\n                                            'position=\"' + cx + ',' + cy + '\" ' +\n                                            'color2=\"' + color2 + '\" ';\n\n                                        addFillNode();\n                                    };\n\n                                // Apply radial gradient\n                                if (wrapper.added) {\n                                    applyRadialGradient();\n                                } else {\n                                    // We need to know the bounding box to get the size and position right\n                                    wrapper.onAdd = applyRadialGradient;\n                                }\n\n                                // The fill element's color attribute is broken in IE8 standards mode, so we\n                                // need to set the parent shape's fillcolor attribute instead.\n                                ret = color1;\n                            }\n\n                            // Gradients are not supported for VML stroke, return the first color. #722.\n                        } else {\n                            ret = stopColor;\n                        }\n\n                        // If the color is an rgba color, split it and add a fill node\n                        // to hold the opacity component\n                    } else if (regexRgba.test(color) && elem.tagName !== 'IMG') {\n\n                        colorObject = H.color(color);\n\n                        wrapper[prop + '-opacitySetter'](colorObject.get('a'), prop, elem);\n\n                        ret = colorObject.get('rgb');\n\n\n                    } else {\n                        var propNodes = elem.getElementsByTagName(prop); // 'stroke' or 'fill' node\n                        if (propNodes.length) {\n                            propNodes[0].opacity = 1;\n                            propNodes[0].type = 'solid';\n                        }\n                        ret = color;\n                    }\n\n                    return ret;\n                },\n\n                /**\n                 * Take a VML string and prepare it for either IE8 or IE6/IE7.\n                 * @param {Array} markup A string array of the VML markup to prepare\n                 */\n                prepVML: function(markup) {\n                    var vmlStyle = 'display:inline-block;behavior:url(#default#VML);',\n                        isIE8 = this.isIE8;\n\n                    markup = markup.join('');\n\n                    if (isIE8) { // add xmlns and style inline\n                        markup = markup.replace('/>', ' xmlns=\"urn:schemas-microsoft-com:vml\" />');\n                        if (markup.indexOf('style=\"') === -1) {\n                            markup = markup.replace('/>', ' style=\"' + vmlStyle + '\" />');\n                        } else {\n                            markup = markup.replace('style=\"', 'style=\"' + vmlStyle);\n                        }\n\n                    } else { // add namespace\n                        markup = markup.replace('<', '<hcv:');\n                    }\n\n                    return markup;\n                },\n\n                /**\n                 * Create rotated and aligned text\n                 * @param {String} str\n                 * @param {Number} x\n                 * @param {Number} y\n                 */\n                text: SVGRenderer.prototype.html,\n\n                /**\n                 * Create and return a path element\n                 * @param {Array} path\n                 */\n                path: function(path) {\n                    var attr = {\n                        // subpixel precision down to 0.1 (width and height = 1px)\n                        coordsize: '10 10'\n                    };\n                    if (isArray(path)) {\n                        attr.d = path;\n                    } else if (isObject(path)) { // attributes\n                        extend(attr, path);\n                    }\n                    // create the shape\n                    return this.createElement('shape').attr(attr);\n                },\n\n                /**\n                 * Create and return a circle element. In VML circles are implemented as\n                 * shapes, which is faster than v:oval\n                 * @param {Number} x\n                 * @param {Number} y\n                 * @param {Number} r\n                 */\n                circle: function(x, y, r) {\n                    var circle = this.symbol('circle');\n                    if (isObject(x)) {\n                        r = x.r;\n                        y = x.y;\n                        x = x.x;\n                    }\n                    circle.isCircle = true; // Causes x and y to mean center (#1682)\n                    circle.r = r;\n                    return circle.attr({\n                        x: x,\n                        y: y\n                    });\n                },\n\n                /**\n                 * Create a group using an outer div and an inner v:group to allow rotating\n                 * and flipping. A simple v:group would have problems with positioning\n                 * child HTML elements and CSS clip.\n                 *\n                 * @param {String} name The name of the group\n                 */\n                g: function(name) {\n                    var wrapper,\n                        attribs;\n\n                    // set the class name\n                    if (name) {\n                        attribs = {\n                            'className': 'highcharts-' + name,\n                            'class': 'highcharts-' + name\n                        };\n                    }\n\n                    // the div to hold HTML and clipping\n                    wrapper = this.createElement('div').attr(attribs);\n\n                    return wrapper;\n                },\n\n                /**\n                 * VML override to create a regular HTML image\n                 * @param {String} src\n                 * @param {Number} x\n                 * @param {Number} y\n                 * @param {Number} width\n                 * @param {Number} height\n                 */\n                image: function(src, x, y, width, height) {\n                    var obj = this.createElement('img')\n                        .attr({\n                            src: src\n                        });\n\n                    if (arguments.length > 1) {\n                        obj.attr({\n                            x: x,\n                            y: y,\n                            width: width,\n                            height: height\n                        });\n                    }\n                    return obj;\n                },\n\n                /**\n                 * For rectangles, VML uses a shape for rect to overcome bugs and rotation problems\n                 */\n                createElement: function(nodeName) {\n                    return nodeName === 'rect' ?\n                        this.symbol(nodeName) :\n                        SVGRenderer.prototype.createElement.call(this, nodeName);\n                },\n\n                /**\n                 * In the VML renderer, each child of an inverted div (group) is inverted\n                 * @param {Object} element\n                 * @param {Object} parentNode\n                 */\n                invertChild: function(element, parentNode) {\n                    var ren = this,\n                        parentStyle = parentNode.style,\n                        imgStyle = element.tagName === 'IMG' && element.style; // #1111\n\n                    css(element, {\n                        flip: 'x',\n                        left: pInt(parentStyle.width) - (imgStyle ? pInt(imgStyle.top) : 1),\n                        top: pInt(parentStyle.height) - (imgStyle ? pInt(imgStyle.left) : 1),\n                        rotation: -90\n                    });\n\n                    // Recursively invert child elements, needed for nested composite\n                    // shapes like box plots and error bars. #1680, #1806.\n                    each(element.childNodes, function(child) {\n                        ren.invertChild(child, element);\n                    });\n                },\n\n                /**\n                 * Symbol definitions that override the parent SVG renderer's symbols\n                 *\n                 */\n                symbols: {\n                    // VML specific arc function\n                    arc: function(x, y, w, h, options) {\n                        var start = options.start,\n                            end = options.end,\n                            radius = options.r || w || h,\n                            innerRadius = options.innerR,\n                            cosStart = Math.cos(start),\n                            sinStart = Math.sin(start),\n                            cosEnd = Math.cos(end),\n                            sinEnd = Math.sin(end),\n                            ret;\n\n                        if (end - start === 0) { // no angle, don't show it.\n                            return ['x'];\n                        }\n\n                        ret = [\n                            'wa', // clockwise arc to\n                            x - radius, // left\n                            y - radius, // top\n                            x + radius, // right\n                            y + radius, // bottom\n                            x + radius * cosStart, // start x\n                            y + radius * sinStart, // start y\n                            x + radius * cosEnd, // end x\n                            y + radius * sinEnd // end y\n                        ];\n\n                        if (options.open && !innerRadius) {\n                            ret.push(\n                                'e',\n                                'M',\n                                x, // - innerRadius,\n                                y // - innerRadius\n                            );\n                        }\n\n                        ret.push(\n                            'at', // anti clockwise arc to\n                            x - innerRadius, // left\n                            y - innerRadius, // top\n                            x + innerRadius, // right\n                            y + innerRadius, // bottom\n                            x + innerRadius * cosEnd, // start x\n                            y + innerRadius * sinEnd, // start y\n                            x + innerRadius * cosStart, // end x\n                            y + innerRadius * sinStart, // end y\n                            'x', // finish path\n                            'e' // close\n                        );\n\n                        ret.isArc = true;\n                        return ret;\n\n                    },\n                    // Add circle symbol path. This performs significantly faster than v:oval.\n                    circle: function(x, y, w, h, wrapper) {\n\n                        if (wrapper && defined(wrapper.r)) {\n                            w = h = 2 * wrapper.r;\n                        }\n\n                        // Center correction, #1682\n                        if (wrapper && wrapper.isCircle) {\n                            x -= w / 2;\n                            y -= h / 2;\n                        }\n\n                        // Return the path\n                        return [\n                            'wa', // clockwisearcto\n                            x, // left\n                            y, // top\n                            x + w, // right\n                            y + h, // bottom\n                            x + w, // start x\n                            y + h / 2, // start y\n                            x + w, // end x\n                            y + h / 2, // end y\n                            //'x', // finish path\n                            'e' // close\n                        ];\n                    },\n                    /**\n                     * Add rectangle symbol path which eases rotation and omits arcsize problems\n                     * compared to the built-in VML roundrect shape. When borders are not rounded,\n                     * use the simpler square path, else use the callout path without the arrow.\n                     */\n                    rect: function(x, y, w, h, options) {\n                        return SVGRenderer.prototype.symbols[!defined(options) || !options.r ? 'square' : 'callout'].call(0, x, y, w, h, options);\n                    }\n                }\n            };\n            H.VMLRenderer = VMLRenderer = function() {\n                this.init.apply(this, arguments);\n            };\n            VMLRenderer.prototype = merge(SVGRenderer.prototype, VMLRendererExtension);\n\n            // general renderer\n            H.Renderer = VMLRenderer;\n        }\n\n        // This method is used with exporting in old IE, when emulating SVG (see #2314)\n        SVGRenderer.prototype.measureSpanWidth = function(text, styles) {\n            var measuringSpan = doc.createElement('span'),\n                offsetWidth,\n                textNode = doc.createTextNode(text);\n\n            measuringSpan.appendChild(textNode);\n            css(measuringSpan, styles);\n            this.box.appendChild(measuringSpan);\n            offsetWidth = measuringSpan.offsetWidth;\n            discardElement(measuringSpan); // #2463\n            return offsetWidth;\n        };\n\n\n        /* ****************************************************************************\n         *                                                                            *\n         * END OF INTERNET EXPLORER <= 8 SPECIFIC CODE                                *\n         *                                                                            *\n         *****************************************************************************/\n\n\n    }(Highcharts));\n    (function(H) {\n        /**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */\n        var color = H.color,\n            each = H.each,\n            getTZOffset = H.getTZOffset,\n            isTouchDevice = H.isTouchDevice,\n            merge = H.merge,\n            pick = H.pick,\n            svg = H.svg,\n            win = H.win;\n\n        /* ****************************************************************************\n         * Handle the options                                                         *\n         *****************************************************************************/\n        H.defaultOptions = {\n\n            colors: '#7cb5ec #434348 #90ed7d #f7a35c #8085e9 #f15c80 #e4d354 #2b908f #f45b5b #91e8e1'.split(' '),\n\n            symbols: ['circle', 'diamond', 'square', 'triangle', 'triangle-down'],\n            lang: {\n                loading: 'Loading...',\n                months: [\n                    'January', 'February', 'March', 'April', 'May', 'June', 'July',\n                    'August', 'September', 'October', 'November', 'December'\n                ],\n                shortMonths: [\n                    'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul',\n                    'Aug', 'Sep', 'Oct', 'Nov', 'Dec'\n                ],\n                weekdays: [\n                    'Sunday', 'Monday', 'Tuesday', 'Wednesday',\n                    'Thursday', 'Friday', 'Saturday'\n                ],\n                // invalidDate: '',\n                decimalPoint: '.',\n                numericSymbols: ['k', 'M', 'G', 'T', 'P', 'E'], // SI prefixes used in axis labels\n                resetZoom: 'Reset zoom',\n                resetZoomTitle: 'Reset zoom level 1:1',\n                thousandsSep: ' '\n            },\n            global: {\n                useUTC: true,\n                //timezoneOffset: 0,\n\n                VMLRadialGradientURL: 'http://code.highcharts.com/5.0.10/gfx/vml-radial-gradient.png'\n\n            },\n            chart: {\n                //animation: true,\n                //alignTicks: false,\n                //reflow: true,\n                //className: null,\n                //events: { load, selection },\n                //margin: [null],\n                //marginTop: null,\n                //marginRight: null,\n                //marginBottom: null,\n                //marginLeft: null,\n                borderRadius: 0,\n\n                defaultSeriesType: 'line',\n                ignoreHiddenSeries: true,\n                //inverted: false,\n                spacing: [10, 10, 15, 10],\n                //spacingTop: 10,\n                //spacingRight: 10,\n                //spacingBottom: 15,\n                //spacingLeft: 10,\n                //zoomType: ''\n                resetZoomButton: {\n                    theme: {\n                        zIndex: 20\n                    },\n                    position: {\n                        align: 'right',\n                        x: -10,\n                        //verticalAlign: 'top',\n                        y: 10\n                    }\n                    // relativeTo: 'plot'\n                },\n                width: null,\n                height: null,\n\n\n                borderColor: '#335cad',\n                //borderWidth: 0,\n                //style: {\n                //\tfontFamily: '\"Lucida Grande\", \"Lucida Sans Unicode\", Verdana, Arial, Helvetica, sans-serif', // default font\n                //\tfontSize: '12px'\n                //},\n                backgroundColor: '#ffffff',\n                //plotBackgroundColor: null,\n                plotBorderColor: '#cccccc'\n                //plotBorderWidth: 0,\n                //plotShadow: false\n\n            },\n            title: {\n                text: 'Chart title',\n                align: 'center',\n                // floating: false,\n                margin: 15,\n                // x: 0,\n                // verticalAlign: 'top',\n                // y: null,\n                // style: {}, // defined inline\n                widthAdjust: -44\n\n            },\n            subtitle: {\n                text: '',\n                align: 'center',\n                // floating: false\n                // x: 0,\n                // verticalAlign: 'top',\n                // y: null,\n                // style: {}, // defined inline\n                widthAdjust: -44\n            },\n\n            plotOptions: {},\n            labels: {\n                //items: [],\n                style: {\n                    //font: defaultFont,\n                    position: 'absolute',\n                    color: '#333333'\n                }\n            },\n            legend: {\n                enabled: true,\n                align: 'center',\n                //floating: false,\n                layout: 'horizontal',\n                labelFormatter: function() {\n                    return this.name;\n                },\n                //borderWidth: 0,\n                borderColor: '#999999',\n                borderRadius: 0,\n                navigation: {\n\n                    activeColor: '#003399',\n                    inactiveColor: '#cccccc'\n\n                    // animation: true,\n                    // arrowSize: 12\n                    // style: {} // text styles\n                },\n                // margin: 20,\n                // reversed: false,\n                // backgroundColor: null,\n                /*style: {\n                \tpadding: '5px'\n                },*/\n\n                itemStyle: {\n                    color: '#333333',\n                    fontSize: '12px',\n                    fontWeight: 'bold'\n                },\n                itemHoverStyle: {\n                    //cursor: 'pointer', removed as of #601\n                    color: '#000000'\n                },\n                itemHiddenStyle: {\n                    color: '#cccccc'\n                },\n                shadow: false,\n\n                itemCheckboxStyle: {\n                    position: 'absolute',\n                    width: '13px', // for IE precision\n                    height: '13px'\n                },\n                // itemWidth: undefined,\n                squareSymbol: true,\n                // symbolRadius: 0,\n                // symbolWidth: 16,\n                symbolPadding: 5,\n                verticalAlign: 'bottom',\n                // width: undefined,\n                x: 0,\n                y: 0,\n                title: {\n                    //text: null,\n\n                    style: {\n                        fontWeight: 'bold'\n                    }\n\n                }\n            },\n\n            loading: {\n                // hideDuration: 100,\n                // showDuration: 0,\n\n                labelStyle: {\n                    fontWeight: 'bold',\n                    position: 'relative',\n                    top: '45%'\n                },\n                style: {\n                    position: 'absolute',\n                    backgroundColor: '#ffffff',\n                    opacity: 0.5,\n                    textAlign: 'center'\n                }\n\n            },\n\n            tooltip: {\n                enabled: true,\n                animation: svg,\n                //crosshairs: null,\n                borderRadius: 3,\n                dateTimeLabelFormats: {\n                    millisecond: '%A, %b %e, %H:%M:%S.%L',\n                    second: '%A, %b %e, %H:%M:%S',\n                    minute: '%A, %b %e, %H:%M',\n                    hour: '%A, %b %e, %H:%M',\n                    day: '%A, %b %e, %Y',\n                    week: 'Week from %A, %b %e, %Y',\n                    month: '%B %Y',\n                    year: '%Y'\n                },\n                footerFormat: '',\n                //formatter: defaultFormatter,\n                /* todo: em font-size when finished comparing against HC4\n                headerFormat: '<span style=\"font-size: 0.85em\">{point.key}</span><br/>',\n                */\n                padding: 8,\n\n                //shape: 'callout',\n                //shared: false,\n                snap: isTouchDevice ? 25 : 10,\n\n                backgroundColor: color('#f7f7f7').setOpacity(0.85).get(),\n                borderWidth: 1,\n                headerFormat: '<span style=\"font-size: 10px\">{point.key}</span><br/>',\n                pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y}</b><br/>',\n                shadow: true,\n                style: {\n                    color: '#333333',\n                    cursor: 'default',\n                    fontSize: '12px',\n                    pointerEvents: 'none', // #1686 http://caniuse.com/#feat=pointer-events\n                    whiteSpace: 'nowrap'\n                }\n\n                //xDateFormat: '%A, %b %e, %Y',\n                //valueDecimals: null,\n                //valuePrefix: '',\n                //valueSuffix: ''\n            },\n\n            credits: {\n                enabled: true,\n                href: 'http://www.highcharts.com',\n                position: {\n                    align: 'right',\n                    x: -10,\n                    verticalAlign: 'bottom',\n                    y: -5\n                },\n\n                style: {\n                    cursor: 'pointer',\n                    color: '#999999',\n                    fontSize: '9px'\n                },\n\n                text: 'Highcharts.com'\n            }\n        };\n\n\n\n        /**\n         * Sets the getTimezoneOffset function. If the timezone option is set, a default\n         * getTimezoneOffset function with that timezone is returned. If not, the\n         * specified getTimezoneOffset function is returned. If neither are specified,\n         * undefined is returned.\n         * @return {function} a getTimezoneOffset function or undefined\n         */\n        function getTimezoneOffsetOption() {\n            var globalOptions = H.defaultOptions.global,\n                moment = win.moment;\n\n            if (globalOptions.timezone) {\n                if (!moment) {\n                    // getTimezoneOffset-function stays undefined because it depends on\n                    // Moment.js\n                    H.error(25);\n\n                } else {\n                    return function(timestamp) {\n                        return -moment.tz(\n                            timestamp,\n                            globalOptions.timezone\n                        ).utcOffset();\n                    };\n                }\n            }\n\n            // If not timezone is set, look for the getTimezoneOffset callback\n            return globalOptions.useUTC && globalOptions.getTimezoneOffset;\n        }\n\n        /**\n         * Set the time methods globally based on the useUTC option. Time method can be\n         *   either local time or UTC (default). It is called internally on initiating\n         *   Highcharts and after running `Highcharts.setOptions`.\n         *\n         * @private\n         */\n        function setTimeMethods() {\n            var globalOptions = H.defaultOptions.global,\n                Date,\n                useUTC = globalOptions.useUTC,\n                GET = useUTC ? 'getUTC' : 'get',\n                SET = useUTC ? 'setUTC' : 'set';\n\n            H.Date = Date = globalOptions.Date || win.Date; // Allow using a different Date class\n            Date.hcTimezoneOffset = useUTC && globalOptions.timezoneOffset;\n            Date.hcGetTimezoneOffset = getTimezoneOffsetOption();\n            Date.hcMakeTime = function(year, month, date, hours, minutes, seconds) {\n                var d;\n                if (useUTC) {\n                    d = Date.UTC.apply(0, arguments);\n                    d += getTZOffset(d);\n                } else {\n                    d = new Date(\n                        year,\n                        month,\n                        pick(date, 1),\n                        pick(hours, 0),\n                        pick(minutes, 0),\n                        pick(seconds, 0)\n                    ).getTime();\n                }\n                return d;\n            };\n            each(['Minutes', 'Hours', 'Day', 'Date', 'Month', 'FullYear'], function(s) {\n                Date['hcGet' + s] = GET + s;\n            });\n            each(['Milliseconds', 'Seconds', 'Minutes', 'Hours', 'Date', 'Month', 'FullYear'], function(s) {\n                Date['hcSet' + s] = SET + s;\n            });\n        }\n\n        /**\n         * Merge the default options with custom options and return the new options structure\n         * @param {Object} options The new custom options\n         */\n        H.setOptions = function(options) {\n\n            // Copy in the default options\n            H.defaultOptions = merge(true, H.defaultOptions, options);\n\n            // Apply UTC\n            setTimeMethods();\n\n            return H.defaultOptions;\n        };\n\n        /**\n         * Get the updated default options. Until 3.0.7, merely exposing defaultOptions for outside modules\n         * wasn't enough because the setOptions method created a new object.\n         */\n        H.getOptions = function() {\n            return H.defaultOptions;\n        };\n\n\n        // Series defaults\n        H.defaultPlotOptions = H.defaultOptions.plotOptions;\n\n        // set the default time methods\n        setTimeMethods();\n\n    }(Highcharts));\n    (function(H) {\n        /**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */\n        var arrayMax = H.arrayMax,\n            arrayMin = H.arrayMin,\n            defined = H.defined,\n            destroyObjectProperties = H.destroyObjectProperties,\n            each = H.each,\n            erase = H.erase,\n            merge = H.merge,\n            pick = H.pick;\n        /*\n         * The object wrapper for plot lines and plot bands\n         * @param {Object} options\n         */\n        H.PlotLineOrBand = function(axis, options) {\n            this.axis = axis;\n\n            if (options) {\n                this.options = options;\n                this.id = options.id;\n            }\n        };\n\n        H.PlotLineOrBand.prototype = {\n\n            /**\n             * Render the plot line or plot band. If it is already existing,\n             * move it.\n             */\n            render: function() {\n                var plotLine = this,\n                    axis = plotLine.axis,\n                    horiz = axis.horiz,\n                    options = plotLine.options,\n                    optionsLabel = options.label,\n                    label = plotLine.label,\n                    to = options.to,\n                    from = options.from,\n                    value = options.value,\n                    isBand = defined(from) && defined(to),\n                    isLine = defined(value),\n                    svgElem = plotLine.svgElem,\n                    isNew = !svgElem,\n                    path = [],\n                    addEvent,\n                    eventType,\n                    color = options.color,\n                    zIndex = pick(options.zIndex, 0),\n                    events = options.events,\n                    attribs = {\n                        'class': 'highcharts-plot-' + (isBand ? 'band ' : 'line ') + (options.className || '')\n                    },\n                    groupAttribs = {},\n                    renderer = axis.chart.renderer,\n                    groupName = isBand ? 'bands' : 'lines',\n                    group,\n                    log2lin = axis.log2lin;\n\n                // logarithmic conversion\n                if (axis.isLog) {\n                    from = log2lin(from);\n                    to = log2lin(to);\n                    value = log2lin(value);\n                }\n\n\n                // Set the presentational attributes\n                if (isLine) {\n                    attribs = {\n                        stroke: color,\n                        'stroke-width': options.width\n                    };\n                    if (options.dashStyle) {\n                        attribs.dashstyle = options.dashStyle;\n                    }\n\n                } else if (isBand) { // plot band\n                    if (color) {\n                        attribs.fill = color;\n                    }\n                    if (options.borderWidth) {\n                        attribs.stroke = options.borderColor;\n                        attribs['stroke-width'] = options.borderWidth;\n                    }\n                }\n\n\n                // Grouping and zIndex\n                groupAttribs.zIndex = zIndex;\n                groupName += '-' + zIndex;\n\n                group = axis.plotLinesAndBandsGroups[groupName];\n                if (!group) {\n                    axis.plotLinesAndBandsGroups[groupName] = group = renderer.g('plot-' + groupName)\n                        .attr(groupAttribs).add();\n                }\n\n                // Create the path\n                if (isNew) {\n                    plotLine.svgElem = svgElem =\n                        renderer\n                        .path()\n                        .attr(attribs).add(group);\n                }\n\n\n                // Set the path or return\n                if (isLine) {\n                    path = axis.getPlotLinePath(value, svgElem.strokeWidth());\n                } else if (isBand) { // plot band\n                    path = axis.getPlotBandPath(from, to, options);\n                } else {\n                    return;\n                }\n\n\n                // common for lines and bands\n                if (isNew && path && path.length) {\n                    svgElem.attr({\n                        d: path\n                    });\n\n                    // events\n                    if (events) {\n                        addEvent = function(eventType) {\n                            svgElem.on(eventType, function(e) {\n                                events[eventType].apply(plotLine, [e]);\n                            });\n                        };\n                        for (eventType in events) {\n                            addEvent(eventType);\n                        }\n                    }\n                } else if (svgElem) {\n                    if (path) {\n                        svgElem.show();\n                        svgElem.animate({\n                            d: path\n                        });\n                    } else {\n                        svgElem.hide();\n                        if (label) {\n                            plotLine.label = label = label.destroy();\n                        }\n                    }\n                }\n\n                // the plot band/line label\n                if (optionsLabel && defined(optionsLabel.text) && path && path.length &&\n                    axis.width > 0 && axis.height > 0 && !path.flat) {\n                    // apply defaults\n                    optionsLabel = merge({\n                        align: horiz && isBand && 'center',\n                        x: horiz ? !isBand && 4 : 10,\n                        verticalAlign: !horiz && isBand && 'middle',\n                        y: horiz ? isBand ? 16 : 10 : isBand ? 6 : -4,\n                        rotation: horiz && !isBand && 90\n                    }, optionsLabel);\n\n                    this.renderLabel(optionsLabel, path, isBand, zIndex);\n\n                } else if (label) { // move out of sight\n                    label.hide();\n                }\n\n                // chainable\n                return plotLine;\n            },\n\n            /**\n             * Render and align label for plot line or band.\n             */\n            renderLabel: function(optionsLabel, path, isBand, zIndex) {\n                var plotLine = this,\n                    label = plotLine.label,\n                    renderer = plotLine.axis.chart.renderer,\n                    attribs,\n                    xs,\n                    ys,\n                    x,\n                    y;\n\n                // add the SVG element\n                if (!label) {\n                    attribs = {\n                        align: optionsLabel.textAlign || optionsLabel.align,\n                        rotation: optionsLabel.rotation,\n                        'class': 'highcharts-plot-' + (isBand ? 'band' : 'line') + '-label ' + (optionsLabel.className || '')\n                    };\n\n                    attribs.zIndex = zIndex;\n\n                    plotLine.label = label = renderer.text(\n                            optionsLabel.text,\n                            0,\n                            0,\n                            optionsLabel.useHTML\n                        )\n                        .attr(attribs)\n                        .add();\n\n\n                    label.css(optionsLabel.style);\n\n                }\n\n                // get the bounding box and align the label\n                // #3000 changed to better handle choice between plotband or plotline\n                xs = [path[1], path[4], (isBand ? path[6] : path[1])];\n                ys = [path[2], path[5], (isBand ? path[7] : path[2])];\n                x = arrayMin(xs);\n                y = arrayMin(ys);\n\n                label.align(optionsLabel, false, {\n                    x: x,\n                    y: y,\n                    width: arrayMax(xs) - x,\n                    height: arrayMax(ys) - y\n                });\n                label.show();\n            },\n\n            /**\n             * Remove the plot line or band\n             */\n            destroy: function() {\n                // remove it from the lookup\n                erase(this.axis.plotLinesAndBands, this);\n\n                delete this.axis;\n                destroyObjectProperties(this);\n            }\n        };\n\n        /**\n         * Object with members for extending the Axis prototype\n         * @todo Extend directly instead of adding object to Highcharts first\n         */\n\n        H.AxisPlotLineOrBandExtension = {\n\n            /**\n             * Create the path for a plot band\n             */\n            getPlotBandPath: function(from, to) {\n                var toPath = this.getPlotLinePath(to, null, null, true),\n                    path = this.getPlotLinePath(from, null, null, true),\n                    // #4964 check if chart is inverted or plotband is on yAxis \n                    horiz = this.horiz,\n                    plus = 1,\n                    outside =\n                    (from < this.min && to < this.min) ||\n                    (from > this.max && to > this.max);\n\n                if (path && toPath) {\n\n                    // Flat paths don't need labels (#3836)\n                    if (outside) {\n                        path.flat = path.toString() === toPath.toString();\n                        plus = 0;\n                    }\n\n                    // Add 1 pixel, when coordinates are the same\n                    path.push(\n                        horiz && toPath[4] === path[4] ? toPath[4] + plus : toPath[4], !horiz && toPath[5] === path[5] ? toPath[5] + plus : toPath[5],\n                        horiz && toPath[1] === path[1] ? toPath[1] + plus : toPath[1], !horiz && toPath[2] === path[2] ? toPath[2] + plus : toPath[2]\n                    );\n                } else { // outside the axis area\n                    path = null;\n                }\n\n                return path;\n            },\n\n            addPlotBand: function(options) {\n                return this.addPlotBandOrLine(options, 'plotBands');\n            },\n\n            addPlotLine: function(options) {\n                return this.addPlotBandOrLine(options, 'plotLines');\n            },\n\n            /**\n             * Add a plot band or plot line after render time\n             *\n             * @param options {Object} The plotBand or plotLine configuration object\n             */\n            addPlotBandOrLine: function(options, coll) {\n                var obj = new H.PlotLineOrBand(this, options).render(),\n                    userOptions = this.userOptions;\n\n                if (obj) { // #2189\n                    // Add it to the user options for exporting and Axis.update\n                    if (coll) {\n                        userOptions[coll] = userOptions[coll] || [];\n                        userOptions[coll].push(options);\n                    }\n                    this.plotLinesAndBands.push(obj);\n                }\n\n                return obj;\n            },\n\n            /**\n             * Remove a plot band or plot line from the chart by id\n             * @param {Object} id\n             */\n            removePlotBandOrLine: function(id) {\n                var plotLinesAndBands = this.plotLinesAndBands,\n                    options = this.options,\n                    userOptions = this.userOptions,\n                    i = plotLinesAndBands.length;\n                while (i--) {\n                    if (plotLinesAndBands[i].id === id) {\n                        plotLinesAndBands[i].destroy();\n                    }\n                }\n                each([options.plotLines || [], userOptions.plotLines || [], options.plotBands || [], userOptions.plotBands || []], function(arr) {\n                    i = arr.length;\n                    while (i--) {\n                        if (arr[i].id === id) {\n                            erase(arr, arr[i]);\n                        }\n                    }\n                });\n            }\n        };\n\n    }(Highcharts));\n    (function(H) {\n        /**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */\n        var correctFloat = H.correctFloat,\n            defined = H.defined,\n            destroyObjectProperties = H.destroyObjectProperties,\n            isNumber = H.isNumber,\n            merge = H.merge,\n            pick = H.pick,\n            deg2rad = H.deg2rad;\n\n        /**\n         * The Tick class\n         */\n        H.Tick = function(axis, pos, type, noLabel) {\n            this.axis = axis;\n            this.pos = pos;\n            this.type = type || '';\n            this.isNew = true;\n\n            if (!type && !noLabel) {\n                this.addLabel();\n            }\n        };\n\n        H.Tick.prototype = {\n            /**\n             * Write the tick label\n             */\n            addLabel: function() {\n                var tick = this,\n                    axis = tick.axis,\n                    options = axis.options,\n                    chart = axis.chart,\n                    categories = axis.categories,\n                    names = axis.names,\n                    pos = tick.pos,\n                    labelOptions = options.labels,\n                    str,\n                    tickPositions = axis.tickPositions,\n                    isFirst = pos === tickPositions[0],\n                    isLast = pos === tickPositions[tickPositions.length - 1],\n                    value = categories ?\n                    pick(categories[pos], names[pos], pos) :\n                    pos,\n                    label = tick.label,\n                    tickPositionInfo = tickPositions.info,\n                    dateTimeLabelFormat;\n\n                // Set the datetime label format. If a higher rank is set for this position, use that. If not,\n                // use the general format.\n                if (axis.isDatetimeAxis && tickPositionInfo) {\n                    dateTimeLabelFormat =\n                        options.dateTimeLabelFormats[\n                            tickPositionInfo.higherRanks[pos] || tickPositionInfo.unitName\n                        ];\n                }\n                // set properties for access in render method\n                tick.isFirst = isFirst;\n                tick.isLast = isLast;\n\n                // get the string\n                str = axis.labelFormatter.call({\n                    axis: axis,\n                    chart: chart,\n                    isFirst: isFirst,\n                    isLast: isLast,\n                    dateTimeLabelFormat: dateTimeLabelFormat,\n                    value: axis.isLog ? correctFloat(axis.lin2log(value)) : value\n                });\n\n                // prepare CSS\n                //css = width && { width: Math.max(1, Math.round(width - 2 * (labelOptions.padding || 10))) + 'px' };\n\n                // first call\n                if (!defined(label)) {\n\n                    tick.label = label =\n                        defined(str) && labelOptions.enabled ?\n                        chart.renderer.text(\n                            str,\n                            0,\n                            0,\n                            labelOptions.useHTML\n                        )\n\n                        // without position absolute, IE export sometimes is wrong\n                        .css(merge(labelOptions.style))\n\n                        .add(axis.labelGroup) :\n                        null;\n                    tick.labelLength = label && label.getBBox().width; // Un-rotated length\n                    tick.rotation = 0; // Base value to detect change for new calls to getBBox\n\n                    // update\n                } else if (label) {\n                    label.attr({\n                        text: str\n                    });\n                }\n            },\n\n            /**\n             * Get the offset height or width of the label\n             */\n            getLabelSize: function() {\n                return this.label ?\n                    this.label.getBBox()[this.axis.horiz ? 'height' : 'width'] :\n                    0;\n            },\n\n            /**\n             * Handle the label overflow by adjusting the labels to the left and right edge, or\n             * hide them if they collide into the neighbour label.\n             */\n            handleOverflow: function(xy) {\n                var axis = this.axis,\n                    pxPos = xy.x,\n                    chartWidth = axis.chart.chartWidth,\n                    spacing = axis.chart.spacing,\n                    leftBound = pick(axis.labelLeft, Math.min(axis.pos, spacing[3])),\n                    rightBound = pick(axis.labelRight, Math.max(axis.pos + axis.len, chartWidth - spacing[1])),\n                    label = this.label,\n                    rotation = this.rotation,\n                    factor = {\n                        left: 0,\n                        center: 0.5,\n                        right: 1\n                    }[axis.labelAlign],\n                    labelWidth = label.getBBox().width,\n                    slotWidth = axis.getSlotWidth(),\n                    modifiedSlotWidth = slotWidth,\n                    xCorrection = factor,\n                    goRight = 1,\n                    leftPos,\n                    rightPos,\n                    textWidth,\n                    css = {};\n\n                // Check if the label overshoots the chart spacing box. If it does, move it.\n                // If it now overshoots the slotWidth, add ellipsis.\n                if (!rotation) {\n                    leftPos = pxPos - factor * labelWidth;\n                    rightPos = pxPos + (1 - factor) * labelWidth;\n\n                    if (leftPos < leftBound) {\n                        modifiedSlotWidth = xy.x + modifiedSlotWidth * (1 - factor) - leftBound;\n                    } else if (rightPos > rightBound) {\n                        modifiedSlotWidth = rightBound - xy.x + modifiedSlotWidth * factor;\n                        goRight = -1;\n                    }\n\n                    modifiedSlotWidth = Math.min(slotWidth, modifiedSlotWidth); // #4177\n                    if (modifiedSlotWidth < slotWidth && axis.labelAlign === 'center') {\n                        xy.x += goRight * (slotWidth - modifiedSlotWidth - xCorrection *\n                            (slotWidth - Math.min(labelWidth, modifiedSlotWidth)));\n                    }\n                    // If the label width exceeds the available space, set a text width to be\n                    // picked up below. Also, if a width has been set before, we need to set a new\n                    // one because the reported labelWidth will be limited by the box (#3938).\n                    if (labelWidth > modifiedSlotWidth || (axis.autoRotation && (label.styles || {}).width)) {\n                        textWidth = modifiedSlotWidth;\n                    }\n\n                    // Add ellipsis to prevent rotated labels to be clipped against the edge of the chart\n                } else if (rotation < 0 && pxPos - factor * labelWidth < leftBound) {\n                    textWidth = Math.round(pxPos / Math.cos(rotation * deg2rad) - leftBound);\n                } else if (rotation > 0 && pxPos + factor * labelWidth > rightBound) {\n                    textWidth = Math.round((chartWidth - pxPos) / Math.cos(rotation * deg2rad));\n                }\n\n                if (textWidth) {\n                    css.width = textWidth;\n                    if (!(axis.options.labels.style || {}).textOverflow) {\n                        css.textOverflow = 'ellipsis';\n                    }\n                    label.css(css);\n                }\n            },\n\n            /**\n             * Get the x and y position for ticks and labels\n             */\n            getPosition: function(horiz, pos, tickmarkOffset, old) {\n                var axis = this.axis,\n                    chart = axis.chart,\n                    cHeight = (old && chart.oldChartHeight) || chart.chartHeight;\n\n                return {\n                    x: horiz ?\n                        axis.translate(pos + tickmarkOffset, null, null, old) + axis.transB : axis.left + axis.offset +\n                        (axis.opposite ?\n                            ((old && chart.oldChartWidth) || chart.chartWidth) - axis.right - axis.left :\n                            0\n                        ),\n\n                    y: horiz ?\n                        cHeight - axis.bottom + axis.offset - (axis.opposite ? axis.height : 0) : cHeight - axis.translate(pos + tickmarkOffset, null, null, old) - axis.transB\n                };\n\n            },\n\n            /**\n             * Get the x, y position of the tick label\n             */\n            getLabelPosition: function(x, y, label, horiz, labelOptions, tickmarkOffset, index, step) {\n                var axis = this.axis,\n                    transA = axis.transA,\n                    reversed = axis.reversed,\n                    staggerLines = axis.staggerLines,\n                    rotCorr = axis.tickRotCorr || {\n                        x: 0,\n                        y: 0\n                    },\n                    yOffset = labelOptions.y,\n                    line;\n\n                if (!defined(yOffset)) {\n                    if (axis.side === 0) {\n                        yOffset = label.rotation ? -8 : -label.getBBox().height;\n                    } else if (axis.side === 2) {\n                        yOffset = rotCorr.y + 8;\n                    } else {\n                        // #3140, #3140\n                        yOffset = Math.cos(label.rotation * deg2rad) * (rotCorr.y - label.getBBox(false, 0).height / 2);\n                    }\n                }\n\n                x = x + labelOptions.x + rotCorr.x - (tickmarkOffset && horiz ?\n                    tickmarkOffset * transA * (reversed ? -1 : 1) : 0);\n                y = y + yOffset - (tickmarkOffset && !horiz ?\n                    tickmarkOffset * transA * (reversed ? 1 : -1) : 0);\n\n                // Correct for staggered labels\n                if (staggerLines) {\n                    line = (index / (step || 1) % staggerLines);\n                    if (axis.opposite) {\n                        line = staggerLines - line - 1;\n                    }\n                    y += line * (axis.labelOffset / staggerLines);\n                }\n\n                return {\n                    x: x,\n                    y: Math.round(y)\n                };\n            },\n\n            /**\n             * Extendible method to return the path of the marker\n             */\n            getMarkPath: function(x, y, tickLength, tickWidth, horiz, renderer) {\n                return renderer.crispLine([\n                    'M',\n                    x,\n                    y,\n                    'L',\n                    x + (horiz ? 0 : -tickLength),\n                    y + (horiz ? tickLength : 0)\n                ], tickWidth);\n            },\n\n            /**\n             * Renders the gridLine.\n             * @param  {Boolean} old         Whether or not the tick is old\n             * @param  {number} opacity      The opacity of the grid line\n             * @param  {number} reverseCrisp Modifier for avoiding overlapping 1 or -1\n             * @return {undefined}\n             */\n            renderGridLine: function(old, opacity, reverseCrisp) {\n                var tick = this,\n                    axis = tick.axis,\n                    options = axis.options,\n                    gridLine = tick.gridLine,\n                    gridLinePath,\n                    attribs = {},\n                    pos = tick.pos,\n                    type = tick.type,\n                    tickmarkOffset = axis.tickmarkOffset,\n                    renderer = axis.chart.renderer;\n\n\n                var gridPrefix = type ? type + 'Grid' : 'grid',\n                    gridLineWidth = options[gridPrefix + 'LineWidth'],\n                    gridLineColor = options[gridPrefix + 'LineColor'],\n                    dashStyle = options[gridPrefix + 'LineDashStyle'];\n\n\n                if (!gridLine) {\n\n                    attribs.stroke = gridLineColor;\n                    attribs['stroke-width'] = gridLineWidth;\n                    if (dashStyle) {\n                        attribs.dashstyle = dashStyle;\n                    }\n\n                    if (!type) {\n                        attribs.zIndex = 1;\n                    }\n                    if (old) {\n                        attribs.opacity = 0;\n                    }\n                    tick.gridLine = gridLine = renderer.path()\n                        .attr(attribs)\n                        .addClass(\n                            'highcharts-' + (type ? type + '-' : '') + 'grid-line'\n                        )\n                        .add(axis.gridGroup);\n                }\n\n                // If the parameter 'old' is set, the current call will be followed\n                // by another call, therefore do not do any animations this time\n                if (!old && gridLine) {\n                    gridLinePath = axis.getPlotLinePath(\n                        pos + tickmarkOffset,\n                        gridLine.strokeWidth() * reverseCrisp,\n                        old, true\n                    );\n                    if (gridLinePath) {\n                        gridLine[tick.isNew ? 'attr' : 'animate']({\n                            d: gridLinePath,\n                            opacity: opacity\n                        });\n                    }\n                }\n            },\n\n            /**\n             * Renders the tick mark.\n             * @param  {Object} xy           The position vector of the mark\n             * @param  {number} xy.x         The x position of the mark\n             * @param  {number} xy.y         The y position of the mark\n             * @param  {number} opacity      The opacity of the mark\n             * @param  {number} reverseCrisp Modifier for avoiding overlapping 1 or -1\n             * @return {undefined}\n             */\n            renderMark: function(xy, opacity, reverseCrisp) {\n                var tick = this,\n                    axis = tick.axis,\n                    options = axis.options,\n                    renderer = axis.chart.renderer,\n                    type = tick.type,\n                    tickPrefix = type ? type + 'Tick' : 'tick',\n                    tickSize = axis.tickSize(tickPrefix),\n                    mark = tick.mark,\n                    isNewMark = !mark,\n                    x = xy.x,\n                    y = xy.y;\n\n\n                var tickWidth = pick(\n                        options[tickPrefix + 'Width'], !type && axis.isXAxis ? 1 : 0\n                    ), // X axis defaults to 1\n                    tickColor = options[tickPrefix + 'Color'];\n\n\n                if (tickSize) {\n\n                    // negate the length\n                    if (axis.opposite) {\n                        tickSize[0] = -tickSize[0];\n                    }\n\n                    // First time, create it\n                    if (isNewMark) {\n                        tick.mark = mark = renderer.path()\n                            .addClass('highcharts-' + (type ? type + '-' : '') + 'tick')\n                            .add(axis.axisGroup);\n\n\n                        mark.attr({\n                            stroke: tickColor,\n                            'stroke-width': tickWidth\n                        });\n\n                    }\n                    mark[isNewMark ? 'attr' : 'animate']({\n                        d: tick.getMarkPath(\n                            x,\n                            y,\n                            tickSize[0],\n                            mark.strokeWidth() * reverseCrisp,\n                            axis.horiz,\n                            renderer),\n                        opacity: opacity\n                    });\n\n                }\n            },\n\n            /**\n             * Renders the tick label.\n             * Note: The label should already be created in init(), so it should only\n             * have to be moved into place.\n             * @param  {Object} xy      The position vector of the label\n             * @param  {number} xy.x    The x position of the label\n             * @param  {number} xy.y    The y position of the label\n             * @param  {Boolean} old    Whether or not the tick is old\n             * @param  {number} opacity The opacity of the label\n             * @param  {number} index   The index of the tick\n             * @return {undefined}\n             */\n            renderLabel: function(xy, old, opacity, index) {\n                var tick = this,\n                    axis = tick.axis,\n                    horiz = axis.horiz,\n                    options = axis.options,\n                    label = tick.label,\n                    labelOptions = options.labels,\n                    step = labelOptions.step,\n                    tickmarkOffset = axis.tickmarkOffset,\n                    show = true,\n                    x = xy.x,\n                    y = xy.y;\n                if (label && isNumber(x)) {\n                    label.xy = xy = tick.getLabelPosition(\n                        x,\n                        y,\n                        label,\n                        horiz,\n                        labelOptions,\n                        tickmarkOffset,\n                        index,\n                        step\n                    );\n\n                    // Apply show first and show last. If the tick is both first and\n                    // last, it is a single centered tick, in which case we show the\n                    // label anyway (#2100).\n                    if (\n                        (\n                            tick.isFirst &&\n                            !tick.isLast &&\n                            !pick(options.showFirstLabel, 1)\n                        ) ||\n                        (\n                            tick.isLast &&\n                            !tick.isFirst &&\n                            !pick(options.showLastLabel, 1)\n                        )\n                    ) {\n                        show = false;\n\n                        // Handle label overflow and show or hide accordingly\n                    } else if (horiz && !axis.isRadial && !labelOptions.step &&\n                        !labelOptions.rotation && !old && opacity !== 0) {\n                        tick.handleOverflow(xy);\n                    }\n\n                    // apply step\n                    if (step && index % step) {\n                        // show those indices dividable by step\n                        show = false;\n                    }\n\n                    // Set the new position, and show or hide\n                    if (show && isNumber(xy.y)) {\n                        xy.opacity = opacity;\n                        label[tick.isNew ? 'attr' : 'animate'](xy);\n                    } else {\n                        label.attr('y', -9999); // #1338\n                    }\n                    tick.isNew = false;\n                }\n            },\n\n            /**\n             * Put everything in place\n             *\n             * @param index {Number}\n             * @param old {Boolean} Use old coordinates to prepare an animation into new\n             *                      position\n             */\n            render: function(index, old, opacity) {\n                var tick = this,\n                    axis = tick.axis,\n                    horiz = axis.horiz,\n                    pos = tick.pos,\n                    tickmarkOffset = axis.tickmarkOffset,\n                    xy = tick.getPosition(horiz, pos, tickmarkOffset, old),\n                    x = xy.x,\n                    y = xy.y,\n                    reverseCrisp = ((horiz && x === axis.pos + axis.len) ||\n                        (!horiz && y === axis.pos)) ? -1 : 1; // #1480, #1687\n\n                opacity = pick(opacity, 1);\n                this.isActive = true;\n\n                // Create the grid line\n                this.renderGridLine(old, opacity, reverseCrisp);\n\n                // create the tick mark\n                this.renderMark(xy, opacity, reverseCrisp);\n\n                // the label is created on init - now move it into place\n                this.renderLabel(xy, old, opacity, index);\n            },\n\n            /**\n             * Destructor for the tick prototype\n             */\n            destroy: function() {\n                destroyObjectProperties(this, this.axis);\n            }\n        };\n\n    }(Highcharts));\n    (function(H) {\n        /**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */\n\n        var addEvent = H.addEvent,\n            animObject = H.animObject,\n            arrayMax = H.arrayMax,\n            arrayMin = H.arrayMin,\n            AxisPlotLineOrBandExtension = H.AxisPlotLineOrBandExtension,\n            color = H.color,\n            correctFloat = H.correctFloat,\n            defaultOptions = H.defaultOptions,\n            defined = H.defined,\n            deg2rad = H.deg2rad,\n            destroyObjectProperties = H.destroyObjectProperties,\n            each = H.each,\n            extend = H.extend,\n            fireEvent = H.fireEvent,\n            format = H.format,\n            getMagnitude = H.getMagnitude,\n            grep = H.grep,\n            inArray = H.inArray,\n            isArray = H.isArray,\n            isNumber = H.isNumber,\n            isString = H.isString,\n            merge = H.merge,\n            normalizeTickInterval = H.normalizeTickInterval,\n            pick = H.pick,\n            PlotLineOrBand = H.PlotLineOrBand,\n            removeEvent = H.removeEvent,\n            splat = H.splat,\n            syncTimeout = H.syncTimeout,\n            Tick = H.Tick;\n\n        /**\n         * Create a new axis object.\n         * @constructor Axis\n         * @param {Object} chart\n         * @param {Object} options\n         */\n        H.Axis = function() {\n            this.init.apply(this, arguments);\n        };\n\n        H.Axis.prototype = {\n\n            /**\n             * Default options for the X axis - the Y axis has extended defaults\n             */\n            defaultOptions: {\n                // allowDecimals: null,\n                // alternateGridColor: null,\n                // categories: [],\n                dateTimeLabelFormats: {\n                    millisecond: '%H:%M:%S.%L',\n                    second: '%H:%M:%S',\n                    minute: '%H:%M',\n                    hour: '%H:%M',\n                    day: '%e. %b',\n                    week: '%e. %b',\n                    month: '%b \\'%y',\n                    year: '%Y'\n                },\n                endOnTick: false,\n                // reversed: false,\n\n                labels: {\n                    enabled: true,\n                    // rotation: 0,\n                    // align: 'center',\n                    // step: null,\n\n                    style: {\n                        color: '#666666',\n                        cursor: 'default',\n                        fontSize: '11px'\n                    },\n\n                    x: 0\n                    //y: undefined\n                    /*formatter: function () {\n                    \treturn this.value;\n                    },*/\n                },\n                //linkedTo: null,\n                //max: undefined,\n                //min: undefined,\n                minPadding: 0.01,\n                maxPadding: 0.01,\n                //minRange: null,\n                //minorTickInterval: null,\n                minorTickLength: 2,\n                minorTickPosition: 'outside', // inside or outside\n                //opposite: false,\n                //offset: 0,\n                //plotBands: [{\n                //\tevents: {},\n                //\tzIndex: 1,\n                //\tlabels: { align, x, verticalAlign, y, style, rotation, textAlign }\n                //}],\n                //plotLines: [{\n                //\tevents: {}\n                //  dashStyle: {}\n                //\tzIndex:\n                //\tlabels: { align, x, verticalAlign, y, style, rotation, textAlign }\n                //}],\n                //reversed: false,\n                // showFirstLabel: true,\n                // showLastLabel: true,\n                startOfWeek: 1,\n                startOnTick: false,\n                //tickInterval: null,\n                tickLength: 10,\n                tickmarkPlacement: 'between', // on or between\n                tickPixelInterval: 100,\n                tickPosition: 'outside',\n                title: {\n                    //text: null,\n                    align: 'middle', // low, middle or high\n                    //margin: 0 for horizontal, 10 for vertical axes,\n                    //rotation: 0,\n                    //side: 'outside',\n\n                    style: {\n                        color: '#666666'\n                    }\n\n                    //x: 0,\n                    //y: 0\n                },\n                type: 'linear', // linear, logarithmic or datetime\n                //visible: true\n\n                minorGridLineColor: '#f2f2f2',\n                // minorGridLineDashStyle: null,\n                minorGridLineWidth: 1,\n                minorTickColor: '#999999',\n                //minorTickWidth: 0,\n                lineColor: '#ccd6eb',\n                lineWidth: 1,\n                gridLineColor: '#e6e6e6',\n                // gridLineDashStyle: 'solid',\n                // gridLineWidth: 0,\n                tickColor: '#ccd6eb'\n                // tickWidth: 1\n\n            },\n\n            /**\n             * This options set extends the defaultOptions for Y axes\n             */\n            defaultYAxisOptions: {\n                endOnTick: true,\n                tickPixelInterval: 72,\n                showLastLabel: true,\n                labels: {\n                    x: -8\n                },\n                maxPadding: 0.05,\n                minPadding: 0.05,\n                startOnTick: true,\n                title: {\n                    rotation: 270,\n                    text: 'Values'\n                },\n                stackLabels: {\n                    enabled: false,\n                    //align: dynamic,\n                    //y: dynamic,\n                    //x: dynamic,\n                    //verticalAlign: dynamic,\n                    //textAlign: dynamic,\n                    //rotation: 0,\n                    formatter: function() {\n                        return H.numberFormat(this.total, -1);\n                    },\n\n                    style: {\n                        fontSize: '11px',\n                        fontWeight: 'bold',\n                        color: '#000000',\n                        textOutline: '1px contrast'\n                    }\n\n                },\n\n                gridLineWidth: 1,\n                lineWidth: 0\n                // tickWidth: 0\n\n            },\n\n            /**\n             * These options extend the defaultOptions for left axes\n             */\n            defaultLeftAxisOptions: {\n                labels: {\n                    x: -15\n                },\n                title: {\n                    rotation: 270\n                }\n            },\n\n            /**\n             * These options extend the defaultOptions for right axes\n             */\n            defaultRightAxisOptions: {\n                labels: {\n                    x: 15\n                },\n                title: {\n                    rotation: 90\n                }\n            },\n\n            /**\n             * These options extend the defaultOptions for bottom axes\n             */\n            defaultBottomAxisOptions: {\n                labels: {\n                    autoRotation: [-45],\n                    x: 0\n                    // overflow: undefined,\n                    // staggerLines: null\n                },\n                title: {\n                    rotation: 0\n                }\n            },\n            /**\n             * These options extend the defaultOptions for top axes\n             */\n            defaultTopAxisOptions: {\n                labels: {\n                    autoRotation: [-45],\n                    x: 0\n                    // overflow: undefined\n                    // staggerLines: null\n                },\n                title: {\n                    rotation: 0\n                }\n            },\n\n            /**\n             * Initialize the axis\n             */\n            init: function(chart, userOptions) {\n\n\n                var isXAxis = userOptions.isX,\n                    axis = this;\n\n                axis.chart = chart;\n\n                // Flag, is the axis horizontal\n                axis.horiz = chart.inverted ? !isXAxis : isXAxis;\n\n                // Flag, isXAxis\n                axis.isXAxis = isXAxis;\n                axis.coll = axis.coll || (isXAxis ? 'xAxis' : 'yAxis');\n\n                axis.opposite = userOptions.opposite; // needed in setOptions\n                axis.side = userOptions.side || (axis.horiz ?\n                    (axis.opposite ? 0 : 2) : // top : bottom\n                    (axis.opposite ? 1 : 3)); // right : left\n\n                axis.setOptions(userOptions);\n\n\n                var options = this.options,\n                    type = options.type,\n                    isDatetimeAxis = type === 'datetime';\n\n                axis.labelFormatter = options.labels.formatter || axis.defaultLabelFormatter; // can be overwritten by dynamic format\n\n\n                // Flag, stagger lines or not\n                axis.userOptions = userOptions;\n\n                //axis.axisTitleMargin = undefined,// = options.title.margin,\n                axis.minPixelPadding = 0;\n\n                axis.reversed = options.reversed;\n                axis.visible = options.visible !== false;\n                axis.zoomEnabled = options.zoomEnabled !== false;\n\n                // Initial categories\n                axis.hasNames = type === 'category' || options.categories === true;\n                axis.categories = options.categories || axis.hasNames;\n                axis.names = axis.names || []; // Preserve on update (#3830)\n\n                // Elements\n                //axis.axisGroup = undefined;\n                //axis.gridGroup = undefined;\n                //axis.axisTitle = undefined;\n                //axis.axisLine = undefined;\n\n                // Placeholder for plotlines and plotbands groups\n                axis.plotLinesAndBandsGroups = {};\n\n                // Shorthand types\n                axis.isLog = type === 'logarithmic';\n                axis.isDatetimeAxis = isDatetimeAxis;\n                axis.positiveValuesOnly = axis.isLog && !axis.allowNegativeLog;\n\n                // Flag, if axis is linked to another axis\n                axis.isLinked = defined(options.linkedTo);\n                // Linked axis.\n                //axis.linkedParent = undefined;\n\n                // Tick positions\n                //axis.tickPositions = undefined; // array containing predefined positions\n                // Tick intervals\n                //axis.tickInterval = undefined;\n                //axis.minorTickInterval = undefined;\n\n\n                // Major ticks\n                axis.ticks = {};\n                axis.labelEdge = [];\n                // Minor ticks\n                axis.minorTicks = {};\n\n                // List of plotLines/Bands\n                axis.plotLinesAndBands = [];\n\n                // Alternate bands\n                axis.alternateBands = {};\n\n                // Axis metrics\n                //axis.left = undefined;\n                //axis.top = undefined;\n                //axis.width = undefined;\n                //axis.height = undefined;\n                //axis.bottom = undefined;\n                //axis.right = undefined;\n                //axis.transA = undefined;\n                //axis.transB = undefined;\n                //axis.oldTransA = undefined;\n                axis.len = 0;\n                //axis.oldMin = undefined;\n                //axis.oldMax = undefined;\n                //axis.oldUserMin = undefined;\n                //axis.oldUserMax = undefined;\n                //axis.oldAxisLength = undefined;\n                axis.minRange = axis.userMinRange = options.minRange || options.maxZoom;\n                axis.range = options.range;\n                axis.offset = options.offset || 0;\n\n\n                // Dictionary for stacks\n                axis.stacks = {};\n                axis.oldStacks = {};\n                axis.stacksTouched = 0;\n\n                // Min and max in the data\n                //axis.dataMin = undefined,\n                //axis.dataMax = undefined,\n\n                // The axis range\n                axis.max = null;\n                axis.min = null;\n\n                // User set min and max\n                //axis.userMin = undefined,\n                //axis.userMax = undefined,\n\n                // Crosshair options\n                axis.crosshair = pick(options.crosshair, splat(chart.options.tooltip.crosshairs)[isXAxis ? 0 : 1], false);\n                // Run Axis\n\n                var eventType,\n                    events = axis.options.events;\n\n                // Register\n                if (inArray(axis, chart.axes) === -1) { // don't add it again on Axis.update()\n                    if (isXAxis) { // #2713\n                        chart.axes.splice(chart.xAxis.length, 0, axis);\n                    } else {\n                        chart.axes.push(axis);\n                    }\n\n                    chart[axis.coll].push(axis);\n                }\n\n                axis.series = axis.series || []; // populated by Series\n\n                // inverted charts have reversed xAxes as default\n                if (chart.inverted && isXAxis && axis.reversed === undefined) {\n                    axis.reversed = true;\n                }\n\n                axis.removePlotBand = axis.removePlotBandOrLine;\n                axis.removePlotLine = axis.removePlotBandOrLine;\n\n\n                // register event listeners\n                for (eventType in events) {\n                    addEvent(axis, eventType, events[eventType]);\n                }\n\n                // extend logarithmic axis\n                axis.lin2log = options.linearToLogConverter || axis.lin2log;\n                if (axis.isLog) {\n                    axis.val2lin = axis.log2lin;\n                    axis.lin2val = axis.lin2log;\n                }\n            },\n\n            /**\n             * Merge and set options\n             */\n            setOptions: function(userOptions) {\n                this.options = merge(\n                    this.defaultOptions,\n                    this.coll === 'yAxis' && this.defaultYAxisOptions, [this.defaultTopAxisOptions, this.defaultRightAxisOptions,\n                        this.defaultBottomAxisOptions, this.defaultLeftAxisOptions\n                    ][this.side],\n                    merge(\n                        defaultOptions[this.coll], // if set in setOptions (#1053)\n                        userOptions\n                    )\n                );\n            },\n\n            /**\n             * The default label formatter. The context is a special config object for the label.\n             */\n            defaultLabelFormatter: function() {\n                var axis = this.axis,\n                    value = this.value,\n                    categories = axis.categories,\n                    dateTimeLabelFormat = this.dateTimeLabelFormat,\n                    lang = defaultOptions.lang,\n                    numericSymbols = lang.numericSymbols,\n                    numSymMagnitude = lang.numericSymbolMagnitude || 1000,\n                    i = numericSymbols && numericSymbols.length,\n                    multi,\n                    ret,\n                    formatOption = axis.options.labels.format,\n\n                    // make sure the same symbol is added for all labels on a linear axis\n                    numericSymbolDetector = axis.isLog ? Math.abs(value) : axis.tickInterval;\n\n                if (formatOption) {\n                    ret = format(formatOption, this);\n\n                } else if (categories) {\n                    ret = value;\n\n                } else if (dateTimeLabelFormat) { // datetime axis\n                    ret = H.dateFormat(dateTimeLabelFormat, value);\n\n                } else if (i && numericSymbolDetector >= 1000) {\n                    // Decide whether we should add a numeric symbol like k (thousands) or M (millions).\n                    // If we are to enable this in tooltip or other places as well, we can move this\n                    // logic to the numberFormatter and enable it by a parameter.\n                    while (i-- && ret === undefined) {\n                        multi = Math.pow(numSymMagnitude, i + 1);\n                        if (numericSymbolDetector >= multi && (value * 10) % multi === 0 && numericSymbols[i] !== null && value !== 0) { // #5480\n                            ret = H.numberFormat(value / multi, -1) + numericSymbols[i];\n                        }\n                    }\n                }\n\n                if (ret === undefined) {\n                    if (Math.abs(value) >= 10000) { // add thousands separators\n                        ret = H.numberFormat(value, -1);\n                    } else { // small numbers\n                        ret = H.numberFormat(value, -1, undefined, ''); // #2466\n                    }\n                }\n\n                return ret;\n            },\n\n            /**\n             * Get the minimum and maximum for the series of each axis\n             */\n            getSeriesExtremes: function() {\n                var axis = this,\n                    chart = axis.chart;\n                axis.hasVisibleSeries = false;\n\n                // Reset properties in case we're redrawing (#3353)\n                axis.dataMin = axis.dataMax = axis.threshold = null;\n                axis.softThreshold = !axis.isXAxis;\n\n                if (axis.buildStacks) {\n                    axis.buildStacks();\n                }\n\n                // loop through this axis' series\n                each(axis.series, function(series) {\n\n                    if (series.visible || !chart.options.chart.ignoreHiddenSeries) {\n\n                        var seriesOptions = series.options,\n                            xData,\n                            threshold = seriesOptions.threshold,\n                            seriesDataMin,\n                            seriesDataMax;\n\n                        axis.hasVisibleSeries = true;\n\n                        // Validate threshold in logarithmic axes\n                        if (axis.positiveValuesOnly && threshold <= 0) {\n                            threshold = null;\n                        }\n\n                        // Get dataMin and dataMax for X axes\n                        if (axis.isXAxis) {\n                            xData = series.xData;\n                            if (xData.length) {\n                                // If xData contains values which is not numbers, then filter them out.\n                                // To prevent performance hit, we only do this after we have already\n                                // found seriesDataMin because in most cases all data is valid. #5234.\n                                seriesDataMin = arrayMin(xData);\n                                if (!isNumber(seriesDataMin) && !(seriesDataMin instanceof Date)) { // Date for #5010\n                                    xData = grep(xData, function(x) {\n                                        return isNumber(x);\n                                    });\n                                    seriesDataMin = arrayMin(xData); // Do it again with valid data\n                                }\n\n                                axis.dataMin = Math.min(pick(axis.dataMin, xData[0]), seriesDataMin);\n                                axis.dataMax = Math.max(pick(axis.dataMax, xData[0]), arrayMax(xData));\n\n                            }\n\n                            // Get dataMin and dataMax for Y axes, as well as handle stacking and processed data\n                        } else {\n\n                            // Get this particular series extremes\n                            series.getExtremes();\n                            seriesDataMax = series.dataMax;\n                            seriesDataMin = series.dataMin;\n\n                            // Get the dataMin and dataMax so far. If percentage is used, the min and max are\n                            // always 0 and 100. If seriesDataMin and seriesDataMax is null, then series\n                            // doesn't have active y data, we continue with nulls\n                            if (defined(seriesDataMin) && defined(seriesDataMax)) {\n                                axis.dataMin = Math.min(pick(axis.dataMin, seriesDataMin), seriesDataMin);\n                                axis.dataMax = Math.max(pick(axis.dataMax, seriesDataMax), seriesDataMax);\n                            }\n\n                            // Adjust to threshold\n                            if (defined(threshold)) {\n                                axis.threshold = threshold;\n                            }\n                            // If any series has a hard threshold, it takes precedence\n                            if (!seriesOptions.softThreshold || axis.positiveValuesOnly) {\n                                axis.softThreshold = false;\n                            }\n                        }\n                    }\n                });\n            },\n\n            /**\n             * Translate from axis value to pixel position on the chart, or back\n             *\n             */\n            translate: function(val, backwards, cvsCoord, old, handleLog, pointPlacement) {\n                var axis = this.linkedParent || this, // #1417\n                    sign = 1,\n                    cvsOffset = 0,\n                    localA = old ? axis.oldTransA : axis.transA,\n                    localMin = old ? axis.oldMin : axis.min,\n                    returnValue,\n                    minPixelPadding = axis.minPixelPadding,\n                    doPostTranslate = (axis.isOrdinal || axis.isBroken || (axis.isLog && handleLog)) && axis.lin2val;\n\n                if (!localA) {\n                    localA = axis.transA;\n                }\n\n                // In vertical axes, the canvas coordinates start from 0 at the top like in\n                // SVG.\n                if (cvsCoord) {\n                    sign *= -1; // canvas coordinates inverts the value\n                    cvsOffset = axis.len;\n                }\n\n                // Handle reversed axis\n                if (axis.reversed) {\n                    sign *= -1;\n                    cvsOffset -= sign * (axis.sector || axis.len);\n                }\n\n                // From pixels to value\n                if (backwards) { // reverse translation\n\n                    val = val * sign + cvsOffset;\n                    val -= minPixelPadding;\n                    returnValue = val / localA + localMin; // from chart pixel to value\n                    if (doPostTranslate) { // log and ordinal axes\n                        returnValue = axis.lin2val(returnValue);\n                    }\n\n                    // From value to pixels\n                } else {\n                    if (doPostTranslate) { // log and ordinal axes\n                        val = axis.val2lin(val);\n                    }\n                    returnValue = sign * (val - localMin) * localA + cvsOffset +\n                        (sign * minPixelPadding) +\n                        (isNumber(pointPlacement) ? localA * pointPlacement : 0);\n                }\n\n                return returnValue;\n            },\n\n            /**\n             * Utility method to translate an axis value to pixel position.\n             * @param {Number} value A value in terms of axis units\n             * @param {Boolean} paneCoordinates Whether to return the pixel coordinate relative to the chart\n             *        or just the axis/pane itself.\n             */\n            toPixels: function(value, paneCoordinates) {\n                return this.translate(value, false, !this.horiz, null, true) + (paneCoordinates ? 0 : this.pos);\n            },\n\n            /**\n             * Utility method to translate a pixel position in to an axis value.\n             * @param {Number} pixel The pixel value coordinate\n             * @param {Boolean} paneCoordiantes Whether the input pixel is relative to the chart or just the\n             *        axis/pane itself.\n             */\n            toValue: function(pixel, paneCoordinates) {\n                return this.translate(pixel - (paneCoordinates ? 0 : this.pos), true, !this.horiz, null, true);\n            },\n\n            /**\n             * Create the path for a plot line that goes from the given value on\n             * this axis, across the plot to the opposite side\n             * @param {Number} value\n             * @param {Number} lineWidth Used for calculation crisp line\n             * @param {Number] old Use old coordinates (for resizing and rescaling)\n             */\n            getPlotLinePath: function(value, lineWidth, old, force, translatedValue) {\n                var axis = this,\n                    chart = axis.chart,\n                    axisLeft = axis.left,\n                    axisTop = axis.top,\n                    x1,\n                    y1,\n                    x2,\n                    y2,\n                    cHeight = (old && chart.oldChartHeight) || chart.chartHeight,\n                    cWidth = (old && chart.oldChartWidth) || chart.chartWidth,\n                    skip,\n                    transB = axis.transB,\n                    /**\n                     * Check if x is between a and b. If not, either move to a/b or skip,\n                     * depending on the force parameter.\n                     */\n                    between = function(x, a, b) {\n                        if (x < a || x > b) {\n                            if (force) {\n                                x = Math.min(Math.max(a, x), b);\n                            } else {\n                                skip = true;\n                            }\n                        }\n                        return x;\n                    };\n\n                translatedValue = pick(translatedValue, axis.translate(value, null, null, old));\n                x1 = x2 = Math.round(translatedValue + transB);\n                y1 = y2 = Math.round(cHeight - translatedValue - transB);\n                if (!isNumber(translatedValue)) { // no min or max\n                    skip = true;\n\n                } else if (axis.horiz) {\n                    y1 = axisTop;\n                    y2 = cHeight - axis.bottom;\n                    x1 = x2 = between(x1, axisLeft, axisLeft + axis.width);\n                } else {\n                    x1 = axisLeft;\n                    x2 = cWidth - axis.right;\n                    y1 = y2 = between(y1, axisTop, axisTop + axis.height);\n                }\n                return skip && !force ?\n                    null :\n                    chart.renderer.crispLine(['M', x1, y1, 'L', x2, y2], lineWidth || 1);\n            },\n\n            /**\n             * Set the tick positions of a linear axis to round values like whole tens or every five.\n             */\n            getLinearTickPositions: function(tickInterval, min, max) {\n                var pos,\n                    lastPos,\n                    roundedMin = correctFloat(Math.floor(min / tickInterval) * tickInterval),\n                    roundedMax = correctFloat(Math.ceil(max / tickInterval) * tickInterval),\n                    tickPositions = [];\n\n                // For single points, add a tick regardless of the relative position\n                // (#2662, #6274)\n                if (this.single) {\n                    return [min];\n                }\n\n                // Populate the intermediate values\n                pos = roundedMin;\n                while (pos <= roundedMax) {\n\n                    // Place the tick on the rounded value\n                    tickPositions.push(pos);\n\n                    // Always add the raw tickInterval, not the corrected one.\n                    pos = correctFloat(pos + tickInterval);\n\n                    // If the interval is not big enough in the current min - max range to actually increase\n                    // the loop variable, we need to break out to prevent endless loop. Issue #619\n                    if (pos === lastPos) {\n                        break;\n                    }\n\n                    // Record the last value\n                    lastPos = pos;\n                }\n                return tickPositions;\n            },\n\n            /**\n             * Return the minor tick positions. For logarithmic axes, reuse the same logic\n             * as for major ticks.\n             */\n            getMinorTickPositions: function() {\n                var axis = this,\n                    options = axis.options,\n                    tickPositions = axis.tickPositions,\n                    minorTickInterval = axis.minorTickInterval,\n                    minorTickPositions = [],\n                    pos,\n                    pointRangePadding = axis.pointRangePadding || 0,\n                    min = axis.min - pointRangePadding, // #1498\n                    max = axis.max + pointRangePadding, // #1498\n                    range = max - min;\n\n                // If minor ticks get too dense, they are hard to read, and may cause long running script. So we don't draw them.\n                if (range && range / minorTickInterval < axis.len / 3) { // #3875\n\n                    if (axis.isLog) {\n                        // For each interval in the major ticks, compute the minor ticks\n                        // separately.\n                        each(this.paddedTicks, function(pos, i, paddedTicks) {\n                            if (i) {\n                                minorTickPositions.push.apply(\n                                    minorTickPositions,\n                                    axis.getLogTickPositions(\n                                        minorTickInterval,\n                                        paddedTicks[i - 1],\n                                        paddedTicks[i],\n                                        true\n                                    )\n                                );\n                            }\n                        });\n\n                    } else if (axis.isDatetimeAxis && options.minorTickInterval === 'auto') { // #1314\n                        minorTickPositions = minorTickPositions.concat(\n                            axis.getTimeTicks(\n                                axis.normalizeTimeTickInterval(minorTickInterval),\n                                min,\n                                max,\n                                options.startOfWeek\n                            )\n                        );\n                    } else {\n                        for (\n                            pos = min + (tickPositions[0] - min) % minorTickInterval; pos <= max; pos += minorTickInterval\n                        ) {\n                            // Very, very, tight grid lines (#5771)\n                            if (pos === minorTickPositions[0]) {\n                                break;\n                            }\n                            minorTickPositions.push(pos);\n                        }\n                    }\n                }\n\n                if (minorTickPositions.length !== 0) {\n                    axis.trimTicks(minorTickPositions); // #3652 #3743 #1498 #6330\n                }\n                return minorTickPositions;\n            },\n\n            /**\n             * Adjust the min and max for the minimum range. Keep in mind that the series data is\n             * not yet processed, so we don't have information on data cropping and grouping, or\n             * updated axis.pointRange or series.pointRange. The data can't be processed until\n             * we have finally established min and max.\n             */\n            adjustForMinRange: function() {\n                var axis = this,\n                    options = axis.options,\n                    min = axis.min,\n                    max = axis.max,\n                    zoomOffset,\n                    spaceAvailable = axis.dataMax - axis.dataMin >= axis.minRange,\n                    closestDataRange,\n                    i,\n                    distance,\n                    xData,\n                    loopLength,\n                    minArgs,\n                    maxArgs,\n                    minRange;\n\n                // Set the automatic minimum range based on the closest point distance\n                if (axis.isXAxis && axis.minRange === undefined && !axis.isLog) {\n\n                    if (defined(options.min) || defined(options.max)) {\n                        axis.minRange = null; // don't do this again\n\n                    } else {\n\n                        // Find the closest distance between raw data points, as opposed to\n                        // closestPointRange that applies to processed points (cropped and grouped)\n                        each(axis.series, function(series) {\n                            xData = series.xData;\n                            loopLength = series.xIncrement ? 1 : xData.length - 1;\n                            for (i = loopLength; i > 0; i--) {\n                                distance = xData[i] - xData[i - 1];\n                                if (closestDataRange === undefined || distance < closestDataRange) {\n                                    closestDataRange = distance;\n                                }\n                            }\n                        });\n                        axis.minRange = Math.min(closestDataRange * 5, axis.dataMax - axis.dataMin);\n                    }\n                }\n\n                // if minRange is exceeded, adjust\n                if (max - min < axis.minRange) {\n                    minRange = axis.minRange;\n                    zoomOffset = (minRange - max + min) / 2;\n\n                    // if min and max options have been set, don't go beyond it\n                    minArgs = [min - zoomOffset, pick(options.min, min - zoomOffset)];\n                    if (spaceAvailable) { // if space is available, stay within the data range\n                        minArgs[2] = axis.isLog ? axis.log2lin(axis.dataMin) : axis.dataMin;\n                    }\n                    min = arrayMax(minArgs);\n\n                    maxArgs = [min + minRange, pick(options.max, min + minRange)];\n                    if (spaceAvailable) { // if space is availabe, stay within the data range\n                        maxArgs[2] = axis.isLog ? axis.log2lin(axis.dataMax) : axis.dataMax;\n                    }\n\n                    max = arrayMin(maxArgs);\n\n                    // now if the max is adjusted, adjust the min back\n                    if (max - min < minRange) {\n                        minArgs[0] = max - minRange;\n                        minArgs[1] = pick(options.min, max - minRange);\n                        min = arrayMax(minArgs);\n                    }\n                }\n\n                // Record modified extremes\n                axis.min = min;\n                axis.max = max;\n            },\n\n            /**\n             * Find the closestPointRange across all series\n             */\n            getClosest: function() {\n                var ret;\n\n                if (this.categories) {\n                    ret = 1;\n                } else {\n                    each(this.series, function(series) {\n                        var seriesClosest = series.closestPointRange,\n                            visible = series.visible ||\n                            !series.chart.options.chart.ignoreHiddenSeries;\n\n                        if (!series.noSharedTooltip &&\n                            defined(seriesClosest) &&\n                            visible\n                        ) {\n                            ret = defined(ret) ?\n                                Math.min(ret, seriesClosest) :\n                                seriesClosest;\n                        }\n                    });\n                }\n                return ret;\n            },\n\n            /**\n             * When a point name is given and no x, search for the name in the existing categories,\n             * or if categories aren't provided, search names or create a new category (#2522).\n             */\n            nameToX: function(point) {\n                var explicitCategories = isArray(this.categories),\n                    names = explicitCategories ? this.categories : this.names,\n                    nameX = point.options.x,\n                    x;\n\n                point.series.requireSorting = false;\n\n                if (!defined(nameX)) {\n                    nameX = this.options.uniqueNames === false ?\n                        point.series.autoIncrement() :\n                        inArray(point.name, names);\n                }\n                if (nameX === -1) { // The name is not found in currenct categories\n                    if (!explicitCategories) {\n                        x = names.length;\n                    }\n                } else {\n                    x = nameX;\n                }\n\n                // Write the last point's name to the names array\n                if (x !== undefined) {\n                    this.names[x] = point.name;\n                }\n\n                return x;\n            },\n\n            /**\n             * When changes have been done to series data, update the axis.names.\n             */\n            updateNames: function() {\n                var axis = this;\n\n                if (this.names.length > 0) {\n                    this.names.length = 0;\n                    this.minRange = undefined;\n                    each(this.series || [], function(series) {\n\n                        // Reset incrementer (#5928)\n                        series.xIncrement = null;\n\n                        // When adding a series, points are not yet generated\n                        if (!series.points || series.isDirtyData) {\n                            series.processData();\n                            series.generatePoints();\n                        }\n\n                        each(series.points, function(point, i) {\n                            var x;\n                            if (point.options) {\n                                x = axis.nameToX(point);\n                                if (x !== undefined && x !== point.x) {\n                                    point.x = x;\n                                    series.xData[i] = x;\n                                }\n                            }\n                        });\n                    });\n                }\n            },\n\n            /**\n             * Update translation information\n             */\n            setAxisTranslation: function(saveOld) {\n                var axis = this,\n                    range = axis.max - axis.min,\n                    pointRange = axis.axisPointRange || 0,\n                    closestPointRange,\n                    minPointOffset = 0,\n                    pointRangePadding = 0,\n                    linkedParent = axis.linkedParent,\n                    ordinalCorrection,\n                    hasCategories = !!axis.categories,\n                    transA = axis.transA,\n                    isXAxis = axis.isXAxis;\n\n                // Adjust translation for padding. Y axis with categories need to go through the same (#1784).\n                if (isXAxis || hasCategories || pointRange) {\n\n                    // Get the closest points\n                    closestPointRange = axis.getClosest();\n\n                    if (linkedParent) {\n                        minPointOffset = linkedParent.minPointOffset;\n                        pointRangePadding = linkedParent.pointRangePadding;\n                    } else {\n                        each(axis.series, function(series) {\n                            var seriesPointRange = hasCategories ?\n                                1 :\n                                (isXAxis ?\n                                    pick(series.options.pointRange, closestPointRange, 0) :\n                                    (axis.axisPointRange || 0)), // #2806\n                                pointPlacement = series.options.pointPlacement;\n\n                            pointRange = Math.max(pointRange, seriesPointRange);\n\n                            if (!axis.single) {\n                                // minPointOffset is the value padding to the left of the axis in order to make\n                                // room for points with a pointRange, typically columns. When the pointPlacement option\n                                // is 'between' or 'on', this padding does not apply.\n                                minPointOffset = Math.max(\n                                    minPointOffset,\n                                    isString(pointPlacement) ? 0 : seriesPointRange / 2\n                                );\n\n                                // Determine the total padding needed to the length of the axis to make room for the\n                                // pointRange. If the series' pointPlacement is 'on', no padding is added.\n                                pointRangePadding = Math.max(\n                                    pointRangePadding,\n                                    pointPlacement === 'on' ? 0 : seriesPointRange\n                                );\n                            }\n                        });\n                    }\n\n                    // Record minPointOffset and pointRangePadding\n                    ordinalCorrection = axis.ordinalSlope && closestPointRange ? axis.ordinalSlope / closestPointRange : 1; // #988, #1853\n                    axis.minPointOffset = minPointOffset = minPointOffset * ordinalCorrection;\n                    axis.pointRangePadding = pointRangePadding = pointRangePadding * ordinalCorrection;\n\n                    // pointRange means the width reserved for each point, like in a column chart\n                    axis.pointRange = Math.min(pointRange, range);\n\n                    // closestPointRange means the closest distance between points. In columns\n                    // it is mostly equal to pointRange, but in lines pointRange is 0 while closestPointRange\n                    // is some other value\n                    if (isXAxis) {\n                        axis.closestPointRange = closestPointRange;\n                    }\n                }\n\n                // Secondary values\n                if (saveOld) {\n                    axis.oldTransA = transA;\n                }\n                axis.translationSlope = axis.transA = transA =\n                    axis.options.staticScale ||\n                    axis.len / ((range + pointRangePadding) || 1);\n                axis.transB = axis.horiz ? axis.left : axis.bottom; // translation addend\n                axis.minPixelPadding = transA * minPointOffset;\n            },\n\n            minFromRange: function() {\n                return this.max - this.range;\n            },\n\n            /**\n             * Set the tick positions to round values and optionally extend the extremes\n             * to the nearest tick\n             */\n            setTickInterval: function(secondPass) {\n                var axis = this,\n                    chart = axis.chart,\n                    options = axis.options,\n                    isLog = axis.isLog,\n                    log2lin = axis.log2lin,\n                    isDatetimeAxis = axis.isDatetimeAxis,\n                    isXAxis = axis.isXAxis,\n                    isLinked = axis.isLinked,\n                    maxPadding = options.maxPadding,\n                    minPadding = options.minPadding,\n                    length,\n                    linkedParentExtremes,\n                    tickIntervalOption = options.tickInterval,\n                    minTickInterval,\n                    tickPixelIntervalOption = options.tickPixelInterval,\n                    categories = axis.categories,\n                    threshold = axis.threshold,\n                    softThreshold = axis.softThreshold,\n                    thresholdMin,\n                    thresholdMax,\n                    hardMin,\n                    hardMax;\n\n                if (!isDatetimeAxis && !categories && !isLinked) {\n                    this.getTickAmount();\n                }\n\n                // Min or max set either by zooming/setExtremes or initial options\n                hardMin = pick(axis.userMin, options.min);\n                hardMax = pick(axis.userMax, options.max);\n\n                // Linked axis gets the extremes from the parent axis\n                if (isLinked) {\n                    axis.linkedParent = chart[axis.coll][options.linkedTo];\n                    linkedParentExtremes = axis.linkedParent.getExtremes();\n                    axis.min = pick(linkedParentExtremes.min, linkedParentExtremes.dataMin);\n                    axis.max = pick(linkedParentExtremes.max, linkedParentExtremes.dataMax);\n                    if (options.type !== axis.linkedParent.options.type) {\n                        H.error(11, 1); // Can't link axes of different type\n                    }\n\n                    // Initial min and max from the extreme data values\n                } else {\n\n                    // Adjust to hard threshold\n                    if (!softThreshold && defined(threshold)) {\n                        if (axis.dataMin >= threshold) {\n                            thresholdMin = threshold;\n                            minPadding = 0;\n                        } else if (axis.dataMax <= threshold) {\n                            thresholdMax = threshold;\n                            maxPadding = 0;\n                        }\n                    }\n\n                    axis.min = pick(hardMin, thresholdMin, axis.dataMin);\n                    axis.max = pick(hardMax, thresholdMax, axis.dataMax);\n\n                }\n\n                if (isLog) {\n                    if (\n                        axis.positiveValuesOnly &&\n                        !secondPass &&\n                        Math.min(axis.min, pick(axis.dataMin, axis.min)) <= 0\n                    ) { // #978\n                        H.error(10, 1); // Can't plot negative values on log axis\n                    }\n                    // The correctFloat cures #934, float errors on full tens. But it\n                    // was too aggressive for #4360 because of conversion back to lin,\n                    // therefore use precision 15.\n                    axis.min = correctFloat(log2lin(axis.min), 15);\n                    axis.max = correctFloat(log2lin(axis.max), 15);\n                }\n\n                // handle zoomed range\n                if (axis.range && defined(axis.max)) {\n                    axis.userMin = axis.min = hardMin = Math.max(axis.min, axis.minFromRange()); // #618\n                    axis.userMax = hardMax = axis.max;\n\n                    axis.range = null; // don't use it when running setExtremes\n                }\n\n                // Hook for Highstock Scroller. Consider combining with beforePadding.\n                fireEvent(axis, 'foundExtremes');\n\n                // Hook for adjusting this.min and this.max. Used by bubble series.\n                if (axis.beforePadding) {\n                    axis.beforePadding();\n                }\n\n                // adjust min and max for the minimum range\n                axis.adjustForMinRange();\n\n                // Pad the values to get clear of the chart's edges. To avoid tickInterval taking the padding\n                // into account, we do this after computing tick interval (#1337).\n                if (!categories && !axis.axisPointRange && !axis.usePercentage && !isLinked && defined(axis.min) && defined(axis.max)) {\n                    length = axis.max - axis.min;\n                    if (length) {\n                        if (!defined(hardMin) && minPadding) {\n                            axis.min -= length * minPadding;\n                        }\n                        if (!defined(hardMax) && maxPadding) {\n                            axis.max += length * maxPadding;\n                        }\n                    }\n                }\n\n                // Handle options for floor, ceiling, softMin and softMax (#6359)\n                if (isNumber(options.softMin)) {\n                    axis.min = Math.min(axis.min, options.softMin);\n                }\n                if (isNumber(options.softMax)) {\n                    axis.max = Math.max(axis.max, options.softMax);\n                }\n                if (isNumber(options.floor)) {\n                    axis.min = Math.max(axis.min, options.floor);\n                }\n                if (isNumber(options.ceiling)) {\n                    axis.max = Math.min(axis.max, options.ceiling);\n                }\n\n\n                // When the threshold is soft, adjust the extreme value only if\n                // the data extreme and the padded extreme land on either side of the threshold. For example,\n                // a series of [0, 1, 2, 3] would make the yAxis add a tick for -1 because of the\n                // default minPadding and startOnTick options. This is prevented by the softThreshold\n                // option.\n                if (softThreshold && defined(axis.dataMin)) {\n                    threshold = threshold || 0;\n                    if (!defined(hardMin) && axis.min < threshold && axis.dataMin >= threshold) {\n                        axis.min = threshold;\n                    } else if (!defined(hardMax) && axis.max > threshold && axis.dataMax <= threshold) {\n                        axis.max = threshold;\n                    }\n                }\n\n\n                // get tickInterval\n                if (axis.min === axis.max || axis.min === undefined || axis.max === undefined) {\n                    axis.tickInterval = 1;\n                } else if (isLinked && !tickIntervalOption &&\n                    tickPixelIntervalOption === axis.linkedParent.options.tickPixelInterval) {\n                    axis.tickInterval = tickIntervalOption = axis.linkedParent.tickInterval;\n                } else {\n                    axis.tickInterval = pick(\n                        tickIntervalOption,\n                        this.tickAmount ? ((axis.max - axis.min) / Math.max(this.tickAmount - 1, 1)) : undefined,\n                        categories ? // for categoried axis, 1 is default, for linear axis use tickPix\n                        1 :\n                        // don't let it be more than the data range\n                        (axis.max - axis.min) * tickPixelIntervalOption / Math.max(axis.len, tickPixelIntervalOption)\n                    );\n                }\n\n                // Now we're finished detecting min and max, crop and group series data. This\n                // is in turn needed in order to find tick positions in ordinal axes.\n                if (isXAxis && !secondPass) {\n                    each(axis.series, function(series) {\n                        series.processData(axis.min !== axis.oldMin || axis.max !== axis.oldMax);\n                    });\n                }\n\n                // set the translation factor used in translate function\n                axis.setAxisTranslation(true);\n\n                // hook for ordinal axes and radial axes\n                if (axis.beforeSetTickPositions) {\n                    axis.beforeSetTickPositions();\n                }\n\n                // hook for extensions, used in Highstock ordinal axes\n                if (axis.postProcessTickInterval) {\n                    axis.tickInterval = axis.postProcessTickInterval(axis.tickInterval);\n                }\n\n                // In column-like charts, don't cramp in more ticks than there are points (#1943, #4184)\n                if (axis.pointRange && !tickIntervalOption) {\n                    axis.tickInterval = Math.max(axis.pointRange, axis.tickInterval);\n                }\n\n                // Before normalizing the tick interval, handle minimum tick interval. This applies only if tickInterval is not defined.\n                minTickInterval = pick(options.minTickInterval, axis.isDatetimeAxis && axis.closestPointRange);\n                if (!tickIntervalOption && axis.tickInterval < minTickInterval) {\n                    axis.tickInterval = minTickInterval;\n                }\n\n                // for linear axes, get magnitude and normalize the interval\n                if (!isDatetimeAxis && !isLog && !tickIntervalOption) {\n                    axis.tickInterval = normalizeTickInterval(\n                        axis.tickInterval,\n                        null,\n                        getMagnitude(axis.tickInterval),\n                        // If the tick interval is between 0.5 and 5 and the axis max is in the order of\n                        // thousands, chances are we are dealing with years. Don't allow decimals. #3363.\n                        pick(options.allowDecimals, !(axis.tickInterval > 0.5 && axis.tickInterval < 5 && axis.max > 1000 && axis.max < 9999)), !!this.tickAmount\n                    );\n                }\n\n                // Prevent ticks from getting so close that we can't draw the labels\n                if (!this.tickAmount) {\n                    axis.tickInterval = axis.unsquish();\n                }\n\n                this.setTickPositions();\n            },\n\n            /**\n             * Now we have computed the normalized tickInterval, get the tick positions\n             */\n            setTickPositions: function() {\n\n                var options = this.options,\n                    tickPositions,\n                    tickPositionsOption = options.tickPositions,\n                    tickPositioner = options.tickPositioner,\n                    startOnTick = options.startOnTick,\n                    endOnTick = options.endOnTick;\n\n                // Set the tickmarkOffset\n                this.tickmarkOffset = (this.categories && options.tickmarkPlacement === 'between' &&\n                    this.tickInterval === 1) ? 0.5 : 0; // #3202\n\n\n                // get minorTickInterval\n                this.minorTickInterval = options.minorTickInterval === 'auto' && this.tickInterval ?\n                    this.tickInterval / 5 : options.minorTickInterval;\n\n                // When there is only one point, or all points have the same value on\n                // this axis, then min and max are equal and tickPositions.length is 0\n                // or 1. In this case, add some padding in order to center the point,\n                // but leave it with one tick. #1337.\n                this.single = this.min === this.max && defined(this.min) &&\n                    !this.tickAmount && options.allowDecimals !== false;\n\n                // Find the tick positions\n                this.tickPositions = tickPositions = tickPositionsOption && tickPositionsOption.slice(); // Work on a copy (#1565)\n                if (!tickPositions) {\n\n                    if (this.isDatetimeAxis) {\n                        tickPositions = this.getTimeTicks(\n                            this.normalizeTimeTickInterval(this.tickInterval, options.units),\n                            this.min,\n                            this.max,\n                            options.startOfWeek,\n                            this.ordinalPositions,\n                            this.closestPointRange,\n                            true\n                        );\n                    } else if (this.isLog) {\n                        tickPositions = this.getLogTickPositions(this.tickInterval, this.min, this.max);\n                    } else {\n                        tickPositions = this.getLinearTickPositions(this.tickInterval, this.min, this.max);\n                    }\n\n                    // Too dense ticks, keep only the first and last (#4477)\n                    if (tickPositions.length > this.len) {\n                        tickPositions = [tickPositions[0], tickPositions.pop()];\n                    }\n\n                    this.tickPositions = tickPositions;\n\n                    // Run the tick positioner callback, that allows modifying auto tick positions.\n                    if (tickPositioner) {\n                        tickPositioner = tickPositioner.apply(this, [this.min, this.max]);\n                        if (tickPositioner) {\n                            this.tickPositions = tickPositions = tickPositioner;\n                        }\n                    }\n\n                }\n\n                // Reset min/max or remove extremes based on start/end on tick\n                this.paddedTicks = tickPositions.slice(0); // Used for logarithmic minor\n                this.trimTicks(tickPositions, startOnTick, endOnTick);\n                if (!this.isLinked) {\n\n                    // Substract half a unit (#2619, #2846, #2515, #3390)\n                    if (this.single) {\n                        this.min -= 0.5;\n                        this.max += 0.5;\n                    }\n                    if (!tickPositionsOption && !tickPositioner) {\n                        this.adjustTickAmount();\n                    }\n                }\n            },\n\n            /**\n             * Handle startOnTick and endOnTick by either adapting to padding min/max or rounded min/max\n             */\n            trimTicks: function(tickPositions, startOnTick, endOnTick) {\n                var roundedMin = tickPositions[0],\n                    roundedMax = tickPositions[tickPositions.length - 1],\n                    minPointOffset = this.minPointOffset || 0;\n\n                if (!this.isLinked) {\n                    if (startOnTick && roundedMin !== -Infinity) { // #6502\n                        this.min = roundedMin;\n                    } else {\n                        while (this.min - minPointOffset > tickPositions[0]) {\n                            tickPositions.shift();\n                        }\n                    }\n\n                    if (endOnTick) {\n                        this.max = roundedMax;\n                    } else {\n                        while (this.max + minPointOffset < tickPositions[tickPositions.length - 1]) {\n                            tickPositions.pop();\n                        }\n                    }\n\n                    // If no tick are left, set one tick in the middle (#3195)\n                    if (tickPositions.length === 0 && defined(roundedMin)) {\n                        tickPositions.push((roundedMax + roundedMin) / 2);\n                    }\n                }\n            },\n\n            /**\n             * Check if there are multiple axes in the same pane\n             * @returns {Boolean} There are other axes\n             */\n            alignToOthers: function() {\n                var others = {}, // Whether there is another axis to pair with this one\n                    hasOther,\n                    options = this.options;\n\n                if (\n                    // Only if alignTicks is true\n                    this.chart.options.chart.alignTicks !== false &&\n                    options.alignTicks !== false &&\n\n                    // Don't try to align ticks on a log axis, they are not evenly\n                    // spaced (#6021)\n                    !this.isLog\n                ) {\n                    each(this.chart[this.coll], function(axis) {\n                        var otherOptions = axis.options,\n                            horiz = axis.horiz,\n                            key = [\n                                horiz ? otherOptions.left : otherOptions.top,\n                                otherOptions.width,\n                                otherOptions.height,\n                                otherOptions.pane\n                            ].join(',');\n\n\n                        if (axis.series.length) { // #4442\n                            if (others[key]) {\n                                hasOther = true; // #4201\n                            } else {\n                                others[key] = 1;\n                            }\n                        }\n                    });\n                }\n                return hasOther;\n            },\n\n            /**\n             * Set the max ticks of either the x and y axis collection\n             */\n            getTickAmount: function() {\n                var options = this.options,\n                    tickAmount = options.tickAmount,\n                    tickPixelInterval = options.tickPixelInterval;\n\n                if (!defined(options.tickInterval) && this.len < tickPixelInterval && !this.isRadial &&\n                    !this.isLog && options.startOnTick && options.endOnTick) {\n                    tickAmount = 2;\n                }\n\n                if (!tickAmount && this.alignToOthers()) {\n                    // Add 1 because 4 tick intervals require 5 ticks (including first and last)\n                    tickAmount = Math.ceil(this.len / tickPixelInterval) + 1;\n                }\n\n                // For tick amounts of 2 and 3, compute five ticks and remove the intermediate ones. This\n                // prevents the axis from adding ticks that are too far away from the data extremes.\n                if (tickAmount < 4) {\n                    this.finalTickAmt = tickAmount;\n                    tickAmount = 5;\n                }\n\n                this.tickAmount = tickAmount;\n            },\n\n            /**\n             * When using multiple axes, adjust the number of ticks to match the highest\n             * number of ticks in that group\n             */\n            adjustTickAmount: function() {\n                var tickInterval = this.tickInterval,\n                    tickPositions = this.tickPositions,\n                    tickAmount = this.tickAmount,\n                    finalTickAmt = this.finalTickAmt,\n                    currentTickAmount = tickPositions && tickPositions.length,\n                    i,\n                    len;\n\n                if (currentTickAmount < tickAmount) {\n                    while (tickPositions.length < tickAmount) {\n                        tickPositions.push(correctFloat(\n                            tickPositions[tickPositions.length - 1] + tickInterval\n                        ));\n                    }\n                    this.transA *= (currentTickAmount - 1) / (tickAmount - 1);\n                    this.max = tickPositions[tickPositions.length - 1];\n\n                    // We have too many ticks, run second pass to try to reduce ticks\n                } else if (currentTickAmount > tickAmount) {\n                    this.tickInterval *= 2;\n                    this.setTickPositions();\n                }\n\n                // The finalTickAmt property is set in getTickAmount\n                if (defined(finalTickAmt)) {\n                    i = len = tickPositions.length;\n                    while (i--) {\n                        if (\n                            (finalTickAmt === 3 && i % 2 === 1) || // Remove every other tick\n                            (finalTickAmt <= 2 && i > 0 && i < len - 1) // Remove all but first and last\n                        ) {\n                            tickPositions.splice(i, 1);\n                        }\n                    }\n                    this.finalTickAmt = undefined;\n                }\n            },\n\n            /**\n             * Set the scale based on data min and max, user set min and max or options\n             *\n             */\n            setScale: function() {\n                var axis = this,\n                    isDirtyData,\n                    isDirtyAxisLength;\n\n                axis.oldMin = axis.min;\n                axis.oldMax = axis.max;\n                axis.oldAxisLength = axis.len;\n\n                // set the new axisLength\n                axis.setAxisSize();\n                //axisLength = horiz ? axisWidth : axisHeight;\n                isDirtyAxisLength = axis.len !== axis.oldAxisLength;\n\n                // is there new data?\n                each(axis.series, function(series) {\n                    if (series.isDirtyData || series.isDirty ||\n                        series.xAxis.isDirty) { // when x axis is dirty, we need new data extremes for y as well\n                        isDirtyData = true;\n                    }\n                });\n\n                // do we really need to go through all this?\n                if (isDirtyAxisLength || isDirtyData || axis.isLinked || axis.forceRedraw ||\n                    axis.userMin !== axis.oldUserMin || axis.userMax !== axis.oldUserMax || axis.alignToOthers()) {\n\n                    if (axis.resetStacks) {\n                        axis.resetStacks();\n                    }\n\n                    axis.forceRedraw = false;\n\n                    // get data extremes if needed\n                    axis.getSeriesExtremes();\n\n                    // get fixed positions based on tickInterval\n                    axis.setTickInterval();\n\n                    // record old values to decide whether a rescale is necessary later on (#540)\n                    axis.oldUserMin = axis.userMin;\n                    axis.oldUserMax = axis.userMax;\n\n                    // Mark as dirty if it is not already set to dirty and extremes have changed. #595.\n                    if (!axis.isDirty) {\n                        axis.isDirty = isDirtyAxisLength || axis.min !== axis.oldMin || axis.max !== axis.oldMax;\n                    }\n                } else if (axis.cleanStacks) {\n                    axis.cleanStacks();\n                }\n            },\n\n            /**\n             * Set the extremes and optionally redraw\n             * @param {Number} newMin\n             * @param {Number} newMax\n             * @param {Boolean} redraw\n             * @param {Boolean|Object} animation Whether to apply animation, and optionally animation\n             *    configuration\n             * @param {Object} eventArguments\n             *\n             */\n            setExtremes: function(newMin, newMax, redraw, animation, eventArguments) {\n                var axis = this,\n                    chart = axis.chart;\n\n                redraw = pick(redraw, true); // defaults to true\n\n                each(axis.series, function(serie) {\n                    delete serie.kdTree;\n                });\n\n                // Extend the arguments with min and max\n                eventArguments = extend(eventArguments, {\n                    min: newMin,\n                    max: newMax\n                });\n\n                // Fire the event\n                fireEvent(axis, 'setExtremes', eventArguments, function() { // the default event handler\n\n                    axis.userMin = newMin;\n                    axis.userMax = newMax;\n                    axis.eventArgs = eventArguments;\n\n                    if (redraw) {\n                        chart.redraw(animation);\n                    }\n                });\n            },\n\n            /**\n             * Overridable method for zooming chart. Pulled out in a separate method to allow overriding\n             * in stock charts.\n             */\n            zoom: function(newMin, newMax) {\n                var dataMin = this.dataMin,\n                    dataMax = this.dataMax,\n                    options = this.options,\n                    min = Math.min(dataMin, pick(options.min, dataMin)),\n                    max = Math.max(dataMax, pick(options.max, dataMax));\n\n                if (newMin !== this.min || newMax !== this.max) { // #5790\n\n                    // Prevent pinch zooming out of range. Check for defined is for #1946. #1734.\n                    if (!this.allowZoomOutside) {\n                        // #6014, sometimes newMax will be smaller than min (or newMin will be larger than max).\n                        if (defined(dataMin)) {\n                            if (newMin < min) {\n                                newMin = min;\n                            }\n                            if (newMin > max) {\n                                newMin = max;\n                            }\n                        }\n                        if (defined(dataMax)) {\n                            if (newMax < min) {\n                                newMax = min;\n                            }\n                            if (newMax > max) {\n                                newMax = max;\n                            }\n                        }\n                    }\n\n                    // In full view, displaying the reset zoom button is not required\n                    this.displayBtn = newMin !== undefined || newMax !== undefined;\n\n                    // Do it\n                    this.setExtremes(\n                        newMin,\n                        newMax,\n                        false,\n                        undefined, {\n                            trigger: 'zoom'\n                        }\n                    );\n                }\n\n                return true;\n            },\n\n            /**\n             * Update the axis metrics\n             */\n            setAxisSize: function() {\n                var chart = this.chart,\n                    options = this.options,\n                    offsets = options.offsets || [0, 0, 0, 0], // top / right / bottom / left\n                    horiz = this.horiz,\n                    width = pick(options.width, chart.plotWidth - offsets[3] + offsets[1]),\n                    height = pick(options.height, chart.plotHeight - offsets[0] + offsets[2]),\n                    top = pick(options.top, chart.plotTop + offsets[0]),\n                    left = pick(options.left, chart.plotLeft + offsets[3]),\n                    percentRegex = /%$/;\n\n                // Check for percentage based input values. Rounding fixes problems with\n                // column overflow and plot line filtering (#4898, #4899)\n                if (percentRegex.test(height)) {\n                    height = Math.round(parseFloat(height) / 100 * chart.plotHeight);\n                }\n                if (percentRegex.test(top)) {\n                    top = Math.round(parseFloat(top) / 100 * chart.plotHeight + chart.plotTop);\n                }\n\n                // Expose basic values to use in Series object and navigator\n                this.left = left;\n                this.top = top;\n                this.width = width;\n                this.height = height;\n                this.bottom = chart.chartHeight - height - top;\n                this.right = chart.chartWidth - width - left;\n\n                // Direction agnostic properties\n                this.len = Math.max(horiz ? width : height, 0); // Math.max fixes #905\n                this.pos = horiz ? left : top; // distance from SVG origin\n            },\n\n            /**\n             * Get the actual axis extremes\n             */\n            getExtremes: function() {\n                var axis = this,\n                    isLog = axis.isLog,\n                    lin2log = axis.lin2log;\n\n                return {\n                    min: isLog ? correctFloat(lin2log(axis.min)) : axis.min,\n                    max: isLog ? correctFloat(lin2log(axis.max)) : axis.max,\n                    dataMin: axis.dataMin,\n                    dataMax: axis.dataMax,\n                    userMin: axis.userMin,\n                    userMax: axis.userMax\n                };\n            },\n\n            /**\n             * Get the zero plane either based on zero or on the min or max value.\n             * Used in bar and area plots\n             */\n            getThreshold: function(threshold) {\n                var axis = this,\n                    isLog = axis.isLog,\n                    lin2log = axis.lin2log,\n                    realMin = isLog ? lin2log(axis.min) : axis.min,\n                    realMax = isLog ? lin2log(axis.max) : axis.max;\n\n                if (threshold === null) {\n                    threshold = realMin;\n                } else if (realMin > threshold) {\n                    threshold = realMin;\n                } else if (realMax < threshold) {\n                    threshold = realMax;\n                }\n\n                return axis.translate(threshold, 0, 1, 0, 1);\n            },\n\n            /**\n             * Compute auto alignment for the axis label based on which side the axis is on\n             * and the given rotation for the label\n             */\n            autoLabelAlign: function(rotation) {\n                var ret,\n                    angle = (pick(rotation, 0) - (this.side * 90) + 720) % 360;\n\n                if (angle > 15 && angle < 165) {\n                    ret = 'right';\n                } else if (angle > 195 && angle < 345) {\n                    ret = 'left';\n                } else {\n                    ret = 'center';\n                }\n                return ret;\n            },\n\n            /**\n             * Get the tick length and width for the axis.\n             * @param   {String} prefix 'tick' or 'minorTick'\n             * @returns {Array}        An array of tickLength and tickWidth\n             */\n            tickSize: function(prefix) {\n                var options = this.options,\n                    tickLength = options[prefix + 'Length'],\n                    tickWidth = pick(options[prefix + 'Width'], prefix === 'tick' && this.isXAxis ? 1 : 0); // X axis defaults to 1\n\n                if (tickWidth && tickLength) {\n                    // Negate the length\n                    if (options[prefix + 'Position'] === 'inside') {\n                        tickLength = -tickLength;\n                    }\n                    return [tickLength, tickWidth];\n                }\n\n            },\n\n            /**\n             * Return the size of the labels\n             */\n            labelMetrics: function() {\n                return this.chart.renderer.fontMetrics(\n                    this.options.labels.style && this.options.labels.style.fontSize,\n                    this.ticks[0] && this.ticks[0].label\n                );\n            },\n\n            /**\n             * Prevent the ticks from getting so close we can't draw the labels. On a horizontal\n             * axis, this is handled by rotating the labels, removing ticks and adding ellipsis.\n             * On a vertical axis remove ticks and add ellipsis.\n             */\n            unsquish: function() {\n                var labelOptions = this.options.labels,\n                    horiz = this.horiz,\n                    tickInterval = this.tickInterval,\n                    newTickInterval = tickInterval,\n                    slotSize = this.len / (((this.categories ? 1 : 0) + this.max - this.min) / tickInterval),\n                    rotation,\n                    rotationOption = labelOptions.rotation,\n                    labelMetrics = this.labelMetrics(),\n                    step,\n                    bestScore = Number.MAX_VALUE,\n                    autoRotation,\n                    // Return the multiple of tickInterval that is needed to avoid collision\n                    getStep = function(spaceNeeded) {\n                        var step = spaceNeeded / (slotSize || 1);\n                        step = step > 1 ? Math.ceil(step) : 1;\n                        return step * tickInterval;\n                    };\n\n                if (horiz) {\n                    autoRotation = !labelOptions.staggerLines && !labelOptions.step && ( // #3971\n                        defined(rotationOption) ? [rotationOption] :\n                        slotSize < pick(labelOptions.autoRotationLimit, 80) && labelOptions.autoRotation\n                    );\n\n                    if (autoRotation) {\n\n                        // Loop over the given autoRotation options, and determine which gives the best score. The\n                        // best score is that with the lowest number of steps and a rotation closest to horizontal.\n                        each(autoRotation, function(rot) {\n                            var score;\n\n                            if (rot === rotationOption || (rot && rot >= -90 && rot <= 90)) { // #3891\n\n                                step = getStep(Math.abs(labelMetrics.h / Math.sin(deg2rad * rot)));\n\n                                score = step + Math.abs(rot / 360);\n\n                                if (score < bestScore) {\n                                    bestScore = score;\n                                    rotation = rot;\n                                    newTickInterval = step;\n                                }\n                            }\n                        });\n                    }\n\n                } else if (!labelOptions.step) { // #4411\n                    newTickInterval = getStep(labelMetrics.h);\n                }\n\n                this.autoRotation = autoRotation;\n                this.labelRotation = pick(rotation, rotationOption);\n\n                return newTickInterval;\n            },\n\n            /**\n             * Get the general slot width for this axis. This may change between the pre-render (from Axis.getOffset) \n             * and the final tick rendering and placement (#5086).\n             */\n            getSlotWidth: function() {\n                var chart = this.chart,\n                    horiz = this.horiz,\n                    labelOptions = this.options.labels,\n                    slotCount = Math.max(this.tickPositions.length - (this.categories ? 0 : 1), 1),\n                    marginLeft = chart.margin[3];\n\n                return (\n                    horiz &&\n                    (labelOptions.step || 0) < 2 &&\n                    !labelOptions.rotation && // #4415\n                    ((this.staggerLines || 1) * this.len) / slotCount\n                ) || (!horiz && (\n                    (marginLeft && (marginLeft - chart.spacing[3])) ||\n                    chart.chartWidth * 0.33\n                )); // #1580, #1931\n\n            },\n\n            /**\n             * Render the axis labels and determine whether ellipsis or rotation need to be applied\n             */\n            renderUnsquish: function() {\n                var chart = this.chart,\n                    renderer = chart.renderer,\n                    tickPositions = this.tickPositions,\n                    ticks = this.ticks,\n                    labelOptions = this.options.labels,\n                    horiz = this.horiz,\n                    slotWidth = this.getSlotWidth(),\n                    innerWidth = Math.max(1, Math.round(slotWidth - 2 * (labelOptions.padding || 5))),\n                    attr = {},\n                    labelMetrics = this.labelMetrics(),\n                    textOverflowOption = labelOptions.style && labelOptions.style.textOverflow,\n                    css,\n                    maxLabelLength = 0,\n                    label,\n                    i,\n                    pos;\n\n                // Set rotation option unless it is \"auto\", like in gauges\n                if (!isString(labelOptions.rotation)) {\n                    attr.rotation = labelOptions.rotation || 0; // #4443\n                }\n\n                // Get the longest label length\n                each(tickPositions, function(tick) {\n                    tick = ticks[tick];\n                    if (tick && tick.labelLength > maxLabelLength) {\n                        maxLabelLength = tick.labelLength;\n                    }\n                });\n                this.maxLabelLength = maxLabelLength;\n\n\n                // Handle auto rotation on horizontal axis\n                if (this.autoRotation) {\n\n                    // Apply rotation only if the label is too wide for the slot, and\n                    // the label is wider than its height.\n                    if (maxLabelLength > innerWidth && maxLabelLength > labelMetrics.h) {\n                        attr.rotation = this.labelRotation;\n                    } else {\n                        this.labelRotation = 0;\n                    }\n\n                    // Handle word-wrap or ellipsis on vertical axis\n                } else if (slotWidth) {\n                    // For word-wrap or ellipsis\n                    css = {\n                        width: innerWidth + 'px'\n                    };\n\n                    if (!textOverflowOption) {\n                        css.textOverflow = 'clip';\n\n                        // On vertical axis, only allow word wrap if there is room for more lines.\n                        i = tickPositions.length;\n                        while (!horiz && i--) {\n                            pos = tickPositions[i];\n                            label = ticks[pos].label;\n                            if (label) {\n                                // Reset ellipsis in order to get the correct bounding box (#4070)\n                                if (label.styles && label.styles.textOverflow === 'ellipsis') {\n                                    label.css({\n                                        textOverflow: 'clip'\n                                    });\n\n                                    // Set the correct width in order to read the bounding box height (#4678, #5034)\n                                } else if (ticks[pos].labelLength > slotWidth) {\n                                    label.css({\n                                        width: slotWidth + 'px'\n                                    });\n                                }\n\n                                if (label.getBBox().height > this.len / tickPositions.length - (labelMetrics.h - labelMetrics.f)) {\n                                    label.specCss = {\n                                        textOverflow: 'ellipsis'\n                                    };\n                                }\n                            }\n                        }\n                    }\n                }\n\n\n                // Add ellipsis if the label length is significantly longer than ideal\n                if (attr.rotation) {\n                    css = {\n                        width: (maxLabelLength > chart.chartHeight * 0.5 ? chart.chartHeight * 0.33 : chart.chartHeight) + 'px'\n                    };\n                    if (!textOverflowOption) {\n                        css.textOverflow = 'ellipsis';\n                    }\n                }\n\n                // Set the explicit or automatic label alignment\n                this.labelAlign = labelOptions.align || this.autoLabelAlign(this.labelRotation);\n                if (this.labelAlign) {\n                    attr.align = this.labelAlign;\n                }\n\n                // Apply general and specific CSS\n                each(tickPositions, function(pos) {\n                    var tick = ticks[pos],\n                        label = tick && tick.label;\n                    if (label) {\n                        label.attr(attr); // This needs to go before the CSS in old IE (#4502)\n                        if (css) {\n                            label.css(merge(css, label.specCss));\n                        }\n                        delete label.specCss;\n                        tick.rotation = attr.rotation;\n                    }\n                });\n\n                // Note: Why is this not part of getLabelPosition?\n                this.tickRotCorr = renderer.rotCorr(labelMetrics.b, this.labelRotation || 0, this.side !== 0);\n            },\n\n            /**\n             * Return true if the axis has associated data\n             */\n            hasData: function() {\n                return this.hasVisibleSeries || (defined(this.min) && defined(this.max) && !!this.tickPositions);\n            },\n\n            /**\n             * Adds the title defined in axis.options.title.\n             * @param {Boolean} display - whether or not to display the title\n             */\n            addTitle: function(display) {\n                var axis = this,\n                    renderer = axis.chart.renderer,\n                    horiz = axis.horiz,\n                    opposite = axis.opposite,\n                    options = axis.options,\n                    axisTitleOptions = options.title,\n                    textAlign;\n\n                if (!axis.axisTitle) {\n                    textAlign = axisTitleOptions.textAlign;\n                    if (!textAlign) {\n                        textAlign = (horiz ? {\n                            low: 'left',\n                            middle: 'center',\n                            high: 'right'\n                        } : {\n                            low: opposite ? 'right' : 'left',\n                            middle: 'center',\n                            high: opposite ? 'left' : 'right'\n                        })[axisTitleOptions.align];\n                    }\n                    axis.axisTitle = renderer.text(\n                            axisTitleOptions.text,\n                            0,\n                            0,\n                            axisTitleOptions.useHTML\n                        )\n                        .attr({\n                            zIndex: 7,\n                            rotation: axisTitleOptions.rotation || 0,\n                            align: textAlign\n                        })\n                        .addClass('highcharts-axis-title')\n\n                        .css(axisTitleOptions.style)\n\n                        .add(axis.axisGroup);\n                    axis.axisTitle.isNew = true;\n                }\n\n                // hide or show the title depending on whether showEmpty is set\n                axis.axisTitle[display ? 'show' : 'hide'](true);\n            },\n\n            /**\n             * Generates a tick for initial positioning.\n             * @param  {number} pos - The tick position in axis values.\n             * @param  {number} i - The index of the tick in axis.tickPositions.\n             */\n            generateTick: function(pos) {\n                var ticks = this.ticks;\n\n                if (!ticks[pos]) {\n                    ticks[pos] = new Tick(this, pos);\n                } else {\n                    ticks[pos].addLabel(); // update labels depending on tick interval\n                }\n            },\n\n            /**\n             * Render the tick labels to a preliminary position to get their sizes\n             */\n            getOffset: function() {\n                var axis = this,\n                    chart = axis.chart,\n                    renderer = chart.renderer,\n                    options = axis.options,\n                    tickPositions = axis.tickPositions,\n                    ticks = axis.ticks,\n                    horiz = axis.horiz,\n                    side = axis.side,\n                    invertedSide = chart.inverted ? [1, 0, 3, 2][side] : side,\n                    hasData,\n                    showAxis,\n                    titleOffset = 0,\n                    titleOffsetOption,\n                    titleMargin = 0,\n                    axisTitleOptions = options.title,\n                    labelOptions = options.labels,\n                    labelOffset = 0, // reset\n                    labelOffsetPadded,\n                    axisOffset = chart.axisOffset,\n                    clipOffset = chart.clipOffset,\n                    clip,\n                    directionFactor = [-1, 1, 1, -1][side],\n                    n,\n                    className = options.className,\n                    axisParent = axis.axisParent, // Used in color axis\n                    lineHeightCorrection,\n                    tickSize = this.tickSize('tick');\n\n                // For reuse in Axis.render\n                hasData = axis.hasData();\n                axis.showAxis = showAxis = hasData || pick(options.showEmpty, true);\n\n                // Set/reset staggerLines\n                axis.staggerLines = axis.horiz && labelOptions.staggerLines;\n\n                // Create the axisGroup and gridGroup elements on first iteration\n                if (!axis.axisGroup) {\n                    axis.gridGroup = renderer.g('grid')\n                        .attr({\n                            zIndex: options.gridZIndex || 1\n                        })\n                        .addClass('highcharts-' + this.coll.toLowerCase() + '-grid ' + (className || ''))\n                        .add(axisParent);\n                    axis.axisGroup = renderer.g('axis')\n                        .attr({\n                            zIndex: options.zIndex || 2\n                        })\n                        .addClass('highcharts-' + this.coll.toLowerCase() + ' ' + (className || ''))\n                        .add(axisParent);\n                    axis.labelGroup = renderer.g('axis-labels')\n                        .attr({\n                            zIndex: labelOptions.zIndex || 7\n                        })\n                        .addClass('highcharts-' + axis.coll.toLowerCase() + '-labels ' + (className || ''))\n                        .add(axisParent);\n                }\n\n                if (hasData || axis.isLinked) {\n\n                    // Generate ticks\n                    each(tickPositions, function(pos, i) {\n                        // i is not used here, but may be used in overrides\n                        axis.generateTick(pos, i);\n                    });\n\n                    axis.renderUnsquish();\n\n\n                    // Left side must be align: right and right side must have align: left for labels\n                    if (labelOptions.reserveSpace !== false && (side === 0 || side === 2 || {\n                            1: 'left',\n                            3: 'right'\n                        }[side] === axis.labelAlign || axis.labelAlign === 'center')) {\n                        each(tickPositions, function(pos) {\n\n                            // get the highest offset\n                            labelOffset = Math.max(\n                                ticks[pos].getLabelSize(),\n                                labelOffset\n                            );\n                        });\n                    }\n\n                    if (axis.staggerLines) {\n                        labelOffset *= axis.staggerLines;\n                        axis.labelOffset = labelOffset * (axis.opposite ? -1 : 1);\n                    }\n\n\n                } else { // doesn't have data\n                    for (n in ticks) {\n                        ticks[n].destroy();\n                        delete ticks[n];\n                    }\n                }\n\n                if (axisTitleOptions && axisTitleOptions.text && axisTitleOptions.enabled !== false) {\n                    axis.addTitle(showAxis);\n\n                    if (showAxis) {\n                        titleOffset = axis.axisTitle.getBBox()[horiz ? 'height' : 'width'];\n                        titleOffsetOption = axisTitleOptions.offset;\n                        titleMargin = defined(titleOffsetOption) ? 0 : pick(axisTitleOptions.margin, horiz ? 5 : 10);\n                    }\n                }\n\n                // Render the axis line\n                axis.renderLine();\n\n                // handle automatic or user set offset\n                axis.offset = directionFactor * pick(options.offset, axisOffset[side]);\n\n                axis.tickRotCorr = axis.tickRotCorr || {\n                    x: 0,\n                    y: 0\n                }; // polar\n                if (side === 0) {\n                    lineHeightCorrection = -axis.labelMetrics().h;\n                } else if (side === 2) {\n                    lineHeightCorrection = axis.tickRotCorr.y;\n                } else {\n                    lineHeightCorrection = 0;\n                }\n\n                // Find the padded label offset\n                labelOffsetPadded = Math.abs(labelOffset) + titleMargin;\n                if (labelOffset) {\n                    labelOffsetPadded -= lineHeightCorrection;\n                    labelOffsetPadded += directionFactor * (horiz ? pick(labelOptions.y, axis.tickRotCorr.y + directionFactor * 8) : labelOptions.x);\n                }\n                axis.axisTitleMargin = pick(titleOffsetOption, labelOffsetPadded);\n\n                axisOffset[side] = Math.max(\n                    axisOffset[side],\n                    axis.axisTitleMargin + titleOffset + directionFactor * axis.offset,\n                    labelOffsetPadded, // #3027\n                    hasData && tickPositions.length && tickSize ?\n                    tickSize[0] + directionFactor * axis.offset :\n                    0 // #4866\n                );\n\n                // Decide the clipping needed to keep the graph inside the plot area and axis lines\n                clip = options.offset ? 0 : Math.floor(axis.axisLine.strokeWidth() / 2) * 2; // #4308, #4371\n                clipOffset[invertedSide] = Math.max(clipOffset[invertedSide], clip);\n            },\n\n            /**\n             * Get the path for the axis line\n             */\n            getLinePath: function(lineWidth) {\n                var chart = this.chart,\n                    opposite = this.opposite,\n                    offset = this.offset,\n                    horiz = this.horiz,\n                    lineLeft = this.left + (opposite ? this.width : 0) + offset,\n                    lineTop = chart.chartHeight - this.bottom - (opposite ? this.height : 0) + offset;\n\n                if (opposite) {\n                    lineWidth *= -1; // crispify the other way - #1480, #1687\n                }\n\n                return chart.renderer\n                    .crispLine([\n                        'M',\n                        horiz ?\n                        this.left :\n                        lineLeft,\n                        horiz ?\n                        lineTop :\n                        this.top,\n                        'L',\n                        horiz ?\n                        chart.chartWidth - this.right :\n                        lineLeft,\n                        horiz ?\n                        lineTop :\n                        chart.chartHeight - this.bottom\n                    ], lineWidth);\n            },\n\n            /**\n             * Render the axis line\n             */\n            renderLine: function() {\n                if (!this.axisLine) {\n                    this.axisLine = this.chart.renderer.path()\n                        .addClass('highcharts-axis-line')\n                        .add(this.axisGroup);\n\n\n                    this.axisLine.attr({\n                        stroke: this.options.lineColor,\n                        'stroke-width': this.options.lineWidth,\n                        zIndex: 7\n                    });\n\n                }\n            },\n\n            /**\n             * Position the title\n             */\n            getTitlePosition: function() {\n                // compute anchor points for each of the title align options\n                var horiz = this.horiz,\n                    axisLeft = this.left,\n                    axisTop = this.top,\n                    axisLength = this.len,\n                    axisTitleOptions = this.options.title,\n                    margin = horiz ? axisLeft : axisTop,\n                    opposite = this.opposite,\n                    offset = this.offset,\n                    xOption = axisTitleOptions.x || 0,\n                    yOption = axisTitleOptions.y || 0,\n                    fontSize = this.chart.renderer.fontMetrics(axisTitleOptions.style && axisTitleOptions.style.fontSize, this.axisTitle).f,\n\n                    // the position in the length direction of the axis\n                    alongAxis = {\n                        low: margin + (horiz ? 0 : axisLength),\n                        middle: margin + axisLength / 2,\n                        high: margin + (horiz ? axisLength : 0)\n                    }[axisTitleOptions.align],\n\n                    // the position in the perpendicular direction of the axis\n                    offAxis = (horiz ? axisTop + this.height : axisLeft) +\n                    (horiz ? 1 : -1) * // horizontal axis reverses the margin\n                    (opposite ? -1 : 1) * // so does opposite axes\n                    this.axisTitleMargin +\n                    (this.side === 2 ? fontSize : 0);\n\n                return {\n                    x: horiz ?\n                        alongAxis + xOption : offAxis + (opposite ? this.width : 0) + offset + xOption,\n                    y: horiz ?\n                        offAxis + yOption - (opposite ? this.height : 0) + offset : alongAxis + yOption\n                };\n            },\n\n            /**\n             * Render a minor tick into the given position. If a minor tick already \n             * exists in this position, move it.\n             * @param  {number} pos - The position in axis values.\n             */\n            renderMinorTick: function(pos) {\n                var slideInTicks = this.chart.hasRendered && isNumber(this.oldMin),\n                    minorTicks = this.minorTicks;\n\n                if (!minorTicks[pos]) {\n                    minorTicks[pos] = new Tick(this, pos, 'minor');\n                }\n\n                // Render new ticks in old position\n                if (slideInTicks && minorTicks[pos].isNew) {\n                    minorTicks[pos].render(null, true);\n                }\n\n                minorTicks[pos].render(null, false, 1);\n            },\n\n            /**\n             * Render a major tick into the given position. If a tick already exists\n             * in this position, move it.\n             * @param  {number} pos - The position in axis values\n             * @param  {number} i - The tick index\n             */\n            renderTick: function(pos, i) {\n                var isLinked = this.isLinked,\n                    ticks = this.ticks,\n                    slideInTicks = this.chart.hasRendered && isNumber(this.oldMin);\n\n                // Linked axes need an extra check to find out if\n                if (!isLinked || (pos >= this.min && pos <= this.max)) {\n\n                    if (!ticks[pos]) {\n                        ticks[pos] = new Tick(this, pos);\n                    }\n\n                    // render new ticks in old position\n                    if (slideInTicks && ticks[pos].isNew) {\n                        ticks[pos].render(i, true, 0.1);\n                    }\n\n                    ticks[pos].render(i);\n                }\n            },\n\n            /**\n             * Render the axis\n             */\n            render: function() {\n                var axis = this,\n                    chart = axis.chart,\n                    renderer = chart.renderer,\n                    options = axis.options,\n                    isLog = axis.isLog,\n                    lin2log = axis.lin2log,\n                    isLinked = axis.isLinked,\n                    tickPositions = axis.tickPositions,\n                    axisTitle = axis.axisTitle,\n                    ticks = axis.ticks,\n                    minorTicks = axis.minorTicks,\n                    alternateBands = axis.alternateBands,\n                    stackLabelOptions = options.stackLabels,\n                    alternateGridColor = options.alternateGridColor,\n                    tickmarkOffset = axis.tickmarkOffset,\n                    axisLine = axis.axisLine,\n                    showAxis = axis.showAxis,\n                    animation = animObject(renderer.globalAnimation),\n                    from,\n                    to;\n\n                // Reset\n                axis.labelEdge.length = 0;\n                //axis.justifyToPlot = overflow === 'justify';\n                axis.overlap = false;\n\n                // Mark all elements inActive before we go over and mark the active ones\n                each([ticks, minorTicks, alternateBands], function(coll) {\n                    var pos;\n                    for (pos in coll) {\n                        coll[pos].isActive = false;\n                    }\n                });\n\n                // If the series has data draw the ticks. Else only the line and title\n                if (axis.hasData() || isLinked) {\n\n                    // minor ticks\n                    if (axis.minorTickInterval && !axis.categories) {\n                        each(axis.getMinorTickPositions(), function(pos) {\n                            axis.renderMinorTick(pos);\n                        });\n                    }\n\n                    // Major ticks. Pull out the first item and render it last so that\n                    // we can get the position of the neighbour label. #808.\n                    if (tickPositions.length) { // #1300\n                        each(tickPositions, function(pos, i) {\n                            axis.renderTick(pos, i);\n                        });\n                        // In a categorized axis, the tick marks are displayed between labels. So\n                        // we need to add a tick mark and grid line at the left edge of the X axis.\n                        if (tickmarkOffset && (axis.min === 0 || axis.single)) {\n                            if (!ticks[-1]) {\n                                ticks[-1] = new Tick(axis, -1, null, true);\n                            }\n                            ticks[-1].render(-1);\n                        }\n\n                    }\n\n                    // alternate grid color\n                    if (alternateGridColor) {\n                        each(tickPositions, function(pos, i) {\n                            to = tickPositions[i + 1] !== undefined ? tickPositions[i + 1] + tickmarkOffset : axis.max - tickmarkOffset;\n                            if (i % 2 === 0 && pos < axis.max && to <= axis.max + (chart.polar ? -tickmarkOffset : tickmarkOffset)) { // #2248, #4660\n                                if (!alternateBands[pos]) {\n                                    alternateBands[pos] = new PlotLineOrBand(axis);\n                                }\n                                from = pos + tickmarkOffset; // #949\n                                alternateBands[pos].options = {\n                                    from: isLog ? lin2log(from) : from,\n                                    to: isLog ? lin2log(to) : to,\n                                    color: alternateGridColor\n                                };\n                                alternateBands[pos].render();\n                                alternateBands[pos].isActive = true;\n                            }\n                        });\n                    }\n\n                    // custom plot lines and bands\n                    if (!axis._addedPlotLB) { // only first time\n                        each((options.plotLines || []).concat(options.plotBands || []), function(plotLineOptions) {\n                            axis.addPlotBandOrLine(plotLineOptions);\n                        });\n                        axis._addedPlotLB = true;\n                    }\n\n                } // end if hasData\n\n                // Remove inactive ticks\n                each([ticks, minorTicks, alternateBands], function(coll) {\n                    var pos,\n                        i,\n                        forDestruction = [],\n                        delay = animation.duration,\n                        destroyInactiveItems = function() {\n                            i = forDestruction.length;\n                            while (i--) {\n                                // When resizing rapidly, the same items may be destroyed in different timeouts,\n                                // or the may be reactivated\n                                if (coll[forDestruction[i]] && !coll[forDestruction[i]].isActive) {\n                                    coll[forDestruction[i]].destroy();\n                                    delete coll[forDestruction[i]];\n                                }\n                            }\n\n                        };\n\n                    for (pos in coll) {\n\n                        if (!coll[pos].isActive) {\n                            // Render to zero opacity\n                            coll[pos].render(pos, false, 0);\n                            coll[pos].isActive = false;\n                            forDestruction.push(pos);\n                        }\n                    }\n\n                    // When the objects are finished fading out, destroy them\n                    syncTimeout(\n                        destroyInactiveItems,\n                        coll === alternateBands || !chart.hasRendered || !delay ? 0 : delay\n                    );\n                });\n\n                // Set the axis line path\n                if (axisLine) {\n                    axisLine[axisLine.isPlaced ? 'animate' : 'attr']({\n                        d: this.getLinePath(axisLine.strokeWidth())\n                    });\n                    axisLine.isPlaced = true;\n\n                    // Show or hide the line depending on options.showEmpty\n                    axisLine[showAxis ? 'show' : 'hide'](true);\n                }\n\n                if (axisTitle && showAxis) {\n\n                    axisTitle[axisTitle.isNew ? 'attr' : 'animate'](\n                        axis.getTitlePosition()\n                    );\n                    axisTitle.isNew = false;\n                }\n\n                // Stacked totals:\n                if (stackLabelOptions && stackLabelOptions.enabled) {\n                    axis.renderStackTotals();\n                }\n                // End stacked totals\n\n                axis.isDirty = false;\n            },\n\n            /**\n             * Redraw the axis to reflect changes in the data or axis extremes\n             */\n            redraw: function() {\n\n                if (this.visible) {\n                    // render the axis\n                    this.render();\n\n                    // move plot lines and bands\n                    each(this.plotLinesAndBands, function(plotLine) {\n                        plotLine.render();\n                    });\n                }\n\n                // mark associated series as dirty and ready for redraw\n                each(this.series, function(series) {\n                    series.isDirty = true;\n                });\n\n            },\n\n            // Properties to survive after destroy, needed for Axis.update (#4317,\n            // #5773, #5881).\n            keepProps: ['extKey', 'hcEvents', 'names', 'series', 'userMax', 'userMin'],\n\n            /**\n             * Destroys an Axis instance.\n             */\n            destroy: function(keepEvents) {\n                var axis = this,\n                    stacks = axis.stacks,\n                    stackKey,\n                    plotLinesAndBands = axis.plotLinesAndBands,\n                    plotGroup,\n                    i,\n                    n;\n\n                // Remove the events\n                if (!keepEvents) {\n                    removeEvent(axis);\n                }\n\n                // Destroy each stack total\n                for (stackKey in stacks) {\n                    destroyObjectProperties(stacks[stackKey]);\n\n                    stacks[stackKey] = null;\n                }\n\n                // Destroy collections\n                each([axis.ticks, axis.minorTicks, axis.alternateBands], function(coll) {\n                    destroyObjectProperties(coll);\n                });\n                if (plotLinesAndBands) {\n                    i = plotLinesAndBands.length;\n                    while (i--) { // #1975\n                        plotLinesAndBands[i].destroy();\n                    }\n                }\n\n                // Destroy local variables\n                each(['stackTotalGroup', 'axisLine', 'axisTitle', 'axisGroup', 'gridGroup', 'labelGroup', 'cross'], function(prop) {\n                    if (axis[prop]) {\n                        axis[prop] = axis[prop].destroy();\n                    }\n                });\n\n                // Destroy each generated group for plotlines and plotbands\n                for (plotGroup in axis.plotLinesAndBandsGroups) {\n                    axis.plotLinesAndBandsGroups[plotGroup] = axis.plotLinesAndBandsGroups[plotGroup].destroy();\n                }\n\n                // Delete all properties and fall back to the prototype.\n                for (n in axis) {\n                    if (axis.hasOwnProperty(n) && inArray(n, axis.keepProps) === -1) {\n                        delete axis[n];\n                    }\n                }\n            },\n\n            /**\n             * Draw the crosshair\n             * \n             * @param  {Object} e The event arguments from the modified pointer event\n             * @param  {Object} point The Point object\n             */\n            drawCrosshair: function(e, point) {\n\n                var path,\n                    options = this.crosshair,\n                    snap = pick(options.snap, true),\n                    pos,\n                    categorized,\n                    graphic = this.cross;\n\n                // Use last available event when updating non-snapped crosshairs without\n                // mouse interaction (#5287)\n                if (!e) {\n                    e = this.cross && this.cross.e;\n                }\n\n                if (\n                    // Disabled in options\n                    !this.crosshair ||\n                    // Snap\n                    ((defined(point) || !snap) === false)\n                ) {\n                    this.hideCrosshair();\n                } else {\n\n                    // Get the path\n                    if (!snap) {\n                        pos = e && (this.horiz ? e.chartX - this.pos : this.len - e.chartY + this.pos);\n                    } else if (defined(point)) {\n                        pos = this.isXAxis ? point.plotX : this.len - point.plotY; // #3834\n                    }\n\n                    if (defined(pos)) {\n                        path = this.getPlotLinePath(\n                            // First argument, value, only used on radial\n                            point && (this.isXAxis ? point.x : pick(point.stackY, point.y)),\n                            null,\n                            null,\n                            null,\n                            pos // Translated position\n                        ) || null; // #3189\n                    }\n\n                    if (!defined(path)) {\n                        this.hideCrosshair();\n                        return;\n                    }\n\n                    categorized = this.categories && !this.isRadial;\n\n                    // Draw the cross\n                    if (!graphic) {\n                        this.cross = graphic = this.chart.renderer\n                            .path()\n                            .addClass('highcharts-crosshair highcharts-crosshair-' +\n                                (categorized ? 'category ' : 'thin ') + options.className)\n                            .attr({\n                                zIndex: pick(options.zIndex, 2)\n                            })\n                            .add();\n\n\n                        // Presentational attributes\n                        graphic.attr({\n                            'stroke': options.color || (categorized ? color('#ccd6eb').setOpacity(0.25).get() : '#cccccc'),\n                            'stroke-width': pick(options.width, 1)\n                        });\n                        if (options.dashStyle) {\n                            graphic.attr({\n                                dashstyle: options.dashStyle\n                            });\n                        }\n\n\n                    }\n\n                    graphic.show().attr({\n                        d: path\n                    });\n\n                    if (categorized && !options.width) {\n                        graphic.attr({\n                            'stroke-width': this.transA\n                        });\n                    }\n                    this.cross.e = e;\n                }\n            },\n\n            /**\n             *\tHide the crosshair.\n             */\n            hideCrosshair: function() {\n                if (this.cross) {\n                    this.cross.hide();\n                }\n            }\n        }; // end Axis\n\n        extend(H.Axis.prototype, AxisPlotLineOrBandExtension);\n\n    }(Highcharts));\n    (function(H) {\n        /**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */\n        var Axis = H.Axis,\n            Date = H.Date,\n            dateFormat = H.dateFormat,\n            defaultOptions = H.defaultOptions,\n            defined = H.defined,\n            each = H.each,\n            extend = H.extend,\n            getMagnitude = H.getMagnitude,\n            getTZOffset = H.getTZOffset,\n            normalizeTickInterval = H.normalizeTickInterval,\n            pick = H.pick,\n            timeUnits = H.timeUnits;\n        /**\n         * Set the tick positions to a time unit that makes sense, for example\n         * on the first of each month or on every Monday. Return an array\n         * with the time positions. Used in datetime axes as well as for grouping\n         * data on a datetime axis.\n         *\n         * @param {Object} normalizedInterval The interval in axis values (ms) and the count\n         * @param {Number} min The minimum in axis values\n         * @param {Number} max The maximum in axis values\n         * @param {Number} startOfWeek\n         */\n        Axis.prototype.getTimeTicks = function(normalizedInterval, min, max, startOfWeek) {\n            var tickPositions = [],\n                i,\n                higherRanks = {},\n                useUTC = defaultOptions.global.useUTC,\n                minYear, // used in months and years as a basis for Date.UTC()\n                minDate = new Date(min - Math.abs(getTZOffset(min))), // #6278\n                makeTime = Date.hcMakeTime,\n                interval = normalizedInterval.unitRange,\n                count = normalizedInterval.count,\n                variableDayLength;\n\n            if (defined(min)) { // #1300\n                minDate[Date.hcSetMilliseconds](interval >= timeUnits.second ? 0 : // #3935\n                    count * Math.floor(minDate.getMilliseconds() / count)); // #3652, #3654\n\n                if (interval >= timeUnits.second) { // second\n                    minDate[Date.hcSetSeconds](interval >= timeUnits.minute ? 0 : // #3935\n                        count * Math.floor(minDate.getSeconds() / count));\n                }\n\n                if (interval >= timeUnits.minute) { // minute\n                    minDate[Date.hcSetMinutes](interval >= timeUnits.hour ? 0 :\n                        count * Math.floor(minDate[Date.hcGetMinutes]() / count));\n                }\n\n                if (interval >= timeUnits.hour) { // hour\n                    minDate[Date.hcSetHours](interval >= timeUnits.day ? 0 :\n                        count * Math.floor(minDate[Date.hcGetHours]() / count));\n                }\n\n                if (interval >= timeUnits.day) { // day\n                    minDate[Date.hcSetDate](interval >= timeUnits.month ? 1 :\n                        count * Math.floor(minDate[Date.hcGetDate]() / count));\n                }\n\n                if (interval >= timeUnits.month) { // month\n                    minDate[Date.hcSetMonth](interval >= timeUnits.year ? 0 :\n                        count * Math.floor(minDate[Date.hcGetMonth]() / count));\n                    minYear = minDate[Date.hcGetFullYear]();\n                }\n\n                if (interval >= timeUnits.year) { // year\n                    minYear -= minYear % count;\n                    minDate[Date.hcSetFullYear](minYear);\n                }\n\n                // week is a special case that runs outside the hierarchy\n                if (interval === timeUnits.week) {\n                    // get start of current week, independent of count\n                    minDate[Date.hcSetDate](minDate[Date.hcGetDate]() - minDate[Date.hcGetDay]() +\n                        pick(startOfWeek, 1));\n                }\n\n\n                // Get basics for variable time spans\n                minYear = minDate[Date.hcGetFullYear]();\n                var minMonth = minDate[Date.hcGetMonth](),\n                    minDateDate = minDate[Date.hcGetDate](),\n                    minHours = minDate[Date.hcGetHours]();\n\n\n                // Handle local timezone offset\n                if (Date.hcTimezoneOffset || Date.hcGetTimezoneOffset) {\n\n                    // Detect whether we need to take the DST crossover into\n                    // consideration. If we're crossing over DST, the day length may be\n                    // 23h or 25h and we need to compute the exact clock time for each\n                    // tick instead of just adding hours. This comes at a cost, so first\n                    // we found out if it is needed. #4951.\n                    variableDayLength =\n                        (!useUTC || !!Date.hcGetTimezoneOffset) &&\n                        (\n                            // Long range, assume we're crossing over.\n                            max - min > 4 * timeUnits.month ||\n                            // Short range, check if min and max are in different time \n                            // zones.\n                            getTZOffset(min) !== getTZOffset(max)\n                        );\n\n                    // Adjust minDate to the offset date\n                    minDate = minDate.getTime();\n                    minDate = new Date(minDate + getTZOffset(minDate));\n                }\n\n\n                // Iterate and add tick positions at appropriate values\n                var time = minDate.getTime();\n                i = 1;\n                while (time < max) {\n                    tickPositions.push(time);\n\n                    // if the interval is years, use Date.UTC to increase years\n                    if (interval === timeUnits.year) {\n                        time = makeTime(minYear + i * count, 0);\n\n                        // if the interval is months, use Date.UTC to increase months\n                    } else if (interval === timeUnits.month) {\n                        time = makeTime(minYear, minMonth + i * count);\n\n                        // if we're using global time, the interval is not fixed as it jumps\n                        // one hour at the DST crossover\n                    } else if (variableDayLength && (interval === timeUnits.day || interval === timeUnits.week)) {\n                        time = makeTime(minYear, minMonth, minDateDate +\n                            i * count * (interval === timeUnits.day ? 1 : 7));\n\n                    } else if (variableDayLength && interval === timeUnits.hour) {\n                        time = makeTime(minYear, minMonth, minDateDate, minHours + i * count);\n\n                        // else, the interval is fixed and we use simple addition\n                    } else {\n                        time += interval * count;\n                    }\n\n                    i++;\n                }\n\n                // push the last time\n                tickPositions.push(time);\n\n\n                // Handle higher ranks. Mark new days if the time is on midnight\n                // (#950, #1649, #1760, #3349). Use a reasonable dropout threshold to \n                // prevent looping over dense data grouping (#6156).\n                if (interval <= timeUnits.hour && tickPositions.length < 10000) {\n                    each(tickPositions, function(time) {\n                        if (\n                            // Speed optimization, no need to run dateFormat unless\n                            // we're on a full or half hour\n                            time % 1800000 === 0 &&\n                            // Check for local or global midnight\n                            dateFormat('%H%M%S%L', time) === '000000000'\n                        ) {\n                            higherRanks[time] = 'day';\n                        }\n                    });\n                }\n            }\n\n\n            // record information on the chosen unit - for dynamic label formatter\n            tickPositions.info = extend(normalizedInterval, {\n                higherRanks: higherRanks,\n                totalRange: interval * count\n            });\n\n            return tickPositions;\n        };\n\n        /**\n         * Get a normalized tick interval for dates. Returns a configuration object with\n         * unit range (interval), count and name. Used to prepare data for getTimeTicks.\n         * Previously this logic was part of getTimeTicks, but as getTimeTicks now runs\n         * of segments in stock charts, the normalizing logic was extracted in order to\n         * prevent it for running over again for each segment having the same interval.\n         * #662, #697.\n         */\n        Axis.prototype.normalizeTimeTickInterval = function(tickInterval, unitsOption) {\n            var units = unitsOption || [\n                    [\n                        'millisecond', // unit name\n                        [1, 2, 5, 10, 20, 25, 50, 100, 200, 500] // allowed multiples\n                    ],\n                    [\n                        'second', [1, 2, 5, 10, 15, 30]\n                    ],\n                    [\n                        'minute', [1, 2, 5, 10, 15, 30]\n                    ],\n                    [\n                        'hour', [1, 2, 3, 4, 6, 8, 12]\n                    ],\n                    [\n                        'day', [1, 2]\n                    ],\n                    [\n                        'week', [1, 2]\n                    ],\n                    [\n                        'month', [1, 2, 3, 4, 6]\n                    ],\n                    [\n                        'year',\n                        null\n                    ]\n                ],\n                unit = units[units.length - 1], // default unit is years\n                interval = timeUnits[unit[0]],\n                multiples = unit[1],\n                count,\n                i;\n\n            // loop through the units to find the one that best fits the tickInterval\n            for (i = 0; i < units.length; i++) {\n                unit = units[i];\n                interval = timeUnits[unit[0]];\n                multiples = unit[1];\n\n\n                if (units[i + 1]) {\n                    // lessThan is in the middle between the highest multiple and the next unit.\n                    var lessThan = (interval * multiples[multiples.length - 1] +\n                        timeUnits[units[i + 1][0]]) / 2;\n\n                    // break and keep the current unit\n                    if (tickInterval <= lessThan) {\n                        break;\n                    }\n                }\n            }\n\n            // prevent 2.5 years intervals, though 25, 250 etc. are allowed\n            if (interval === timeUnits.year && tickInterval < 5 * interval) {\n                multiples = [1, 2, 5];\n            }\n\n            // get the count\n            count = normalizeTickInterval(\n                tickInterval / interval,\n                multiples,\n                unit[0] === 'year' ? Math.max(getMagnitude(tickInterval / interval), 1) : 1 // #1913, #2360\n            );\n\n            return {\n                unitRange: interval,\n                count: count,\n                unitName: unit[0]\n            };\n        };\n\n    }(Highcharts));\n    (function(H) {\n        /**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */\n        var Axis = H.Axis,\n            getMagnitude = H.getMagnitude,\n            map = H.map,\n            normalizeTickInterval = H.normalizeTickInterval,\n            pick = H.pick;\n        /**\n         * Methods defined on the Axis prototype\n         */\n\n        /**\n         * Set the tick positions of a logarithmic axis\n         */\n        Axis.prototype.getLogTickPositions = function(interval, min, max, minor) {\n            var axis = this,\n                options = axis.options,\n                axisLength = axis.len,\n                lin2log = axis.lin2log,\n                log2lin = axis.log2lin,\n                // Since we use this method for both major and minor ticks,\n                // use a local variable and return the result\n                positions = [];\n\n            // Reset\n            if (!minor) {\n                axis._minorAutoInterval = null;\n            }\n\n            // First case: All ticks fall on whole logarithms: 1, 10, 100 etc.\n            if (interval >= 0.5) {\n                interval = Math.round(interval);\n                positions = axis.getLinearTickPositions(interval, min, max);\n\n                // Second case: We need intermediary ticks. For example\n                // 1, 2, 4, 6, 8, 10, 20, 40 etc.\n            } else if (interval >= 0.08) {\n                var roundedMin = Math.floor(min),\n                    intermediate,\n                    i,\n                    j,\n                    len,\n                    pos,\n                    lastPos,\n                    break2;\n\n                if (interval > 0.3) {\n                    intermediate = [1, 2, 4];\n                } else if (interval > 0.15) { // 0.2 equals five minor ticks per 1, 10, 100 etc\n                    intermediate = [1, 2, 4, 6, 8];\n                } else { // 0.1 equals ten minor ticks per 1, 10, 100 etc\n                    intermediate = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n                }\n\n                for (i = roundedMin; i < max + 1 && !break2; i++) {\n                    len = intermediate.length;\n                    for (j = 0; j < len && !break2; j++) {\n                        pos = log2lin(lin2log(i) * intermediate[j]);\n                        if (pos > min && (!minor || lastPos <= max) && lastPos !== undefined) { // #1670, lastPos is #3113\n                            positions.push(lastPos);\n                        }\n\n                        if (lastPos > max) {\n                            break2 = true;\n                        }\n                        lastPos = pos;\n                    }\n                }\n\n                // Third case: We are so deep in between whole logarithmic values that\n                // we might as well handle the tick positions like a linear axis. For\n                // example 1.01, 1.02, 1.03, 1.04.\n            } else {\n                var realMin = lin2log(min),\n                    realMax = lin2log(max),\n                    tickIntervalOption = options[minor ? 'minorTickInterval' : 'tickInterval'],\n                    filteredTickIntervalOption = tickIntervalOption === 'auto' ? null : tickIntervalOption,\n                    tickPixelIntervalOption = options.tickPixelInterval / (minor ? 5 : 1),\n                    totalPixelLength = minor ? axisLength / axis.tickPositions.length : axisLength;\n\n                interval = pick(\n                    filteredTickIntervalOption,\n                    axis._minorAutoInterval,\n                    (realMax - realMin) * tickPixelIntervalOption / (totalPixelLength || 1)\n                );\n\n                interval = normalizeTickInterval(\n                    interval,\n                    null,\n                    getMagnitude(interval)\n                );\n\n                positions = map(axis.getLinearTickPositions(\n                    interval,\n                    realMin,\n                    realMax\n                ), log2lin);\n\n                if (!minor) {\n                    axis._minorAutoInterval = interval / 5;\n                }\n            }\n\n            // Set the axis-level tickInterval variable\n            if (!minor) {\n                axis.tickInterval = interval;\n            }\n            return positions;\n        };\n\n        Axis.prototype.log2lin = function(num) {\n            return Math.log(num) / Math.LN10;\n        };\n\n        Axis.prototype.lin2log = function(num) {\n            return Math.pow(10, num);\n        };\n\n    }(Highcharts));\n    (function(H) {\n        /**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */\n        var dateFormat = H.dateFormat,\n            each = H.each,\n            extend = H.extend,\n            format = H.format,\n            isNumber = H.isNumber,\n            map = H.map,\n            merge = H.merge,\n            pick = H.pick,\n            splat = H.splat,\n            syncTimeout = H.syncTimeout,\n            timeUnits = H.timeUnits;\n        /**\n         * The tooltip object\n         * @param {Object} chart The chart instance\n         * @param {Object} options Tooltip options\n         */\n        H.Tooltip = function() {\n            this.init.apply(this, arguments);\n        };\n\n        H.Tooltip.prototype = {\n\n            init: function(chart, options) {\n\n                // Save the chart and options\n                this.chart = chart;\n                this.options = options;\n\n                // Keep track of the current series\n                //this.currentSeries = undefined;\n\n                // List of crosshairs\n                this.crosshairs = [];\n\n                // Current values of x and y when animating\n                this.now = {\n                    x: 0,\n                    y: 0\n                };\n\n                // The tooltip is initially hidden\n                this.isHidden = true;\n\n\n\n                // Public property for getting the shared state.\n                this.split = options.split && !chart.inverted;\n                this.shared = options.shared || this.split;\n\n            },\n\n            /**\n             * Destroy the single tooltips in a split tooltip.\n             * If the tooltip is active then it is not destroyed, unless forced to.\n             * @param  {boolean} force Force destroy all tooltips.\n             * @return {undefined}\n             */\n            cleanSplit: function(force) {\n                each(this.chart.series, function(series) {\n                    var tt = series && series.tt;\n                    if (tt) {\n                        if (!tt.isActive || force) {\n                            series.tt = tt.destroy();\n                        } else {\n                            tt.isActive = false;\n                        }\n                    }\n                });\n            },\n\n\n\n\n            /**\n             * Create the Tooltip label element if it doesn't exist, then return the\n             * label.\n             */\n            getLabel: function() {\n\n                var renderer = this.chart.renderer,\n                    options = this.options;\n\n                if (!this.label) {\n                    // Create the label\n                    if (this.split) {\n                        this.label = renderer.g('tooltip');\n                    } else {\n                        this.label = renderer.label(\n                                '',\n                                0,\n                                0,\n                                options.shape || 'callout',\n                                null,\n                                null,\n                                options.useHTML,\n                                null,\n                                'tooltip'\n                            )\n                            .attr({\n                                padding: options.padding,\n                                r: options.borderRadius\n                            });\n\n\n                        this.label\n                            .attr({\n                                'fill': options.backgroundColor,\n                                'stroke-width': options.borderWidth\n                            })\n                            // #2301, #2657\n                            .css(options.style)\n                            .shadow(options.shadow);\n\n                    }\n\n\n\n                    this.label\n                        .attr({\n                            zIndex: 8\n                        })\n                        .add();\n                }\n                return this.label;\n            },\n\n            update: function(options) {\n                this.destroy();\n                this.init(this.chart, merge(true, this.options, options));\n            },\n\n            /**\n             * Destroy the tooltip and its elements.\n             */\n            destroy: function() {\n                // Destroy and clear local variables\n                if (this.label) {\n                    this.label = this.label.destroy();\n                }\n                if (this.split && this.tt) {\n                    this.cleanSplit(this.chart, true);\n                    this.tt = this.tt.destroy();\n                }\n                clearTimeout(this.hideTimer);\n                clearTimeout(this.tooltipTimeout);\n            },\n\n            /**\n             * Provide a soft movement for the tooltip\n             *\n             * @param {Number} x\n             * @param {Number} y\n             * @private\n             */\n            move: function(x, y, anchorX, anchorY) {\n                var tooltip = this,\n                    now = tooltip.now,\n                    animate = tooltip.options.animation !== false && !tooltip.isHidden &&\n                    // When we get close to the target position, abort animation and land on the right place (#3056)\n                    (Math.abs(x - now.x) > 1 || Math.abs(y - now.y) > 1),\n                    skipAnchor = tooltip.followPointer || tooltip.len > 1;\n\n                // Get intermediate values for animation\n                extend(now, {\n                    x: animate ? (2 * now.x + x) / 3 : x,\n                    y: animate ? (now.y + y) / 2 : y,\n                    anchorX: skipAnchor ? undefined : animate ? (2 * now.anchorX + anchorX) / 3 : anchorX,\n                    anchorY: skipAnchor ? undefined : animate ? (now.anchorY + anchorY) / 2 : anchorY\n                });\n\n                // Move to the intermediate value\n                tooltip.getLabel().attr(now);\n\n\n                // Run on next tick of the mouse tracker\n                if (animate) {\n\n                    // Never allow two timeouts\n                    clearTimeout(this.tooltipTimeout);\n\n                    // Set the fixed interval ticking for the smooth tooltip\n                    this.tooltipTimeout = setTimeout(function() {\n                        // The interval function may still be running during destroy,\n                        // so check that the chart is really there before calling.\n                        if (tooltip) {\n                            tooltip.move(x, y, anchorX, anchorY);\n                        }\n                    }, 32);\n\n                }\n            },\n\n            /**\n             * Hide the tooltip\n             */\n            hide: function(delay) {\n                var tooltip = this;\n                clearTimeout(this.hideTimer); // disallow duplicate timers (#1728, #1766)\n                delay = pick(delay, this.options.hideDelay, 500);\n                if (!this.isHidden) {\n                    this.hideTimer = syncTimeout(function() {\n                        tooltip.getLabel()[delay ? 'fadeOut' : 'hide']();\n                        tooltip.isHidden = true;\n                    }, delay);\n                }\n            },\n\n            /**\n             * Extendable method to get the anchor position of the tooltip\n             * from a point or set of points\n             */\n            getAnchor: function(points, mouseEvent) {\n                var ret,\n                    chart = this.chart,\n                    inverted = chart.inverted,\n                    plotTop = chart.plotTop,\n                    plotLeft = chart.plotLeft,\n                    plotX = 0,\n                    plotY = 0,\n                    yAxis,\n                    xAxis;\n\n                points = splat(points);\n\n                // Pie uses a special tooltipPos\n                ret = points[0].tooltipPos;\n\n                // When tooltip follows mouse, relate the position to the mouse\n                if (this.followPointer && mouseEvent) {\n                    if (mouseEvent.chartX === undefined) {\n                        mouseEvent = chart.pointer.normalize(mouseEvent);\n                    }\n                    ret = [\n                        mouseEvent.chartX - chart.plotLeft,\n                        mouseEvent.chartY - plotTop\n                    ];\n                }\n                // When shared, use the average position\n                if (!ret) {\n                    each(points, function(point) {\n                        yAxis = point.series.yAxis;\n                        xAxis = point.series.xAxis;\n                        plotX += point.plotX + (!inverted && xAxis ? xAxis.left - plotLeft : 0);\n                        plotY += (point.plotLow ? (point.plotLow + point.plotHigh) / 2 : point.plotY) +\n                            (!inverted && yAxis ? yAxis.top - plotTop : 0); // #1151\n                    });\n\n                    plotX /= points.length;\n                    plotY /= points.length;\n\n                    ret = [\n                        inverted ? chart.plotWidth - plotY : plotX,\n                        this.shared && !inverted && points.length > 1 && mouseEvent ?\n                        mouseEvent.chartY - plotTop : // place shared tooltip next to the mouse (#424)\n                        inverted ? chart.plotHeight - plotX : plotY\n                    ];\n                }\n\n                return map(ret, Math.round);\n            },\n\n            /**\n             * Place the tooltip in a chart without spilling over\n             * and not covering the point it self.\n             */\n            getPosition: function(boxWidth, boxHeight, point) {\n\n                var chart = this.chart,\n                    distance = this.distance,\n                    ret = {},\n                    h = point.h || 0, // #4117\n                    swapped,\n                    first = ['y', chart.chartHeight, boxHeight,\n                        point.plotY + chart.plotTop, chart.plotTop,\n                        chart.plotTop + chart.plotHeight\n                    ],\n                    second = ['x', chart.chartWidth, boxWidth,\n                        point.plotX + chart.plotLeft, chart.plotLeft,\n                        chart.plotLeft + chart.plotWidth\n                    ],\n                    // The far side is right or bottom\n                    preferFarSide = !this.followPointer && pick(point.ttBelow, !chart.inverted === !!point.negative), // #4984\n                    /**\n                     * Handle the preferred dimension. When the preferred dimension is tooltip\n                     * on top or bottom of the point, it will look for space there.\n                     */\n                    firstDimension = function(dim, outerSize, innerSize, point, min, max) {\n                        var roomLeft = innerSize < point - distance,\n                            roomRight = point + distance + innerSize < outerSize,\n                            alignedLeft = point - distance - innerSize,\n                            alignedRight = point + distance;\n\n                        if (preferFarSide && roomRight) {\n                            ret[dim] = alignedRight;\n                        } else if (!preferFarSide && roomLeft) {\n                            ret[dim] = alignedLeft;\n                        } else if (roomLeft) {\n                            ret[dim] = Math.min(max - innerSize, alignedLeft - h < 0 ? alignedLeft : alignedLeft - h);\n                        } else if (roomRight) {\n                            ret[dim] = Math.max(\n                                min,\n                                alignedRight + h + innerSize > outerSize ?\n                                alignedRight :\n                                alignedRight + h\n                            );\n                        } else {\n                            return false;\n                        }\n                    },\n                    /**\n                     * Handle the secondary dimension. If the preferred dimension is tooltip\n                     * on top or bottom of the point, the second dimension is to align the tooltip\n                     * above the point, trying to align center but allowing left or right\n                     * align within the chart box.\n                     */\n                    secondDimension = function(dim, outerSize, innerSize, point) {\n                        var retVal;\n\n                        // Too close to the edge, return false and swap dimensions\n                        if (point < distance || point > outerSize - distance) {\n                            retVal = false;\n                            // Align left/top\n                        } else if (point < innerSize / 2) {\n                            ret[dim] = 1;\n                            // Align right/bottom\n                        } else if (point > outerSize - innerSize / 2) {\n                            ret[dim] = outerSize - innerSize - 2;\n                            // Align center\n                        } else {\n                            ret[dim] = point - innerSize / 2;\n                        }\n                        return retVal;\n                    },\n                    /**\n                     * Swap the dimensions\n                     */\n                    swap = function(count) {\n                        var temp = first;\n                        first = second;\n                        second = temp;\n                        swapped = count;\n                    },\n                    run = function() {\n                        if (firstDimension.apply(0, first) !== false) {\n                            if (secondDimension.apply(0, second) === false && !swapped) {\n                                swap(true);\n                                run();\n                            }\n                        } else if (!swapped) {\n                            swap(true);\n                            run();\n                        } else {\n                            ret.x = ret.y = 0;\n                        }\n                    };\n\n                // Under these conditions, prefer the tooltip on the side of the point\n                if (chart.inverted || this.len > 1) {\n                    swap();\n                }\n                run();\n\n                return ret;\n\n            },\n\n            /**\n             * In case no user defined formatter is given, this will be used. Note that the context\n             * here is an object holding point, series, x, y etc.\n             *\n             * @returns {String|Array<String>}\n             */\n            defaultFormatter: function(tooltip) {\n                var items = this.points || splat(this),\n                    s;\n\n                // Build the header\n                s = [tooltip.tooltipFooterHeaderFormatter(items[0])];\n\n                // build the values\n                s = s.concat(tooltip.bodyFormatter(items));\n\n                // footer\n                s.push(tooltip.tooltipFooterHeaderFormatter(items[0], true));\n\n                return s;\n            },\n\n            /**\n             * Refresh the tooltip's text and position.\n             * @param {Object|Array} pointOrPoints Rither a point or an array of points\n             */\n            refresh: function(pointOrPoints, mouseEvent) {\n                var tooltip = this,\n                    label,\n                    options = tooltip.options,\n                    x,\n                    y,\n                    point = pointOrPoints,\n                    anchor,\n                    textConfig = {},\n                    text,\n                    pointConfig = [],\n                    formatter = options.formatter || tooltip.defaultFormatter,\n                    shared = tooltip.shared,\n                    currentSeries;\n\n                clearTimeout(this.hideTimer);\n\n                // get the reference point coordinates (pie charts use tooltipPos)\n                tooltip.followPointer = splat(point)[0].series.tooltipOptions.followPointer;\n                anchor = tooltip.getAnchor(point, mouseEvent);\n                x = anchor[0];\n                y = anchor[1];\n\n                // shared tooltip, array is sent over\n                if (shared && !(point.series && point.series.noSharedTooltip)) {\n                    each(point, function(item) {\n                        item.setState('hover');\n\n                        pointConfig.push(item.getLabelConfig());\n                    });\n\n                    textConfig = {\n                        x: point[0].category,\n                        y: point[0].y\n                    };\n                    textConfig.points = pointConfig;\n                    point = point[0];\n\n                    // single point tooltip\n                } else {\n                    textConfig = point.getLabelConfig();\n                }\n                this.len = pointConfig.length; // #6128\n                text = formatter.call(textConfig, tooltip);\n\n                // register the current series\n                currentSeries = point.series;\n                this.distance = pick(currentSeries.tooltipOptions.distance, 16);\n\n                // update the inner HTML\n                if (text === false) {\n                    this.hide();\n                } else {\n\n                    label = tooltip.getLabel();\n\n                    // show it\n                    if (tooltip.isHidden) {\n                        label.attr({\n                            opacity: 1\n                        }).show();\n                    }\n\n                    // update text\n                    if (tooltip.split) {\n                        this.renderSplit(text, pointOrPoints);\n                    } else {\n                        label.attr({\n                            text: text && text.join ? text.join('') : text\n                        });\n\n                        // Set the stroke color of the box to reflect the point\n                        label.removeClass(/highcharts-color-[\\d]+/g)\n                            .addClass('highcharts-color-' + pick(point.colorIndex, currentSeries.colorIndex));\n\n\n                        label.attr({\n                            stroke: options.borderColor || point.color || currentSeries.color || '#666666'\n                        });\n\n\n                        tooltip.updatePosition({\n                            plotX: x,\n                            plotY: y,\n                            negative: point.negative,\n                            ttBelow: point.ttBelow,\n                            h: anchor[2] || 0\n                        });\n                    }\n\n                    this.isHidden = false;\n                }\n            },\n\n            /**\n             * Render the split tooltip. Loops over each point's text and adds\n             * a label next to the point, then uses the distribute function to \n             * find best non-overlapping positions.\n             */\n            renderSplit: function(labels, points) {\n                var tooltip = this,\n                    boxes = [],\n                    chart = this.chart,\n                    ren = chart.renderer,\n                    rightAligned = true,\n                    options = this.options,\n                    headerHeight,\n                    tooltipLabel = this.getLabel();\n\n                // Create the individual labels for header and points, ignore footer\n                each(labels.slice(0, points.length + 1), function(str, i) {\n                    var point = points[i - 1] ||\n                        // Item 0 is the header. Instead of this, we could also use the crosshair label\n                        {\n                            isHeader: true,\n                            plotX: points[0].plotX\n                        },\n                        owner = point.series || tooltip,\n                        tt = owner.tt,\n                        series = point.series || {},\n                        colorClass = 'highcharts-color-' + pick(point.colorIndex, series.colorIndex, 'none'),\n                        target,\n                        x,\n                        bBox,\n                        boxWidth;\n\n                    // Store the tooltip referance on the series\n                    if (!tt) {\n                        owner.tt = tt = ren.label(null, null, null, 'callout')\n                            .addClass('highcharts-tooltip-box ' + colorClass)\n                            .attr({\n                                'padding': options.padding,\n                                'r': options.borderRadius,\n\n                                'fill': options.backgroundColor,\n                                'stroke': point.color || series.color || '#333333',\n                                'stroke-width': options.borderWidth\n\n                            })\n                            .add(tooltipLabel);\n                    }\n\n                    tt.isActive = true;\n                    tt.attr({\n                        text: str\n                    });\n\n                    tt.css(options.style);\n\n\n                    // Get X position now, so we can move all to the other side in case of overflow\n                    bBox = tt.getBBox();\n                    boxWidth = bBox.width + tt.strokeWidth();\n                    if (point.isHeader) {\n                        headerHeight = bBox.height;\n                        x = Math.max(\n                            0, // No left overflow\n                            Math.min(\n                                point.plotX + chart.plotLeft - boxWidth / 2,\n                                chart.chartWidth - boxWidth // No right overflow (#5794)\n                            )\n                        );\n                    } else {\n                        x = point.plotX + chart.plotLeft - pick(options.distance, 16) -\n                            boxWidth;\n                    }\n\n\n                    // If overflow left, we don't use this x in the next loop\n                    if (x < 0) {\n                        rightAligned = false;\n                    }\n\n                    // Prepare for distribution\n                    target = (point.series && point.series.yAxis && point.series.yAxis.pos) + (point.plotY || 0);\n                    target -= chart.plotTop;\n                    boxes.push({\n                        target: point.isHeader ? chart.plotHeight + headerHeight : target,\n                        rank: point.isHeader ? 1 : 0,\n                        size: owner.tt.getBBox().height + 1,\n                        point: point,\n                        x: x,\n                        tt: tt\n                    });\n                });\n\n                // Clean previous run (for missing points)\n                this.cleanSplit();\n\n                // Distribute and put in place\n                H.distribute(boxes, chart.plotHeight + headerHeight);\n                each(boxes, function(box) {\n                    var point = box.point,\n                        series = point.series;\n\n                    // Put the label in place\n                    box.tt.attr({\n                        visibility: box.pos === undefined ? 'hidden' : 'inherit',\n                        x: (rightAligned || point.isHeader ?\n                            box.x :\n                            point.plotX + chart.plotLeft + pick(options.distance, 16)),\n                        y: box.pos + chart.plotTop,\n                        anchorX: point.isHeader ?\n                            point.plotX + chart.plotLeft : point.plotX + series.xAxis.pos,\n                        anchorY: point.isHeader ?\n                            box.pos + chart.plotTop - 15 : point.plotY + series.yAxis.pos\n                    });\n                });\n            },\n\n            /**\n             * Find the new position and perform the move\n             */\n            updatePosition: function(point) {\n                var chart = this.chart,\n                    label = this.getLabel(),\n                    pos = (this.options.positioner || this.getPosition).call(\n                        this,\n                        label.width,\n                        label.height,\n                        point\n                    );\n\n                // do the move\n                this.move(\n                    Math.round(pos.x),\n                    Math.round(pos.y || 0), // can be undefined (#3977) \n                    point.plotX + chart.plotLeft,\n                    point.plotY + chart.plotTop\n                );\n            },\n\n            /**\n             * Get the optimal date format for a point, based on a range.\n             * @param  {number} range - The time range\n             * @param  {number|Date} date - The date of the point in question\n             * @param  {number} startOfWeek - An integer representing the first day of\n             * the week, where 0 is Sunday\n             * @param  {Object} dateTimeLabelFormats - A map of time units to formats\n             * @return {string} - the optimal date format for a point\n             */\n            getDateFormat: function(range, date, startOfWeek, dateTimeLabelFormats) {\n                var dateStr = dateFormat('%m-%d %H:%M:%S.%L', date),\n                    format,\n                    n,\n                    blank = '01-01 00:00:00.000',\n                    strpos = {\n                        millisecond: 15,\n                        second: 12,\n                        minute: 9,\n                        hour: 6,\n                        day: 3\n                    },\n                    lastN = 'millisecond'; // for sub-millisecond data, #4223\n                for (n in timeUnits) {\n\n                    // If the range is exactly one week and we're looking at a Sunday/Monday, go for the week format\n                    if (range === timeUnits.week && +dateFormat('%w', date) === startOfWeek &&\n                        dateStr.substr(6) === blank.substr(6)) {\n                        n = 'week';\n                        break;\n                    }\n\n                    // The first format that is too great for the range\n                    if (timeUnits[n] > range) {\n                        n = lastN;\n                        break;\n                    }\n\n                    // If the point is placed every day at 23:59, we need to show\n                    // the minutes as well. #2637.\n                    if (strpos[n] && dateStr.substr(strpos[n]) !== blank.substr(strpos[n])) {\n                        break;\n                    }\n\n                    // Weeks are outside the hierarchy, only apply them on Mondays/Sundays like in the first condition\n                    if (n !== 'week') {\n                        lastN = n;\n                    }\n                }\n\n                if (n) {\n                    format = dateTimeLabelFormats[n];\n                }\n\n                return format;\n            },\n\n            /**\n             * Get the best X date format based on the closest point range on the axis.\n             */\n            getXDateFormat: function(point, options, xAxis) {\n                var xDateFormat,\n                    dateTimeLabelFormats = options.dateTimeLabelFormats,\n                    closestPointRange = xAxis && xAxis.closestPointRange;\n\n                if (closestPointRange) {\n                    xDateFormat = this.getDateFormat(\n                        closestPointRange,\n                        point.x,\n                        xAxis.options.startOfWeek,\n                        dateTimeLabelFormats\n                    );\n                } else {\n                    xDateFormat = dateTimeLabelFormats.day;\n                }\n\n                return xDateFormat || dateTimeLabelFormats.year; // #2546, 2581\n            },\n\n            /**\n             * Format the footer/header of the tooltip\n             * #3397: abstraction to enable formatting of footer and header\n             */\n            tooltipFooterHeaderFormatter: function(labelConfig, isFooter) {\n                var footOrHead = isFooter ? 'footer' : 'header',\n                    series = labelConfig.series,\n                    tooltipOptions = series.tooltipOptions,\n                    xDateFormat = tooltipOptions.xDateFormat,\n                    xAxis = series.xAxis,\n                    isDateTime = xAxis && xAxis.options.type === 'datetime' && isNumber(labelConfig.key),\n                    formatString = tooltipOptions[footOrHead + 'Format'];\n\n                // Guess the best date format based on the closest point distance (#568, #3418)\n                if (isDateTime && !xDateFormat) {\n                    xDateFormat = this.getXDateFormat(labelConfig, tooltipOptions, xAxis);\n                }\n\n                // Insert the footer date format if any\n                if (isDateTime && xDateFormat) {\n                    formatString = formatString.replace('{point.key}', '{point.key:' + xDateFormat + '}');\n                }\n\n                return format(formatString, {\n                    point: labelConfig,\n                    series: series\n                });\n            },\n\n            /**\n             * Build the body (lines) of the tooltip by iterating over the items and returning one entry for each item,\n             * abstracting this functionality allows to easily overwrite and extend it.\n             */\n            bodyFormatter: function(items) {\n                return map(items, function(item) {\n                    var tooltipOptions = item.series.tooltipOptions;\n                    return (tooltipOptions.pointFormatter || item.point.tooltipFormatter)\n                        .call(item.point, tooltipOptions.pointFormat);\n                });\n            }\n\n        };\n\n    }(Highcharts));\n    (function(H) {\n        /**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */\n        var addEvent = H.addEvent,\n            attr = H.attr,\n            charts = H.charts,\n            color = H.color,\n            css = H.css,\n            defined = H.defined,\n            doc = H.doc,\n            each = H.each,\n            extend = H.extend,\n            fireEvent = H.fireEvent,\n            offset = H.offset,\n            pick = H.pick,\n            removeEvent = H.removeEvent,\n            splat = H.splat,\n            Tooltip = H.Tooltip,\n            win = H.win;\n\n        /**\n         * The mouse tracker object. All methods starting with \"on\" are primary DOM\n         * event handlers. Subsequent methods should be named differently from what they\n         * are doing.\n         *\n         * @constructor Pointer\n         * @param {Object} chart The Chart instance\n         * @param {Object} options The root options object\n         */\n        H.Pointer = function(chart, options) {\n            this.init(chart, options);\n        };\n\n        H.Pointer.prototype = {\n            /**\n             * Initialize Pointer\n             */\n            init: function(chart, options) {\n\n                // Store references\n                this.options = options;\n                this.chart = chart;\n\n                // Do we need to handle click on a touch device?\n                this.runChartClick = options.chart.events && !!options.chart.events.click;\n\n                this.pinchDown = [];\n                this.lastValidTouch = {};\n\n                if (Tooltip && options.tooltip.enabled) {\n                    chart.tooltip = new Tooltip(chart, options.tooltip);\n                    this.followTouchMove = pick(options.tooltip.followTouchMove, true);\n                }\n\n                this.setDOMEvents();\n            },\n\n            /**\n             * Resolve the zoomType option, this is reset on all touch start and mouse\n             * down events.\n             */\n            zoomOption: function(e) {\n                var chart = this.chart,\n                    options = chart.options.chart,\n                    zoomType = options.zoomType || '',\n                    inverted = chart.inverted,\n                    zoomX,\n                    zoomY;\n\n                // Look for the pinchType option\n                if (/touch/.test(e.type)) {\n                    zoomType = pick(options.pinchType, zoomType);\n                }\n\n                this.zoomX = zoomX = /x/.test(zoomType);\n                this.zoomY = zoomY = /y/.test(zoomType);\n                this.zoomHor = (zoomX && !inverted) || (zoomY && inverted);\n                this.zoomVert = (zoomY && !inverted) || (zoomX && inverted);\n                this.hasZoom = zoomX || zoomY;\n            },\n\n            /**\n             * Add crossbrowser support for chartX and chartY\n             * @param {Object} e The event object in standard browsers\n             */\n            normalize: function(e, chartPosition) {\n                var chartX,\n                    chartY,\n                    ePos;\n\n                // IE normalizing\n                e = e || win.event;\n                if (!e.target) {\n                    e.target = e.srcElement;\n                }\n\n                // iOS (#2757)\n                ePos = e.touches ? (e.touches.length ? e.touches.item(0) : e.changedTouches[0]) : e;\n\n                // Get mouse position\n                if (!chartPosition) {\n                    this.chartPosition = chartPosition = offset(this.chart.container);\n                }\n\n                // chartX and chartY\n                if (ePos.pageX === undefined) { // IE < 9. #886.\n                    chartX = Math.max(e.x, e.clientX - chartPosition.left); // #2005, #2129: the second case is \n                    // for IE10 quirks mode within framesets\n                    chartY = e.y;\n                } else {\n                    chartX = ePos.pageX - chartPosition.left;\n                    chartY = ePos.pageY - chartPosition.top;\n                }\n\n                return extend(e, {\n                    chartX: Math.round(chartX),\n                    chartY: Math.round(chartY)\n                });\n            },\n\n            /**\n             * Get the click position in terms of axis values.\n             *\n             * @param {Object} e A pointer event\n             */\n            getCoordinates: function(e) {\n                var coordinates = {\n                    xAxis: [],\n                    yAxis: []\n                };\n\n                each(this.chart.axes, function(axis) {\n                    coordinates[axis.isXAxis ? 'xAxis' : 'yAxis'].push({\n                        axis: axis,\n                        value: axis.toValue(e[axis.horiz ? 'chartX' : 'chartY'])\n                    });\n                });\n                return coordinates;\n            },\n            /**\n             * Collects the points closest to a mouseEvent\n             * @param  {Array} series Array of series to gather points from\n             * @param  {Boolean} shared True if shared tooltip, otherwise false\n             * @param  {Object} e Mouse event which possess a position to compare against\n             * @return {Array} KDPoints sorted by distance\n             */\n            getKDPoints: function(series, shared, e) {\n                var kdpoints = [],\n                    noSharedTooltip,\n                    directTouch,\n                    kdpointT,\n                    i;\n\n                // Find nearest points on all series\n                each(series, function(s) {\n                    // Skip hidden series\n                    noSharedTooltip = s.noSharedTooltip && shared;\n                    directTouch = !shared && s.directTouch;\n                    if (s.visible && !directTouch && pick(s.options.enableMouseTracking, true)) { // #3821\n                        // #3828\n                        kdpointT = s.searchPoint(\n                            e, !noSharedTooltip && s.options.findNearestPointBy.indexOf('y') < 0\n                        );\n                        if (kdpointT && kdpointT.series) { // Point.series becomes null when reset and before redraw (#5197)\n                            kdpoints.push(kdpointT);\n                        }\n                    }\n                });\n\n                // Sort kdpoints by distance to mouse pointer\n                kdpoints.sort(function(p1, p2) {\n                    var isCloserX = p1.distX - p2.distX,\n                        isCloser = p1.dist - p2.dist,\n                        isAbove =\n                        (p2.series.group && p2.series.group.zIndex) -\n                        (p1.series.group && p1.series.group.zIndex),\n                        result;\n\n                    // We have two points which are not in the same place on xAxis and shared tooltip:\n                    if (isCloserX !== 0 && shared) { // #5721\n                        result = isCloserX;\n                        // Points are not exactly in the same place on x/yAxis:\n                    } else if (isCloser !== 0) {\n                        result = isCloser;\n                        // The same xAxis and yAxis position, sort by z-index:\n                    } else if (isAbove !== 0) {\n                        result = isAbove;\n                        // The same zIndex, sort by array index:\n                    } else {\n                        result = p1.series.index > p2.series.index ? -1 : 1;\n                    }\n                    return result;\n                });\n\n                // Remove points with different x-positions, required for shared tooltip and crosshairs (#4645):\n                if (shared && kdpoints[0] && !kdpoints[0].series.noSharedTooltip) {\n                    i = kdpoints.length;\n                    while (i--) {\n                        if (kdpoints[i].x !== kdpoints[0].x || kdpoints[i].series.noSharedTooltip) {\n                            kdpoints.splice(i, 1);\n                        }\n                    }\n                }\n                return kdpoints;\n            },\n            getPointFromEvent: function(e) {\n                var target = e.target,\n                    point;\n\n                while (target && !point) {\n                    point = target.point;\n                    target = target.parentNode;\n                }\n                return point;\n            },\n\n            getHoverData: function(existingHoverPoint, existingHoverSeries, series, isDirectTouch, shared, e) {\n                var hoverPoint = existingHoverPoint,\n                    hoverSeries = existingHoverSeries,\n                    searchSeries,\n                    hoverPoints;\n\n                // If it has a hoverPoint and that series requires direct touch (like columns, #3899), or we're on\n                // a noSharedTooltip series among shared tooltip series (#4546), use the hoverPoint . Otherwise,\n                // search the k-d tree.\n                // Handle shared tooltip or cases where a series is not yet hovered\n                if (isDirectTouch) {\n                    if (shared) {\n                        hoverPoints = [];\n                        each(series, function(s) {\n                            // Skip hidden series\n                            var noSharedTooltip = s.noSharedTooltip && shared,\n                                directTouch = !shared && s.directTouch,\n                                kdpointT;\n                            if (s.visible && !noSharedTooltip && !directTouch && pick(s.options.enableMouseTracking, true)) { // #3821\n                                kdpointT = s.searchKDTree({\n                                    clientX: hoverPoint.clientX,\n                                    plotY: hoverPoint.plotY\n                                }, !noSharedTooltip && s.kdDimensions === 1);\n                                if (kdpointT && kdpointT.series) { // Point.series becomes null when reset and before redraw (#5197)\n                                    hoverPoints.push(kdpointT);\n                                }\n                            }\n                        });\n                        // If kdTree is not built\n                        if (hoverPoints.length === 0) {\n                            hoverPoints = [hoverPoint];\n                        }\n                    } else {\n                        hoverPoints = [hoverPoint];\n                    }\n                    // When the hovered series has stickyTracking false.\n                } else if (hoverSeries && !hoverSeries.stickyTracking) {\n                    if (!shared) {\n                        series = [hoverSeries];\n                    }\n                    hoverPoints = this.getKDPoints(series, shared, e);\n                    hoverPoint = H.find(hoverPoints, function(p) {\n                        return p.series === hoverSeries;\n                    });\n                    // When the hoverSeries has stickyTracking or there is no series hovered.\n                } else {\n                    // Avoid series with stickyTracking\n                    searchSeries = H.grep(series, function(s) {\n                        return s.stickyTracking;\n                    });\n                    hoverPoints = this.getKDPoints(searchSeries, shared, e);\n                    hoverPoint = hoverPoints[0];\n                    hoverSeries = hoverPoint && hoverPoint.series;\n                    // If \n                    if (shared) {\n                        hoverPoints = this.getKDPoints(series, shared, e);\n                    }\n                }\n                // Keep the order of series in tooltip\n                // Must be done after assigning of hoverPoint\n                hoverPoints.sort(function(p1, p2) {\n                    return p1.series.index - p2.series.index;\n                });\n\n                return {\n                    hoverPoint: hoverPoint,\n                    hoverSeries: hoverSeries,\n                    hoverPoints: hoverPoints\n                };\n            },\n            /**\n             * With line type charts with a single tracker, get the point closest to the mouse.\n             * Run Point.onMouseOver and display tooltip for the point or points.\n             */\n            runPointActions: function(e, p) {\n                var pointer = this,\n                    chart = pointer.chart,\n                    series = chart.series,\n                    tooltip = chart.tooltip,\n                    shared = tooltip ? tooltip.shared : false,\n                    hoverPoint = p || chart.hoverPoint,\n                    hoverSeries = hoverPoint && hoverPoint.series || chart.hoverSeries,\n                    // onMouseOver or already hovering a series with directTouch\n                    isDirectTouch = !!p || (!shared && hoverSeries && hoverSeries.directTouch),\n                    hoverData = this.getHoverData(hoverPoint, hoverSeries, series, isDirectTouch, shared, e),\n                    useSharedTooltip,\n                    followPointer,\n                    anchor,\n                    points;\n\n                // Update variables from hoverData.\n                hoverPoint = hoverData.hoverPoint;\n                hoverSeries = hoverData.hoverSeries;\n                followPointer = hoverSeries && hoverSeries.tooltipOptions.followPointer;\n                useSharedTooltip = shared && hoverPoint && !hoverPoint.series.noSharedTooltip;\n                points = (useSharedTooltip ?\n                    hoverData.hoverPoints :\n                    (hoverPoint ? [hoverPoint] : [])\n                );\n\n                // Refresh tooltip for kdpoint if new hover point or tooltip was hidden // #3926, #4200\n                if (\n                    hoverPoint &&\n                    // !(hoverSeries && hoverSeries.directTouch) &&\n                    (hoverPoint !== chart.hoverPoint || (tooltip && tooltip.isHidden))\n                ) {\n                    each(chart.hoverPoints || [], function(p) {\n                        if (H.inArray(p, points) === -1) {\n                            p.setState();\n                        }\n                    });\n                    // Do mouseover on all points (#3919, #3985, #4410, #5622)\n                    each(points || [], function(p) {\n                        p.setState('hover');\n                    });\n                    // set normal state to previous series\n                    if (chart.hoverSeries !== hoverSeries) {\n                        hoverSeries.onMouseOver();\n                    }\n\n                    // If tracking is on series in stead of on each point, \n                    // fire mouseOver on hover point. \n                    if (hoverSeries && !hoverSeries.directTouch) { // #4448\n                        if (chart.hoverPoint) {\n                            chart.hoverPoint.firePointEvent('mouseOut');\n                        }\n                        hoverPoint.firePointEvent('mouseOver');\n                    }\n                    chart.hoverPoints = points;\n                    chart.hoverPoint = hoverPoint;\n                    // Draw tooltip if necessary\n                    if (tooltip) {\n                        tooltip.refresh(useSharedTooltip ? points : hoverPoint, e);\n                    }\n                    // Update positions (regardless of kdpoint or hoverPoint)\n                } else if (followPointer && tooltip && !tooltip.isHidden) {\n                    anchor = tooltip.getAnchor([{}], e);\n                    tooltip.updatePosition({\n                        plotX: anchor[0],\n                        plotY: anchor[1]\n                    });\n                }\n\n                // Start the event listener to pick up the tooltip and crosshairs\n                if (!pointer.unDocMouseMove) {\n                    pointer.unDocMouseMove = addEvent(doc, 'mousemove', function(e) {\n                        var chart = charts[H.hoverChartIndex];\n                        if (chart) {\n                            chart.pointer.onDocumentMouseMove(e);\n                        }\n                    });\n                }\n\n                // Draw crosshairs (#4927, #5269 #5066, #5658)\n                each(chart.axes, function drawAxisCrosshair(axis) {\n                    // Snap is true. For each hover point, loop over the axes and draw a\n                    // crosshair if that point belongs to the axis.\n                    // @todo Consider only one crosshair per axis.\n                    if (pick(axis.crosshair.snap, true)) {\n                        each(points, function(p) {\n                            if (p.series[axis.coll] === axis) {\n                                axis.drawCrosshair(e, p);\n                            }\n                        });\n                    } else {\n                        axis.drawCrosshair(e);\n                    }\n                });\n            },\n\n            /**\n             * Reset the tracking by hiding the tooltip, the hover series state and the hover point\n             *\n             * @param allowMove {Boolean} Instead of destroying the tooltip altogether, allow moving it if possible\n             */\n            reset: function(allowMove, delay) {\n                var pointer = this,\n                    chart = pointer.chart,\n                    hoverSeries = chart.hoverSeries,\n                    hoverPoint = chart.hoverPoint,\n                    hoverPoints = chart.hoverPoints,\n                    tooltip = chart.tooltip,\n                    tooltipPoints = tooltip && tooltip.shared ? hoverPoints : hoverPoint;\n\n                // Check if the points have moved outside the plot area (#1003, #4736, #5101)\n                if (allowMove && tooltipPoints) {\n                    each(splat(tooltipPoints), function(point) {\n                        if (point.series.isCartesian && point.plotX === undefined) {\n                            allowMove = false;\n                        }\n                    });\n                }\n\n                // Just move the tooltip, #349\n                if (allowMove) {\n                    if (tooltip && tooltipPoints) {\n                        tooltip.refresh(tooltipPoints);\n                        if (hoverPoint) { // #2500\n                            hoverPoint.setState(hoverPoint.state, true);\n                            each(chart.axes, function(axis) {\n                                if (axis.crosshair) {\n                                    axis.drawCrosshair(null, hoverPoint);\n                                }\n                            });\n                        }\n                    }\n\n                    // Full reset\n                } else {\n\n                    if (hoverPoint) {\n                        hoverPoint.onMouseOut();\n                    }\n\n                    if (hoverPoints) {\n                        each(hoverPoints, function(point) {\n                            point.setState();\n                        });\n                    }\n\n                    if (hoverSeries) {\n                        hoverSeries.onMouseOut();\n                    }\n\n                    if (tooltip) {\n                        tooltip.hide(delay);\n                    }\n\n                    if (pointer.unDocMouseMove) {\n                        pointer.unDocMouseMove = pointer.unDocMouseMove();\n                    }\n\n                    // Remove crosshairs\n                    each(chart.axes, function(axis) {\n                        axis.hideCrosshair();\n                    });\n\n                    pointer.hoverX = chart.hoverPoints = chart.hoverPoint = null;\n                }\n            },\n\n            /**\n             * Scale series groups to a certain scale and translation\n             */\n            scaleGroups: function(attribs, clip) {\n\n                var chart = this.chart,\n                    seriesAttribs;\n\n                // Scale each series\n                each(chart.series, function(series) {\n                    seriesAttribs = attribs || series.getPlotBox(); // #1701\n                    if (series.xAxis && series.xAxis.zoomEnabled && series.group) {\n                        series.group.attr(seriesAttribs);\n                        if (series.markerGroup) {\n                            series.markerGroup.attr(seriesAttribs);\n                            series.markerGroup.clip(clip ? chart.clipRect : null);\n                        }\n                        if (series.dataLabelsGroup) {\n                            series.dataLabelsGroup.attr(seriesAttribs);\n                        }\n                    }\n                });\n\n                // Clip\n                chart.clipRect.attr(clip || chart.clipBox);\n            },\n\n            /**\n             * Start a drag operation\n             */\n            dragStart: function(e) {\n                var chart = this.chart;\n\n                // Record the start position\n                chart.mouseIsDown = e.type;\n                chart.cancelClick = false;\n                chart.mouseDownX = this.mouseDownX = e.chartX;\n                chart.mouseDownY = this.mouseDownY = e.chartY;\n            },\n\n            /**\n             * Perform a drag operation in response to a mousemove event while the mouse is down\n             */\n            drag: function(e) {\n\n                var chart = this.chart,\n                    chartOptions = chart.options.chart,\n                    chartX = e.chartX,\n                    chartY = e.chartY,\n                    zoomHor = this.zoomHor,\n                    zoomVert = this.zoomVert,\n                    plotLeft = chart.plotLeft,\n                    plotTop = chart.plotTop,\n                    plotWidth = chart.plotWidth,\n                    plotHeight = chart.plotHeight,\n                    clickedInside,\n                    size,\n                    selectionMarker = this.selectionMarker,\n                    mouseDownX = this.mouseDownX,\n                    mouseDownY = this.mouseDownY,\n                    panKey = chartOptions.panKey && e[chartOptions.panKey + 'Key'];\n\n                // If the device supports both touch and mouse (like IE11), and we are touch-dragging\n                // inside the plot area, don't handle the mouse event. #4339.\n                if (selectionMarker && selectionMarker.touch) {\n                    return;\n                }\n\n                // If the mouse is outside the plot area, adjust to cooordinates\n                // inside to prevent the selection marker from going outside\n                if (chartX < plotLeft) {\n                    chartX = plotLeft;\n                } else if (chartX > plotLeft + plotWidth) {\n                    chartX = plotLeft + plotWidth;\n                }\n\n                if (chartY < plotTop) {\n                    chartY = plotTop;\n                } else if (chartY > plotTop + plotHeight) {\n                    chartY = plotTop + plotHeight;\n                }\n\n                // determine if the mouse has moved more than 10px\n                this.hasDragged = Math.sqrt(\n                    Math.pow(mouseDownX - chartX, 2) +\n                    Math.pow(mouseDownY - chartY, 2)\n                );\n\n                if (this.hasDragged > 10) {\n                    clickedInside = chart.isInsidePlot(mouseDownX - plotLeft, mouseDownY - plotTop);\n\n                    // make a selection\n                    if (chart.hasCartesianSeries && (this.zoomX || this.zoomY) && clickedInside && !panKey) {\n                        if (!selectionMarker) {\n                            this.selectionMarker = selectionMarker = chart.renderer.rect(\n                                    plotLeft,\n                                    plotTop,\n                                    zoomHor ? 1 : plotWidth,\n                                    zoomVert ? 1 : plotHeight,\n                                    0\n                                )\n                                .attr({\n\n                                    fill: chartOptions.selectionMarkerFill || color('#335cad').setOpacity(0.25).get(),\n\n                                    'class': 'highcharts-selection-marker',\n                                    'zIndex': 7\n                                })\n                                .add();\n                        }\n                    }\n\n                    // adjust the width of the selection marker\n                    if (selectionMarker && zoomHor) {\n                        size = chartX - mouseDownX;\n                        selectionMarker.attr({\n                            width: Math.abs(size),\n                            x: (size > 0 ? 0 : size) + mouseDownX\n                        });\n                    }\n                    // adjust the height of the selection marker\n                    if (selectionMarker && zoomVert) {\n                        size = chartY - mouseDownY;\n                        selectionMarker.attr({\n                            height: Math.abs(size),\n                            y: (size > 0 ? 0 : size) + mouseDownY\n                        });\n                    }\n\n                    // panning\n                    if (clickedInside && !selectionMarker && chartOptions.panning) {\n                        chart.pan(e, chartOptions.panning);\n                    }\n                }\n            },\n\n            /**\n             * On mouse up or touch end across the entire document, drop the selection.\n             */\n            drop: function(e) {\n                var pointer = this,\n                    chart = this.chart,\n                    hasPinched = this.hasPinched;\n\n                if (this.selectionMarker) {\n                    var selectionData = {\n                            originalEvent: e, // #4890\n                            xAxis: [],\n                            yAxis: []\n                        },\n                        selectionBox = this.selectionMarker,\n                        selectionLeft = selectionBox.attr ? selectionBox.attr('x') : selectionBox.x,\n                        selectionTop = selectionBox.attr ? selectionBox.attr('y') : selectionBox.y,\n                        selectionWidth = selectionBox.attr ? selectionBox.attr('width') : selectionBox.width,\n                        selectionHeight = selectionBox.attr ? selectionBox.attr('height') : selectionBox.height,\n                        runZoom;\n\n                    // a selection has been made\n                    if (this.hasDragged || hasPinched) {\n\n                        // record each axis' min and max\n                        each(chart.axes, function(axis) {\n                            if (axis.zoomEnabled && defined(axis.min) && (hasPinched || pointer[{\n                                    xAxis: 'zoomX',\n                                    yAxis: 'zoomY'\n                                }[axis.coll]])) { // #859, #3569\n                                var horiz = axis.horiz,\n                                    minPixelPadding = e.type === 'touchend' ? axis.minPixelPadding : 0, // #1207, #3075\n                                    selectionMin = axis.toValue((horiz ? selectionLeft : selectionTop) + minPixelPadding),\n                                    selectionMax = axis.toValue((horiz ? selectionLeft + selectionWidth : selectionTop + selectionHeight) - minPixelPadding);\n\n                                selectionData[axis.coll].push({\n                                    axis: axis,\n                                    min: Math.min(selectionMin, selectionMax), // for reversed axes\n                                    max: Math.max(selectionMin, selectionMax)\n                                });\n                                runZoom = true;\n                            }\n                        });\n                        if (runZoom) {\n                            fireEvent(chart, 'selection', selectionData, function(args) {\n                                chart.zoom(extend(args, hasPinched ? {\n                                    animation: false\n                                } : null));\n                            });\n                        }\n\n                    }\n                    this.selectionMarker = this.selectionMarker.destroy();\n\n                    // Reset scaling preview\n                    if (hasPinched) {\n                        this.scaleGroups();\n                    }\n                }\n\n                // Reset all\n                if (chart) { // it may be destroyed on mouse up - #877\n                    css(chart.container, {\n                        cursor: chart._cursor\n                    });\n                    chart.cancelClick = this.hasDragged > 10; // #370\n                    chart.mouseIsDown = this.hasDragged = this.hasPinched = false;\n                    this.pinchDown = [];\n                }\n            },\n\n            onContainerMouseDown: function(e) {\n\n                e = this.normalize(e);\n\n                this.zoomOption(e);\n\n                // issue #295, dragging not always working in Firefox\n                if (e.preventDefault) {\n                    e.preventDefault();\n                }\n\n                this.dragStart(e);\n            },\n\n\n\n            onDocumentMouseUp: function(e) {\n                if (charts[H.hoverChartIndex]) {\n                    charts[H.hoverChartIndex].pointer.drop(e);\n                }\n            },\n\n            /**\n             * Special handler for mouse move that will hide the tooltip when the mouse leaves the plotarea.\n             * Issue #149 workaround. The mouseleave event does not always fire.\n             */\n            onDocumentMouseMove: function(e) {\n                var chart = this.chart,\n                    chartPosition = this.chartPosition;\n\n                e = this.normalize(e, chartPosition);\n\n                // If we're outside, hide the tooltip\n                if (chartPosition && !this.inClass(e.target, 'highcharts-tracker') &&\n                    !chart.isInsidePlot(e.chartX - chart.plotLeft, e.chartY - chart.plotTop)) {\n                    this.reset();\n                }\n            },\n\n            /**\n             * When mouse leaves the container, hide the tooltip.\n             */\n            onContainerMouseLeave: function(e) {\n                var chart = charts[H.hoverChartIndex];\n                if (chart && (e.relatedTarget || e.toElement)) { // #4886, MS Touch end fires mouseleave but with no related target\n                    chart.pointer.reset();\n                    chart.pointer.chartPosition = null; // also reset the chart position, used in #149 fix\n                }\n            },\n\n            // The mousemove, touchmove and touchstart event handler\n            onContainerMouseMove: function(e) {\n\n                var chart = this.chart;\n\n                if (!defined(H.hoverChartIndex) || !charts[H.hoverChartIndex] || !charts[H.hoverChartIndex].mouseIsDown) {\n                    H.hoverChartIndex = chart.index;\n                }\n\n                e = this.normalize(e);\n                e.returnValue = false; // #2251, #3224\n\n                if (chart.mouseIsDown === 'mousedown') {\n                    this.drag(e);\n                }\n\n                // Show the tooltip and run mouse over events (#977)\n                if ((this.inClass(e.target, 'highcharts-tracker') ||\n                        chart.isInsidePlot(e.chartX - chart.plotLeft, e.chartY - chart.plotTop)) && !chart.openMenu) {\n                    this.runPointActions(e);\n                }\n            },\n\n            /**\n             * Utility to detect whether an element has, or has a parent with, a specific\n             * class name. Used on detection of tracker objects and on deciding whether\n             * hovering the tooltip should cause the active series to mouse out.\n             */\n            inClass: function(element, className) {\n                var elemClassName;\n                while (element) {\n                    elemClassName = attr(element, 'class');\n                    if (elemClassName) {\n                        if (elemClassName.indexOf(className) !== -1) {\n                            return true;\n                        }\n                        if (elemClassName.indexOf('highcharts-container') !== -1) {\n                            return false;\n                        }\n                    }\n                    element = element.parentNode;\n                }\n            },\n\n            onTrackerMouseOut: function(e) {\n                var series = this.chart.hoverSeries,\n                    relatedTarget = e.relatedTarget || e.toElement;\n\n                if (series && relatedTarget && !series.stickyTracking &&\n                    !this.inClass(relatedTarget, 'highcharts-tooltip') &&\n                    (!this.inClass(relatedTarget, 'highcharts-series-' + series.index) || // #2499, #4465\n                        !this.inClass(relatedTarget, 'highcharts-tracker') // #5553\n                    )\n                ) {\n                    series.onMouseOut();\n                }\n            },\n\n            onContainerClick: function(e) {\n                var chart = this.chart,\n                    hoverPoint = chart.hoverPoint,\n                    plotLeft = chart.plotLeft,\n                    plotTop = chart.plotTop;\n\n                e = this.normalize(e);\n\n                if (!chart.cancelClick) {\n\n                    // On tracker click, fire the series and point events. #783, #1583\n                    if (hoverPoint && this.inClass(e.target, 'highcharts-tracker')) {\n\n                        // the series click event\n                        fireEvent(hoverPoint.series, 'click', extend(e, {\n                            point: hoverPoint\n                        }));\n\n                        // the point click event\n                        if (chart.hoverPoint) { // it may be destroyed (#1844)\n                            hoverPoint.firePointEvent('click', e);\n                        }\n\n                        // When clicking outside a tracker, fire a chart event\n                    } else {\n                        extend(e, this.getCoordinates(e));\n\n                        // fire a click event in the chart\n                        if (chart.isInsidePlot(e.chartX - plotLeft, e.chartY - plotTop)) {\n                            fireEvent(chart, 'click', e);\n                        }\n                    }\n\n\n                }\n            },\n\n            /**\n             * Set the JS DOM events on the container and document. This method should contain\n             * a one-to-one assignment between methods and their handlers. Any advanced logic should\n             * be moved to the handler reflecting the event's name.\n             */\n            setDOMEvents: function() {\n\n                var pointer = this,\n                    container = pointer.chart.container;\n\n                container.onmousedown = function(e) {\n                    pointer.onContainerMouseDown(e);\n                };\n                container.onmousemove = function(e) {\n                    pointer.onContainerMouseMove(e);\n                };\n                container.onclick = function(e) {\n                    pointer.onContainerClick(e);\n                };\n                addEvent(container, 'mouseleave', pointer.onContainerMouseLeave);\n                if (H.chartCount === 1) {\n                    addEvent(doc, 'mouseup', pointer.onDocumentMouseUp);\n                }\n                if (H.hasTouch) {\n                    container.ontouchstart = function(e) {\n                        pointer.onContainerTouchStart(e);\n                    };\n                    container.ontouchmove = function(e) {\n                        pointer.onContainerTouchMove(e);\n                    };\n                    if (H.chartCount === 1) {\n                        addEvent(doc, 'touchend', pointer.onDocumentTouchEnd);\n                    }\n                }\n\n            },\n\n            /**\n             * Destroys the Pointer object and disconnects DOM events.\n             */\n            destroy: function() {\n                var prop;\n\n                if (this.unDocMouseMove) {\n                    this.unDocMouseMove();\n                }\n\n                removeEvent(\n                    this.chart.container,\n                    'mouseleave',\n                    this.onContainerMouseLeave\n                );\n                if (!H.chartCount) {\n                    removeEvent(doc, 'mouseup', this.onDocumentMouseUp);\n                    removeEvent(doc, 'touchend', this.onDocumentTouchEnd);\n                }\n\n                // memory and CPU leak\n                clearInterval(this.tooltipTimeout);\n\n                for (prop in this) {\n                    this[prop] = null;\n                }\n            }\n        };\n\n    }(Highcharts));\n    (function(H) {\n        /**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */\n        var charts = H.charts,\n            each = H.each,\n            extend = H.extend,\n            map = H.map,\n            noop = H.noop,\n            pick = H.pick,\n            Pointer = H.Pointer;\n\n        /* Support for touch devices */\n        extend(Pointer.prototype, /** @lends Pointer.prototype */ {\n\n            /**\n             * Run translation operations\n             */\n            pinchTranslate: function(pinchDown, touches, transform, selectionMarker, clip, lastValidTouch) {\n                if (this.zoomHor) {\n                    this.pinchTranslateDirection(true, pinchDown, touches, transform, selectionMarker, clip, lastValidTouch);\n                }\n                if (this.zoomVert) {\n                    this.pinchTranslateDirection(false, pinchDown, touches, transform, selectionMarker, clip, lastValidTouch);\n                }\n            },\n\n            /**\n             * Run translation operations for each direction (horizontal and vertical) independently\n             */\n            pinchTranslateDirection: function(horiz, pinchDown, touches, transform,\n                selectionMarker, clip, lastValidTouch, forcedScale) {\n                var chart = this.chart,\n                    xy = horiz ? 'x' : 'y',\n                    XY = horiz ? 'X' : 'Y',\n                    sChartXY = 'chart' + XY,\n                    wh = horiz ? 'width' : 'height',\n                    plotLeftTop = chart['plot' + (horiz ? 'Left' : 'Top')],\n                    selectionWH,\n                    selectionXY,\n                    clipXY,\n                    scale = forcedScale || 1,\n                    inverted = chart.inverted,\n                    bounds = chart.bounds[horiz ? 'h' : 'v'],\n                    singleTouch = pinchDown.length === 1,\n                    touch0Start = pinchDown[0][sChartXY],\n                    touch0Now = touches[0][sChartXY],\n                    touch1Start = !singleTouch && pinchDown[1][sChartXY],\n                    touch1Now = !singleTouch && touches[1][sChartXY],\n                    outOfBounds,\n                    transformScale,\n                    scaleKey,\n                    setScale = function() {\n                        // Don't zoom if fingers are too close on this axis\n                        if (!singleTouch && Math.abs(touch0Start - touch1Start) > 20) {\n                            scale = forcedScale || Math.abs(touch0Now - touch1Now) / Math.abs(touch0Start - touch1Start);\n                        }\n\n                        clipXY = ((plotLeftTop - touch0Now) / scale) + touch0Start;\n                        selectionWH = chart['plot' + (horiz ? 'Width' : 'Height')] / scale;\n                    };\n\n                // Set the scale, first pass\n                setScale();\n\n                selectionXY = clipXY; // the clip position (x or y) is altered if out of bounds, the selection position is not\n\n                // Out of bounds\n                if (selectionXY < bounds.min) {\n                    selectionXY = bounds.min;\n                    outOfBounds = true;\n                } else if (selectionXY + selectionWH > bounds.max) {\n                    selectionXY = bounds.max - selectionWH;\n                    outOfBounds = true;\n                }\n\n                // Is the chart dragged off its bounds, determined by dataMin and dataMax?\n                if (outOfBounds) {\n\n                    // Modify the touchNow position in order to create an elastic drag movement. This indicates\n                    // to the user that the chart is responsive but can't be dragged further.\n                    touch0Now -= 0.8 * (touch0Now - lastValidTouch[xy][0]);\n                    if (!singleTouch) {\n                        touch1Now -= 0.8 * (touch1Now - lastValidTouch[xy][1]);\n                    }\n\n                    // Set the scale, second pass to adapt to the modified touchNow positions\n                    setScale();\n\n                } else {\n                    lastValidTouch[xy] = [touch0Now, touch1Now];\n                }\n\n                // Set geometry for clipping, selection and transformation\n                if (!inverted) {\n                    clip[xy] = clipXY - plotLeftTop;\n                    clip[wh] = selectionWH;\n                }\n                scaleKey = inverted ? (horiz ? 'scaleY' : 'scaleX') : 'scale' + XY;\n                transformScale = inverted ? 1 / scale : scale;\n\n                selectionMarker[wh] = selectionWH;\n                selectionMarker[xy] = selectionXY;\n                transform[scaleKey] = scale;\n                transform['translate' + XY] = (transformScale * plotLeftTop) + (touch0Now - (transformScale * touch0Start));\n            },\n\n            /**\n             * Handle touch events with two touches\n             */\n            pinch: function(e) {\n\n                var self = this,\n                    chart = self.chart,\n                    pinchDown = self.pinchDown,\n                    touches = e.touches,\n                    touchesLength = touches.length,\n                    lastValidTouch = self.lastValidTouch,\n                    hasZoom = self.hasZoom,\n                    selectionMarker = self.selectionMarker,\n                    transform = {},\n                    fireClickEvent = touchesLength === 1 && ((self.inClass(e.target, 'highcharts-tracker') &&\n                        chart.runTrackerClick) || self.runChartClick),\n                    clip = {};\n\n                // Don't initiate panning until the user has pinched. This prevents us from\n                // blocking page scrolling as users scroll down a long page (#4210).\n                if (touchesLength > 1) {\n                    self.initiated = true;\n                }\n\n                // On touch devices, only proceed to trigger click if a handler is defined\n                if (hasZoom && self.initiated && !fireClickEvent) {\n                    e.preventDefault();\n                }\n\n                // Normalize each touch\n                map(touches, function(e) {\n                    return self.normalize(e);\n                });\n\n                // Register the touch start position\n                if (e.type === 'touchstart') {\n                    each(touches, function(e, i) {\n                        pinchDown[i] = {\n                            chartX: e.chartX,\n                            chartY: e.chartY\n                        };\n                    });\n                    lastValidTouch.x = [pinchDown[0].chartX, pinchDown[1] && pinchDown[1].chartX];\n                    lastValidTouch.y = [pinchDown[0].chartY, pinchDown[1] && pinchDown[1].chartY];\n\n                    // Identify the data bounds in pixels\n                    each(chart.axes, function(axis) {\n                        if (axis.zoomEnabled) {\n                            var bounds = chart.bounds[axis.horiz ? 'h' : 'v'],\n                                minPixelPadding = axis.minPixelPadding,\n                                min = axis.toPixels(pick(axis.options.min, axis.dataMin)),\n                                max = axis.toPixels(pick(axis.options.max, axis.dataMax)),\n                                absMin = Math.min(min, max),\n                                absMax = Math.max(min, max);\n\n                            // Store the bounds for use in the touchmove handler\n                            bounds.min = Math.min(axis.pos, absMin - minPixelPadding);\n                            bounds.max = Math.max(axis.pos + axis.len, absMax + minPixelPadding);\n                        }\n                    });\n                    self.res = true; // reset on next move\n\n                    // Optionally move the tooltip on touchmove\n                } else if (self.followTouchMove && touchesLength === 1) {\n                    this.runPointActions(self.normalize(e));\n\n                    // Event type is touchmove, handle panning and pinching\n                } else if (pinchDown.length) { // can be 0 when releasing, if touchend fires first\n\n\n                    // Set the marker\n                    if (!selectionMarker) {\n                        self.selectionMarker = selectionMarker = extend({\n                            destroy: noop,\n                            touch: true\n                        }, chart.plotBox);\n                    }\n\n                    self.pinchTranslate(pinchDown, touches, transform, selectionMarker, clip, lastValidTouch);\n\n                    self.hasPinched = hasZoom;\n\n                    // Scale and translate the groups to provide visual feedback during pinching\n                    self.scaleGroups(transform, clip);\n\n                    if (self.res) {\n                        self.res = false;\n                        this.reset(false, 0);\n                    }\n                }\n            },\n\n            /**\n             * General touch handler shared by touchstart and touchmove.\n             */\n            touch: function(e, start) {\n                var chart = this.chart,\n                    hasMoved,\n                    pinchDown,\n                    isInside;\n\n                if (chart.index !== H.hoverChartIndex) {\n                    this.onContainerMouseLeave({\n                        relatedTarget: true\n                    });\n                }\n                H.hoverChartIndex = chart.index;\n\n                if (e.touches.length === 1) {\n\n                    e = this.normalize(e);\n\n                    isInside = chart.isInsidePlot(\n                        e.chartX - chart.plotLeft,\n                        e.chartY - chart.plotTop\n                    );\n                    if (isInside && !chart.openMenu) {\n\n                        // Run mouse events and display tooltip etc\n                        if (start) {\n                            this.runPointActions(e);\n                        }\n\n                        // Android fires touchmove events after the touchstart even if the\n                        // finger hasn't moved, or moved only a pixel or two. In iOS however,\n                        // the touchmove doesn't fire unless the finger moves more than ~4px.\n                        // So we emulate this behaviour in Android by checking how much it\n                        // moved, and cancelling on small distances. #3450.\n                        if (e.type === 'touchmove') {\n                            pinchDown = this.pinchDown;\n                            hasMoved = pinchDown[0] ? Math.sqrt( // #5266\n                                Math.pow(pinchDown[0].chartX - e.chartX, 2) +\n                                Math.pow(pinchDown[0].chartY - e.chartY, 2)\n                            ) >= 4 : false;\n                        }\n\n                        if (pick(hasMoved, true)) {\n                            this.pinch(e);\n                        }\n\n                    } else if (start) {\n                        // Hide the tooltip on touching outside the plot area (#1203)\n                        this.reset();\n                    }\n\n                } else if (e.touches.length === 2) {\n                    this.pinch(e);\n                }\n            },\n\n            onContainerTouchStart: function(e) {\n                this.zoomOption(e);\n                this.touch(e, true);\n            },\n\n            onContainerTouchMove: function(e) {\n                this.touch(e);\n            },\n\n            onDocumentTouchEnd: function(e) {\n                if (charts[H.hoverChartIndex]) {\n                    charts[H.hoverChartIndex].pointer.drop(e);\n                }\n            }\n\n        });\n\n    }(Highcharts));\n    (function(H) {\n        /**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */\n        var addEvent = H.addEvent,\n            charts = H.charts,\n            css = H.css,\n            doc = H.doc,\n            extend = H.extend,\n            noop = H.noop,\n            Pointer = H.Pointer,\n            removeEvent = H.removeEvent,\n            win = H.win,\n            wrap = H.wrap;\n\n        if (win.PointerEvent || win.MSPointerEvent) {\n\n            // The touches object keeps track of the points being touched at all times\n            var touches = {},\n                hasPointerEvent = !!win.PointerEvent,\n                getWebkitTouches = function() {\n                    var key,\n                        fake = [];\n                    fake.item = function(i) {\n                        return this[i];\n                    };\n                    for (key in touches) {\n                        if (touches.hasOwnProperty(key)) {\n                            fake.push({\n                                pageX: touches[key].pageX,\n                                pageY: touches[key].pageY,\n                                target: touches[key].target\n                            });\n                        }\n                    }\n                    return fake;\n                },\n                translateMSPointer = function(e, method, wktype, func) {\n                    var p;\n                    if ((e.pointerType === 'touch' || e.pointerType === e.MSPOINTER_TYPE_TOUCH) && charts[H.hoverChartIndex]) {\n                        func(e);\n                        p = charts[H.hoverChartIndex].pointer;\n                        p[method]({\n                            type: wktype,\n                            target: e.currentTarget,\n                            preventDefault: noop,\n                            touches: getWebkitTouches()\n                        });\n                    }\n                };\n\n            /**\n             * Extend the Pointer prototype with methods for each event handler and more\n             */\n            extend(Pointer.prototype, /** @lends Pointer.prototype */ {\n                onContainerPointerDown: function(e) {\n                    translateMSPointer(e, 'onContainerTouchStart', 'touchstart', function(e) {\n                        touches[e.pointerId] = {\n                            pageX: e.pageX,\n                            pageY: e.pageY,\n                            target: e.currentTarget\n                        };\n                    });\n                },\n                onContainerPointerMove: function(e) {\n                    translateMSPointer(e, 'onContainerTouchMove', 'touchmove', function(e) {\n                        touches[e.pointerId] = {\n                            pageX: e.pageX,\n                            pageY: e.pageY\n                        };\n                        if (!touches[e.pointerId].target) {\n                            touches[e.pointerId].target = e.currentTarget;\n                        }\n                    });\n                },\n                onDocumentPointerUp: function(e) {\n                    translateMSPointer(e, 'onDocumentTouchEnd', 'touchend', function(e) {\n                        delete touches[e.pointerId];\n                    });\n                },\n\n                /**\n                 * Add or remove the MS Pointer specific events\n                 */\n                batchMSEvents: function(fn) {\n                    fn(this.chart.container, hasPointerEvent ? 'pointerdown' : 'MSPointerDown', this.onContainerPointerDown);\n                    fn(this.chart.container, hasPointerEvent ? 'pointermove' : 'MSPointerMove', this.onContainerPointerMove);\n                    fn(doc, hasPointerEvent ? 'pointerup' : 'MSPointerUp', this.onDocumentPointerUp);\n                }\n            });\n\n            // Disable default IE actions for pinch and such on chart element\n            wrap(Pointer.prototype, 'init', function(proceed, chart, options) {\n                proceed.call(this, chart, options);\n                if (this.hasZoom) { // #4014\n                    css(chart.container, {\n                        '-ms-touch-action': 'none',\n                        'touch-action': 'none'\n                    });\n                }\n            });\n\n            // Add IE specific touch events to chart\n            wrap(Pointer.prototype, 'setDOMEvents', function(proceed) {\n                proceed.apply(this);\n                if (this.hasZoom || this.followTouchMove) {\n                    this.batchMSEvents(addEvent);\n                }\n            });\n            // Destroy MS events also\n            wrap(Pointer.prototype, 'destroy', function(proceed) {\n                this.batchMSEvents(removeEvent);\n                proceed.call(this);\n            });\n        }\n\n    }(Highcharts));\n    (function(H) {\n        /**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */\n        var Legend,\n\n            addEvent = H.addEvent,\n            css = H.css,\n            discardElement = H.discardElement,\n            defined = H.defined,\n            each = H.each,\n            isFirefox = H.isFirefox,\n            marginNames = H.marginNames,\n            merge = H.merge,\n            pick = H.pick,\n            setAnimation = H.setAnimation,\n            stableSort = H.stableSort,\n            win = H.win,\n            wrap = H.wrap;\n        /**\n         * The overview of the chart's series.\n         * @class\n         */\n        Legend = H.Legend = function(chart, options) {\n            this.init(chart, options);\n        };\n\n        Legend.prototype = {\n\n            /**\n             * Initialize the legend\n             */\n            init: function(chart, options) {\n\n                this.chart = chart;\n\n                this.setOptions(options);\n\n                if (options.enabled) {\n\n                    // Render it\n                    this.render();\n\n                    // move checkboxes\n                    addEvent(this.chart, 'endResize', function() {\n                        this.legend.positionCheckboxes();\n                    });\n                }\n            },\n\n            setOptions: function(options) {\n\n                var padding = pick(options.padding, 8);\n\n                this.options = options;\n\n\n                this.itemStyle = options.itemStyle;\n                this.itemHiddenStyle = merge(this.itemStyle, options.itemHiddenStyle);\n\n                this.itemMarginTop = options.itemMarginTop || 0;\n                this.padding = padding;\n                this.initialItemY = padding - 5; // 5 is pixels above the text\n                this.maxItemWidth = 0;\n                this.itemHeight = 0;\n                this.symbolWidth = pick(options.symbolWidth, 16);\n                this.pages = [];\n\n            },\n\n            /**\n             * Update the legend with new options. Equivalent to running chart.update\n             * with a legend configuration option.\n             * @param {Object} options Legend options\n             * @param {Boolean} redraw Whether to redraw the chart, defaults to true.\n             */\n            update: function(options, redraw) {\n                var chart = this.chart;\n\n                this.setOptions(merge(true, this.options, options));\n                this.destroy();\n                chart.isDirtyLegend = chart.isDirtyBox = true;\n                if (pick(redraw, true)) {\n                    chart.redraw();\n                }\n            },\n\n            /**\n             * Set the colors for the legend item\n             * @param {Object} item A Series or Point instance\n             * @param {Object} visible Dimmed or colored\n             */\n            colorizeItem: function(item, visible) {\n                item.legendGroup[visible ? 'removeClass' : 'addClass'](\n                    'highcharts-legend-item-hidden'\n                );\n\n\n                var legend = this,\n                    options = legend.options,\n                    legendItem = item.legendItem,\n                    legendLine = item.legendLine,\n                    legendSymbol = item.legendSymbol,\n                    hiddenColor = legend.itemHiddenStyle.color,\n                    textColor = visible ? options.itemStyle.color : hiddenColor,\n                    symbolColor = visible ? (item.color || hiddenColor) : hiddenColor,\n                    markerOptions = item.options && item.options.marker,\n                    symbolAttr = {\n                        fill: symbolColor\n                    },\n                    key;\n\n                if (legendItem) {\n                    legendItem.css({\n                        fill: textColor,\n                        color: textColor // #1553, oldIE\n                    });\n                }\n                if (legendLine) {\n                    legendLine.attr({\n                        stroke: symbolColor\n                    });\n                }\n\n                if (legendSymbol) {\n\n                    // Apply marker options\n                    if (markerOptions && legendSymbol.isMarker) { // #585\n                        //symbolAttr.stroke = symbolColor;\n                        symbolAttr = item.pointAttribs();\n                        if (!visible) {\n                            for (key in symbolAttr) {\n                                symbolAttr[key] = hiddenColor;\n                            }\n                        }\n                    }\n\n                    legendSymbol.attr(symbolAttr);\n                }\n\n            },\n\n            /**\n             * Position the legend item\n             * @param {Object} item A Series or Point instance\n             */\n            positionItem: function(item) {\n                var legend = this,\n                    options = legend.options,\n                    symbolPadding = options.symbolPadding,\n                    ltr = !options.rtl,\n                    legendItemPos = item._legendItemPos,\n                    itemX = legendItemPos[0],\n                    itemY = legendItemPos[1],\n                    checkbox = item.checkbox,\n                    legendGroup = item.legendGroup;\n\n                if (legendGroup && legendGroup.element) {\n                    legendGroup.translate(\n                        ltr ?\n                        itemX :\n                        legend.legendWidth - itemX - 2 * symbolPadding - 4,\n                        itemY\n                    );\n                }\n\n                if (checkbox) {\n                    checkbox.x = itemX;\n                    checkbox.y = itemY;\n                }\n            },\n\n            /**\n             * Destroy a single legend item\n             * @param {Object} item The series or point\n             */\n            destroyItem: function(item) {\n                var checkbox = item.checkbox;\n\n                // destroy SVG elements\n                each(\n                    ['legendItem', 'legendLine', 'legendSymbol', 'legendGroup'],\n                    function(key) {\n                        if (item[key]) {\n                            item[key] = item[key].destroy();\n                        }\n                    }\n                );\n\n                if (checkbox) {\n                    discardElement(item.checkbox);\n                }\n            },\n\n            /**\n             * Destroys the legend.\n             */\n            destroy: function() {\n                function destroyItems(key) {\n                    if (this[key]) {\n                        this[key] = this[key].destroy();\n                    }\n                }\n\n                // Destroy items\n                each(this.getAllItems(), function(item) {\n                    each(['legendItem', 'legendGroup'], destroyItems, item);\n                });\n\n                // Destroy legend elements\n                each([\n                    'clipRect',\n                    'up',\n                    'down',\n                    'pager',\n                    'nav',\n                    'box',\n                    'title',\n                    'group'\n                ], destroyItems, this);\n                this.display = null; // Reset in .render on update.\n            },\n\n            /**\n             * Position the checkboxes after the width is determined\n             */\n            positionCheckboxes: function(scrollOffset) {\n                var alignAttr = this.group && this.group.alignAttr,\n                    translateY,\n                    clipHeight = this.clipHeight || this.legendHeight,\n                    titleHeight = this.titleHeight;\n\n                if (alignAttr) {\n                    translateY = alignAttr.translateY;\n                    each(this.allItems, function(item) {\n                        var checkbox = item.checkbox,\n                            top;\n\n                        if (checkbox) {\n                            top = translateY + titleHeight + checkbox.y +\n                                (scrollOffset || 0) + 3;\n                            css(checkbox, {\n                                left: (alignAttr.translateX + item.checkboxOffset +\n                                    checkbox.x - 20) + 'px',\n                                top: top + 'px',\n                                display: top > translateY - 6 && top < translateY +\n                                    clipHeight - 6 ? '' : 'none'\n                            });\n                        }\n                    });\n                }\n            },\n\n            /**\n             * Render the legend title on top of the legend\n             */\n            renderTitle: function() {\n                var options = this.options,\n                    padding = this.padding,\n                    titleOptions = options.title,\n                    titleHeight = 0,\n                    bBox;\n\n                if (titleOptions.text) {\n                    if (!this.title) {\n                        this.title = this.chart.renderer.label(\n                                titleOptions.text,\n                                padding - 3,\n                                padding - 4,\n                                null,\n                                null,\n                                null,\n                                null,\n                                null,\n                                'legend-title'\n                            )\n                            .attr({\n                                zIndex: 1\n                            })\n\n                            .css(titleOptions.style)\n\n                            .add(this.group);\n                    }\n                    bBox = this.title.getBBox();\n                    titleHeight = bBox.height;\n                    this.offsetWidth = bBox.width; // #1717\n                    this.contentGroup.attr({\n                        translateY: titleHeight\n                    });\n                }\n                this.titleHeight = titleHeight;\n            },\n\n            /**\n             * Set the legend item text\n             */\n            setText: function(item) {\n                var options = this.options;\n                item.legendItem.attr({\n                    text: options.labelFormat ?\n                        H.format(options.labelFormat, item) : options.labelFormatter.call(item)\n                });\n            },\n\n            /**\n             * Render a single specific legend item\n             * @param {Object} item A series or point\n             */\n            renderItem: function(item) {\n                var legend = this,\n                    chart = legend.chart,\n                    renderer = chart.renderer,\n                    options = legend.options,\n                    horizontal = options.layout === 'horizontal',\n                    symbolWidth = legend.symbolWidth,\n                    symbolPadding = options.symbolPadding,\n\n                    itemStyle = legend.itemStyle,\n                    itemHiddenStyle = legend.itemHiddenStyle,\n\n                    padding = legend.padding,\n                    itemDistance = horizontal ? pick(options.itemDistance, 20) : 0,\n                    ltr = !options.rtl,\n                    itemHeight,\n                    widthOption = options.width,\n                    itemMarginBottom = options.itemMarginBottom || 0,\n                    itemMarginTop = legend.itemMarginTop,\n                    bBox,\n                    itemWidth,\n                    li = item.legendItem,\n                    isSeries = !item.series,\n                    series = !isSeries && item.series.drawLegendSymbol ?\n                    item.series :\n                    item,\n                    seriesOptions = series.options,\n                    showCheckbox = legend.createCheckboxForItem &&\n                    seriesOptions &&\n                    seriesOptions.showCheckbox,\n                    useHTML = options.useHTML,\n                    fontSize = 12,\n                    itemClassName = item.options.className;\n\n                if (!li) { // generate it once, later move it\n\n                    // Generate the group box, a group to hold the symbol and text. Text\n                    // is to be appended in Legend class.\n                    item.legendGroup = renderer.g('legend-item')\n                        .addClass(\n                            'highcharts-' + series.type + '-series ' +\n                            'highcharts-color-' + item.colorIndex +\n                            (itemClassName ? ' ' + itemClassName : '') +\n                            (isSeries ? ' highcharts-series-' + item.index : '')\n                        )\n                        .attr({\n                            zIndex: 1\n                        })\n                        .add(legend.scrollGroup);\n\n                    // Generate the list item text and add it to the group\n                    item.legendItem = li = renderer.text(\n                            '',\n                            ltr ? symbolWidth + symbolPadding : -symbolPadding,\n                            legend.baseline || 0,\n                            useHTML\n                        )\n\n                        // merge to prevent modifying original (#1021)\n                        .css(merge(item.visible ? itemStyle : itemHiddenStyle))\n\n                        .attr({\n                            align: ltr ? 'left' : 'right',\n                            zIndex: 2\n                        })\n                        .add(item.legendGroup);\n\n                    // Get the baseline for the first item - the font size is equal for\n                    // all\n                    if (!legend.baseline) {\n\n                        fontSize = itemStyle.fontSize;\n\n                        legend.fontMetrics = renderer.fontMetrics(\n                            fontSize,\n                            li\n                        );\n                        legend.baseline = legend.fontMetrics.f + 3 + itemMarginTop;\n                        li.attr('y', legend.baseline);\n                    }\n\n                    // Draw the legend symbol inside the group box\n                    legend.symbolHeight = options.symbolHeight || legend.fontMetrics.f;\n                    series.drawLegendSymbol(legend, item);\n\n                    if (legend.setItemEvents) {\n                        legend.setItemEvents(item, li, useHTML);\n                    }\n\n                    // add the HTML checkbox on top\n                    if (showCheckbox) {\n                        legend.createCheckboxForItem(item);\n                    }\n                }\n\n                // Colorize the items\n                legend.colorizeItem(item, item.visible);\n\n                // Always update the text\n                legend.setText(item);\n\n                // calculate the positions for the next line\n                bBox = li.getBBox();\n\n                itemWidth = item.checkboxOffset =\n                    options.itemWidth ||\n                    item.legendItemWidth ||\n                    symbolWidth + symbolPadding + bBox.width + itemDistance +\n                    (showCheckbox ? 20 : 0);\n                legend.itemHeight = itemHeight = Math.round(\n                    item.legendItemHeight || bBox.height || legend.symbolHeight\n                );\n\n                // If the item exceeds the width, start a new line\n                if (\n                    horizontal &&\n                    legend.itemX - padding + itemWidth > (\n                        widthOption || (\n                            chart.spacingBox.width - 2 * padding - options.x\n                        )\n                    )\n                ) {\n                    legend.itemX = padding;\n                    legend.itemY += itemMarginTop + legend.lastLineHeight +\n                        itemMarginBottom;\n                    legend.lastLineHeight = 0; // reset for next line (#915, #3976)\n                }\n\n                // If the item exceeds the height, start a new column\n                /*if (!horizontal && legend.itemY + options.y +\n                \t\titemHeight > chart.chartHeight - spacingTop - spacingBottom) {\n                \tlegend.itemY = legend.initialItemY;\n                \tlegend.itemX += legend.maxItemWidth;\n                \tlegend.maxItemWidth = 0;\n                }*/\n\n                // Set the edge positions\n                legend.maxItemWidth = Math.max(legend.maxItemWidth, itemWidth);\n                legend.lastItemY = itemMarginTop + legend.itemY + itemMarginBottom;\n                legend.lastLineHeight = Math.max( // #915\n                    itemHeight,\n                    legend.lastLineHeight\n                );\n\n                // cache the position of the newly generated or reordered items\n                item._legendItemPos = [legend.itemX, legend.itemY];\n\n                // advance\n                if (horizontal) {\n                    legend.itemX += itemWidth;\n\n                } else {\n                    legend.itemY += itemMarginTop + itemHeight + itemMarginBottom;\n                    legend.lastLineHeight = itemHeight;\n                }\n\n                // the width of the widest item\n                legend.offsetWidth = widthOption || Math.max(\n                    (horizontal ? legend.itemX - padding - itemDistance : itemWidth) +\n                    padding,\n                    legend.offsetWidth\n                );\n            },\n\n            /**\n             * Get all items, which is one item per series for normal series and one\n             * item per point for pie series.\n             */\n            getAllItems: function() {\n                var allItems = [];\n                each(this.chart.series, function(series) {\n                    var seriesOptions = series && series.options;\n\n                    // Handle showInLegend. If the series is linked to another series,\n                    // defaults to false.\n                    if (series && pick(\n                            seriesOptions.showInLegend, !defined(seriesOptions.linkedTo) ? undefined : false, true\n                        )) {\n\n                        // Use points or series for the legend item depending on\n                        // legendType\n                        allItems = allItems.concat(\n                            series.legendItems ||\n                            (\n                                seriesOptions.legendType === 'point' ?\n                                series.data :\n                                series\n                            )\n                        );\n                    }\n                });\n                return allItems;\n            },\n\n            /**\n             * Adjust the chart margins by reserving space for the legend on only one\n             * side of the chart. If the position is set to a corner, top or bottom is\n             * reserved for horizontal legends and left or right for vertical ones.\n             */\n            adjustMargins: function(margin, spacing) {\n                var chart = this.chart,\n                    options = this.options,\n                    // Use the first letter of each alignment option in order to detect\n                    // the side. (#4189 - use charAt(x) notation instead of [x] for IE7)\n                    alignment = options.align.charAt(0) +\n                    options.verticalAlign.charAt(0) +\n                    options.layout.charAt(0);\n\n                if (!options.floating) {\n\n                    each([\n                        /(lth|ct|rth)/,\n                        /(rtv|rm|rbv)/,\n                        /(rbh|cb|lbh)/,\n                        /(lbv|lm|ltv)/\n                    ], function(alignments, side) {\n                        if (alignments.test(alignment) && !defined(margin[side])) {\n                            // Now we have detected on which side of the chart we should\n                            // reserve space for the legend\n                            chart[marginNames[side]] = Math.max(\n                                chart[marginNames[side]],\n                                (\n                                    chart.legend[\n                                        (side + 1) % 2 ? 'legendHeight' : 'legendWidth'\n                                    ] + [1, -1, -1, 1][side] * options[\n                                        (side % 2) ? 'x' : 'y'\n                                    ] +\n                                    pick(options.margin, 12) +\n                                    spacing[side]\n                                )\n                            );\n                        }\n                    });\n                }\n            },\n\n            /**\n             * Render the legend. This method can be called both before and after\n             * chart.render. If called after, it will only rearrange items instead\n             * of creating new ones.\n             */\n            render: function() {\n                var legend = this,\n                    chart = legend.chart,\n                    renderer = chart.renderer,\n                    legendGroup = legend.group,\n                    allItems,\n                    display,\n                    legendWidth,\n                    legendHeight,\n                    box = legend.box,\n                    options = legend.options,\n                    padding = legend.padding;\n\n                legend.itemX = padding;\n                legend.itemY = legend.initialItemY;\n                legend.offsetWidth = 0;\n                legend.lastItemY = 0;\n\n                if (!legendGroup) {\n                    legend.group = legendGroup = renderer.g('legend')\n                        .attr({\n                            zIndex: 7\n                        })\n                        .add();\n                    legend.contentGroup = renderer.g()\n                        .attr({\n                            zIndex: 1\n                        }) // above background\n                        .add(legendGroup);\n                    legend.scrollGroup = renderer.g()\n                        .add(legend.contentGroup);\n                }\n\n                legend.renderTitle();\n\n                // add each series or point\n                allItems = legend.getAllItems();\n\n                // sort by legendIndex\n                stableSort(allItems, function(a, b) {\n                    return ((a.options && a.options.legendIndex) || 0) -\n                        ((b.options && b.options.legendIndex) || 0);\n                });\n\n                // reversed legend\n                if (options.reversed) {\n                    allItems.reverse();\n                }\n\n                legend.allItems = allItems;\n                legend.display = display = !!allItems.length;\n\n                // render the items\n                legend.lastLineHeight = 0;\n                each(allItems, function(item) {\n                    legend.renderItem(item);\n                });\n\n                // Get the box\n                legendWidth = (options.width || legend.offsetWidth) + padding;\n                legendHeight = legend.lastItemY + legend.lastLineHeight +\n                    legend.titleHeight;\n                legendHeight = legend.handleOverflow(legendHeight);\n                legendHeight += padding;\n\n                // Draw the border and/or background\n                if (!box) {\n                    legend.box = box = renderer.rect()\n                        .addClass('highcharts-legend-box')\n                        .attr({\n                            r: options.borderRadius\n                        })\n                        .add(legendGroup);\n                    box.isNew = true;\n                }\n\n\n                // Presentational\n                box\n                    .attr({\n                        stroke: options.borderColor,\n                        'stroke-width': options.borderWidth || 0,\n                        fill: options.backgroundColor || 'none'\n                    })\n                    .shadow(options.shadow);\n\n\n                if (legendWidth > 0 && legendHeight > 0) {\n                    box[box.isNew ? 'attr' : 'animate'](\n                        box.crisp({\n                            x: 0,\n                            y: 0,\n                            width: legendWidth,\n                            height: legendHeight\n                        }, box.strokeWidth())\n                    );\n                    box.isNew = false;\n                }\n\n                // hide the border if no items\n                box[display ? 'show' : 'hide']();\n\n\n\n                legend.legendWidth = legendWidth;\n                legend.legendHeight = legendHeight;\n\n                // Now that the legend width and height are established, put the items\n                // in the final position\n                each(allItems, function(item) {\n                    legend.positionItem(item);\n                });\n\n                // 1.x compatibility: positioning based on style\n                /*var props = ['left', 'right', 'top', 'bottom'],\n                \tprop,\n                \ti = 4;\n                while (i--) {\n                \tprop = props[i];\n                \tif (options.style[prop] && options.style[prop] !== 'auto') {\n                \t\toptions[i < 2 ? 'align' : 'verticalAlign'] = prop;\n                \t\toptions[i < 2 ? 'x' : 'y'] = \n                \t\t\tpInt(options.style[prop]) * (i % 2 ? -1 : 1);\n                \t}\n                }*/\n\n                if (display) {\n                    legendGroup.align(merge(options, {\n                        width: legendWidth,\n                        height: legendHeight\n                    }), true, 'spacingBox');\n                }\n\n                if (!chart.isResizing) {\n                    this.positionCheckboxes();\n                }\n            },\n\n            /**\n             * Set up the overflow handling by adding navigation with up and down arrows\n             * below the legend.\n             */\n            handleOverflow: function(legendHeight) {\n                var legend = this,\n                    chart = this.chart,\n                    renderer = chart.renderer,\n                    options = this.options,\n                    optionsY = options.y,\n                    alignTop = options.verticalAlign === 'top',\n                    padding = this.padding,\n                    spaceHeight = chart.spacingBox.height +\n                    (alignTop ? -optionsY : optionsY) - padding,\n                    maxHeight = options.maxHeight,\n                    clipHeight,\n                    clipRect = this.clipRect,\n                    navOptions = options.navigation,\n                    animation = pick(navOptions.animation, true),\n                    arrowSize = navOptions.arrowSize || 12,\n                    nav = this.nav,\n                    pages = this.pages,\n                    lastY,\n                    allItems = this.allItems,\n                    clipToHeight = function(height) {\n                        if (height) {\n                            clipRect.attr({\n                                height: height\n                            });\n                        } else if (clipRect) { // Reset (#5912)\n                            legend.clipRect = clipRect.destroy();\n                            legend.contentGroup.clip();\n                        }\n\n                        // useHTML\n                        if (legend.contentGroup.div) {\n                            legend.contentGroup.div.style.clip = height ?\n                                'rect(' + padding + 'px,9999px,' +\n                                (padding + height) + 'px,0)' :\n                                'auto';\n                        }\n                    };\n\n\n                // Adjust the height\n                if (\n                    options.layout === 'horizontal' &&\n                    options.verticalAlign !== 'middle' &&\n                    !options.floating\n                ) {\n                    spaceHeight /= 2;\n                }\n                if (maxHeight) {\n                    spaceHeight = Math.min(spaceHeight, maxHeight);\n                }\n\n                // Reset the legend height and adjust the clipping rectangle\n                pages.length = 0;\n                if (legendHeight > spaceHeight && navOptions.enabled !== false) {\n\n                    this.clipHeight = clipHeight =\n                        Math.max(spaceHeight - 20 - this.titleHeight - padding, 0);\n                    this.currentPage = pick(this.currentPage, 1);\n                    this.fullHeight = legendHeight;\n\n                    // Fill pages with Y positions so that the top of each a legend item\n                    // defines the scroll top for each page (#2098)\n                    each(allItems, function(item, i) {\n                        var y = item._legendItemPos[1],\n                            h = Math.round(item.legendItem.getBBox().height),\n                            len = pages.length;\n\n                        if (!len || (y - pages[len - 1] > clipHeight &&\n                                (lastY || y) !== pages[len - 1])) {\n                            pages.push(lastY || y);\n                            len++;\n                        }\n\n                        if (i === allItems.length - 1 &&\n                            y + h - pages[len - 1] > clipHeight) {\n                            pages.push(y);\n                        }\n                        if (y !== lastY) {\n                            lastY = y;\n                        }\n                    });\n\n                    // Only apply clipping if needed. Clipping causes blurred legend in\n                    // PDF export (#1787)\n                    if (!clipRect) {\n                        clipRect = legend.clipRect =\n                            renderer.clipRect(0, padding, 9999, 0);\n                        legend.contentGroup.clip(clipRect);\n                    }\n\n                    clipToHeight(clipHeight);\n\n                    // Add navigation elements\n                    if (!nav) {\n                        this.nav = nav = renderer.g()\n                            .attr({\n                                zIndex: 1\n                            })\n                            .add(this.group);\n\n                        this.up = renderer\n                            .symbol(\n                                'triangle',\n                                0,\n                                0,\n                                arrowSize,\n                                arrowSize\n                            )\n                            .on('click', function() {\n                                legend.scroll(-1, animation);\n                            })\n                            .add(nav);\n\n                        this.pager = renderer.text('', 15, 10)\n                            .addClass('highcharts-legend-navigation')\n\n                            .css(navOptions.style)\n\n                            .add(nav);\n\n                        this.down = renderer\n                            .symbol(\n                                'triangle-down',\n                                0,\n                                0,\n                                arrowSize,\n                                arrowSize\n                            )\n                            .on('click', function() {\n                                legend.scroll(1, animation);\n                            })\n                            .add(nav);\n                    }\n\n                    // Set initial position\n                    legend.scroll(0);\n\n                    legendHeight = spaceHeight;\n\n                    // Reset\n                } else if (nav) {\n                    clipToHeight();\n                    this.nav = nav.destroy(); // #6322\n                    this.scrollGroup.attr({\n                        translateY: 1\n                    });\n                    this.clipHeight = 0; // #1379\n                }\n\n                return legendHeight;\n            },\n\n            /**\n             * Scroll the legend by a number of pages\n             * @param {Object} scrollBy\n             * @param {Object} animation\n             */\n            scroll: function(scrollBy, animation) {\n                var pages = this.pages,\n                    pageCount = pages.length,\n                    currentPage = this.currentPage + scrollBy,\n                    clipHeight = this.clipHeight,\n                    navOptions = this.options.navigation,\n                    pager = this.pager,\n                    padding = this.padding,\n                    scrollOffset;\n\n                // When resizing while looking at the last page\n                if (currentPage > pageCount) {\n                    currentPage = pageCount;\n                }\n\n                if (currentPage > 0) {\n\n                    if (animation !== undefined) {\n                        setAnimation(animation, this.chart);\n                    }\n\n                    this.nav.attr({\n                        translateX: padding,\n                        translateY: clipHeight + this.padding + 7 + this.titleHeight,\n                        visibility: 'visible'\n                    });\n                    this.up.attr({\n                        'class': currentPage === 1 ?\n                            'highcharts-legend-nav-inactive' : 'highcharts-legend-nav-active'\n                    });\n                    pager.attr({\n                        text: currentPage + '/' + pageCount\n                    });\n                    this.down.attr({\n                        'x': 18 + this.pager.getBBox().width, // adjust to text width\n                        'class': currentPage === pageCount ?\n                            'highcharts-legend-nav-inactive' : 'highcharts-legend-nav-active'\n                    });\n\n\n                    this.up\n                        .attr({\n                            fill: currentPage === 1 ?\n                                navOptions.inactiveColor : navOptions.activeColor\n                        })\n                        .css({\n                            cursor: currentPage === 1 ? 'default' : 'pointer'\n                        });\n                    this.down\n                        .attr({\n                            fill: currentPage === pageCount ?\n                                navOptions.inactiveColor : navOptions.activeColor\n                        })\n                        .css({\n                            cursor: currentPage === pageCount ? 'default' : 'pointer'\n                        });\n\n\n                    scrollOffset = -pages[currentPage - 1] + this.initialItemY;\n\n                    this.scrollGroup.animate({\n                        translateY: scrollOffset\n                    });\n\n                    this.currentPage = currentPage;\n                    this.positionCheckboxes(scrollOffset);\n                }\n\n            }\n\n        };\n\n        /*\n         * LegendSymbolMixin\n         */\n\n        H.LegendSymbolMixin = {\n\n            /**\n             * Get the series' symbol in the legend\n             *\n             * @param {Object} legend The legend object\n             * @param {Object} item The series (this) or point\n             */\n            drawRectangle: function(legend, item) {\n                var options = legend.options,\n                    symbolHeight = legend.symbolHeight,\n                    square = options.squareSymbol,\n                    symbolWidth = square ? symbolHeight : legend.symbolWidth;\n\n                item.legendSymbol = this.chart.renderer.rect(\n                        square ? (legend.symbolWidth - symbolHeight) / 2 : 0,\n                        legend.baseline - symbolHeight + 1, // #3988\n                        symbolWidth,\n                        symbolHeight,\n                        pick(legend.options.symbolRadius, symbolHeight / 2)\n                    )\n                    .addClass('highcharts-point')\n                    .attr({\n                        zIndex: 3\n                    }).add(item.legendGroup);\n\n            },\n\n            /**\n             * Get the series' symbol in the legend. This method should be overridable\n             * to create custom symbols through\n             * Highcharts.seriesTypes[type].prototype.drawLegendSymbols.\n             *\n             * @param {Object} legend The legend object\n             */\n            drawLineMarker: function(legend) {\n\n                var options = this.options,\n                    markerOptions = options.marker,\n                    radius,\n                    legendSymbol,\n                    symbolWidth = legend.symbolWidth,\n                    symbolHeight = legend.symbolHeight,\n                    generalRadius = symbolHeight / 2,\n                    renderer = this.chart.renderer,\n                    legendItemGroup = this.legendGroup,\n                    verticalCenter = legend.baseline -\n                    Math.round(legend.fontMetrics.b * 0.3),\n                    attr = {};\n\n                // Draw the line\n\n                attr = {\n                    'stroke-width': options.lineWidth || 0\n                };\n                if (options.dashStyle) {\n                    attr.dashstyle = options.dashStyle;\n                }\n\n\n                this.legendLine = renderer.path([\n                        'M',\n                        0,\n                        verticalCenter,\n                        'L',\n                        symbolWidth,\n                        verticalCenter\n                    ])\n                    .addClass('highcharts-graph')\n                    .attr(attr)\n                    .add(legendItemGroup);\n\n                // Draw the marker\n                if (markerOptions && markerOptions.enabled !== false) {\n\n                    // Do not allow the marker to be larger than the symbolHeight\n                    radius = Math.min(\n                        pick(markerOptions.radius, generalRadius),\n                        generalRadius\n                    );\n\n                    // Restrict symbol markers size\n                    if (this.symbol.indexOf('url') === 0) {\n                        markerOptions = merge(markerOptions, {\n                            width: symbolHeight,\n                            height: symbolHeight\n                        });\n                        radius = 0;\n                    }\n\n                    this.legendSymbol = legendSymbol = renderer.symbol(\n                            this.symbol,\n                            (symbolWidth / 2) - radius,\n                            verticalCenter - radius,\n                            2 * radius,\n                            2 * radius,\n                            markerOptions\n                        )\n                        .addClass('highcharts-point')\n                        .add(legendItemGroup);\n                    legendSymbol.isMarker = true;\n                }\n            }\n        };\n\n        // Workaround for #2030, horizontal legend items not displaying in IE11 Preview,\n        // and for #2580, a similar drawing flaw in Firefox 26.\n        // Explore if there's a general cause for this. The problem may be related\n        // to nested group elements, as the legend item texts are within 4 group\n        // elements.\n        if (/Trident\\/7\\.0/.test(win.navigator.userAgent) || isFirefox) {\n            wrap(Legend.prototype, 'positionItem', function(proceed, item) {\n                var legend = this,\n                    // If chart destroyed in sync, this is undefined (#2030)\n                    runPositionItem = function() {\n                        if (item._legendItemPos) {\n                            proceed.call(legend, item);\n                        }\n                    };\n\n                // Do it now, for export and to get checkbox placement\n                runPositionItem();\n\n                // Do it after to work around the core issue\n                setTimeout(runPositionItem);\n            });\n        }\n\n    }(Highcharts));\n    (function(H) {\n        /**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */\n        var addEvent = H.addEvent,\n            animate = H.animate,\n            animObject = H.animObject,\n            attr = H.attr,\n            doc = H.doc,\n            Axis = H.Axis, // @todo add as requirement\n            createElement = H.createElement,\n            defaultOptions = H.defaultOptions,\n            discardElement = H.discardElement,\n            charts = H.charts,\n            css = H.css,\n            defined = H.defined,\n            each = H.each,\n            extend = H.extend,\n            find = H.find,\n            fireEvent = H.fireEvent,\n            getStyle = H.getStyle,\n            grep = H.grep,\n            isNumber = H.isNumber,\n            isObject = H.isObject,\n            isString = H.isString,\n            Legend = H.Legend, // @todo add as requirement\n            marginNames = H.marginNames,\n            merge = H.merge,\n            Pointer = H.Pointer, // @todo add as requirement\n            pick = H.pick,\n            pInt = H.pInt,\n            removeEvent = H.removeEvent,\n            seriesTypes = H.seriesTypes,\n            splat = H.splat,\n            svg = H.svg,\n            syncTimeout = H.syncTimeout,\n            win = H.win,\n            Renderer = H.Renderer;\n        /**\n         * The Chart class.\n         * @class Highcharts.Chart\n         * @memberOf Highcharts\n         * @param {String|HTMLDOMElement} renderTo - The DOM element to render to, or its\n         * id.\n         * @param {ChartOptions} options - The chart options structure.\n         * @param {Function} callback - Function to run when the chart has loaded.\n         */\n        var Chart = H.Chart = function() {\n            this.getArgs.apply(this, arguments);\n        };\n\n        H.chart = function(a, b, c) {\n            return new Chart(a, b, c);\n        };\n\n        Chart.prototype = {\n\n            /**\n             * Hook for modules\n             */\n            callbacks: [],\n\n            /**\n             * Handle the arguments passed to the constructor\n             * @returns {Array} Arguments without renderTo\n             */\n            getArgs: function() {\n                var args = [].slice.call(arguments);\n\n                // Remove the optional first argument, renderTo, and\n                // set it on this.\n                if (isString(args[0]) || args[0].nodeName) {\n                    this.renderTo = args.shift();\n                }\n                this.init(args[0], args[1]);\n            },\n\n            /**\n             * Initialize the chart\n             */\n            init: function(userOptions, callback) {\n\n                // Handle regular options\n                var options,\n                    seriesOptions = userOptions.series; // skip merging data points to increase performance\n\n                userOptions.series = null;\n                options = merge(defaultOptions, userOptions); // do the merge\n                options.series = userOptions.series = seriesOptions; // set back the series data\n                this.userOptions = userOptions;\n\n                var optionsChart = options.chart;\n\n                var chartEvents = optionsChart.events;\n\n                this.margin = [];\n                this.spacing = [];\n\n                //this.runChartClick = chartEvents && !!chartEvents.click;\n                this.bounds = {\n                    h: {},\n                    v: {}\n                }; // Pixel data bounds for touch zoom\n\n                this.callback = callback;\n                this.isResizing = 0;\n                this.options = options;\n                //chartTitleOptions = undefined;\n                //chartSubtitleOptions = undefined;\n\n                this.axes = [];\n                this.series = [];\n                this.hasCartesianSeries = optionsChart.showAxes;\n                //this.axisOffset = undefined;\n                //this.inverted = undefined;\n                //this.loadingShown = undefined;\n                //this.container = undefined;\n                //this.chartWidth = undefined;\n                //this.chartHeight = undefined;\n                //this.marginRight = undefined;\n                //this.marginBottom = undefined;\n                //this.containerWidth = undefined;\n                //this.containerHeight = undefined;\n                //this.oldChartWidth = undefined;\n                //this.oldChartHeight = undefined;\n\n                //this.renderTo = undefined;\n                //this.renderToClone = undefined;\n\n                //this.spacingBox = undefined\n\n                //this.legend = undefined;\n\n                // Elements\n                //this.chartBackground = undefined;\n                //this.plotBackground = undefined;\n                //this.plotBGImage = undefined;\n                //this.plotBorder = undefined;\n                //this.loadingDiv = undefined;\n                //this.loadingSpan = undefined;\n\n                var chart = this,\n                    eventType;\n\n                // Add the chart to the global lookup\n                chart.index = charts.length;\n                charts.push(chart);\n                H.chartCount++;\n\n                // Chart event handlers\n                if (chartEvents) {\n                    for (eventType in chartEvents) {\n                        addEvent(chart, eventType, chartEvents[eventType]);\n                    }\n                }\n\n                chart.xAxis = [];\n                chart.yAxis = [];\n\n                chart.pointCount = chart.colorCounter = chart.symbolCounter = 0;\n\n                chart.firstRender();\n            },\n\n            /**\n             * Initialize an individual series, called internally before render time\n             */\n            initSeries: function(options) {\n                var chart = this,\n                    optionsChart = chart.options.chart,\n                    type = options.type || optionsChart.type || optionsChart.defaultSeriesType,\n                    series,\n                    Constr = seriesTypes[type];\n\n                // No such series type\n                if (!Constr) {\n                    H.error(17, true);\n                }\n\n                series = new Constr();\n                series.init(this, options);\n                return series;\n            },\n\n            /**\n             * Order all series above a given index. When series are added and ordered\n             * by configuration, only the last series is handled (#248, #1123, #2456,\n             * #6112). This function is called on series initialization and destroy.\n             *\n             * @param {number} fromIndex - If this is given, only the series above this\n             *    index are handled.\n             */\n            orderSeries: function(fromIndex) {\n                var series = this.series,\n                    i = fromIndex || 0;\n                for (; i < series.length; i++) {\n                    if (series[i]) {\n                        series[i].index = i;\n                        series[i].name = series[i].name ||\n                            'Series ' + (series[i].index + 1);\n                    }\n                }\n            },\n\n            /**\n             * Check whether a given point is within the plot area\n             *\n             * @param {Number} plotX Pixel x relative to the plot area\n             * @param {Number} plotY Pixel y relative to the plot area\n             * @param {Boolean} inverted Whether the chart is inverted\n             */\n            isInsidePlot: function(plotX, plotY, inverted) {\n                var x = inverted ? plotY : plotX,\n                    y = inverted ? plotX : plotY;\n\n                return x >= 0 &&\n                    x <= this.plotWidth &&\n                    y >= 0 &&\n                    y <= this.plotHeight;\n            },\n\n            /**\n             * Redraw legend, axes or series based on updated data\n             *\n             * @param {Boolean|Object} animation Whether to apply animation, and optionally animation\n             *\tconfiguration\n             */\n            redraw: function(animation) {\n                var chart = this,\n                    axes = chart.axes,\n                    series = chart.series,\n                    pointer = chart.pointer,\n                    legend = chart.legend,\n                    redrawLegend = chart.isDirtyLegend,\n                    hasStackedSeries,\n                    hasDirtyStacks,\n                    hasCartesianSeries = chart.hasCartesianSeries,\n                    isDirtyBox = chart.isDirtyBox,\n                    i,\n                    serie,\n                    renderer = chart.renderer,\n                    isHiddenChart = renderer.isHidden(),\n                    afterRedraw = [];\n\n                // Handle responsive rules, not only on resize (#6130)\n                if (chart.setResponsive) {\n                    chart.setResponsive(false);\n                }\n\n                H.setAnimation(animation, chart);\n\n                if (isHiddenChart) {\n                    chart.cloneRenderTo();\n                }\n\n                // Adjust title layout (reflow multiline text)\n                chart.layOutTitles();\n\n                // link stacked series\n                i = series.length;\n                while (i--) {\n                    serie = series[i];\n\n                    if (serie.options.stacking) {\n                        hasStackedSeries = true;\n\n                        if (serie.isDirty) {\n                            hasDirtyStacks = true;\n                            break;\n                        }\n                    }\n                }\n                if (hasDirtyStacks) { // mark others as dirty\n                    i = series.length;\n                    while (i--) {\n                        serie = series[i];\n                        if (serie.options.stacking) {\n                            serie.isDirty = true;\n                        }\n                    }\n                }\n\n                // Handle updated data in the series\n                each(series, function(serie) {\n                    if (serie.isDirty) {\n                        if (serie.options.legendType === 'point') {\n                            if (serie.updateTotals) {\n                                serie.updateTotals();\n                            }\n                            redrawLegend = true;\n                        }\n                    }\n                    if (serie.isDirtyData) {\n                        fireEvent(serie, 'updatedData');\n                    }\n                });\n\n                // handle added or removed series\n                if (redrawLegend && legend.options.enabled) { // series or pie points are added or removed\n                    // draw legend graphics\n                    legend.render();\n\n                    chart.isDirtyLegend = false;\n                }\n\n                // reset stacks\n                if (hasStackedSeries) {\n                    chart.getStacks();\n                }\n\n\n                if (hasCartesianSeries) {\n                    // set axes scales\n                    each(axes, function(axis) {\n                        axis.updateNames();\n                        axis.setScale();\n                    });\n                }\n\n                chart.getMargins(); // #3098\n\n                if (hasCartesianSeries) {\n                    // If one axis is dirty, all axes must be redrawn (#792, #2169)\n                    each(axes, function(axis) {\n                        if (axis.isDirty) {\n                            isDirtyBox = true;\n                        }\n                    });\n\n                    // redraw axes\n                    each(axes, function(axis) {\n\n                        // Fire 'afterSetExtremes' only if extremes are set\n                        var key = axis.min + ',' + axis.max;\n                        if (axis.extKey !== key) { // #821, #4452\n                            axis.extKey = key;\n                            afterRedraw.push(function() { // prevent a recursive call to chart.redraw() (#1119)\n                                fireEvent(axis, 'afterSetExtremes', extend(axis.eventArgs, axis.getExtremes())); // #747, #751\n                                delete axis.eventArgs;\n                            });\n                        }\n                        if (isDirtyBox || hasStackedSeries) {\n                            axis.redraw();\n                        }\n                    });\n                }\n\n                // the plot areas size has changed\n                if (isDirtyBox) {\n                    chart.drawChartBox();\n                }\n\n                // Fire an event before redrawing series, used by the boost module to\n                // clear previous series renderings.\n                fireEvent(chart, 'predraw');\n\n                // redraw affected series\n                each(series, function(serie) {\n                    if ((isDirtyBox || serie.isDirty) && serie.visible) {\n                        serie.redraw();\n                    }\n                    // Set it here, otherwise we will have unlimited 'updatedData' calls\n                    // for a hidden series after setData(). Fixes #6012\n                    serie.isDirtyData = false;\n                });\n\n                // move tooltip or reset\n                if (pointer) {\n                    pointer.reset(true);\n                }\n\n                // redraw if canvas\n                renderer.draw();\n\n                // Fire the events\n                fireEvent(chart, 'redraw');\n                fireEvent(chart, 'render');\n\n                if (isHiddenChart) {\n                    chart.cloneRenderTo(true);\n                }\n\n                // Fire callbacks that are put on hold until after the redraw\n                each(afterRedraw, function(callback) {\n                    callback.call();\n                });\n            },\n\n            /**\n             * Get an axis, series or point object by id.\n             * @param id {String} The id as given in the configuration options\n             */\n            get: function(id) {\n\n                var ret,\n                    series = this.series,\n                    i;\n\n                function itemById(item) {\n                    return item.id === id || (item.options && item.options.id === id);\n                }\n\n                ret =\n                    // Search axes\n                    find(this.axes, itemById) ||\n\n                    // Search series\n                    find(this.series, itemById);\n\n                // Search points\n                for (i = 0; !ret && i < series.length; i++) {\n                    ret = find(series[i].points || [], itemById);\n                }\n\n                return ret;\n            },\n\n            /**\n             * Create the Axis instances based on the config options\n             */\n            getAxes: function() {\n                var chart = this,\n                    options = this.options,\n                    xAxisOptions = options.xAxis = splat(options.xAxis || {}),\n                    yAxisOptions = options.yAxis = splat(options.yAxis || {}),\n                    optionsArray;\n\n                // make sure the options are arrays and add some members\n                each(xAxisOptions, function(axis, i) {\n                    axis.index = i;\n                    axis.isX = true;\n                });\n\n                each(yAxisOptions, function(axis, i) {\n                    axis.index = i;\n                });\n\n                // concatenate all axis options into one array\n                optionsArray = xAxisOptions.concat(yAxisOptions);\n\n                each(optionsArray, function(axisOptions) {\n                    new Axis(chart, axisOptions); // eslint-disable-line no-new\n                });\n            },\n\n\n            /**\n             * Get the currently selected points from all series\n             */\n            getSelectedPoints: function() {\n                var points = [];\n                each(this.series, function(serie) {\n                    points = points.concat(grep(serie.points || [], function(point) {\n                        return point.selected;\n                    }));\n                });\n                return points;\n            },\n\n            /**\n             * Get the currently selected series\n             */\n            getSelectedSeries: function() {\n                return grep(this.series, function(serie) {\n                    return serie.selected;\n                });\n            },\n\n            /**\n             * Show the title and subtitle of the chart\n             *\n             * @param titleOptions {Object} New title options\n             * @param subtitleOptions {Object} New subtitle options\n             *\n             */\n            setTitle: function(titleOptions, subtitleOptions, redraw) {\n                var chart = this,\n                    options = chart.options,\n                    chartTitleOptions,\n                    chartSubtitleOptions;\n\n                chartTitleOptions = options.title = merge(\n\n                    // Default styles\n                    {\n                        style: {\n                            color: '#333333',\n                            fontSize: options.isStock ? '16px' : '18px' // #2944\n                        }\n                    },\n\n                    options.title,\n                    titleOptions\n                );\n                chartSubtitleOptions = options.subtitle = merge(\n\n                    // Default styles\n                    {\n                        style: {\n                            color: '#666666'\n                        }\n                    },\n\n                    options.subtitle,\n                    subtitleOptions\n                );\n\n                // add title and subtitle\n                each([\n                    ['title', titleOptions, chartTitleOptions],\n                    ['subtitle', subtitleOptions, chartSubtitleOptions]\n                ], function(arr, i) {\n                    var name = arr[0],\n                        title = chart[name],\n                        titleOptions = arr[1],\n                        chartTitleOptions = arr[2];\n\n                    if (title && titleOptions) {\n                        chart[name] = title = title.destroy(); // remove old\n                    }\n\n                    if (chartTitleOptions && chartTitleOptions.text && !title) {\n                        chart[name] = chart.renderer.text(\n                                chartTitleOptions.text,\n                                0,\n                                0,\n                                chartTitleOptions.useHTML\n                            )\n                            .attr({\n                                align: chartTitleOptions.align,\n                                'class': 'highcharts-' + name,\n                                zIndex: chartTitleOptions.zIndex || 4\n                            })\n                            .add();\n\n                        // Update methods, shortcut to Chart.setTitle\n                        chart[name].update = function(o) {\n                            chart.setTitle(!i && o, i && o);\n                        };\n\n\n                        // Presentational\n                        chart[name].css(chartTitleOptions.style);\n\n\n                    }\n                });\n                chart.layOutTitles(redraw);\n            },\n\n            /**\n             * Lay out the chart titles and cache the full offset height for use\n             * in getMargins\n             */\n            layOutTitles: function(redraw) {\n                var titleOffset = 0,\n                    requiresDirtyBox,\n                    renderer = this.renderer,\n                    spacingBox = this.spacingBox;\n\n                // Lay out the title and the subtitle respectively\n                each(['title', 'subtitle'], function(key) {\n                    var title = this[key],\n                        titleOptions = this.options[key],\n                        titleSize;\n\n                    if (title) {\n\n                        titleSize = titleOptions.style.fontSize;\n\n                        titleSize = renderer.fontMetrics(titleSize, title).b;\n\n                        title\n                            .css({\n                                width: (titleOptions.width ||\n                                    spacingBox.width + titleOptions.widthAdjust) + 'px'\n                            })\n                            .align(extend({\n                                y: titleOffset + titleSize + (key === 'title' ? -3 : 2)\n                            }, titleOptions), false, 'spacingBox');\n\n                        if (!titleOptions.floating && !titleOptions.verticalAlign) {\n                            titleOffset = Math.ceil(\n                                titleOffset +\n                                // Skip the cache for HTML (#3481)\n                                title.getBBox(titleOptions.useHTML).height\n                            );\n                        }\n                    }\n                }, this);\n\n                requiresDirtyBox = this.titleOffset !== titleOffset;\n                this.titleOffset = titleOffset; // used in getMargins\n\n                if (!this.isDirtyBox && requiresDirtyBox) {\n                    this.isDirtyBox = requiresDirtyBox;\n                    // Redraw if necessary (#2719, #2744)\n                    if (this.hasRendered && pick(redraw, true) && this.isDirtyBox) {\n                        this.redraw();\n                    }\n                }\n            },\n\n            /**\n             * Get chart width and height according to options and container size\n             */\n            getChartSize: function() {\n                var chart = this,\n                    optionsChart = chart.options.chart,\n                    widthOption = optionsChart.width,\n                    heightOption = optionsChart.height,\n                    renderTo = chart.renderToClone || chart.renderTo;\n\n                // Get inner width and height\n                if (!defined(widthOption)) {\n                    chart.containerWidth = getStyle(renderTo, 'width');\n                }\n                if (!defined(heightOption)) {\n                    chart.containerHeight = getStyle(renderTo, 'height');\n                }\n\n                chart.chartWidth = Math.max( // #1393\n                    0,\n                    widthOption || chart.containerWidth || 600 // #1460\n                );\n                chart.chartHeight = Math.max(\n                    0,\n                    H.relativeLength(\n                        heightOption,\n                        chart.chartWidth\n                    ) || chart.containerHeight || 400\n                );\n            },\n\n            /**\n             * Create a clone of the chart's renderTo div and place it outside the viewport to allow\n             * size computation on chart.render and chart.redraw\n             */\n            cloneRenderTo: function(revert) {\n                var clone = this.renderToClone,\n                    container = this.container;\n\n                // Destroy the clone and bring the container back to the real renderTo div\n                if (revert) {\n                    if (clone) {\n                        while (clone.childNodes.length) { // #5231\n                            this.renderTo.appendChild(clone.firstChild);\n                        }\n                        discardElement(clone);\n                        delete this.renderToClone;\n                    }\n\n                    // Set up the clone\n                } else {\n                    if (container && container.parentNode === this.renderTo) {\n                        this.renderTo.removeChild(container); // do not clone this\n                    }\n                    this.renderToClone = clone = this.renderTo.cloneNode(0);\n                    css(clone, {\n                        position: 'absolute',\n                        top: '-9999px',\n                        display: 'block' // #833\n                    });\n                    if (clone.style.setProperty) { // #2631\n                        clone.style.setProperty('display', 'block', 'important');\n                    }\n                    doc.body.appendChild(clone);\n                    if (container) {\n                        clone.appendChild(container);\n                    }\n                }\n            },\n\n            /**\n             * Setter for the chart class name\n             */\n            setClassName: function(className) {\n                this.container.className = 'highcharts-container ' + (className || '');\n            },\n\n            /**\n             * Get the containing element, determine the size and create the inner container\n             * div to hold the chart\n             */\n            getContainer: function() {\n                var chart = this,\n                    container,\n                    options = chart.options,\n                    optionsChart = options.chart,\n                    chartWidth,\n                    chartHeight,\n                    renderTo = chart.renderTo,\n                    indexAttrName = 'data-highcharts-chart',\n                    oldChartIndex,\n                    Ren,\n                    containerId = H.uniqueKey(),\n                    containerStyle,\n                    key;\n\n                if (!renderTo) {\n                    chart.renderTo = renderTo = optionsChart.renderTo;\n                }\n\n                if (isString(renderTo)) {\n                    chart.renderTo = renderTo = doc.getElementById(renderTo);\n                }\n\n                // Display an error if the renderTo is wrong\n                if (!renderTo) {\n                    H.error(13, true);\n                }\n\n                // If the container already holds a chart, destroy it. The check for hasRendered is there\n                // because web pages that are saved to disk from the browser, will preserve the data-highcharts-chart\n                // attribute and the SVG contents, but not an interactive chart. So in this case,\n                // charts[oldChartIndex] will point to the wrong chart if any (#2609).\n                oldChartIndex = pInt(attr(renderTo, indexAttrName));\n                if (isNumber(oldChartIndex) && charts[oldChartIndex] && charts[oldChartIndex].hasRendered) {\n                    charts[oldChartIndex].destroy();\n                }\n\n                // Make a reference to the chart from the div\n                attr(renderTo, indexAttrName, chart.index);\n\n                // remove previous chart\n                renderTo.innerHTML = '';\n\n                // If the container doesn't have an offsetWidth, it has or is a child of\n                // a node that has display:none. We need to temporarily move it out to a\n                // visible state to determine the size, else the legend and tooltips\n                // won't render properly. The skipClone option is used in sparklines as\n                // a micro optimization, saving about 1-2 ms each chart.\n                if (!optionsChart.skipClone && !renderTo.offsetWidth) {\n                    chart.cloneRenderTo();\n                }\n\n                // get the width and height\n                chart.getChartSize();\n                chartWidth = chart.chartWidth;\n                chartHeight = chart.chartHeight;\n\n                // Create the inner container\n\n                containerStyle = extend({\n                    position: 'relative',\n                    overflow: 'hidden', // needed for context menu (avoid scrollbars) and\n                    // content overflow in IE\n                    width: chartWidth + 'px',\n                    height: chartHeight + 'px',\n                    textAlign: 'left',\n                    lineHeight: 'normal', // #427\n                    zIndex: 0, // #1072\n                    '-webkit-tap-highlight-color': 'rgba(0,0,0,0)'\n                }, optionsChart.style);\n\n                chart.container = container = createElement(\n                    'div', {\n                        id: containerId\n                    },\n                    containerStyle,\n                    chart.renderToClone || renderTo\n                );\n\n                // cache the cursor (#1650)\n                chart._cursor = container.style.cursor;\n\n                // Initialize the renderer\n                Ren = H[optionsChart.renderer] || Renderer;\n                chart.renderer = new Ren(\n                    container,\n                    chartWidth,\n                    chartHeight,\n                    null,\n                    optionsChart.forExport,\n                    options.exporting && options.exporting.allowHTML\n                );\n\n\n                chart.setClassName(optionsChart.className);\n\n                chart.renderer.setStyle(optionsChart.style);\n\n\n                // Add a reference to the charts index\n                chart.renderer.chartIndex = chart.index;\n            },\n\n            /**\n             * Calculate margins by rendering axis labels in a preliminary position. Title,\n             * subtitle and legend have already been rendered at this stage, but will be\n             * moved into their final positions\n             */\n            getMargins: function(skipAxes) {\n                var chart = this,\n                    spacing = chart.spacing,\n                    margin = chart.margin,\n                    titleOffset = chart.titleOffset;\n\n                chart.resetMargins();\n\n                // Adjust for title and subtitle\n                if (titleOffset && !defined(margin[0])) {\n                    chart.plotTop = Math.max(chart.plotTop, titleOffset + chart.options.title.margin + spacing[0]);\n                }\n\n                // Adjust for legend\n                if (chart.legend.display) {\n                    chart.legend.adjustMargins(margin, spacing);\n                }\n\n                // adjust for scroller\n                if (chart.extraMargin) {\n                    chart[chart.extraMargin.type] = (chart[chart.extraMargin.type] || 0) + chart.extraMargin.value;\n                }\n                if (chart.extraTopMargin) {\n                    chart.plotTop += chart.extraTopMargin;\n                }\n                if (!skipAxes) {\n                    this.getAxisMargins();\n                }\n            },\n\n            getAxisMargins: function() {\n\n                var chart = this,\n                    axisOffset = chart.axisOffset = [0, 0, 0, 0], // top, right, bottom, left\n                    margin = chart.margin;\n\n                // pre-render axes to get labels offset width\n                if (chart.hasCartesianSeries) {\n                    each(chart.axes, function(axis) {\n                        if (axis.visible) {\n                            axis.getOffset();\n                        }\n                    });\n                }\n\n                // Add the axis offsets\n                each(marginNames, function(m, side) {\n                    if (!defined(margin[side])) {\n                        chart[m] += axisOffset[side];\n                    }\n                });\n\n                chart.setChartSize();\n\n            },\n\n            /**\n             * Resize the chart to its container if size is not explicitly set\n             */\n            reflow: function(e) {\n                var chart = this,\n                    optionsChart = chart.options.chart,\n                    renderTo = chart.renderTo,\n                    hasUserWidth = defined(optionsChart.width),\n                    width = optionsChart.width || getStyle(renderTo, 'width'),\n                    height = optionsChart.height || getStyle(renderTo, 'height'),\n                    target = e ? e.target : win;\n\n                // Width and height checks for display:none. Target is doc in IE8 and Opera,\n                // win in Firefox, Chrome and IE9.\n                if (!hasUserWidth && !chart.isPrinting && width && height && (target === win || target === doc)) { // #1093\n                    if (width !== chart.containerWidth || height !== chart.containerHeight) {\n                        clearTimeout(chart.reflowTimeout);\n                        // When called from window.resize, e is set, else it's called directly (#2224)\n                        chart.reflowTimeout = syncTimeout(function() {\n                            if (chart.container) { // It may have been destroyed in the meantime (#1257)\n                                chart.setSize(undefined, undefined, false);\n                            }\n                        }, e ? 100 : 0);\n                    }\n                    chart.containerWidth = width;\n                    chart.containerHeight = height;\n                }\n            },\n\n            /**\n             * Add the event handlers necessary for auto resizing\n             */\n            initReflow: function() {\n                var chart = this,\n                    unbind;\n\n                unbind = addEvent(win, 'resize', function(e) {\n                    chart.reflow(e);\n                });\n                addEvent(chart, 'destroy', unbind);\n\n                // The following will add listeners to re-fit the chart before and after\n                // printing (#2284). However it only works in WebKit. Should have worked\n                // in Firefox, but not supported in IE.\n                /*\n                if (win.matchMedia) {\n                \twin.matchMedia('print').addListener(function reflow() {\n                \t\tchart.reflow();\n                \t});\n                }\n                */\n            },\n\n            /**\n             * Resize the chart to a given width and height\n             * @param {Number} width\n             * @param {Number} height\n             * @param {Object|Boolean} animation\n             */\n            setSize: function(width, height, animation) {\n                var chart = this,\n                    renderer = chart.renderer,\n                    globalAnimation;\n\n                // Handle the isResizing counter\n                chart.isResizing += 1;\n\n                // set the animation for the current process\n                H.setAnimation(animation, chart);\n\n                chart.oldChartHeight = chart.chartHeight;\n                chart.oldChartWidth = chart.chartWidth;\n                if (width !== undefined) {\n                    chart.options.chart.width = width;\n                }\n                if (height !== undefined) {\n                    chart.options.chart.height = height;\n                }\n                chart.getChartSize();\n\n                // Resize the container with the global animation applied if enabled (#2503)\n\n                globalAnimation = renderer.globalAnimation;\n                (globalAnimation ? animate : css)(chart.container, {\n                    width: chart.chartWidth + 'px',\n                    height: chart.chartHeight + 'px'\n                }, globalAnimation);\n\n\n                chart.setChartSize(true);\n                renderer.setSize(chart.chartWidth, chart.chartHeight, animation);\n\n                // handle axes\n                each(chart.axes, function(axis) {\n                    axis.isDirty = true;\n                    axis.setScale();\n                });\n\n                chart.isDirtyLegend = true; // force legend redraw\n                chart.isDirtyBox = true; // force redraw of plot and chart border\n\n                chart.layOutTitles(); // #2857\n                chart.getMargins();\n\n                chart.redraw(animation);\n\n\n                chart.oldChartHeight = null;\n                fireEvent(chart, 'resize');\n\n                // Fire endResize and set isResizing back. If animation is disabled, fire without delay\n                syncTimeout(function() {\n                    if (chart) {\n                        fireEvent(chart, 'endResize', null, function() {\n                            chart.isResizing -= 1;\n                        });\n                    }\n                }, animObject(globalAnimation).duration);\n            },\n\n            /**\n             * Set the public chart properties. This is done before and after the pre-render\n             * to determine margin sizes\n             */\n            setChartSize: function(skipAxes) {\n                var chart = this,\n                    inverted = chart.inverted,\n                    renderer = chart.renderer,\n                    chartWidth = chart.chartWidth,\n                    chartHeight = chart.chartHeight,\n                    optionsChart = chart.options.chart,\n                    spacing = chart.spacing,\n                    clipOffset = chart.clipOffset,\n                    clipX,\n                    clipY,\n                    plotLeft,\n                    plotTop,\n                    plotWidth,\n                    plotHeight,\n                    plotBorderWidth;\n\n                chart.plotLeft = plotLeft = Math.round(chart.plotLeft);\n                chart.plotTop = plotTop = Math.round(chart.plotTop);\n                chart.plotWidth = plotWidth = Math.max(0, Math.round(chartWidth - plotLeft - chart.marginRight));\n                chart.plotHeight = plotHeight = Math.max(0, Math.round(chartHeight - plotTop - chart.marginBottom));\n\n                chart.plotSizeX = inverted ? plotHeight : plotWidth;\n                chart.plotSizeY = inverted ? plotWidth : plotHeight;\n\n                chart.plotBorderWidth = optionsChart.plotBorderWidth || 0;\n\n                // Set boxes used for alignment\n                chart.spacingBox = renderer.spacingBox = {\n                    x: spacing[3],\n                    y: spacing[0],\n                    width: chartWidth - spacing[3] - spacing[1],\n                    height: chartHeight - spacing[0] - spacing[2]\n                };\n                chart.plotBox = renderer.plotBox = {\n                    x: plotLeft,\n                    y: plotTop,\n                    width: plotWidth,\n                    height: plotHeight\n                };\n\n                plotBorderWidth = 2 * Math.floor(chart.plotBorderWidth / 2);\n                clipX = Math.ceil(Math.max(plotBorderWidth, clipOffset[3]) / 2);\n                clipY = Math.ceil(Math.max(plotBorderWidth, clipOffset[0]) / 2);\n                chart.clipBox = {\n                    x: clipX,\n                    y: clipY,\n                    width: Math.floor(chart.plotSizeX - Math.max(plotBorderWidth, clipOffset[1]) / 2 - clipX),\n                    height: Math.max(0, Math.floor(chart.plotSizeY - Math.max(plotBorderWidth, clipOffset[2]) / 2 - clipY))\n                };\n\n                if (!skipAxes) {\n                    each(chart.axes, function(axis) {\n                        axis.setAxisSize();\n                        axis.setAxisTranslation();\n                    });\n                }\n            },\n\n            /**\n             * Initial margins before auto size margins are applied\n             */\n            resetMargins: function() {\n                var chart = this,\n                    chartOptions = chart.options.chart;\n\n                // Create margin and spacing array\n                each(['margin', 'spacing'], function splashArrays(target) {\n                    var value = chartOptions[target],\n                        values = isObject(value) ? value : [value, value, value, value];\n\n                    each(['Top', 'Right', 'Bottom', 'Left'], function(sideName, side) {\n                        chart[target][side] = pick(chartOptions[target + sideName], values[side]);\n                    });\n                });\n\n                // Set margin names like chart.plotTop, chart.plotLeft, chart.marginRight, chart.marginBottom.\n                each(marginNames, function(m, side) {\n                    chart[m] = pick(chart.margin[side], chart.spacing[side]);\n                });\n                chart.axisOffset = [0, 0, 0, 0]; // top, right, bottom, left\n                chart.clipOffset = [0, 0, 0, 0];\n            },\n\n            /**\n             * Draw the borders and backgrounds for chart and plot area\n             */\n            drawChartBox: function() {\n                var chart = this,\n                    optionsChart = chart.options.chart,\n                    renderer = chart.renderer,\n                    chartWidth = chart.chartWidth,\n                    chartHeight = chart.chartHeight,\n                    chartBackground = chart.chartBackground,\n                    plotBackground = chart.plotBackground,\n                    plotBorder = chart.plotBorder,\n                    chartBorderWidth,\n\n                    plotBGImage = chart.plotBGImage,\n                    chartBackgroundColor = optionsChart.backgroundColor,\n                    plotBackgroundColor = optionsChart.plotBackgroundColor,\n                    plotBackgroundImage = optionsChart.plotBackgroundImage,\n\n                    mgn,\n                    bgAttr,\n                    plotLeft = chart.plotLeft,\n                    plotTop = chart.plotTop,\n                    plotWidth = chart.plotWidth,\n                    plotHeight = chart.plotHeight,\n                    plotBox = chart.plotBox,\n                    clipRect = chart.clipRect,\n                    clipBox = chart.clipBox,\n                    verb = 'animate';\n\n                // Chart area\n                if (!chartBackground) {\n                    chart.chartBackground = chartBackground = renderer.rect()\n                        .addClass('highcharts-background')\n                        .add();\n                    verb = 'attr';\n                }\n\n\n                // Presentational\n                chartBorderWidth = optionsChart.borderWidth || 0;\n                mgn = chartBorderWidth + (optionsChart.shadow ? 8 : 0);\n\n                bgAttr = {\n                    fill: chartBackgroundColor || 'none'\n                };\n\n                if (chartBorderWidth || chartBackground['stroke-width']) { // #980\n                    bgAttr.stroke = optionsChart.borderColor;\n                    bgAttr['stroke-width'] = chartBorderWidth;\n                }\n                chartBackground\n                    .attr(bgAttr)\n                    .shadow(optionsChart.shadow);\n\n                chartBackground[verb]({\n                    x: mgn / 2,\n                    y: mgn / 2,\n                    width: chartWidth - mgn - chartBorderWidth % 2,\n                    height: chartHeight - mgn - chartBorderWidth % 2,\n                    r: optionsChart.borderRadius\n                });\n\n                // Plot background\n                verb = 'animate';\n                if (!plotBackground) {\n                    verb = 'attr';\n                    chart.plotBackground = plotBackground = renderer.rect()\n                        .addClass('highcharts-plot-background')\n                        .add();\n                }\n                plotBackground[verb](plotBox);\n\n\n                // Presentational attributes for the background\n                plotBackground\n                    .attr({\n                        fill: plotBackgroundColor || 'none'\n                    })\n                    .shadow(optionsChart.plotShadow);\n\n                // Create the background image\n                if (plotBackgroundImage) {\n                    if (!plotBGImage) {\n                        chart.plotBGImage = renderer.image(plotBackgroundImage, plotLeft, plotTop, plotWidth, plotHeight)\n                            .add();\n                    } else {\n                        plotBGImage.animate(plotBox);\n                    }\n                }\n\n\n                // Plot clip\n                if (!clipRect) {\n                    chart.clipRect = renderer.clipRect(clipBox);\n                } else {\n                    clipRect.animate({\n                        width: clipBox.width,\n                        height: clipBox.height\n                    });\n                }\n\n                // Plot area border\n                verb = 'animate';\n                if (!plotBorder) {\n                    verb = 'attr';\n                    chart.plotBorder = plotBorder = renderer.rect()\n                        .addClass('highcharts-plot-border')\n                        .attr({\n                            zIndex: 1 // Above the grid\n                        })\n                        .add();\n                }\n\n\n                // Presentational\n                plotBorder.attr({\n                    stroke: optionsChart.plotBorderColor,\n                    'stroke-width': optionsChart.plotBorderWidth || 0,\n                    fill: 'none'\n                });\n\n\n                plotBorder[verb](plotBorder.crisp({\n                    x: plotLeft,\n                    y: plotTop,\n                    width: plotWidth,\n                    height: plotHeight\n                }, -plotBorder.strokeWidth())); //#3282 plotBorder should be negative;\n\n                // reset\n                chart.isDirtyBox = false;\n            },\n\n            /**\n             * Detect whether a certain chart property is needed based on inspecting its options\n             * and series. This mainly applies to the chart.inverted property, and in extensions to\n             * the chart.angular and chart.polar properties.\n             */\n            propFromSeries: function() {\n                var chart = this,\n                    optionsChart = chart.options.chart,\n                    klass,\n                    seriesOptions = chart.options.series,\n                    i,\n                    value;\n\n\n                each(['inverted', 'angular', 'polar'], function(key) {\n\n                    // The default series type's class\n                    klass = seriesTypes[optionsChart.type || optionsChart.defaultSeriesType];\n\n                    // Get the value from available chart-wide properties\n                    value =\n                        optionsChart[key] || // It is set in the options\n                        (klass && klass.prototype[key]); // The default series class requires it\n\n                    // 4. Check if any the chart's series require it\n                    i = seriesOptions && seriesOptions.length;\n                    while (!value && i--) {\n                        klass = seriesTypes[seriesOptions[i].type];\n                        if (klass && klass.prototype[key]) {\n                            value = true;\n                        }\n                    }\n\n                    // Set the chart property\n                    chart[key] = value;\n                });\n\n            },\n\n            /**\n             * Link two or more series together. This is done initially from Chart.render,\n             * and after Chart.addSeries and Series.remove.\n             */\n            linkSeries: function() {\n                var chart = this,\n                    chartSeries = chart.series;\n\n                // Reset links\n                each(chartSeries, function(series) {\n                    series.linkedSeries.length = 0;\n                });\n\n                // Apply new links\n                each(chartSeries, function(series) {\n                    var linkedTo = series.options.linkedTo;\n                    if (isString(linkedTo)) {\n                        if (linkedTo === ':previous') {\n                            linkedTo = chart.series[series.index - 1];\n                        } else {\n                            linkedTo = chart.get(linkedTo);\n                        }\n                        if (linkedTo && linkedTo.linkedParent !== series) { // #3341 avoid mutual linking\n                            linkedTo.linkedSeries.push(series);\n                            series.linkedParent = linkedTo;\n                            series.visible = pick(series.options.visible, linkedTo.options.visible, series.visible); // #3879\n                        }\n                    }\n                });\n            },\n\n            /**\n             * Render series for the chart\n             */\n            renderSeries: function() {\n                each(this.series, function(serie) {\n                    serie.translate();\n                    serie.render();\n                });\n            },\n\n            /**\n             * Render labels for the chart\n             */\n            renderLabels: function() {\n                var chart = this,\n                    labels = chart.options.labels;\n                if (labels.items) {\n                    each(labels.items, function(label) {\n                        var style = extend(labels.style, label.style),\n                            x = pInt(style.left) + chart.plotLeft,\n                            y = pInt(style.top) + chart.plotTop + 12;\n\n                        // delete to prevent rewriting in IE\n                        delete style.left;\n                        delete style.top;\n\n                        chart.renderer.text(\n                                label.html,\n                                x,\n                                y\n                            )\n                            .attr({\n                                zIndex: 2\n                            })\n                            .css(style)\n                            .add();\n\n                    });\n                }\n            },\n\n            /**\n             * Render all graphics for the chart\n             */\n            render: function() {\n                var chart = this,\n                    axes = chart.axes,\n                    renderer = chart.renderer,\n                    options = chart.options,\n                    tempWidth,\n                    tempHeight,\n                    redoHorizontal,\n                    redoVertical;\n\n                // Title\n                chart.setTitle();\n\n\n                // Legend\n                chart.legend = new Legend(chart, options.legend);\n\n                // Get stacks\n                if (chart.getStacks) {\n                    chart.getStacks();\n                }\n\n                // Get chart margins\n                chart.getMargins(true);\n                chart.setChartSize();\n\n                // Record preliminary dimensions for later comparison\n                tempWidth = chart.plotWidth;\n                tempHeight = chart.plotHeight = chart.plotHeight - 21; // 21 is the most common correction for X axis labels\n\n                // Get margins by pre-rendering axes\n                each(axes, function(axis) {\n                    axis.setScale();\n                });\n                chart.getAxisMargins();\n\n                // If the plot area size has changed significantly, calculate tick positions again\n                redoHorizontal = tempWidth / chart.plotWidth > 1.1;\n                redoVertical = tempHeight / chart.plotHeight > 1.05; // Height is more sensitive\n\n                if (redoHorizontal || redoVertical) {\n\n                    each(axes, function(axis) {\n                        if ((axis.horiz && redoHorizontal) || (!axis.horiz && redoVertical)) {\n                            axis.setTickInterval(true); // update to reflect the new margins\n                        }\n                    });\n                    chart.getMargins(); // second pass to check for new labels\n                }\n\n                // Draw the borders and backgrounds\n                chart.drawChartBox();\n\n\n                // Axes\n                if (chart.hasCartesianSeries) {\n                    each(axes, function(axis) {\n                        if (axis.visible) {\n                            axis.render();\n                        }\n                    });\n                }\n\n                // The series\n                if (!chart.seriesGroup) {\n                    chart.seriesGroup = renderer.g('series-group')\n                        .attr({\n                            zIndex: 3\n                        })\n                        .add();\n                }\n                chart.renderSeries();\n\n                // Labels\n                chart.renderLabels();\n\n                // Credits\n                chart.addCredits();\n\n                // Handle responsiveness\n                if (chart.setResponsive) {\n                    chart.setResponsive();\n                }\n\n                // Set flag\n                chart.hasRendered = true;\n\n            },\n\n            /**\n             * Show chart credits based on config options\n             */\n            addCredits: function(credits) {\n                var chart = this;\n\n                credits = merge(true, this.options.credits, credits);\n                if (credits.enabled && !this.credits) {\n                    this.credits = this.renderer.text(\n                            credits.text + (this.mapCredits || ''),\n                            0,\n                            0\n                        )\n                        .addClass('highcharts-credits')\n                        .on('click', function() {\n                            if (credits.href) {\n                                win.location.href = credits.href;\n                            }\n                        })\n                        .attr({\n                            align: credits.position.align,\n                            zIndex: 8\n                        })\n\n                        .css(credits.style)\n\n                        .add()\n                        .align(credits.position);\n\n                    // Dynamically update\n                    this.credits.update = function(options) {\n                        chart.credits = chart.credits.destroy();\n                        chart.addCredits(options);\n                    };\n                }\n            },\n\n            /**\n             * Clean up memory usage\n             */\n            destroy: function() {\n                var chart = this,\n                    axes = chart.axes,\n                    series = chart.series,\n                    container = chart.container,\n                    i,\n                    parentNode = container && container.parentNode;\n\n                // fire the chart.destoy event\n                fireEvent(chart, 'destroy');\n\n                // Delete the chart from charts lookup array\n                charts[chart.index] = undefined;\n                H.chartCount--;\n                chart.renderTo.removeAttribute('data-highcharts-chart');\n\n                // remove events\n                removeEvent(chart);\n\n                // ==== Destroy collections:\n                // Destroy axes\n                i = axes.length;\n                while (i--) {\n                    axes[i] = axes[i].destroy();\n                }\n\n                // Destroy scroller & scroller series before destroying base series\n                if (this.scroller && this.scroller.destroy) {\n                    this.scroller.destroy();\n                }\n\n                // Destroy each series\n                i = series.length;\n                while (i--) {\n                    series[i] = series[i].destroy();\n                }\n\n                // ==== Destroy chart properties:\n                each([\n                    'title', 'subtitle', 'chartBackground', 'plotBackground',\n                    'plotBGImage', 'plotBorder', 'seriesGroup', 'clipRect', 'credits',\n                    'pointer', 'rangeSelector', 'legend', 'resetZoomButton', 'tooltip',\n                    'renderer'\n                ], function(name) {\n                    var prop = chart[name];\n\n                    if (prop && prop.destroy) {\n                        chart[name] = prop.destroy();\n                    }\n                });\n\n                // remove container and all SVG\n                if (container) { // can break in IE when destroyed before finished loading\n                    container.innerHTML = '';\n                    removeEvent(container);\n                    if (parentNode) {\n                        discardElement(container);\n                    }\n\n                }\n\n                // clean it all up\n                for (i in chart) {\n                    delete chart[i];\n                }\n\n            },\n\n\n            /**\n             * VML namespaces can't be added until after complete. Listening\n             * for Perini's doScroll hack is not enough.\n             */\n            isReadyToRender: function() {\n                var chart = this;\n\n                // Note: win == win.top is required\n                if ((!svg && (win == win.top && doc.readyState !== 'complete'))) { // eslint-disable-line eqeqeq\n                    doc.attachEvent('onreadystatechange', function() {\n                        doc.detachEvent('onreadystatechange', chart.firstRender);\n                        if (doc.readyState === 'complete') {\n                            chart.firstRender();\n                        }\n                    });\n                    return false;\n                }\n                return true;\n            },\n\n            /**\n             * Prepare for first rendering after all data are loaded\n             */\n            firstRender: function() {\n                var chart = this,\n                    options = chart.options;\n\n                // Check whether the chart is ready to render\n                if (!chart.isReadyToRender()) {\n                    return;\n                }\n\n                // Create the container\n                chart.getContainer();\n\n                // Run an early event after the container and renderer are established\n                fireEvent(chart, 'init');\n\n\n                chart.resetMargins();\n                chart.setChartSize();\n\n                // Set the common chart properties (mainly invert) from the given series\n                chart.propFromSeries();\n\n                // get axes\n                chart.getAxes();\n\n                // Initialize the series\n                each(options.series || [], function(serieOptions) {\n                    chart.initSeries(serieOptions);\n                });\n\n                chart.linkSeries();\n\n                // Run an event after axes and series are initialized, but before render. At this stage,\n                // the series data is indexed and cached in the xData and yData arrays, so we can access\n                // those before rendering. Used in Highstock.\n                fireEvent(chart, 'beforeRender');\n\n                // depends on inverted and on margins being set\n                if (Pointer) {\n                    chart.pointer = new Pointer(chart, options);\n                }\n\n                chart.render();\n\n                // Fire the load event if there are no external images\n                if (!chart.renderer.imgCount && chart.onload) {\n                    chart.onload();\n                }\n\n                // If the chart was rendered outside the top container, put it back in (#3679)\n                chart.cloneRenderTo(true);\n\n            },\n\n            /** \n             * On chart load\n             */\n            onload: function() {\n\n                // Run callbacks\n                each([this.callback].concat(this.callbacks), function(fn) {\n                    if (fn && this.index !== undefined) { // Chart destroyed in its own callback (#3600)\n                        fn.apply(this, [this]);\n                    }\n                }, this);\n\n                fireEvent(this, 'load');\n                fireEvent(this, 'render');\n\n\n                // Set up auto resize, check for not destroyed (#6068)\n                if (defined(this.index) && this.options.chart.reflow !== false) {\n                    this.initReflow();\n                }\n\n                // Don't run again\n                this.onload = null;\n            }\n\n        }; // end Chart\n\n    }(Highcharts));\n    (function(H) {\n        /**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */\n        var Point,\n\n            each = H.each,\n            extend = H.extend,\n            erase = H.erase,\n            fireEvent = H.fireEvent,\n            format = H.format,\n            isArray = H.isArray,\n            isNumber = H.isNumber,\n            pick = H.pick,\n            removeEvent = H.removeEvent;\n\n        /**\n         * The Point object. The point objects are generated from the series.data \n         * configuration objects or raw numbers. They can be accessed from the\n         * Series.points array.\n         * @constructor Point\n         */\n        Point = H.Point = function() {};\n        Point.prototype = {\n\n            /**\n             * Initialize the point. Called internally based on the series.data option.\n             * @function #init\n             * @memberOf Point\n             * @param {Object} series The series object containing this point.\n             * @param {Object} options The data in either number, array or object\n             *        format.\n             * @param {Number} x Optionally, the X value of the.\n             * @returns {Object} The Point instance.\n             */\n            init: function(series, options, x) {\n\n                var point = this,\n                    colors,\n                    colorCount = series.chart.options.chart.colorCount,\n                    colorIndex;\n\n                point.series = series;\n\n                point.color = series.color; // #3445\n\n                point.applyOptions(options, x);\n\n                if (series.options.colorByPoint) {\n\n                    colors = series.options.colors || series.chart.options.colors;\n                    point.color = point.color || colors[series.colorCounter];\n                    colorCount = colors.length;\n\n                    colorIndex = series.colorCounter;\n                    series.colorCounter++;\n                    // loop back to zero\n                    if (series.colorCounter === colorCount) {\n                        series.colorCounter = 0;\n                    }\n                } else {\n                    colorIndex = series.colorIndex;\n                }\n                point.colorIndex = pick(point.colorIndex, colorIndex);\n\n                series.chart.pointCount++;\n                return point;\n            },\n            /**\n             * Apply the options containing the x and y data and possible some extra\n             * properties. Called on point init or from point.update.\n             *\n             * @function #applyOptions\n             * @memberOf Point\n             * @param {Object} options The point options as defined in series.data.\n             * @param {Number} x Optionally, the X value.\n             * @returns {Object} The Point instance.\n             */\n            applyOptions: function(options, x) {\n                var point = this,\n                    series = point.series,\n                    pointValKey = series.options.pointValKey || series.pointValKey;\n\n                options = Point.prototype.optionsToObject.call(this, options);\n\n                // copy options directly to point\n                extend(point, options);\n                point.options = point.options ? extend(point.options, options) : options;\n\n                // Since options are copied into the Point instance, some accidental options must be shielded (#5681)\n                if (options.group) {\n                    delete point.group;\n                }\n\n                // For higher dimension series types. For instance, for ranges, point.y is mapped to point.low.\n                if (pointValKey) {\n                    point.y = point[pointValKey];\n                }\n                point.isNull = pick(\n                    point.isValid && !point.isValid(),\n                    point.x === null || !isNumber(point.y, true)\n                ); // #3571, check for NaN\n\n                // The point is initially selected by options (#5777)\n                if (point.selected) {\n                    point.state = 'select';\n                }\n\n                // If no x is set by now, get auto incremented value. All points must have an\n                // x value, however the y value can be null to create a gap in the series\n                if ('name' in point && x === undefined && series.xAxis && series.xAxis.hasNames) {\n                    point.x = series.xAxis.nameToX(point);\n                }\n                if (point.x === undefined && series) {\n                    if (x === undefined) {\n                        point.x = series.autoIncrement(point);\n                    } else {\n                        point.x = x;\n                    }\n                }\n\n                return point;\n            },\n\n            /**\n             * Transform number or array configs into objects\n             */\n            optionsToObject: function(options) {\n                var ret = {},\n                    series = this.series,\n                    keys = series.options.keys,\n                    pointArrayMap = keys || series.pointArrayMap || ['y'],\n                    valueCount = pointArrayMap.length,\n                    firstItemType,\n                    i = 0,\n                    j = 0;\n\n                if (isNumber(options) || options === null) {\n                    ret[pointArrayMap[0]] = options;\n\n                } else if (isArray(options)) {\n                    // with leading x value\n                    if (!keys && options.length > valueCount) {\n                        firstItemType = typeof options[0];\n                        if (firstItemType === 'string') {\n                            ret.name = options[0];\n                        } else if (firstItemType === 'number') {\n                            ret.x = options[0];\n                        }\n                        i++;\n                    }\n                    while (j < valueCount) {\n                        if (!keys || options[i] !== undefined) { // Skip undefined positions for keys\n                            ret[pointArrayMap[j]] = options[i];\n                        }\n                        i++;\n                        j++;\n                    }\n                } else if (typeof options === 'object') {\n                    ret = options;\n\n                    // This is the fastest way to detect if there are individual point dataLabels that need\n                    // to be considered in drawDataLabels. These can only occur in object configs.\n                    if (options.dataLabels) {\n                        series._hasPointLabels = true;\n                    }\n\n                    // Same approach as above for markers\n                    if (options.marker) {\n                        series._hasPointMarkers = true;\n                    }\n                }\n                return ret;\n            },\n\n            /**\n             * Get the CSS class names for individual points\n             * @returns {String} The class name\n             */\n            getClassName: function() {\n                return 'highcharts-point' +\n                    (this.selected ? ' highcharts-point-select' : '') +\n                    (this.negative ? ' highcharts-negative' : '') +\n                    (this.isNull ? ' highcharts-null-point' : '') +\n                    (this.colorIndex !== undefined ? ' highcharts-color-' +\n                        this.colorIndex : '') +\n                    (this.options.className ? ' ' + this.options.className : '') +\n                    (this.zone && this.zone.className ? ' ' +\n                        this.zone.className.replace('highcharts-negative', '') : '');\n            },\n\n            /**\n             * Return the zone that the point belongs to\n             */\n            getZone: function() {\n                var series = this.series,\n                    zones = series.zones,\n                    zoneAxis = series.zoneAxis || 'y',\n                    i = 0,\n                    zone;\n\n                zone = zones[i];\n                while (this[zoneAxis] >= zone.value) {\n                    zone = zones[++i];\n                }\n\n                if (zone && zone.color && !this.options.color) {\n                    this.color = zone.color;\n                }\n\n                return zone;\n            },\n\n            /**\n             * Destroy a point to clear memory. Its reference still stays in series.data.\n             */\n            destroy: function() {\n                var point = this,\n                    series = point.series,\n                    chart = series.chart,\n                    hoverPoints = chart.hoverPoints,\n                    prop;\n\n                chart.pointCount--;\n\n                if (hoverPoints) {\n                    point.setState();\n                    erase(hoverPoints, point);\n                    if (!hoverPoints.length) {\n                        chart.hoverPoints = null;\n                    }\n\n                }\n                if (point === chart.hoverPoint) {\n                    point.onMouseOut();\n                }\n\n                // remove all events\n                if (point.graphic || point.dataLabel) { // removeEvent and destroyElements are performance expensive\n                    removeEvent(point);\n                    point.destroyElements();\n                }\n\n                if (point.legendItem) { // pies have legend items\n                    chart.legend.destroyItem(point);\n                }\n\n                for (prop in point) {\n                    point[prop] = null;\n                }\n\n\n            },\n\n            /**\n             * Destroy SVG elements associated with the point\n             */\n            destroyElements: function() {\n                var point = this,\n                    props = ['graphic', 'dataLabel', 'dataLabelUpper', 'connector', 'shadowGroup'],\n                    prop,\n                    i = 6;\n                while (i--) {\n                    prop = props[i];\n                    if (point[prop]) {\n                        point[prop] = point[prop].destroy();\n                    }\n                }\n            },\n\n            /**\n             * Return the configuration hash needed for the data label and tooltip formatters\n             */\n            getLabelConfig: function() {\n                return {\n                    x: this.category,\n                    y: this.y,\n                    color: this.color,\n                    colorIndex: this.colorIndex,\n                    key: this.name || this.category,\n                    series: this.series,\n                    point: this,\n                    percentage: this.percentage,\n                    total: this.total || this.stackTotal\n                };\n            },\n\n            /**\n             * Extendable method for formatting each point's tooltip line\n             *\n             * @return {String} A string to be concatenated in to the common tooltip text\n             */\n            tooltipFormatter: function(pointFormat) {\n\n                // Insert options for valueDecimals, valuePrefix, and valueSuffix\n                var series = this.series,\n                    seriesTooltipOptions = series.tooltipOptions,\n                    valueDecimals = pick(seriesTooltipOptions.valueDecimals, ''),\n                    valuePrefix = seriesTooltipOptions.valuePrefix || '',\n                    valueSuffix = seriesTooltipOptions.valueSuffix || '';\n\n                // Loop over the point array map and replace unformatted values with sprintf formatting markup\n                each(series.pointArrayMap || ['y'], function(key) {\n                    key = '{point.' + key; // without the closing bracket\n                    if (valuePrefix || valueSuffix) {\n                        pointFormat = pointFormat.replace(key + '}', valuePrefix + key + '}' + valueSuffix);\n                    }\n                    pointFormat = pointFormat.replace(key + '}', key + ':,.' + valueDecimals + 'f}');\n                });\n\n                return format(pointFormat, {\n                    point: this,\n                    series: this.series\n                });\n            },\n\n            /**\n             * Fire an event on the Point object.\n             * @param {String} eventType\n             * @param {Object} eventArgs Additional event arguments\n             * @param {Function} defaultFunction Default event handler\n             */\n            firePointEvent: function(eventType, eventArgs, defaultFunction) {\n                var point = this,\n                    series = this.series,\n                    seriesOptions = series.options;\n\n                // load event handlers on demand to save time on mouseover/out\n                if (seriesOptions.point.events[eventType] || (point.options && point.options.events && point.options.events[eventType])) {\n                    this.importEvents();\n                }\n\n                // add default handler if in selection mode\n                if (eventType === 'click' && seriesOptions.allowPointSelect) {\n                    defaultFunction = function(event) {\n                        // Control key is for Windows, meta (= Cmd key) for Mac, Shift for Opera\n                        if (point.select) { // Could be destroyed by prior event handlers (#2911)\n                            point.select(null, event.ctrlKey || event.metaKey || event.shiftKey);\n                        }\n                    };\n                }\n\n                fireEvent(this, eventType, eventArgs, defaultFunction);\n            },\n            visible: true\n        };\n\n    }(Highcharts));\n    (function(H) {\n        /**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */\n        var addEvent = H.addEvent,\n            animObject = H.animObject,\n            arrayMax = H.arrayMax,\n            arrayMin = H.arrayMin,\n            correctFloat = H.correctFloat,\n            Date = H.Date,\n            defaultOptions = H.defaultOptions,\n            defaultPlotOptions = H.defaultPlotOptions,\n            defined = H.defined,\n            each = H.each,\n            erase = H.erase,\n            extend = H.extend,\n            fireEvent = H.fireEvent,\n            grep = H.grep,\n            isArray = H.isArray,\n            isNumber = H.isNumber,\n            isString = H.isString,\n            LegendSymbolMixin = H.LegendSymbolMixin, // @todo add as a requirement\n            merge = H.merge,\n            pick = H.pick,\n            Point = H.Point, // @todo  add as a requirement\n            removeEvent = H.removeEvent,\n            splat = H.splat,\n            SVGElement = H.SVGElement,\n            syncTimeout = H.syncTimeout,\n            win = H.win;\n\n        /**\n         * The base function which all other series types inherit from. The data in the series is stored\n         * in various arrays.\n         *\n         * - First, series.options.data contains all the original config options for\n         * each point whether added by options or methods like series.addPoint.\n         * - Next, series.data contains those values converted to points, but in case the series data length\n         * exceeds the cropThreshold, or if the data is grouped, series.data doesn't contain all the points. It\n         * only contains the points that have been created on demand.\n         * - Then there's series.points that contains all currently visible point objects. In case of cropping,\n         * the cropped-away points are not part of this array. The series.points array starts at series.cropStart\n         * compared to series.data and series.options.data. If however the series data is grouped, these can't\n         * be correlated one to one.\n         * - series.xData and series.processedXData contain clean x values, equivalent to series.data and series.points.\n         * - series.yData and series.processedYData contain clean y values, equivalent to series.data and series.points.\n         *\n         * @constructor Series\n         * @param {Object} chart - The chart instance.\n         * @param {Object} options - The series options.\n         */\n        H.Series = H.seriesType('line', null, { // base series options\n\n            //cursor: 'default',\n            //dashStyle: null,\n            //linecap: 'round',\n            lineWidth: 2,\n            //shadow: false,\n\n            allowPointSelect: false,\n            showCheckbox: false,\n            animation: {\n                duration: 1000\n            },\n            //clip: true,\n            //connectNulls: false,\n            //enableMouseTracking: true,\n            events: {},\n            //legendIndex: 0,\n            // stacking: null,\n            marker: {\n\n                lineWidth: 0,\n                lineColor: '#ffffff',\n                //fillColor: null,\n\n                //enabled: true,\n                //symbol: null,\n                radius: 4,\n                states: { // states for a single point\n                    hover: {\n                        animation: {\n                            duration: 50\n                        },\n                        enabled: true,\n                        radiusPlus: 2,\n\n                        lineWidthPlus: 1\n\n                    },\n\n                    select: {\n                        fillColor: '#cccccc',\n                        lineColor: '#000000',\n                        lineWidth: 2\n                    }\n\n                }\n            },\n            point: {\n                events: {}\n            },\n            dataLabels: {\n                align: 'center',\n                // defer: true,\n                // enabled: false,\n                formatter: function() {\n                    return this.y === null ? '' : H.numberFormat(this.y, -1);\n                },\n\n                style: {\n                    fontSize: '11px',\n                    fontWeight: 'bold',\n                    color: 'contrast',\n                    textOutline: '1px contrast'\n                },\n                // backgroundColor: undefined,\n                // borderColor: undefined,\n                // borderWidth: undefined,\n                // shadow: false\n\n                verticalAlign: 'bottom', // above singular point\n                x: 0,\n                y: 0,\n                // borderRadius: undefined,\n                padding: 5\n            },\n            cropThreshold: 300, // draw points outside the plot area when the number of points is less than this\n            pointRange: 0,\n            //pointStart: 0,\n            //pointInterval: 1,\n            //showInLegend: null, // auto: true for standalone series, false for linked series\n            softThreshold: true,\n            states: { // states for the entire series\n                hover: {\n                    //enabled: false,\n                    animation: {\n                        duration: 50\n                    },\n                    lineWidthPlus: 1,\n                    marker: {\n                        // lineWidth: base + 1,\n                        // radius: base + 1\n                    },\n                    halo: {\n                        size: 10,\n\n                        opacity: 0.25\n\n                    }\n                },\n                select: {\n                    marker: {}\n                }\n            },\n            stickyTracking: true,\n            //tooltip: {\n            //pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y}</b>'\n            //valueDecimals: null,\n            //xDateFormat: '%A, %b %e, %Y',\n            //valuePrefix: '',\n            //ySuffix: ''\n            //}\n            turboThreshold: 1000,\n            // zIndex: null\n            findNearestPointBy: 'x'\n\n        }, /** @lends Series.prototype */ {\n            isCartesian: true,\n            pointClass: Point,\n            sorted: true, // requires the data to be sorted\n            requireSorting: true,\n            directTouch: false,\n            axisTypes: ['xAxis', 'yAxis'],\n            colorCounter: 0,\n            parallelArrays: ['x', 'y'], // each point's x and y values are stored in this.xData and this.yData\n            coll: 'series',\n            init: function(chart, options) {\n                var series = this,\n                    eventType,\n                    events,\n                    chartSeries = chart.series,\n                    lastSeries;\n\n                series.chart = chart;\n                series.options = options = series.setOptions(options); // merge with plotOptions\n                series.linkedSeries = [];\n\n                // bind the axes\n                series.bindAxes();\n\n                // set some variables\n                extend(series, {\n                    name: options.name,\n                    state: '',\n                    visible: options.visible !== false, // true by default\n                    selected: options.selected === true // false by default\n                });\n\n                // register event listeners\n                events = options.events;\n                for (eventType in events) {\n                    addEvent(series, eventType, events[eventType]);\n                }\n                if (\n                    (events && events.click) ||\n                    (options.point && options.point.events && options.point.events.click) ||\n                    options.allowPointSelect\n                ) {\n                    chart.runTrackerClick = true;\n                }\n\n                series.getColor();\n                series.getSymbol();\n\n                // Set the data\n                each(series.parallelArrays, function(key) {\n                    series[key + 'Data'] = [];\n                });\n                series.setData(options.data, false);\n\n                // Mark cartesian\n                if (series.isCartesian) {\n                    chart.hasCartesianSeries = true;\n                }\n\n                // Get the index and register the series in the chart. The index is one\n                // more than the current latest series index (#5960).\n                if (chartSeries.length) {\n                    lastSeries = chartSeries[chartSeries.length - 1];\n                }\n                series._i = pick(lastSeries && lastSeries._i, -1) + 1;\n\n                // Insert the series and re-order all series above the insertion point.\n                chart.orderSeries(this.insert(chartSeries));\n            },\n\n            /**\n             * Insert the series in a collection with other series, either the chart\n             * series or yAxis series, in the correct order according to the index \n             * option.\n             * @param  {Array} collection A collection of series.\n             * @returns {Number} The index of the series in the collection.\n             */\n            insert: function(collection) {\n                var indexOption = this.options.index,\n                    i;\n\n                // Insert by index option\n                if (isNumber(indexOption)) {\n                    i = collection.length;\n                    while (i--) {\n                        // Loop down until the interted element has higher index\n                        if (indexOption >=\n                            pick(collection[i].options.index, collection[i]._i)) {\n                            collection.splice(i + 1, 0, this);\n                            break;\n                        }\n                    }\n                    if (i === -1) {\n                        collection.unshift(this);\n                    }\n                    i = i + 1;\n\n                    // Or just push it to the end\n                } else {\n                    collection.push(this);\n                }\n                return pick(i, collection.length - 1);\n            },\n\n            /**\n             * Set the xAxis and yAxis properties of cartesian series, and register the\n             * series in the `axis.series` array.\n             *\n             * @function #bindAxes\n             * @memberOf Series\n             * @returns {void}\n             */\n            bindAxes: function() {\n                var series = this,\n                    seriesOptions = series.options,\n                    chart = series.chart,\n                    axisOptions;\n\n                each(series.axisTypes || [], function(AXIS) { // repeat for xAxis and yAxis\n\n                    each(chart[AXIS], function(axis) { // loop through the chart's axis objects\n                        axisOptions = axis.options;\n\n                        // apply if the series xAxis or yAxis option mathches the number of the\n                        // axis, or if undefined, use the first axis\n                        if ((seriesOptions[AXIS] === axisOptions.index) ||\n                            (seriesOptions[AXIS] !== undefined && seriesOptions[AXIS] === axisOptions.id) ||\n                            (seriesOptions[AXIS] === undefined && axisOptions.index === 0)) {\n\n                            // register this series in the axis.series lookup\n                            series.insert(axis.series);\n\n                            // set this series.xAxis or series.yAxis reference\n                            series[AXIS] = axis;\n\n                            // mark dirty for redraw\n                            axis.isDirty = true;\n                        }\n                    });\n\n                    // The series needs an X and an Y axis\n                    if (!series[AXIS] && series.optionalAxis !== AXIS) {\n                        H.error(18, true);\n                    }\n\n                });\n            },\n\n            /**\n             * For simple series types like line and column, the data values are held in arrays like\n             * xData and yData for quick lookup to find extremes and more. For multidimensional series\n             * like bubble and map, this can be extended with arrays like zData and valueData by\n             * adding to the series.parallelArrays array.\n             */\n            updateParallelArrays: function(point, i) {\n                var series = point.series,\n                    args = arguments,\n                    fn = isNumber(i) ?\n                    // Insert the value in the given position\n                    function(key) {\n                        var val = key === 'y' && series.toYData ? series.toYData(point) : point[key];\n                        series[key + 'Data'][i] = val;\n                    } :\n                    // Apply the method specified in i with the following arguments as arguments\n                    function(key) {\n                        Array.prototype[i].apply(series[key + 'Data'], Array.prototype.slice.call(args, 2));\n                    };\n\n                each(series.parallelArrays, fn);\n            },\n\n            /**\n             * Return an auto incremented x value based on the pointStart and pointInterval options.\n             * This is only used if an x value is not given for the point that calls autoIncrement.\n             */\n            autoIncrement: function() {\n\n                var options = this.options,\n                    xIncrement = this.xIncrement,\n                    date,\n                    pointInterval,\n                    pointIntervalUnit = options.pointIntervalUnit;\n\n                xIncrement = pick(xIncrement, options.pointStart, 0);\n\n                this.pointInterval = pointInterval = pick(this.pointInterval, options.pointInterval, 1);\n\n                // Added code for pointInterval strings\n                if (pointIntervalUnit) {\n                    date = new Date(xIncrement);\n\n                    if (pointIntervalUnit === 'day') {\n                        date = +date[Date.hcSetDate](date[Date.hcGetDate]() + pointInterval);\n                    } else if (pointIntervalUnit === 'month') {\n                        date = +date[Date.hcSetMonth](date[Date.hcGetMonth]() + pointInterval);\n                    } else if (pointIntervalUnit === 'year') {\n                        date = +date[Date.hcSetFullYear](date[Date.hcGetFullYear]() + pointInterval);\n                    }\n                    pointInterval = date - xIncrement;\n\n                }\n\n                this.xIncrement = xIncrement + pointInterval;\n                return xIncrement;\n            },\n\n            /**\n             * Set the series options by merging from the options tree\n             * @param {Object} itemOptions\n             */\n            setOptions: function(itemOptions) {\n                var chart = this.chart,\n                    chartOptions = chart.options,\n                    plotOptions = chartOptions.plotOptions,\n                    userOptions = chart.userOptions || {},\n                    userPlotOptions = userOptions.plotOptions || {},\n                    typeOptions = plotOptions[this.type],\n                    options,\n                    zones;\n\n                this.userOptions = itemOptions;\n\n                // General series options take precedence over type options because otherwise, default\n                // type options like column.animation would be overwritten by the general option.\n                // But issues have been raised here (#3881), and the solution may be to distinguish\n                // between default option and userOptions like in the tooltip below.\n                options = merge(\n                    typeOptions,\n                    plotOptions.series,\n                    itemOptions\n                );\n\n                // The tooltip options are merged between global and series specific options\n                this.tooltipOptions = merge(\n                    defaultOptions.tooltip,\n                    defaultOptions.plotOptions[this.type].tooltip,\n                    userOptions.tooltip,\n                    userPlotOptions.series && userPlotOptions.series.tooltip,\n                    userPlotOptions[this.type] && userPlotOptions[this.type].tooltip,\n                    itemOptions.tooltip\n                );\n\n                // When shared tooltip, stickyTracking is true by default,\n                // unless user says otherwise.\n                this.stickyTracking = pick(\n                    itemOptions.stickyTracking,\n                    userPlotOptions[this.type] && userPlotOptions[this.type].stickyTracking,\n                    userPlotOptions.series && userPlotOptions.series.stickyTracking,\n                    (\n                        this.tooltipOptions.shared && !this.noSharedTooltip ?\n                        true :\n                        options.stickyTracking\n                    )\n                );\n\n                // Delete marker object if not allowed (#1125)\n                if (typeOptions.marker === null) {\n                    delete options.marker;\n                }\n\n                // Handle color zones\n                this.zoneAxis = options.zoneAxis;\n                zones = this.zones = (options.zones || []).slice();\n                if ((options.negativeColor || options.negativeFillColor) && !options.zones) {\n                    zones.push({\n                        value: options[this.zoneAxis + 'Threshold'] || options.threshold || 0,\n                        className: 'highcharts-negative',\n\n                        color: options.negativeColor,\n                        fillColor: options.negativeFillColor\n\n                    });\n                }\n                if (zones.length) { // Push one extra zone for the rest\n                    if (defined(zones[zones.length - 1].value)) {\n                        zones.push({\n\n                            color: this.color,\n                            fillColor: this.fillColor\n\n                        });\n                    }\n                }\n                return options;\n            },\n\n            getCyclic: function(prop, value, defaults) {\n                var i,\n                    chart = this.chart,\n                    userOptions = this.userOptions,\n                    indexName = prop + 'Index',\n                    counterName = prop + 'Counter',\n                    len = defaults ? defaults.length : pick(\n                        chart.options.chart[prop + 'Count'],\n                        chart[prop + 'Count']\n                    ),\n                    setting;\n\n                if (!value) {\n                    // Pick up either the colorIndex option, or the _colorIndex after Series.update()\n                    setting = pick(userOptions[indexName], userOptions['_' + indexName]);\n                    if (defined(setting)) { // after Series.update()\n                        i = setting;\n                    } else {\n                        // #6138\n                        if (!chart.series.length) {\n                            chart[counterName] = 0;\n                        }\n                        userOptions['_' + indexName] = i = chart[counterName] % len;\n                        chart[counterName] += 1;\n                    }\n                    if (defaults) {\n                        value = defaults[i];\n                    }\n                }\n                // Set the colorIndex\n                if (i !== undefined) {\n                    this[indexName] = i;\n                }\n                this[prop] = value;\n            },\n\n            /**\n             * Get the series' color\n             */\n\n            getColor: function() {\n                if (this.options.colorByPoint) {\n                    this.options.color = null; // #4359, selected slice got series.color even when colorByPoint was set.\n                } else {\n                    this.getCyclic('color', this.options.color || defaultPlotOptions[this.type].color, this.chart.options.colors);\n                }\n            },\n\n            /**\n             * Get the series' symbol\n             */\n            getSymbol: function() {\n                var seriesMarkerOption = this.options.marker;\n\n                this.getCyclic('symbol', seriesMarkerOption.symbol, this.chart.options.symbols);\n            },\n\n            drawLegendSymbol: LegendSymbolMixin.drawLineMarker,\n\n            /**\n             * Replace the series data with a new set of data\n             * @param {Object} data\n             * @param {Object} redraw\n             */\n            setData: function(data, redraw, animation, updatePoints) {\n                var series = this,\n                    oldData = series.points,\n                    oldDataLength = (oldData && oldData.length) || 0,\n                    dataLength,\n                    options = series.options,\n                    chart = series.chart,\n                    firstPoint = null,\n                    xAxis = series.xAxis,\n                    i,\n                    turboThreshold = options.turboThreshold,\n                    pt,\n                    xData = this.xData,\n                    yData = this.yData,\n                    pointArrayMap = series.pointArrayMap,\n                    valueCount = pointArrayMap && pointArrayMap.length;\n\n                data = data || [];\n                dataLength = data.length;\n                redraw = pick(redraw, true);\n\n                // If the point count is the same as is was, just run Point.update which is\n                // cheaper, allows animation, and keeps references to points.\n                if (updatePoints !== false && dataLength && oldDataLength === dataLength && !series.cropped && !series.hasGroupedData && series.visible) {\n                    each(data, function(point, i) {\n                        // .update doesn't exist on a linked, hidden series (#3709)\n                        if (oldData[i].update && point !== options.data[i]) {\n                            oldData[i].update(point, false, null, false);\n                        }\n                    });\n\n                } else {\n\n                    // Reset properties\n                    series.xIncrement = null;\n\n                    series.colorCounter = 0; // for series with colorByPoint (#1547)\n\n                    // Update parallel arrays\n                    each(this.parallelArrays, function(key) {\n                        series[key + 'Data'].length = 0;\n                    });\n\n                    // In turbo mode, only one- or twodimensional arrays of numbers are allowed. The\n                    // first value is tested, and we assume that all the rest are defined the same\n                    // way. Although the 'for' loops are similar, they are repeated inside each\n                    // if-else conditional for max performance.\n                    if (turboThreshold && dataLength > turboThreshold) {\n\n                        // find the first non-null point\n                        i = 0;\n                        while (firstPoint === null && i < dataLength) {\n                            firstPoint = data[i];\n                            i++;\n                        }\n\n\n                        if (isNumber(firstPoint)) { // assume all points are numbers\n                            for (i = 0; i < dataLength; i++) {\n                                xData[i] = this.autoIncrement();\n                                yData[i] = data[i];\n                            }\n                        } else if (isArray(firstPoint)) { // assume all points are arrays\n                            if (valueCount) { // [x, low, high] or [x, o, h, l, c]\n                                for (i = 0; i < dataLength; i++) {\n                                    pt = data[i];\n                                    xData[i] = pt[0];\n                                    yData[i] = pt.slice(1, valueCount + 1);\n                                }\n                            } else { // [x, y]\n                                for (i = 0; i < dataLength; i++) {\n                                    pt = data[i];\n                                    xData[i] = pt[0];\n                                    yData[i] = pt[1];\n                                }\n                            }\n                        } else {\n                            H.error(12); // Highcharts expects configs to be numbers or arrays in turbo mode\n                        }\n                    } else {\n                        for (i = 0; i < dataLength; i++) {\n                            if (data[i] !== undefined) { // stray commas in oldIE\n                                pt = {\n                                    series: series\n                                };\n                                series.pointClass.prototype.applyOptions.apply(pt, [data[i]]);\n                                series.updateParallelArrays(pt, i);\n                            }\n                        }\n                    }\n\n                    // Forgetting to cast strings to numbers is a common caveat when handling CSV or JSON\n                    if (isString(yData[0])) {\n                        H.error(14, true);\n                    }\n\n                    series.data = [];\n                    series.options.data = series.userOptions.data = data;\n\n                    // destroy old points\n                    i = oldDataLength;\n                    while (i--) {\n                        if (oldData[i] && oldData[i].destroy) {\n                            oldData[i].destroy();\n                        }\n                    }\n\n                    // reset minRange (#878)\n                    if (xAxis) {\n                        xAxis.minRange = xAxis.userMinRange;\n                    }\n\n                    // redraw\n                    series.isDirty = chart.isDirtyBox = true;\n                    series.isDirtyData = !!oldData;\n                    animation = false;\n                }\n\n                // Typically for pie series, points need to be processed and generated\n                // prior to rendering the legend\n                if (options.legendType === 'point') {\n                    this.processData();\n                    this.generatePoints();\n                }\n\n                if (redraw) {\n                    chart.redraw(animation);\n                }\n            },\n\n            /**\n             * Process the data by cropping away unused data points if the series is longer\n             * than the crop threshold. This saves computing time for large series.\n             */\n            processData: function(force) {\n                var series = this,\n                    processedXData = series.xData, // copied during slice operation below\n                    processedYData = series.yData,\n                    dataLength = processedXData.length,\n                    croppedData,\n                    cropStart = 0,\n                    cropped,\n                    distance,\n                    closestPointRange,\n                    xAxis = series.xAxis,\n                    i, // loop variable\n                    options = series.options,\n                    cropThreshold = options.cropThreshold,\n                    getExtremesFromAll = series.getExtremesFromAll || options.getExtremesFromAll, // #4599\n                    isCartesian = series.isCartesian,\n                    xExtremes,\n                    val2lin = xAxis && xAxis.val2lin,\n                    isLog = xAxis && xAxis.isLog,\n                    min,\n                    max;\n\n                // If the series data or axes haven't changed, don't go through this. Return false to pass\n                // the message on to override methods like in data grouping.\n                if (isCartesian && !series.isDirty && !xAxis.isDirty && !series.yAxis.isDirty && !force) {\n                    return false;\n                }\n\n                if (xAxis) {\n                    xExtremes = xAxis.getExtremes(); // corrected for log axis (#3053)\n                    min = xExtremes.min;\n                    max = xExtremes.max;\n                }\n\n                // optionally filter out points outside the plot area\n                if (isCartesian && series.sorted && !getExtremesFromAll && (!cropThreshold || dataLength > cropThreshold || series.forceCrop)) {\n\n                    // it's outside current extremes\n                    if (processedXData[dataLength - 1] < min || processedXData[0] > max) {\n                        processedXData = [];\n                        processedYData = [];\n\n                        // only crop if it's actually spilling out\n                    } else if (processedXData[0] < min || processedXData[dataLength - 1] > max) {\n                        croppedData = this.cropData(series.xData, series.yData, min, max);\n                        processedXData = croppedData.xData;\n                        processedYData = croppedData.yData;\n                        cropStart = croppedData.start;\n                        cropped = true;\n                    }\n                }\n\n\n                // Find the closest distance between processed points\n                i = processedXData.length || 1;\n                while (--i) {\n                    distance = isLog ?\n                        val2lin(processedXData[i]) - val2lin(processedXData[i - 1]) :\n                        processedXData[i] - processedXData[i - 1];\n\n                    if (distance > 0 && (closestPointRange === undefined || distance < closestPointRange)) {\n                        closestPointRange = distance;\n\n                        // Unsorted data is not supported by the line tooltip, as well as data grouping and\n                        // navigation in Stock charts (#725) and width calculation of columns (#1900)\n                    } else if (distance < 0 && series.requireSorting) {\n                        H.error(15);\n                    }\n                }\n\n                // Record the properties\n                series.cropped = cropped; // undefined or true\n                series.cropStart = cropStart;\n                series.processedXData = processedXData;\n                series.processedYData = processedYData;\n\n                series.closestPointRange = closestPointRange;\n\n            },\n\n            /**\n             * Iterate over xData and crop values between min and max. Returns object containing crop start/end\n             * cropped xData with corresponding part of yData, dataMin and dataMax within the cropped range\n             */\n            cropData: function(xData, yData, min, max) {\n                var dataLength = xData.length,\n                    cropStart = 0,\n                    cropEnd = dataLength,\n                    cropShoulder = pick(this.cropShoulder, 1), // line-type series need one point outside\n                    i,\n                    j;\n\n                // iterate up to find slice start\n                for (i = 0; i < dataLength; i++) {\n                    if (xData[i] >= min) {\n                        cropStart = Math.max(0, i - cropShoulder);\n                        break;\n                    }\n                }\n\n                // proceed to find slice end\n                for (j = i; j < dataLength; j++) {\n                    if (xData[j] > max) {\n                        cropEnd = j + cropShoulder;\n                        break;\n                    }\n                }\n\n                return {\n                    xData: xData.slice(cropStart, cropEnd),\n                    yData: yData.slice(cropStart, cropEnd),\n                    start: cropStart,\n                    end: cropEnd\n                };\n            },\n\n\n            /**\n             * Generate the data point after the data has been processed by cropping away\n             * unused points and optionally grouped in Highcharts Stock.\n             */\n            generatePoints: function() {\n                var series = this,\n                    options = series.options,\n                    dataOptions = options.data,\n                    data = series.data,\n                    dataLength,\n                    processedXData = series.processedXData,\n                    processedYData = series.processedYData,\n                    PointClass = series.pointClass,\n                    processedDataLength = processedXData.length,\n                    cropStart = series.cropStart || 0,\n                    cursor,\n                    hasGroupedData = series.hasGroupedData,\n                    point,\n                    points = [],\n                    i;\n\n                if (!data && !hasGroupedData) {\n                    var arr = [];\n                    arr.length = dataOptions.length;\n                    data = series.data = arr;\n                }\n\n                for (i = 0; i < processedDataLength; i++) {\n                    cursor = cropStart + i;\n                    if (!hasGroupedData) {\n                        point = data[cursor];\n                        if (!point && dataOptions[cursor] !== undefined) { // #970\n                            data[cursor] = point = (new PointClass()).init(series, dataOptions[cursor], processedXData[i]);\n                        }\n                    } else {\n                        // splat the y data in case of ohlc data array\n                        point = (new PointClass()).init(series, [processedXData[i]].concat(splat(processedYData[i])));\n                        point.dataGroup = series.groupMap[i];\n                    }\n                    if (point) { // #6279\n                        point.index = cursor; // For faster access in Point.update\n                        points[i] = point;\n                    }\n                }\n\n                // Hide cropped-away points - this only runs when the number of points is above cropThreshold, or when\n                // swithching view from non-grouped data to grouped data (#637)\n                if (data && (processedDataLength !== (dataLength = data.length) || hasGroupedData)) {\n                    for (i = 0; i < dataLength; i++) {\n                        if (i === cropStart && !hasGroupedData) { // when has grouped data, clear all points\n                            i += processedDataLength;\n                        }\n                        if (data[i]) {\n                            data[i].destroyElements();\n                            data[i].plotX = undefined; // #1003\n                        }\n                    }\n                }\n\n                series.data = data;\n                series.points = points;\n            },\n\n            /**\n             * Calculate Y extremes for visible data\n             */\n            getExtremes: function(yData) {\n                var xAxis = this.xAxis,\n                    yAxis = this.yAxis,\n                    xData = this.processedXData,\n                    yDataLength,\n                    activeYData = [],\n                    activeCounter = 0,\n                    xExtremes = xAxis.getExtremes(), // #2117, need to compensate for log X axis\n                    xMin = xExtremes.min,\n                    xMax = xExtremes.max,\n                    validValue,\n                    withinRange,\n                    x,\n                    y,\n                    i,\n                    j;\n\n                yData = yData || this.stackedYData || this.processedYData || [];\n                yDataLength = yData.length;\n\n                for (i = 0; i < yDataLength; i++) {\n\n                    x = xData[i];\n                    y = yData[i];\n\n                    // For points within the visible range, including the first point outside the\n                    // visible range, consider y extremes\n                    validValue = (isNumber(y, true) || isArray(y)) && (!yAxis.positiveValuesOnly || (y.length || y > 0));\n                    withinRange = this.getExtremesFromAll || this.options.getExtremesFromAll || this.cropped ||\n                        ((xData[i] || x) >= xMin && (xData[i] || x) <= xMax);\n\n                    if (validValue && withinRange) {\n\n                        j = y.length;\n                        if (j) { // array, like ohlc or range data\n                            while (j--) {\n                                if (y[j] !== null) {\n                                    activeYData[activeCounter++] = y[j];\n                                }\n                            }\n                        } else {\n                            activeYData[activeCounter++] = y;\n                        }\n                    }\n                }\n\n                this.dataMin = arrayMin(activeYData);\n                this.dataMax = arrayMax(activeYData);\n            },\n\n            /**\n             * Translate data points from raw data values to chart specific positioning\n             * data needed later in drawPoints, drawGraph and drawTracker.\n             *\n             * @function #translate\n             * @memberOf Series\n             * @returns {void}\n             */\n            translate: function() {\n                if (!this.processedXData) { // hidden series\n                    this.processData();\n                }\n                this.generatePoints();\n                var series = this,\n                    options = series.options,\n                    stacking = options.stacking,\n                    xAxis = series.xAxis,\n                    categories = xAxis.categories,\n                    yAxis = series.yAxis,\n                    points = series.points,\n                    dataLength = points.length,\n                    hasModifyValue = !!series.modifyValue,\n                    i,\n                    pointPlacement = options.pointPlacement,\n                    dynamicallyPlaced = pointPlacement === 'between' || isNumber(pointPlacement),\n                    threshold = options.threshold,\n                    stackThreshold = options.startFromThreshold ? threshold : 0,\n                    plotX,\n                    plotY,\n                    lastPlotX,\n                    stackIndicator,\n                    closestPointRangePx = Number.MAX_VALUE;\n\n                // Point placement is relative to each series pointRange (#5889)\n                if (pointPlacement === 'between') {\n                    pointPlacement = 0.5;\n                }\n                if (isNumber(pointPlacement)) {\n                    pointPlacement *= pick(options.pointRange || xAxis.pointRange);\n                }\n\n                // Translate each point\n                for (i = 0; i < dataLength; i++) {\n                    var point = points[i],\n                        xValue = point.x,\n                        yValue = point.y,\n                        yBottom = point.low,\n                        stack = stacking && yAxis.stacks[(series.negStacks && yValue < (stackThreshold ? 0 : threshold) ? '-' : '') + series.stackKey],\n                        pointStack,\n                        stackValues;\n\n                    // Discard disallowed y values for log axes (#3434)\n                    if (yAxis.positiveValuesOnly && yValue !== null && yValue <= 0) {\n                        point.isNull = true;\n                    }\n\n                    // Get the plotX translation\n                    point.plotX = plotX = correctFloat( // #5236\n                        Math.min(Math.max(-1e5, xAxis.translate(\n                            xValue,\n                            0,\n                            0,\n                            0,\n                            1,\n                            pointPlacement,\n                            this.type === 'flags'\n                        )), 1e5) // #3923\n                    );\n\n                    // Calculate the bottom y value for stacked series\n                    if (stacking && series.visible && !point.isNull && stack && stack[xValue]) {\n                        stackIndicator = series.getStackIndicator(stackIndicator, xValue, series.index);\n                        pointStack = stack[xValue];\n                        stackValues = pointStack.points[stackIndicator.key];\n                        yBottom = stackValues[0];\n                        yValue = stackValues[1];\n\n                        if (yBottom === stackThreshold && stackIndicator.key === stack[xValue].base) {\n                            yBottom = pick(threshold, yAxis.min);\n                        }\n                        if (yAxis.positiveValuesOnly && yBottom <= 0) { // #1200, #1232\n                            yBottom = null;\n                        }\n\n                        point.total = point.stackTotal = pointStack.total;\n                        point.percentage = pointStack.total && (point.y / pointStack.total * 100);\n                        point.stackY = yValue;\n\n                        // Place the stack label\n                        pointStack.setOffset(series.pointXOffset || 0, series.barW || 0);\n\n                    }\n\n                    // Set translated yBottom or remove it\n                    point.yBottom = defined(yBottom) ?\n                        yAxis.translate(yBottom, 0, 1, 0, 1) :\n                        null;\n\n                    // general hook, used for Highstock compare mode\n                    if (hasModifyValue) {\n                        yValue = series.modifyValue(yValue, point);\n                    }\n\n                    // Set the the plotY value, reset it for redraws\n                    point.plotY = plotY = (typeof yValue === 'number' && yValue !== Infinity) ?\n                        Math.min(Math.max(-1e5, yAxis.translate(yValue, 0, 1, 0, 1)), 1e5) : // #3201\n                        undefined;\n\n                    point.isInside = plotY !== undefined && plotY >= 0 && plotY <= yAxis.len && // #3519\n                        plotX >= 0 && plotX <= xAxis.len;\n\n\n                    // Set client related positions for mouse tracking\n                    point.clientX = dynamicallyPlaced ? correctFloat(xAxis.translate(xValue, 0, 0, 0, 1, pointPlacement)) : plotX; // #1514, #5383, #5518\n\n                    point.negative = point.y < (threshold || 0);\n\n                    // some API data\n                    point.category = categories && categories[point.x] !== undefined ?\n                        categories[point.x] : point.x;\n\n                    // Determine auto enabling of markers (#3635, #5099)\n                    if (!point.isNull) {\n                        if (lastPlotX !== undefined) {\n                            closestPointRangePx = Math.min(closestPointRangePx, Math.abs(plotX - lastPlotX));\n                        }\n                        lastPlotX = plotX;\n                    }\n\n                    // Find point zone\n                    point.zone = this.zones.length && point.getZone();\n                }\n                series.closestPointRangePx = closestPointRangePx;\n            },\n\n            /**\n             * Return the series points with null points filtered out\n             */\n            getValidPoints: function(points, insideOnly) {\n                var chart = this.chart;\n                return grep(points || this.points || [], function isValidPoint(point) { // #3916, #5029\n                    if (insideOnly && !chart.isInsidePlot(point.plotX, point.plotY, chart.inverted)) { // #5085\n                        return false;\n                    }\n                    return !point.isNull;\n                });\n            },\n\n            /**\n             * Set the clipping for the series. For animated series it is called twice, first to initiate\n             * animating the clip then the second time without the animation to set the final clip.\n             */\n            setClip: function(animation) {\n                var chart = this.chart,\n                    options = this.options,\n                    renderer = chart.renderer,\n                    inverted = chart.inverted,\n                    seriesClipBox = this.clipBox,\n                    clipBox = seriesClipBox || chart.clipBox,\n                    sharedClipKey = this.sharedClipKey || ['_sharedClip', animation && animation.duration, animation && animation.easing, clipBox.height, options.xAxis, options.yAxis].join(','), // #4526\n                    clipRect = chart[sharedClipKey],\n                    markerClipRect = chart[sharedClipKey + 'm'];\n\n                // If a clipping rectangle with the same properties is currently present in the chart, use that.\n                if (!clipRect) {\n\n                    // When animation is set, prepare the initial positions\n                    if (animation) {\n                        clipBox.width = 0;\n\n                        chart[sharedClipKey + 'm'] = markerClipRect = renderer.clipRect(-99, // include the width of the first marker\n                            inverted ? -chart.plotLeft : -chart.plotTop,\n                            99,\n                            inverted ? chart.chartWidth : chart.chartHeight\n                        );\n                    }\n                    chart[sharedClipKey] = clipRect = renderer.clipRect(clipBox);\n                    // Create hashmap for series indexes\n                    clipRect.count = {\n                        length: 0\n                    };\n\n                }\n                if (animation) {\n                    if (!clipRect.count[this.index]) {\n                        clipRect.count[this.index] = true;\n                        clipRect.count.length += 1;\n                    }\n                }\n\n                if (options.clip !== false) {\n                    this.group.clip(animation || seriesClipBox ? clipRect : chart.clipRect);\n                    this.markerGroup.clip(markerClipRect);\n                    this.sharedClipKey = sharedClipKey;\n                }\n\n                // Remove the shared clipping rectangle when all series are shown\n                if (!animation) {\n                    if (clipRect.count[this.index]) {\n                        delete clipRect.count[this.index];\n                        clipRect.count.length -= 1;\n                    }\n\n                    if (clipRect.count.length === 0 && sharedClipKey && chart[sharedClipKey]) {\n                        if (!seriesClipBox) {\n                            chart[sharedClipKey] = chart[sharedClipKey].destroy();\n                        }\n                        if (chart[sharedClipKey + 'm']) {\n                            chart[sharedClipKey + 'm'] = chart[sharedClipKey + 'm'].destroy();\n                        }\n                    }\n                }\n            },\n\n            /**\n             * Animate in the series\n             */\n            animate: function(init) {\n                var series = this,\n                    chart = series.chart,\n                    clipRect,\n                    animation = animObject(series.options.animation),\n                    sharedClipKey;\n\n                // Initialize the animation. Set up the clipping rectangle.\n                if (init) {\n\n                    series.setClip(animation);\n\n                    // Run the animation\n                } else {\n                    sharedClipKey = this.sharedClipKey;\n                    clipRect = chart[sharedClipKey];\n                    if (clipRect) {\n                        clipRect.animate({\n                            width: chart.plotSizeX\n                        }, animation);\n                    }\n                    if (chart[sharedClipKey + 'm']) {\n                        chart[sharedClipKey + 'm'].animate({\n                            width: chart.plotSizeX + 99\n                        }, animation);\n                    }\n\n                    // Delete this function to allow it only once\n                    series.animate = null;\n\n                }\n            },\n\n            /**\n             * This runs after animation to land on the final plot clipping\n             */\n            afterAnimate: function() {\n                this.setClip();\n                fireEvent(this, 'afterAnimate');\n            },\n\n            /**\n             * Draw the markers.\n             *\n             * @function #drawPoints\n             * @memberOf Series\n             * @returns {void}\n             */\n            drawPoints: function() {\n                var series = this,\n                    points = series.points,\n                    chart = series.chart,\n                    plotY,\n                    i,\n                    point,\n                    symbol,\n                    graphic,\n                    options = series.options,\n                    seriesMarkerOptions = options.marker,\n                    pointMarkerOptions,\n                    hasPointMarker,\n                    enabled,\n                    isInside,\n                    markerGroup = series.markerGroup,\n                    xAxis = series.xAxis,\n                    markerAttribs,\n                    globallyEnabled = pick(\n                        seriesMarkerOptions.enabled,\n                        xAxis.isRadial ? true : null,\n                        // Use larger or equal as radius is null in bubbles (#6321)\n                        series.closestPointRangePx >= 2 * seriesMarkerOptions.radius\n                    );\n\n                if (seriesMarkerOptions.enabled !== false || series._hasPointMarkers) {\n\n                    for (i = 0; i < points.length; i++) {\n                        point = points[i];\n                        plotY = point.plotY;\n                        graphic = point.graphic;\n                        pointMarkerOptions = point.marker || {};\n                        hasPointMarker = !!point.marker;\n                        enabled = (globallyEnabled && pointMarkerOptions.enabled === undefined) || pointMarkerOptions.enabled;\n                        isInside = point.isInside;\n\n                        // only draw the point if y is defined\n                        if (enabled && isNumber(plotY) && point.y !== null) {\n\n                            // Shortcuts\n                            symbol = pick(pointMarkerOptions.symbol, series.symbol);\n                            point.hasImage = symbol.indexOf('url') === 0;\n\n                            markerAttribs = series.markerAttribs(\n                                point,\n                                point.selected && 'select'\n                            );\n\n                            if (graphic) { // update\n                                graphic[isInside ? 'show' : 'hide'](true) // Since the marker group isn't clipped, each individual marker must be toggled\n                                    .animate(markerAttribs);\n                            } else if (isInside && (markerAttribs.width > 0 || point.hasImage)) {\n                                point.graphic = graphic = chart.renderer.symbol(\n                                        symbol,\n                                        markerAttribs.x,\n                                        markerAttribs.y,\n                                        markerAttribs.width,\n                                        markerAttribs.height,\n                                        hasPointMarker ? pointMarkerOptions : seriesMarkerOptions\n                                    )\n                                    .add(markerGroup);\n                            }\n\n\n                            // Presentational attributes\n                            if (graphic) {\n                                graphic.attr(series.pointAttribs(point, point.selected && 'select'));\n                            }\n\n\n                            if (graphic) {\n                                graphic.addClass(point.getClassName(), true);\n                            }\n\n                        } else if (graphic) {\n                            point.graphic = graphic.destroy(); // #1269\n                        }\n                    }\n                }\n\n            },\n\n            /**\n             * Get non-presentational attributes for the point.\n             */\n            markerAttribs: function(point, state) {\n                var seriesMarkerOptions = this.options.marker,\n                    seriesStateOptions,\n                    pointMarkerOptions = point.marker || {},\n                    pointStateOptions,\n                    radius = pick(\n                        pointMarkerOptions.radius,\n                        seriesMarkerOptions.radius\n                    ),\n                    attribs;\n\n                // Handle hover and select states\n                if (state) {\n                    seriesStateOptions = seriesMarkerOptions.states[state];\n                    pointStateOptions = pointMarkerOptions.states &&\n                        pointMarkerOptions.states[state];\n\n                    radius = pick(\n                        pointStateOptions && pointStateOptions.radius,\n                        seriesStateOptions && seriesStateOptions.radius,\n                        radius + (seriesStateOptions && seriesStateOptions.radiusPlus || 0)\n                    );\n                }\n\n                if (point.hasImage) {\n                    radius = 0; // and subsequently width and height is not set\n                }\n\n                attribs = {\n                    x: Math.floor(point.plotX) - radius, // Math.floor for #1843\n                    y: point.plotY - radius\n                };\n\n                if (radius) {\n                    attribs.width = attribs.height = 2 * radius;\n                }\n\n                return attribs;\n\n            },\n\n\n            /**\n             * Get presentational attributes for marker-based series (line, spline, scatter, bubble, mappoint...)\n             */\n            pointAttribs: function(point, state) {\n                var seriesMarkerOptions = this.options.marker,\n                    seriesStateOptions,\n                    pointOptions = point && point.options,\n                    pointMarkerOptions = (pointOptions && pointOptions.marker) || {},\n                    pointStateOptions,\n                    color = this.color,\n                    pointColorOption = pointOptions && pointOptions.color,\n                    pointColor = point && point.color,\n                    strokeWidth = pick(\n                        pointMarkerOptions.lineWidth,\n                        seriesMarkerOptions.lineWidth\n                    ),\n                    zoneColor = point && point.zone && point.zone.color,\n                    fill,\n                    stroke;\n\n                color = pointColorOption || zoneColor || pointColor || color;\n                fill = pointMarkerOptions.fillColor || seriesMarkerOptions.fillColor || color;\n                stroke = pointMarkerOptions.lineColor || seriesMarkerOptions.lineColor || color;\n\n                // Handle hover and select states\n                if (state) {\n                    seriesStateOptions = seriesMarkerOptions.states[state];\n                    pointStateOptions = (pointMarkerOptions.states && pointMarkerOptions.states[state]) || {};\n                    strokeWidth = pick(\n                        pointStateOptions.lineWidth,\n                        seriesStateOptions.lineWidth,\n                        strokeWidth + pick(\n                            pointStateOptions.lineWidthPlus,\n                            seriesStateOptions.lineWidthPlus,\n                            0\n                        )\n                    );\n                    fill = pointStateOptions.fillColor || seriesStateOptions.fillColor || fill;\n                    stroke = pointStateOptions.lineColor || seriesStateOptions.lineColor || stroke;\n                }\n\n                return {\n                    'stroke': stroke,\n                    'stroke-width': strokeWidth,\n                    'fill': fill\n                };\n            },\n\n            /**\n             * Clear DOM objects and free up memory\n             */\n            destroy: function() {\n                var series = this,\n                    chart = series.chart,\n                    issue134 = /AppleWebKit\\/533/.test(win.navigator.userAgent),\n                    destroy,\n                    i,\n                    data = series.data || [],\n                    point,\n                    prop,\n                    axis;\n\n                // add event hook\n                fireEvent(series, 'destroy');\n\n                // remove all events\n                removeEvent(series);\n\n                // erase from axes\n                each(series.axisTypes || [], function(AXIS) {\n                    axis = series[AXIS];\n                    if (axis && axis.series) {\n                        erase(axis.series, series);\n                        axis.isDirty = axis.forceRedraw = true;\n                    }\n                });\n\n                // remove legend items\n                if (series.legendItem) {\n                    series.chart.legend.destroyItem(series);\n                }\n\n                // destroy all points with their elements\n                i = data.length;\n                while (i--) {\n                    point = data[i];\n                    if (point && point.destroy) {\n                        point.destroy();\n                    }\n                }\n                series.points = null;\n\n                // Clear the animation timeout if we are destroying the series during initial animation\n                clearTimeout(series.animationTimeout);\n\n                // Destroy all SVGElements associated to the series\n                for (prop in series) {\n                    if (series[prop] instanceof SVGElement && !series[prop].survive) { // Survive provides a hook for not destroying\n\n                        // issue 134 workaround\n                        destroy = issue134 && prop === 'group' ?\n                            'hide' :\n                            'destroy';\n\n                        series[prop][destroy]();\n                    }\n                }\n\n                // remove from hoverSeries\n                if (chart.hoverSeries === series) {\n                    chart.hoverSeries = null;\n                }\n                erase(chart.series, series);\n                chart.orderSeries();\n\n                // clear all members\n                for (prop in series) {\n                    delete series[prop];\n                }\n            },\n\n            /**\n             * Get the graph path\n             */\n            getGraphPath: function(points, nullsAsZeroes, connectCliffs) {\n                var series = this,\n                    options = series.options,\n                    step = options.step,\n                    reversed,\n                    graphPath = [],\n                    xMap = [],\n                    gap;\n\n                points = points || series.points;\n\n                // Bottom of a stack is reversed\n                reversed = points.reversed;\n                if (reversed) {\n                    points.reverse();\n                }\n                // Reverse the steps (#5004)\n                step = {\n                    right: 1,\n                    center: 2\n                }[step] || (step && 3);\n                if (step && reversed) {\n                    step = 4 - step;\n                }\n\n                // Remove invalid points, especially in spline (#5015)\n                if (options.connectNulls && !nullsAsZeroes && !connectCliffs) {\n                    points = this.getValidPoints(points);\n                }\n\n                // Build the line\n                each(points, function(point, i) {\n\n                    var plotX = point.plotX,\n                        plotY = point.plotY,\n                        lastPoint = points[i - 1],\n                        pathToPoint; // the path to this point from the previous\n\n                    if ((point.leftCliff || (lastPoint && lastPoint.rightCliff)) && !connectCliffs) {\n                        gap = true; // ... and continue\n                    }\n\n                    // Line series, nullsAsZeroes is not handled\n                    if (point.isNull && !defined(nullsAsZeroes) && i > 0) {\n                        gap = !options.connectNulls;\n\n                        // Area series, nullsAsZeroes is set\n                    } else if (point.isNull && !nullsAsZeroes) {\n                        gap = true;\n\n                    } else {\n\n                        if (i === 0 || gap) {\n                            pathToPoint = ['M', point.plotX, point.plotY];\n\n                        } else if (series.getPointSpline) { // generate the spline as defined in the SplineSeries object\n\n                            pathToPoint = series.getPointSpline(points, point, i);\n\n                        } else if (step) {\n\n                            if (step === 1) { // right\n                                pathToPoint = [\n                                    'L',\n                                    lastPoint.plotX,\n                                    plotY\n                                ];\n\n                            } else if (step === 2) { // center\n                                pathToPoint = [\n                                    'L',\n                                    (lastPoint.plotX + plotX) / 2,\n                                    lastPoint.plotY,\n                                    'L',\n                                    (lastPoint.plotX + plotX) / 2,\n                                    plotY\n                                ];\n\n                            } else {\n                                pathToPoint = [\n                                    'L',\n                                    plotX,\n                                    lastPoint.plotY\n                                ];\n                            }\n                            pathToPoint.push('L', plotX, plotY);\n\n                        } else {\n                            // normal line to next point\n                            pathToPoint = [\n                                'L',\n                                plotX,\n                                plotY\n                            ];\n                        }\n\n                        // Prepare for animation. When step is enabled, there are two path nodes for each x value.\n                        xMap.push(point.x);\n                        if (step) {\n                            xMap.push(point.x);\n                        }\n\n                        graphPath.push.apply(graphPath, pathToPoint);\n                        gap = false;\n                    }\n                });\n\n                graphPath.xMap = xMap;\n                series.graphPath = graphPath;\n\n                return graphPath;\n\n            },\n\n            /**\n             * Draw the actual graph\n             */\n            drawGraph: function() {\n                var series = this,\n                    options = this.options,\n                    graphPath = (this.gappedPath || this.getGraphPath).call(this),\n                    props = [\n                        [\n                            'graph',\n                            'highcharts-graph',\n\n                            options.lineColor || this.color,\n                            options.dashStyle\n\n                        ]\n                    ];\n\n                // Add the zone properties if any\n                each(this.zones, function(zone, i) {\n                    props.push([\n                        'zone-graph-' + i,\n                        'highcharts-graph highcharts-zone-graph-' + i + ' ' + (zone.className || ''),\n\n                        zone.color || series.color,\n                        zone.dashStyle || options.dashStyle\n\n                    ]);\n                });\n\n                // Draw the graph\n                each(props, function(prop, i) {\n                    var graphKey = prop[0],\n                        graph = series[graphKey],\n                        attribs;\n\n                    if (graph) {\n                        graph.endX = graphPath.xMap;\n                        graph.animate({\n                            d: graphPath\n                        });\n\n                    } else if (graphPath.length) { // #1487\n\n                        series[graphKey] = series.chart.renderer.path(graphPath)\n                            .addClass(prop[1])\n                            .attr({\n                                zIndex: 1\n                            }) // #1069\n                            .add(series.group);\n\n\n                        attribs = {\n                            'stroke': prop[2],\n                            'stroke-width': options.lineWidth,\n                            'fill': (series.fillGraph && series.color) || 'none' // Polygon series use filled graph\n                        };\n\n                        if (prop[3]) {\n                            attribs.dashstyle = prop[3];\n                        } else if (options.linecap !== 'square') {\n                            attribs['stroke-linecap'] = attribs['stroke-linejoin'] = 'round';\n                        }\n\n                        graph = series[graphKey]\n                            .attr(attribs)\n                            .shadow((i < 2) && options.shadow); // add shadow to normal series (0) or to first zone (1) #3932\n\n                    }\n\n                    // Helpers for animation\n                    if (graph) {\n                        graph.startX = graphPath.xMap;\n                        //graph.shiftUnit = options.step ? 2 : 1;\n                        graph.isArea = graphPath.isArea; // For arearange animation\n                    }\n                });\n            },\n\n            /**\n             * Clip the graphs into the positive and negative coloured graphs\n             */\n            applyZones: function() {\n                var series = this,\n                    chart = this.chart,\n                    renderer = chart.renderer,\n                    zones = this.zones,\n                    translatedFrom,\n                    translatedTo,\n                    clips = this.clips || [],\n                    clipAttr,\n                    graph = this.graph,\n                    area = this.area,\n                    chartSizeMax = Math.max(chart.chartWidth, chart.chartHeight),\n                    axis = this[(this.zoneAxis || 'y') + 'Axis'],\n                    extremes,\n                    reversed,\n                    inverted = chart.inverted,\n                    horiz,\n                    pxRange,\n                    pxPosMin,\n                    pxPosMax,\n                    ignoreZones = false;\n\n                if (zones.length && (graph || area) && axis && axis.min !== undefined) {\n                    reversed = axis.reversed;\n                    horiz = axis.horiz;\n                    // The use of the Color Threshold assumes there are no gaps\n                    // so it is safe to hide the original graph and area\n                    if (graph) {\n                        graph.hide();\n                    }\n                    if (area) {\n                        area.hide();\n                    }\n\n                    // Create the clips\n                    extremes = axis.getExtremes();\n                    each(zones, function(threshold, i) {\n\n                        translatedFrom = reversed ?\n                            (horiz ? chart.plotWidth : 0) :\n                            (horiz ? 0 : axis.toPixels(extremes.min));\n                        translatedFrom = Math.min(Math.max(pick(translatedTo, translatedFrom), 0), chartSizeMax);\n                        translatedTo = Math.min(Math.max(Math.round(axis.toPixels(pick(threshold.value, extremes.max), true)), 0), chartSizeMax);\n\n                        if (ignoreZones) {\n                            translatedFrom = translatedTo = axis.toPixels(extremes.max);\n                        }\n\n                        pxRange = Math.abs(translatedFrom - translatedTo);\n                        pxPosMin = Math.min(translatedFrom, translatedTo);\n                        pxPosMax = Math.max(translatedFrom, translatedTo);\n                        if (axis.isXAxis) {\n                            clipAttr = {\n                                x: inverted ? pxPosMax : pxPosMin,\n                                y: 0,\n                                width: pxRange,\n                                height: chartSizeMax\n                            };\n                            if (!horiz) {\n                                clipAttr.x = chart.plotHeight - clipAttr.x;\n                            }\n                        } else {\n                            clipAttr = {\n                                x: 0,\n                                y: inverted ? pxPosMax : pxPosMin,\n                                width: chartSizeMax,\n                                height: pxRange\n                            };\n                            if (horiz) {\n                                clipAttr.y = chart.plotWidth - clipAttr.y;\n                            }\n                        }\n\n\n                        /// VML SUPPPORT\n                        if (inverted && renderer.isVML) {\n                            if (axis.isXAxis) {\n                                clipAttr = {\n                                    x: 0,\n                                    y: reversed ? pxPosMin : pxPosMax,\n                                    height: clipAttr.width,\n                                    width: chart.chartWidth\n                                };\n                            } else {\n                                clipAttr = {\n                                    x: clipAttr.y - chart.plotLeft - chart.spacingBox.x,\n                                    y: 0,\n                                    width: clipAttr.height,\n                                    height: chart.chartHeight\n                                };\n                            }\n                        }\n                        /// END OF VML SUPPORT\n\n\n                        if (clips[i]) {\n                            clips[i].animate(clipAttr);\n                        } else {\n                            clips[i] = renderer.clipRect(clipAttr);\n\n                            if (graph) {\n                                series['zone-graph-' + i].clip(clips[i]);\n                            }\n\n                            if (area) {\n                                series['zone-area-' + i].clip(clips[i]);\n                            }\n                        }\n                        // if this zone extends out of the axis, ignore the others\n                        ignoreZones = threshold.value > extremes.max;\n                    });\n                    this.clips = clips;\n                }\n            },\n\n            /**\n             * Initialize and perform group inversion on series.group and series.markerGroup\n             */\n            invertGroups: function(inverted) {\n                var series = this,\n                    chart = series.chart,\n                    remover;\n\n                function setInvert() {\n                    each(['group', 'markerGroup'], function(groupName) {\n                        if (series[groupName]) {\n\n                            // VML/HTML needs explicit attributes for flipping\n                            if (chart.renderer.isVML) {\n                                series[groupName].attr({\n                                    width: series.yAxis.len,\n                                    height: series.xAxis.len\n                                });\n                            }\n\n                            series[groupName].width = series.yAxis.len;\n                            series[groupName].height = series.xAxis.len;\n                            series[groupName].invert(inverted);\n                        }\n                    });\n                }\n\n                // Pie, go away (#1736)\n                if (!series.xAxis) {\n                    return;\n                }\n\n                // A fixed size is needed for inversion to work\n                remover = addEvent(chart, 'resize', setInvert);\n                addEvent(series, 'destroy', remover);\n\n                // Do it now\n                setInvert(inverted); // do it now\n\n                // On subsequent render and redraw, just do setInvert without setting up events again\n                series.invertGroups = setInvert;\n            },\n\n            /**\n             * General abstraction for creating plot groups like series.group, series.dataLabelsGroup and\n             * series.markerGroup. On subsequent calls, the group will only be adjusted to the updated plot size.\n             */\n            plotGroup: function(prop, name, visibility, zIndex, parent) {\n                var group = this[prop],\n                    isNew = !group;\n\n                // Generate it on first call\n                if (isNew) {\n                    this[prop] = group = this.chart.renderer.g(name)\n                        .attr({\n                            zIndex: zIndex || 0.1 // IE8 and pointer logic use this\n                        })\n                        .add(parent);\n\n                    group.addClass('highcharts-series-' + this.index + ' highcharts-' + this.type + '-series highcharts-color-' + this.colorIndex +\n                        ' ' + (this.options.className || ''));\n                }\n\n                // Place it on first and subsequent (redraw) calls\n                group.attr({\n                    visibility: visibility\n                })[isNew ? 'attr' : 'animate'](this.getPlotBox());\n                return group;\n            },\n\n            /**\n             * Get the translation and scale for the plot area of this series\n             */\n            getPlotBox: function() {\n                var chart = this.chart,\n                    xAxis = this.xAxis,\n                    yAxis = this.yAxis;\n\n                // Swap axes for inverted (#2339)\n                if (chart.inverted) {\n                    xAxis = yAxis;\n                    yAxis = this.xAxis;\n                }\n                return {\n                    translateX: xAxis ? xAxis.left : chart.plotLeft,\n                    translateY: yAxis ? yAxis.top : chart.plotTop,\n                    scaleX: 1, // #1623\n                    scaleY: 1\n                };\n            },\n\n            /**\n             * Render the graph and markers\n             */\n            render: function() {\n                var series = this,\n                    chart = series.chart,\n                    group,\n                    options = series.options,\n                    // Animation doesn't work in IE8 quirks when the group div is hidden,\n                    // and looks bad in other oldIE\n                    animDuration = !!series.animate && chart.renderer.isSVG && animObject(options.animation).duration,\n                    visibility = series.visible ? 'inherit' : 'hidden', // #2597\n                    zIndex = options.zIndex,\n                    hasRendered = series.hasRendered,\n                    chartSeriesGroup = chart.seriesGroup,\n                    inverted = chart.inverted;\n\n                // the group\n                group = series.plotGroup(\n                    'group',\n                    'series',\n                    visibility,\n                    zIndex,\n                    chartSeriesGroup\n                );\n\n                series.markerGroup = series.plotGroup(\n                    'markerGroup',\n                    'markers',\n                    visibility,\n                    zIndex,\n                    chartSeriesGroup\n                );\n\n                // initiate the animation\n                if (animDuration) {\n                    series.animate(true);\n                }\n\n                // SVGRenderer needs to know this before drawing elements (#1089, #1795)\n                group.inverted = series.isCartesian ? inverted : false;\n\n                // draw the graph if any\n                if (series.drawGraph) {\n                    series.drawGraph();\n                    series.applyZones();\n                }\n\n                /*\t\teach(series.points, function (point) {\n                \t\t\tif (point.redraw) {\n                \t\t\t\tpoint.redraw();\n                \t\t\t}\n                \t\t});*/\n\n                // draw the data labels (inn pies they go before the points)\n                if (series.drawDataLabels) {\n                    series.drawDataLabels();\n                }\n\n                // draw the points\n                if (series.visible) {\n                    series.drawPoints();\n                }\n\n\n                // draw the mouse tracking area\n                if (series.drawTracker && series.options.enableMouseTracking !== false) {\n                    series.drawTracker();\n                }\n\n                // Handle inverted series and tracker groups\n                series.invertGroups(inverted);\n\n                // Initial clipping, must be defined after inverting groups for VML. Applies to columns etc. (#3839).\n                if (options.clip !== false && !series.sharedClipKey && !hasRendered) {\n                    group.clip(chart.clipRect);\n                }\n\n                // Run the animation\n                if (animDuration) {\n                    series.animate();\n                }\n\n                // Call the afterAnimate function on animation complete (but don't overwrite the animation.complete option\n                // which should be available to the user).\n                if (!hasRendered) {\n                    series.animationTimeout = syncTimeout(function() {\n                        series.afterAnimate();\n                    }, animDuration);\n                }\n\n                series.isDirty = false; // means data is in accordance with what you see\n                // (See #322) series.isDirty = series.isDirtyData = false; // means data is in accordance with what you see\n                series.hasRendered = true;\n            },\n\n            /**\n             * Redraw the series after an update in the axes.\n             */\n            redraw: function() {\n                var series = this,\n                    chart = series.chart,\n                    wasDirty = series.isDirty || series.isDirtyData, // cache it here as it is set to false in render, but used after\n                    group = series.group,\n                    xAxis = series.xAxis,\n                    yAxis = series.yAxis;\n\n                // reposition on resize\n                if (group) {\n                    if (chart.inverted) {\n                        group.attr({\n                            width: chart.plotWidth,\n                            height: chart.plotHeight\n                        });\n                    }\n\n                    group.animate({\n                        translateX: pick(xAxis && xAxis.left, chart.plotLeft),\n                        translateY: pick(yAxis && yAxis.top, chart.plotTop)\n                    });\n                }\n\n                series.translate();\n                series.render();\n                if (wasDirty) { // #3868, #3945\n                    delete this.kdTree;\n                }\n            },\n\n            /**\n             * KD Tree && PointSearching Implementation\n             */\n\n            kdAxisArray: ['clientX', 'plotY'],\n\n            searchPoint: function(e, compareX) {\n                var series = this,\n                    xAxis = series.xAxis,\n                    yAxis = series.yAxis,\n                    inverted = series.chart.inverted;\n\n                return this.searchKDTree({\n                    clientX: inverted ? xAxis.len - e.chartY + xAxis.pos : e.chartX - xAxis.pos,\n                    plotY: inverted ? yAxis.len - e.chartX + yAxis.pos : e.chartY - yAxis.pos\n                }, compareX);\n            },\n\n            /**\n             * Build the k-d-tree that is used by mouse and touch interaction to get the\n             * closest point. Line-like series typically have a one-dimensional tree \n             * where points are searched along the X axis, while scatter-like series\n             * typically search in two dimensions, X and Y.\n             */\n            buildKDTree: function() {\n\n                // Prevent multiple k-d-trees from being built simultaneously (#6235)\n                this.buildingKdTree = true;\n\n                var series = this,\n                    dimensions = series.options.findNearestPointBy.indexOf('y') > -1 ?\n                    2 : 1;\n\n                // Internal function\n                function _kdtree(points, depth, dimensions) {\n                    var axis,\n                        median,\n                        length = points && points.length;\n\n                    if (length) {\n\n                        // alternate between the axis\n                        axis = series.kdAxisArray[depth % dimensions];\n\n                        // sort point array\n                        points.sort(function(a, b) {\n                            return a[axis] - b[axis];\n                        });\n\n                        median = Math.floor(length / 2);\n\n                        // build and return nod\n                        return {\n                            point: points[median],\n                            left: _kdtree(points.slice(0, median), depth + 1, dimensions),\n                            right: _kdtree(points.slice(median + 1), depth + 1, dimensions)\n                        };\n\n                    }\n                }\n\n                // Start the recursive build process with a clone of the points array and null points filtered out (#3873)\n                function startRecursive() {\n                    series.kdTree = _kdtree(\n                        series.getValidPoints(\n                            null, !series.directTouch // For line-type series restrict to plot area, but column-type series not (#3916, #4511)\n                        ),\n                        dimensions,\n                        dimensions\n                    );\n                    series.buildingKdTree = false;\n                }\n                delete series.kdTree;\n\n                // For testing tooltips, don't build async\n                syncTimeout(startRecursive, series.options.kdNow ? 0 : 1);\n            },\n\n            searchKDTree: function(point, compareX) {\n                var series = this,\n                    kdX = this.kdAxisArray[0],\n                    kdY = this.kdAxisArray[1],\n                    kdComparer = compareX ? 'distX' : 'dist',\n                    kdDimensions = series.options.findNearestPointBy.indexOf('y') > -1 ?\n                    2 : 1;\n\n                // Set the one and two dimensional distance on the point object\n                function setDistance(p1, p2) {\n                    var x = (defined(p1[kdX]) && defined(p2[kdX])) ? Math.pow(p1[kdX] - p2[kdX], 2) : null,\n                        y = (defined(p1[kdY]) && defined(p2[kdY])) ? Math.pow(p1[kdY] - p2[kdY], 2) : null,\n                        r = (x || 0) + (y || 0);\n\n                    p2.dist = defined(r) ? Math.sqrt(r) : Number.MAX_VALUE;\n                    p2.distX = defined(x) ? Math.sqrt(x) : Number.MAX_VALUE;\n                }\n\n                function _search(search, tree, depth, dimensions) {\n                    var point = tree.point,\n                        axis = series.kdAxisArray[depth % dimensions],\n                        tdist,\n                        sideA,\n                        sideB,\n                        ret = point,\n                        nPoint1,\n                        nPoint2;\n\n                    setDistance(search, point);\n\n                    // Pick side based on distance to splitting point\n                    tdist = search[axis] - point[axis];\n                    sideA = tdist < 0 ? 'left' : 'right';\n                    sideB = tdist < 0 ? 'right' : 'left';\n\n                    // End of tree\n                    if (tree[sideA]) {\n                        nPoint1 = _search(search, tree[sideA], depth + 1, dimensions);\n\n                        ret = (nPoint1[kdComparer] < ret[kdComparer] ? nPoint1 : point);\n                    }\n                    if (tree[sideB]) {\n                        // compare distance to current best to splitting point to decide wether to check side B or not\n                        if (Math.sqrt(tdist * tdist) < ret[kdComparer]) {\n                            nPoint2 = _search(search, tree[sideB], depth + 1, dimensions);\n                            ret = (nPoint2[kdComparer] < ret[kdComparer] ? nPoint2 : ret);\n                        }\n                    }\n\n                    return ret;\n                }\n\n                if (!this.kdTree && !this.buildingKdTree) {\n                    this.buildKDTree();\n                }\n\n                if (this.kdTree) {\n                    return _search(point, this.kdTree, kdDimensions, kdDimensions);\n                }\n            }\n\n        }); // end Series prototype\n\n    }(Highcharts));\n    (function(H) {\n        /**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */\n        var Axis = H.Axis,\n            Chart = H.Chart,\n            correctFloat = H.correctFloat,\n            defined = H.defined,\n            destroyObjectProperties = H.destroyObjectProperties,\n            each = H.each,\n            format = H.format,\n            pick = H.pick,\n            Series = H.Series;\n\n        /**\n         * The class for stacks. Each stack, on a specific X value and either negative\n         * or positive, has its own stack item.\n         *\n         * @class\n         */\n        function StackItem(axis, options, isNegative, x, stackOption) {\n\n            var inverted = axis.chart.inverted;\n\n            this.axis = axis;\n\n            // Tells if the stack is negative\n            this.isNegative = isNegative;\n\n            // Save the options to be able to style the label\n            this.options = options;\n\n            // Save the x value to be able to position the label later\n            this.x = x;\n\n            // Initialize total value\n            this.total = null;\n\n            // This will keep each points' extremes stored by series.index and point \n            // index\n            this.points = {};\n\n            // Save the stack option on the series configuration object, and whether to \n            // treat it as percent\n            this.stack = stackOption;\n            this.leftCliff = 0;\n            this.rightCliff = 0;\n\n            // The align options and text align varies on whether the stack is negative \n            // and if the chart is inverted or not.\n            // First test the user supplied value, then use the dynamic.\n            this.alignOptions = {\n                align: options.align ||\n                    (inverted ? (isNegative ? 'left' : 'right') : 'center'),\n                verticalAlign: options.verticalAlign ||\n                    (inverted ? 'middle' : (isNegative ? 'bottom' : 'top')),\n                y: pick(options.y, inverted ? 4 : (isNegative ? 14 : -6)),\n                x: pick(options.x, inverted ? (isNegative ? -6 : 6) : 0)\n            };\n\n            this.textAlign = options.textAlign ||\n                (inverted ? (isNegative ? 'right' : 'left') : 'center');\n        }\n\n        StackItem.prototype = {\n            destroy: function() {\n                destroyObjectProperties(this, this.axis);\n            },\n\n            /**\n             * Renders the stack total label and adds it to the stack label group.\n             */\n            render: function(group) {\n                var options = this.options,\n                    formatOption = options.format,\n                    str = formatOption ?\n                    format(formatOption, this) :\n                    options.formatter.call(this); // format the text in the label\n\n                // Change the text to reflect the new total and set visibility to hidden\n                // in case the serie is hidden\n                if (this.label) {\n                    this.label.attr({\n                        text: str,\n                        visibility: 'hidden'\n                    });\n                    // Create new label\n                } else {\n                    this.label =\n                        this.axis.chart.renderer.text(str, null, null, options.useHTML)\n                        .css(options.style)\n                        .attr({\n                            align: this.textAlign,\n                            rotation: options.rotation,\n                            visibility: 'hidden' // hidden until setOffset is called\n                        })\n                        .add(group); // add to the labels-group\n                }\n            },\n\n            /**\n             * Sets the offset that the stack has from the x value and repositions the\n             * label.\n             */\n            setOffset: function(xOffset, xWidth) {\n                var stackItem = this,\n                    axis = stackItem.axis,\n                    chart = axis.chart,\n                    inverted = chart.inverted,\n                    reversed = axis.reversed,\n                    neg = (this.isNegative && !reversed) ||\n                    (!this.isNegative && reversed), // #4056\n                    // stack value translated mapped to chart coordinates\n                    y = axis.translate(\n                        axis.usePercentage ? 100 : this.total,\n                        0,\n                        0,\n                        0,\n                        1\n                    ),\n                    yZero = axis.translate(0), // stack origin\n                    h = Math.abs(y - yZero), // stack height\n                    x = chart.xAxis[0].translate(this.x) + xOffset, // stack x position\n                    plotHeight = chart.plotHeight,\n                    stackBox = { // this is the box for the complete stack\n                        x: inverted ? (neg ? y : y - h) : x,\n                        y: inverted ?\n                            plotHeight - x - xWidth : (neg ? (plotHeight - y - h) :\n                                plotHeight - y),\n                        width: inverted ? h : xWidth,\n                        height: inverted ? xWidth : h\n                    },\n                    label = this.label,\n                    alignAttr;\n\n                if (label) {\n                    // Align the label to the box\n                    label.align(this.alignOptions, null, stackBox);\n\n                    // Set visibility (#678)\n                    alignAttr = label.alignAttr;\n                    label[\n                        this.options.crop === false || chart.isInsidePlot(\n                            alignAttr.x,\n                            alignAttr.y\n                        ) ? 'show' : 'hide'](true);\n                }\n            }\n        };\n\n        /**\n         * Generate stacks for each series and calculate stacks total values\n         */\n        Chart.prototype.getStacks = function() {\n            var chart = this;\n\n            // reset stacks for each yAxis\n            each(chart.yAxis, function(axis) {\n                if (axis.stacks && axis.hasVisibleSeries) {\n                    axis.oldStacks = axis.stacks;\n                }\n            });\n\n            each(chart.series, function(series) {\n                if (series.options.stacking && (series.visible === true ||\n                        chart.options.chart.ignoreHiddenSeries === false)) {\n                    series.stackKey = series.type + pick(series.options.stack, '');\n                }\n            });\n        };\n\n\n        // Stacking methods defined on the Axis prototype\n\n        /**\n         * Build the stacks from top down\n         */\n        Axis.prototype.buildStacks = function() {\n            var axisSeries = this.series,\n                series,\n                reversedStacks = pick(this.options.reversedStacks, true),\n                len = axisSeries.length,\n                i;\n            if (!this.isXAxis) {\n                this.usePercentage = false;\n                i = len;\n                while (i--) {\n                    axisSeries[reversedStacks ? i : len - i - 1].setStackedPoints();\n                }\n\n                i = len;\n                while (i--) {\n                    series = axisSeries[reversedStacks ? i : len - i - 1];\n                    if (series.setStackCliffs) {\n                        series.setStackCliffs();\n                    }\n                }\n                // Loop up again to compute percent stack\n                if (this.usePercentage) {\n                    for (i = 0; i < len; i++) {\n                        axisSeries[i].setPercentStacks();\n                    }\n                }\n            }\n        };\n\n        Axis.prototype.renderStackTotals = function() {\n            var axis = this,\n                chart = axis.chart,\n                renderer = chart.renderer,\n                stacks = axis.stacks,\n                stackKey,\n                oneStack,\n                stackCategory,\n                stackTotalGroup = axis.stackTotalGroup;\n\n            // Create a separate group for the stack total labels\n            if (!stackTotalGroup) {\n                axis.stackTotalGroup = stackTotalGroup =\n                    renderer.g('stack-labels')\n                    .attr({\n                        visibility: 'visible',\n                        zIndex: 6\n                    })\n                    .add();\n            }\n\n            // plotLeft/Top will change when y axis gets wider so we need to translate\n            // the stackTotalGroup at every render call. See bug #506 and #516\n            stackTotalGroup.translate(chart.plotLeft, chart.plotTop);\n\n            // Render each stack total\n            for (stackKey in stacks) {\n                oneStack = stacks[stackKey];\n                for (stackCategory in oneStack) {\n                    oneStack[stackCategory].render(stackTotalGroup);\n                }\n            }\n        };\n\n        /**\n         * Set all the stacks to initial states and destroy unused ones.\n         */\n        Axis.prototype.resetStacks = function() {\n            var stacks = this.stacks,\n                type,\n                i;\n            if (!this.isXAxis) {\n                for (type in stacks) {\n                    for (i in stacks[type]) {\n\n                        // Clean up memory after point deletion (#1044, #4320)\n                        if (stacks[type][i].touched < this.stacksTouched) {\n                            stacks[type][i].destroy();\n                            delete stacks[type][i];\n\n                            // Reset stacks\n                        } else {\n                            stacks[type][i].total = null;\n                            stacks[type][i].cum = null;\n                        }\n                    }\n                }\n            }\n        };\n\n        Axis.prototype.cleanStacks = function() {\n            var stacks, type, i;\n\n            if (!this.isXAxis) {\n                if (this.oldStacks) {\n                    stacks = this.stacks = this.oldStacks;\n                }\n\n                // reset stacks\n                for (type in stacks) {\n                    for (i in stacks[type]) {\n                        stacks[type][i].cum = stacks[type][i].total;\n                    }\n                }\n            }\n        };\n\n\n        // Stacking methods defnied for Series prototype\n\n        /**\n         * Adds series' points value to corresponding stack\n         */\n        Series.prototype.setStackedPoints = function() {\n            if (!this.options.stacking || (this.visible !== true &&\n                    this.chart.options.chart.ignoreHiddenSeries !== false)) {\n                return;\n            }\n\n            var series = this,\n                xData = series.processedXData,\n                yData = series.processedYData,\n                stackedYData = [],\n                yDataLength = yData.length,\n                seriesOptions = series.options,\n                threshold = seriesOptions.threshold,\n                stackThreshold = seriesOptions.startFromThreshold ? threshold : 0,\n                stackOption = seriesOptions.stack,\n                stacking = seriesOptions.stacking,\n                stackKey = series.stackKey,\n                negKey = '-' + stackKey,\n                negStacks = series.negStacks,\n                yAxis = series.yAxis,\n                stacks = yAxis.stacks,\n                oldStacks = yAxis.oldStacks,\n                stackIndicator,\n                isNegative,\n                stack,\n                other,\n                key,\n                pointKey,\n                i,\n                x,\n                y;\n\n\n            yAxis.stacksTouched += 1;\n\n            // loop over the non-null y values and read them into a local array\n            for (i = 0; i < yDataLength; i++) {\n                x = xData[i];\n                y = yData[i];\n                stackIndicator = series.getStackIndicator(\n                    stackIndicator,\n                    x,\n                    series.index\n                );\n                pointKey = stackIndicator.key;\n                // Read stacked values into a stack based on the x value,\n                // the sign of y and the stack key. Stacking is also handled for null\n                // values (#739)\n                isNegative = negStacks && y < (stackThreshold ? 0 : threshold);\n                key = isNegative ? negKey : stackKey;\n\n                // Create empty object for this stack if it doesn't exist yet\n                if (!stacks[key]) {\n                    stacks[key] = {};\n                }\n\n                // Initialize StackItem for this x\n                if (!stacks[key][x]) {\n                    if (oldStacks[key] && oldStacks[key][x]) {\n                        stacks[key][x] = oldStacks[key][x];\n                        stacks[key][x].total = null;\n                    } else {\n                        stacks[key][x] = new StackItem(\n                            yAxis,\n                            yAxis.options.stackLabels,\n                            isNegative,\n                            x,\n                            stackOption\n                        );\n                    }\n                }\n\n                // If the StackItem doesn't exist, create it first\n                stack = stacks[key][x];\n                if (y !== null) {\n                    stack.points[pointKey] = stack.points[series.index] = [pick(stack.cum, stackThreshold)];\n\n                    // Record the base of the stack\n                    if (!defined(stack.cum)) {\n                        stack.base = pointKey;\n                    }\n                    stack.touched = yAxis.stacksTouched;\n\n\n                    // In area charts, if there are multiple points on the same X value,\n                    // let the area fill the full span of those points\n                    if (stackIndicator.index > 0 && series.singleStacks === false) {\n                        stack.points[pointKey][0] =\n                            stack.points[series.index + ',' + x + ',0'][0];\n                    }\n                }\n\n                // Add value to the stack total\n                if (stacking === 'percent') {\n\n                    // Percent stacked column, totals are the same for the positive and\n                    // negative stacks\n                    other = isNegative ? stackKey : negKey;\n                    if (negStacks && stacks[other] && stacks[other][x]) {\n                        other = stacks[other][x];\n                        stack.total = other.total =\n                            Math.max(other.total, stack.total) + Math.abs(y) || 0;\n\n                        // Percent stacked areas\n                    } else {\n                        stack.total = correctFloat(stack.total + (Math.abs(y) || 0));\n                    }\n                } else {\n                    stack.total = correctFloat(stack.total + (y || 0));\n                }\n\n                stack.cum = pick(stack.cum, stackThreshold) + (y || 0);\n\n                if (y !== null) {\n                    stack.points[pointKey].push(stack.cum);\n                    stackedYData[i] = stack.cum;\n                }\n\n            }\n\n            if (stacking === 'percent') {\n                yAxis.usePercentage = true;\n            }\n\n            this.stackedYData = stackedYData; // To be used in getExtremes\n\n            // Reset old stacks\n            yAxis.oldStacks = {};\n        };\n\n        /**\n         * Iterate over all stacks and compute the absolute values to percent\n         */\n        Series.prototype.setPercentStacks = function() {\n            var series = this,\n                stackKey = series.stackKey,\n                stacks = series.yAxis.stacks,\n                processedXData = series.processedXData,\n                stackIndicator;\n\n            each([stackKey, '-' + stackKey], function(key) {\n                var i = processedXData.length,\n                    x,\n                    stack,\n                    pointExtremes,\n                    totalFactor;\n\n                while (i--) {\n                    x = processedXData[i];\n                    stackIndicator = series.getStackIndicator(\n                        stackIndicator,\n                        x,\n                        series.index,\n                        key\n                    );\n                    stack = stacks[key] && stacks[key][x];\n                    pointExtremes = stack && stack.points[stackIndicator.key];\n                    if (pointExtremes) {\n                        totalFactor = stack.total ? 100 / stack.total : 0;\n                        // Y bottom value\n                        pointExtremes[0] = correctFloat(pointExtremes[0] * totalFactor);\n                        // Y value\n                        pointExtremes[1] = correctFloat(pointExtremes[1] * totalFactor);\n                        series.stackedYData[i] = pointExtremes[1];\n                    }\n                }\n            });\n        };\n\n        /**\n         * Get stack indicator, according to it's x-value, to determine points with the\n         * same x-value\n         */\n        Series.prototype.getStackIndicator = function(stackIndicator, x, index, key) {\n            // Update stack indicator, when:\n            // first point in a stack || x changed || stack type (negative vs positive)\n            // changed:\n            if (!defined(stackIndicator) || stackIndicator.x !== x ||\n                (key && stackIndicator.key !== key)) {\n                stackIndicator = {\n                    x: x,\n                    index: 0,\n                    key: key\n                };\n            } else {\n                stackIndicator.index++;\n            }\n\n            stackIndicator.key = [index, x, stackIndicator.index].join(',');\n\n            return stackIndicator;\n        };\n\n    }(Highcharts));\n    (function(H) {\n        /**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */\n        var addEvent = H.addEvent,\n            animate = H.animate,\n            Axis = H.Axis,\n            Chart = H.Chart,\n            createElement = H.createElement,\n            css = H.css,\n            defined = H.defined,\n            each = H.each,\n            erase = H.erase,\n            extend = H.extend,\n            fireEvent = H.fireEvent,\n            inArray = H.inArray,\n            isNumber = H.isNumber,\n            isObject = H.isObject,\n            merge = H.merge,\n            pick = H.pick,\n            Point = H.Point,\n            Series = H.Series,\n            seriesTypes = H.seriesTypes,\n            setAnimation = H.setAnimation,\n            splat = H.splat;\n\n        // Extend the Chart prototype for dynamic methods\n        extend(Chart.prototype, /** @lends Highcharts.Chart.prototype */ {\n\n            /**\n             * Add a series dynamically after  time\n             *\n             * @param {Object} options The config options\n             * @param {Boolean} redraw Whether to redraw the chart after adding. Defaults to true.\n             * @param {Boolean|Object} animation Whether to apply animation, and optionally animation\n             *    configuration\n             *\n             * @return {Object} series The newly created series object\n             */\n            addSeries: function(options, redraw, animation) {\n                var series,\n                    chart = this;\n\n                if (options) {\n                    redraw = pick(redraw, true); // defaults to true\n\n                    fireEvent(chart, 'addSeries', {\n                        options: options\n                    }, function() {\n                        series = chart.initSeries(options);\n\n                        chart.isDirtyLegend = true; // the series array is out of sync with the display\n                        chart.linkSeries();\n                        if (redraw) {\n                            chart.redraw(animation);\n                        }\n                    });\n                }\n\n                return series;\n            },\n\n            /**\n             * Add an axis to the chart\n             * @param {Object} options The axis option\n             * @param {Boolean} isX Whether it is an X axis or a value axis\n             */\n            addAxis: function(options, isX, redraw, animation) {\n                var key = isX ? 'xAxis' : 'yAxis',\n                    chartOptions = this.options,\n                    userOptions = merge(options, {\n                        index: this[key].length,\n                        isX: isX\n                    });\n\n                new Axis(this, userOptions); // eslint-disable-line no-new\n\n                // Push the new axis options to the chart options\n                chartOptions[key] = splat(chartOptions[key] || {});\n                chartOptions[key].push(userOptions);\n\n                if (pick(redraw, true)) {\n                    this.redraw(animation);\n                }\n            },\n\n            /**\n             * Dim the chart and show a loading text or symbol\n             * @param {String} str An optional text to show in the loading label instead of the default one\n             */\n            showLoading: function(str) {\n                var chart = this,\n                    options = chart.options,\n                    loadingDiv = chart.loadingDiv,\n                    loadingOptions = options.loading,\n                    setLoadingSize = function() {\n                        if (loadingDiv) {\n                            css(loadingDiv, {\n                                left: chart.plotLeft + 'px',\n                                top: chart.plotTop + 'px',\n                                width: chart.plotWidth + 'px',\n                                height: chart.plotHeight + 'px'\n                            });\n                        }\n                    };\n\n                // create the layer at the first call\n                if (!loadingDiv) {\n                    chart.loadingDiv = loadingDiv = createElement('div', {\n                        className: 'highcharts-loading highcharts-loading-hidden'\n                    }, null, chart.container);\n\n                    chart.loadingSpan = createElement(\n                        'span', {\n                            className: 'highcharts-loading-inner'\n                        },\n                        null,\n                        loadingDiv\n                    );\n                    addEvent(chart, 'redraw', setLoadingSize); // #1080\n                }\n\n                loadingDiv.className = 'highcharts-loading';\n\n                // Update text\n                chart.loadingSpan.innerHTML = str || options.lang.loading;\n\n\n                // Update visuals\n                css(loadingDiv, extend(loadingOptions.style, {\n                    zIndex: 10\n                }));\n                css(chart.loadingSpan, loadingOptions.labelStyle);\n\n                // Show it\n                if (!chart.loadingShown) {\n                    css(loadingDiv, {\n                        opacity: 0,\n                        display: ''\n                    });\n                    animate(loadingDiv, {\n                        opacity: loadingOptions.style.opacity || 0.5\n                    }, {\n                        duration: loadingOptions.showDuration || 0\n                    });\n                }\n\n\n                chart.loadingShown = true;\n                setLoadingSize();\n            },\n\n            /**\n             * Hide the loading layer\n             */\n            hideLoading: function() {\n                var options = this.options,\n                    loadingDiv = this.loadingDiv;\n\n                if (loadingDiv) {\n                    loadingDiv.className = 'highcharts-loading highcharts-loading-hidden';\n\n                    animate(loadingDiv, {\n                        opacity: 0\n                    }, {\n                        duration: options.loading.hideDuration || 100,\n                        complete: function() {\n                            css(loadingDiv, {\n                                display: 'none'\n                            });\n                        }\n                    });\n\n                }\n                this.loadingShown = false;\n            },\n\n            /** \n             * These properties cause isDirtyBox to be set to true when updating. Can be extended from plugins.\n             */\n            propsRequireDirtyBox: ['backgroundColor', 'borderColor', 'borderWidth', 'margin', 'marginTop', 'marginRight',\n                'marginBottom', 'marginLeft', 'spacing', 'spacingTop', 'spacingRight', 'spacingBottom', 'spacingLeft',\n                'borderRadius', 'plotBackgroundColor', 'plotBackgroundImage', 'plotBorderColor', 'plotBorderWidth',\n                'plotShadow', 'shadow'\n            ],\n\n            /** \n             * These properties cause all series to be updated when updating. Can be\n             * extended from plugins.\n             */\n            propsRequireUpdateSeries: ['chart.inverted', 'chart.polar',\n                'chart.ignoreHiddenSeries', 'chart.type', 'colors', 'plotOptions'\n            ],\n\n            /**\n             * Chart.update function that takes the whole options stucture.\n             */\n            update: function(options, redraw) {\n                var key,\n                    adders = {\n                        credits: 'addCredits',\n                        title: 'setTitle',\n                        subtitle: 'setSubtitle'\n                    },\n                    optionsChart = options.chart,\n                    updateAllAxes,\n                    updateAllSeries,\n                    newWidth,\n                    newHeight;\n\n                // If the top-level chart option is present, some special updates are required\t\t\n                if (optionsChart) {\n                    merge(true, this.options.chart, optionsChart);\n\n                    // Setter function\n                    if ('className' in optionsChart) {\n                        this.setClassName(optionsChart.className);\n                    }\n\n                    if ('inverted' in optionsChart || 'polar' in optionsChart) {\n                        // Parse options.chart.inverted and options.chart.polar together\n                        // with the available series.\n                        this.propFromSeries();\n                        updateAllAxes = true;\n                    }\n\n                    if ('alignTicks' in optionsChart) { // #6452\n                        updateAllAxes = true;\n                    }\n\n                    for (key in optionsChart) {\n                        if (optionsChart.hasOwnProperty(key)) {\n                            if (inArray('chart.' + key, this.propsRequireUpdateSeries) !== -1) {\n                                updateAllSeries = true;\n                            }\n                            // Only dirty box\n                            if (inArray(key, this.propsRequireDirtyBox) !== -1) {\n                                this.isDirtyBox = true;\n                            }\n\n                        }\n                    }\n\n\n                    if ('style' in optionsChart) {\n                        this.renderer.setStyle(optionsChart.style);\n                    }\n\n                }\n\n                // Some option stuctures correspond one-to-one to chart objects that have\n                // update methods, for example\n                // options.credits => chart.credits\n                // options.legend => chart.legend\n                // options.title => chart.title\n                // options.tooltip => chart.tooltip\n                // options.subtitle => chart.subtitle\n                // options.mapNavigation => chart.mapNavigation\n                // options.navigator => chart.navigator\n                // options.scrollbar => chart.scrollbar\n                for (key in options) {\n                    if (this[key] && typeof this[key].update === 'function') {\n                        this[key].update(options[key], false);\n\n                        // If a one-to-one object does not exist, look for an adder function\n                    } else if (typeof this[adders[key]] === 'function') {\n                        this[adders[key]](options[key]);\n                    }\n\n                    if (key !== 'chart' && inArray(key, this.propsRequireUpdateSeries) !== -1) {\n                        updateAllSeries = true;\n                    }\n                }\n\n\n                if (options.colors) {\n                    this.options.colors = options.colors;\n                }\n\n\n                if (options.plotOptions) {\n                    merge(true, this.options.plotOptions, options.plotOptions);\n                }\n\n                // Setters for collections. For axes and series, each item is referred\n                // by an id. If the id is not found, it defaults to the corresponding\n                // item in the collection, so setting one series without an id, will\n                // update the first series in the chart. Setting two series without\n                // an id will update the first and the second respectively (#6019)\n                // chart.update and responsive.\n                each(['xAxis', 'yAxis', 'series', 'colorAxis', 'pane'], function(coll) {\n                    if (options[coll]) {\n                        each(splat(options[coll]), function(newOptions, i) {\n                            var item = (\n                                defined(newOptions.id) &&\n                                this.get(newOptions.id)\n                            ) || this[coll][i];\n                            if (item && item.coll === coll) {\n                                item.update(newOptions, false);\n                            }\n                        }, this);\n                    }\n                }, this);\n\n                if (updateAllAxes) {\n                    each(this.axes, function(axis) {\n                        axis.update({}, false);\n                    });\n                }\n\n                // Certain options require the whole series structure to be thrown away\n                // and rebuilt\n                if (updateAllSeries) {\n                    each(this.series, function(series) {\n                        series.update({}, false);\n                    });\n                }\n\n                // For loading, just update the options, do not redraw\n                if (options.loading) {\n                    merge(true, this.options.loading, options.loading);\n                }\n\n                // Update size. Redraw is forced.\n                newWidth = optionsChart && optionsChart.width;\n                newHeight = optionsChart && optionsChart.height;\n                if ((isNumber(newWidth) && newWidth !== this.chartWidth) ||\n                    (isNumber(newHeight) && newHeight !== this.chartHeight)) {\n                    this.setSize(newWidth, newHeight);\n                } else if (pick(redraw, true)) {\n                    this.redraw();\n                }\n            },\n\n            /**\n             * Setter function to allow use from chart.update\n             */\n            setSubtitle: function(options) {\n                this.setTitle(undefined, options);\n            }\n\n\n        });\n\n        // extend the Point prototype for dynamic methods\n        extend(Point.prototype, /** @lends Point.prototype */ {\n            /**\n             * Point.update with new options (typically x/y data) and optionally redraw the series.\n             *\n             * @param {Object} options Point options as defined in the series.data array\n             * @param {Boolean} redraw Whether to redraw the chart or wait for an explicit call\n             * @param {Boolean|Object} animation Whether to apply animation, and optionally animation\n             *    configuration\n             */\n            update: function(options, redraw, animation, runEvent) {\n                var point = this,\n                    series = point.series,\n                    graphic = point.graphic,\n                    i,\n                    chart = series.chart,\n                    seriesOptions = series.options;\n\n                redraw = pick(redraw, true);\n\n                function update() {\n\n                    point.applyOptions(options);\n\n                    // Update visuals\n                    if (point.y === null && graphic) { // #4146\n                        point.graphic = graphic.destroy();\n                    }\n                    if (isObject(options, true)) {\n                        // Destroy so we can get new elements\n                        if (graphic && graphic.element) {\n                            if (options && options.marker && options.marker.symbol) {\n                                point.graphic = graphic.destroy();\n                            }\n                        }\n                        if (options && options.dataLabels && point.dataLabel) { // #2468\n                            point.dataLabel = point.dataLabel.destroy();\n                        }\n                    }\n\n                    // record changes in the parallel arrays\n                    i = point.index;\n                    series.updateParallelArrays(point, i);\n\n                    // Record the options to options.data. If the old or the new config\n                    // is an object, use point options, otherwise use raw options\n                    // (#4701, #4916).\n                    seriesOptions.data[i] = (\n                            isObject(seriesOptions.data[i], true) ||\n                            isObject(options, true)\n                        ) ?\n                        point.options :\n                        options;\n\n                    // redraw\n                    series.isDirty = series.isDirtyData = true;\n                    if (!series.fixedBox && series.hasCartesianSeries) { // #1906, #2320\n                        chart.isDirtyBox = true;\n                    }\n\n                    if (seriesOptions.legendType === 'point') { // #1831, #1885\n                        chart.isDirtyLegend = true;\n                    }\n                    if (redraw) {\n                        chart.redraw(animation);\n                    }\n                }\n\n                // Fire the event with a default handler of doing the update\n                if (runEvent === false) { // When called from setData\n                    update();\n                } else {\n                    point.firePointEvent('update', {\n                        options: options\n                    }, update);\n                }\n            },\n\n            /**\n             * Remove a point and optionally redraw the series and if necessary the axes\n             * @param {Boolean} redraw Whether to redraw the chart or wait for an explicit call\n             * @param {Boolean|Object} animation Whether to apply animation, and optionally animation\n             *    configuration\n             */\n            remove: function(redraw, animation) {\n                this.series.removePoint(inArray(this, this.series.data), redraw, animation);\n            }\n        });\n\n        // Extend the series prototype for dynamic methods\n        extend(Series.prototype, /** @lends Series.prototype */ {\n            /**\n             * Add a point dynamically after chart load time\n             * @param {Object} options Point options as given in series.data\n             * @param {Boolean} redraw Whether to redraw the chart or wait for an explicit call\n             * @param {Boolean} shift If shift is true, a point is shifted off the start\n             *    of the series as one is appended to the end.\n             * @param {Boolean|AnimationOptions} animation Whether to apply animation, and optionally animation\n             *    configuration\n             */\n            addPoint: function(options, redraw, shift, animation) {\n                var series = this,\n                    seriesOptions = series.options,\n                    data = series.data,\n                    chart = series.chart,\n                    xAxis = series.xAxis,\n                    names = xAxis && xAxis.hasNames && xAxis.names,\n                    dataOptions = seriesOptions.data,\n                    point,\n                    isInTheMiddle,\n                    xData = series.xData,\n                    i,\n                    x;\n\n                // Optional redraw, defaults to true\n                redraw = pick(redraw, true);\n\n                // Get options and push the point to xData, yData and series.options. In series.generatePoints\n                // the Point instance will be created on demand and pushed to the series.data array.\n                point = {\n                    series: series\n                };\n                series.pointClass.prototype.applyOptions.apply(point, [options]);\n                x = point.x;\n\n                // Get the insertion point\n                i = xData.length;\n                if (series.requireSorting && x < xData[i - 1]) {\n                    isInTheMiddle = true;\n                    while (i && xData[i - 1] > x) {\n                        i--;\n                    }\n                }\n\n                series.updateParallelArrays(point, 'splice', i, 0, 0); // insert undefined item\n                series.updateParallelArrays(point, i); // update it\n\n                if (names && point.name) {\n                    names[x] = point.name;\n                }\n                dataOptions.splice(i, 0, options);\n\n                if (isInTheMiddle) {\n                    series.data.splice(i, 0, null);\n                    series.processData();\n                }\n\n                // Generate points to be added to the legend (#1329)\n                if (seriesOptions.legendType === 'point') {\n                    series.generatePoints();\n                }\n\n                // Shift the first point off the parallel arrays\n                if (shift) {\n                    if (data[0] && data[0].remove) {\n                        data[0].remove(false);\n                    } else {\n                        data.shift();\n                        series.updateParallelArrays(point, 'shift');\n\n                        dataOptions.shift();\n                    }\n                }\n\n                // redraw\n                series.isDirty = true;\n                series.isDirtyData = true;\n\n                if (redraw) {\n                    chart.redraw(animation); // Animation is set anyway on redraw, #5665\n                }\n            },\n\n            /**\n             * Remove a point (rendered or not), by index\n             */\n            removePoint: function(i, redraw, animation) {\n\n                var series = this,\n                    data = series.data,\n                    point = data[i],\n                    points = series.points,\n                    chart = series.chart,\n                    remove = function() {\n\n                        if (points && points.length === data.length) { // #4935\n                            points.splice(i, 1);\n                        }\n                        data.splice(i, 1);\n                        series.options.data.splice(i, 1);\n                        series.updateParallelArrays(point || {\n                            series: series\n                        }, 'splice', i, 1);\n\n                        if (point) {\n                            point.destroy();\n                        }\n\n                        // redraw\n                        series.isDirty = true;\n                        series.isDirtyData = true;\n                        if (redraw) {\n                            chart.redraw();\n                        }\n                    };\n\n                setAnimation(animation, chart);\n                redraw = pick(redraw, true);\n\n                // Fire the event with a default handler of removing the point\n                if (point) {\n                    point.firePointEvent('remove', null, remove);\n                } else {\n                    remove();\n                }\n            },\n\n            /**\n             * Remove a series and optionally redraw the chart\n             *\n             * @param {Boolean} redraw Whether to redraw the chart or wait for an explicit call\n             * @param {Boolean|Object} animation Whether to apply animation, and optionally animation\n             *    configuration\n             */\n            remove: function(redraw, animation, withEvent) {\n                var series = this,\n                    chart = series.chart;\n\n                function remove() {\n\n                    // Destroy elements\n                    series.destroy();\n\n                    // Redraw\n                    chart.isDirtyLegend = chart.isDirtyBox = true;\n                    chart.linkSeries();\n\n                    if (pick(redraw, true)) {\n                        chart.redraw(animation);\n                    }\n                }\n\n                // Fire the event with a default handler of removing the point\n                if (withEvent !== false) {\n                    fireEvent(series, 'remove', null, remove);\n                } else {\n                    remove();\n                }\n            },\n\n            /**\n             * Series.update with a new set of options\n             */\n            update: function(newOptions, redraw) {\n                var series = this,\n                    chart = this.chart,\n                    // must use user options when changing type because this.options is merged\n                    // in with type specific plotOptions\n                    oldOptions = this.userOptions,\n                    oldType = this.oldType || this.type,\n                    newType = newOptions.type || oldOptions.type || chart.options.chart.type,\n                    proto = seriesTypes[oldType].prototype,\n                    preserve = ['group', 'markerGroup', 'dataLabelsGroup'],\n                    n;\n\n                // If we're changing type or zIndex, create new groups (#3380, #3404)\n                if ((newType && newType !== oldType) || newOptions.zIndex !== undefined) {\n                    preserve.length = 0;\n                }\n\n                // Make sure groups are not destroyed (#3094)\n                each(preserve, function(prop) {\n                    preserve[prop] = series[prop];\n                    delete series[prop];\n                });\n\n                // Do the merge, with some forced options\n                newOptions = merge(oldOptions, {\n                    animation: false,\n                    index: this.index,\n                    pointStart: this.xData[0] // when updating after addPoint\n                }, {\n                    data: this.options.data\n                }, newOptions);\n\n                // Destroy the series and delete all properties. Reinsert all methods\n                // and properties from the new type prototype (#2270, #3719)\n                this.remove(false, null, false);\n                for (n in proto) {\n                    this[n] = undefined;\n                }\n                extend(this, seriesTypes[newType || oldType].prototype);\n\n                // Re-register groups (#3094)\n                each(preserve, function(prop) {\n                    series[prop] = preserve[prop];\n                });\n\n                this.init(chart, newOptions);\n                this.oldType = oldType;\n                chart.linkSeries(); // Links are lost in this.remove (#3028)\n                if (pick(redraw, true)) {\n                    chart.redraw(false);\n                }\n            }\n        });\n\n        // Extend the Axis.prototype for dynamic methods\n        extend(Axis.prototype, /** @lends Axis.prototype */ {\n\n            /**\n             * Axis.update with a new options structure\n             */\n            update: function(newOptions, redraw) {\n                var chart = this.chart;\n\n                newOptions = chart.options[this.coll][this.options.index] = merge(this.userOptions, newOptions);\n\n                this.destroy(true);\n\n                this.init(chart, extend(newOptions, {\n                    events: undefined\n                }));\n\n                chart.isDirtyBox = true;\n                if (pick(redraw, true)) {\n                    chart.redraw();\n                }\n            },\n\n            /**\n             * Remove the axis from the chart\n             */\n            remove: function(redraw) {\n                var chart = this.chart,\n                    key = this.coll, // xAxis or yAxis\n                    axisSeries = this.series,\n                    i = axisSeries.length;\n\n                // Remove associated series (#2687)\n                while (i--) {\n                    if (axisSeries[i]) {\n                        axisSeries[i].remove(false);\n                    }\n                }\n\n                // Remove the axis\n                erase(chart.axes, this);\n                erase(chart[key], this);\n                chart.options[key].splice(this.options.index, 1);\n                each(chart[key], function(axis, i) { // Re-index, #1706\n                    axis.options.index = i;\n                });\n                this.destroy();\n                chart.isDirtyBox = true;\n\n                if (pick(redraw, true)) {\n                    chart.redraw();\n                }\n            },\n\n            /**\n             * Update the axis title by options\n             */\n            setTitle: function(newTitleOptions, redraw) {\n                this.update({\n                    title: newTitleOptions\n                }, redraw);\n            },\n\n            /**\n             * Set new axis categories and optionally redraw\n             * @param {Array} categories\n             * @param {Boolean} redraw\n             */\n            setCategories: function(categories, redraw) {\n                this.update({\n                    categories: categories\n                }, redraw);\n            }\n\n        });\n\n    }(Highcharts));\n    (function(H) {\n        /**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */\n        var color = H.color,\n            each = H.each,\n            LegendSymbolMixin = H.LegendSymbolMixin,\n            map = H.map,\n            pick = H.pick,\n            Series = H.Series,\n            seriesType = H.seriesType;\n\n        /**\n         * Area series type.\n         * @constructor seriesTypes.area\n         * @extends {Series}\n         */\n        seriesType('area', 'line', {\n            softThreshold: false,\n            threshold: 0\n            // trackByArea: false,\n            // lineColor: null, // overrides color, but lets fillColor be unaltered\n            // fillOpacity: 0.75,\n            // fillColor: null\n        }, /** @lends seriesTypes.area.prototype */ {\n            singleStacks: false,\n            /** \n             * Return an array of stacked points, where null and missing points are replaced by \n             * dummy points in order for gaps to be drawn correctly in stacks.\n             */\n            getStackPoints: function() {\n                var series = this,\n                    segment = [],\n                    keys = [],\n                    xAxis = this.xAxis,\n                    yAxis = this.yAxis,\n                    stack = yAxis.stacks[this.stackKey],\n                    pointMap = {},\n                    points = this.points,\n                    seriesIndex = series.index,\n                    yAxisSeries = yAxis.series,\n                    seriesLength = yAxisSeries.length,\n                    visibleSeries,\n                    upOrDown = pick(yAxis.options.reversedStacks, true) ? 1 : -1,\n                    i,\n                    x;\n\n                if (this.options.stacking) {\n                    // Create a map where we can quickly look up the points by their X value.\n                    for (i = 0; i < points.length; i++) {\n                        pointMap[points[i].x] = points[i];\n                    }\n\n                    // Sort the keys (#1651)\n                    for (x in stack) {\n                        if (stack[x].total !== null) { // nulled after switching between grouping and not (#1651, #2336)\n                            keys.push(x);\n                        }\n                    }\n                    keys.sort(function(a, b) {\n                        return a - b;\n                    });\n\n                    visibleSeries = map(yAxisSeries, function() {\n                        return this.visible;\n                    });\n\n                    each(keys, function(x, idx) {\n                        var y = 0,\n                            stackPoint,\n                            stackedValues;\n\n                        if (pointMap[x] && !pointMap[x].isNull) {\n                            segment.push(pointMap[x]);\n\n                            // Find left and right cliff. -1 goes left, 1 goes right.\n                            each([-1, 1], function(direction) {\n                                var nullName = direction === 1 ? 'rightNull' : 'leftNull',\n                                    cliffName = direction === 1 ? 'rightCliff' : 'leftCliff',\n                                    cliff = 0,\n                                    otherStack = stack[keys[idx + direction]];\n\n                                // If there is a stack next to this one, to the left or to the right...\n                                if (otherStack) {\n                                    i = seriesIndex;\n                                    while (i >= 0 && i < seriesLength) { // Can go either up or down, depending on reversedStacks\n                                        stackPoint = otherStack.points[i];\n                                        if (!stackPoint) {\n                                            // If the next point in this series is missing, mark the point\n                                            // with point.leftNull or point.rightNull = true.\n                                            if (i === seriesIndex) {\n                                                pointMap[x][nullName] = true;\n\n                                                // If there are missing points in the next stack in any of the \n                                                // series below this one, we need to substract the missing values\n                                                // and add a hiatus to the left or right.\n                                            } else if (visibleSeries[i]) {\n                                                stackedValues = stack[x].points[i];\n                                                if (stackedValues) {\n                                                    cliff -= stackedValues[1] - stackedValues[0];\n                                                }\n                                            }\n                                        }\n                                        // When reversedStacks is true, loop up, else loop down\n                                        i += upOrDown;\n                                    }\n                                }\n                                pointMap[x][cliffName] = cliff;\n                            });\n\n\n                            // There is no point for this X value in this series, so we \n                            // insert a dummy point in order for the areas to be drawn\n                            // correctly.\n                        } else {\n\n                            // Loop down the stack to find the series below this one that has\n                            // a value (#1991)\n                            i = seriesIndex;\n                            while (i >= 0 && i < seriesLength) {\n                                stackPoint = stack[x].points[i];\n                                if (stackPoint) {\n                                    y = stackPoint[1];\n                                    break;\n                                }\n                                // When reversedStacks is true, loop up, else loop down\n                                i += upOrDown;\n                            }\n                            y = yAxis.translate(y, 0, 1, 0, 1); // #6272\n                            segment.push({\n                                isNull: true,\n                                plotX: xAxis.translate(x, 0, 0, 0, 1), // #6272\n                                x: x,\n                                plotY: y,\n                                yBottom: y\n                            });\n                        }\n                    });\n\n                }\n\n                return segment;\n            },\n\n            getGraphPath: function(points) {\n                var getGraphPath = Series.prototype.getGraphPath,\n                    graphPath,\n                    options = this.options,\n                    stacking = options.stacking,\n                    yAxis = this.yAxis,\n                    topPath,\n                    //topPoints = [],\n                    bottomPath,\n                    bottomPoints = [],\n                    graphPoints = [],\n                    seriesIndex = this.index,\n                    i,\n                    areaPath,\n                    plotX,\n                    stacks = yAxis.stacks[this.stackKey],\n                    threshold = options.threshold,\n                    translatedThreshold = yAxis.getThreshold(options.threshold),\n                    isNull,\n                    yBottom,\n                    connectNulls = options.connectNulls || stacking === 'percent',\n                    /**\n                     * To display null points in underlying stacked series, this series graph must be \n                     * broken, and the area also fall down to fill the gap left by the null point. #2069\n                     */\n                    addDummyPoints = function(i, otherI, side) {\n                        var point = points[i],\n                            stackedValues = stacking && stacks[point.x].points[seriesIndex],\n                            nullVal = point[side + 'Null'] || 0,\n                            cliffVal = point[side + 'Cliff'] || 0,\n                            top,\n                            bottom,\n                            isNull = true;\n\n                        if (cliffVal || nullVal) {\n\n                            top = (nullVal ? stackedValues[0] : stackedValues[1]) + cliffVal;\n                            bottom = stackedValues[0] + cliffVal;\n                            isNull = !!nullVal;\n\n                        } else if (!stacking && points[otherI] && points[otherI].isNull) {\n                            top = bottom = threshold;\n                        }\n\n                        // Add to the top and bottom line of the area\n                        if (top !== undefined) {\n                            graphPoints.push({\n                                plotX: plotX,\n                                plotY: top === null ? translatedThreshold : yAxis.getThreshold(top),\n                                isNull: isNull,\n                                isCliff: true\n                            });\n                            bottomPoints.push({\n                                plotX: plotX,\n                                plotY: bottom === null ? translatedThreshold : yAxis.getThreshold(bottom),\n                                doCurve: false // #1041, gaps in areaspline areas\n                            });\n                        }\n                    };\n\n                // Find what points to use\n                points = points || this.points;\n\n                // Fill in missing points\n                if (stacking) {\n                    points = this.getStackPoints();\n                }\n\n                for (i = 0; i < points.length; i++) {\n                    isNull = points[i].isNull;\n                    plotX = pick(points[i].rectPlotX, points[i].plotX);\n                    yBottom = pick(points[i].yBottom, translatedThreshold);\n\n                    if (!isNull || connectNulls) {\n\n                        if (!connectNulls) {\n                            addDummyPoints(i, i - 1, 'left');\n                        }\n\n                        if (!(isNull && !stacking && connectNulls)) { // Skip null point when stacking is false and connectNulls true\n                            graphPoints.push(points[i]);\n                            bottomPoints.push({\n                                x: i,\n                                plotX: plotX,\n                                plotY: yBottom\n                            });\n                        }\n\n                        if (!connectNulls) {\n                            addDummyPoints(i, i + 1, 'right');\n                        }\n                    }\n                }\n\n                topPath = getGraphPath.call(this, graphPoints, true, true);\n\n                bottomPoints.reversed = true;\n                bottomPath = getGraphPath.call(this, bottomPoints, true, true);\n                if (bottomPath.length) {\n                    bottomPath[0] = 'L';\n                }\n\n                areaPath = topPath.concat(bottomPath);\n                graphPath = getGraphPath.call(this, graphPoints, false, connectNulls); // TODO: don't set leftCliff and rightCliff when connectNulls?\n\n                areaPath.xMap = topPath.xMap;\n                this.areaPath = areaPath;\n\n                return graphPath;\n            },\n\n            /**\n             * Draw the graph and the underlying area. This method calls the Series base\n             * function and adds the area. The areaPath is calculated in the getSegmentPath\n             * method called from Series.prototype.drawGraph.\n             */\n            drawGraph: function() {\n\n                // Define or reset areaPath\n                this.areaPath = [];\n\n                // Call the base method\n                Series.prototype.drawGraph.apply(this);\n\n                // Define local variables\n                var series = this,\n                    areaPath = this.areaPath,\n                    options = this.options,\n                    zones = this.zones,\n                    props = [\n                        [\n                            'area',\n                            'highcharts-area',\n\n                            this.color,\n                            options.fillColor\n\n                        ]\n                    ]; // area name, main color, fill color\n\n                each(zones, function(zone, i) {\n                    props.push([\n                        'zone-area-' + i,\n                        'highcharts-area highcharts-zone-area-' + i + ' ' + zone.className,\n\n                        zone.color || series.color,\n                        zone.fillColor || options.fillColor\n\n                    ]);\n                });\n\n                each(props, function(prop) {\n                    var areaKey = prop[0],\n                        area = series[areaKey];\n\n                    // Create or update the area\n                    if (area) { // update\n                        area.endX = areaPath.xMap;\n                        area.animate({\n                            d: areaPath\n                        });\n\n                    } else { // create\n                        area = series[areaKey] = series.chart.renderer.path(areaPath)\n                            .addClass(prop[1])\n                            .attr({\n\n                                fill: pick(\n                                    prop[3],\n                                    color(prop[2]).setOpacity(pick(options.fillOpacity, 0.75)).get()\n                                ),\n\n                                zIndex: 0 // #1069\n                            }).add(series.group);\n                        area.isArea = true;\n                    }\n                    area.startX = areaPath.xMap;\n                    area.shiftUnit = options.step ? 2 : 1;\n                });\n            },\n\n            drawLegendSymbol: LegendSymbolMixin.drawRectangle\n        });\n\n    }(Highcharts));\n    (function(H) {\n        /**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */\n        var pick = H.pick,\n            seriesType = H.seriesType;\n\n        /**\n         * Spline series type.\n         * @constructor seriesTypes.spline\n         * @extends {Series}\n         */\n        seriesType('spline', 'line', {}, /** @lends seriesTypes.spline.prototype */ {\n            /**\n             * Get the spline segment from a given point's previous neighbour to the given point\n             */\n            getPointSpline: function(points, point, i) {\n                var smoothing = 1.5, // 1 means control points midway between points, 2 means 1/3 from the point, 3 is 1/4 etc\n                    denom = smoothing + 1,\n                    plotX = point.plotX,\n                    plotY = point.plotY,\n                    lastPoint = points[i - 1],\n                    nextPoint = points[i + 1],\n                    leftContX,\n                    leftContY,\n                    rightContX,\n                    rightContY,\n                    ret;\n\n                function doCurve(otherPoint) {\n                    return otherPoint &&\n                        !otherPoint.isNull &&\n                        otherPoint.doCurve !== false &&\n                        !point.isCliff; // #6387, area splines next to null\n                }\n\n                // Find control points\n                if (doCurve(lastPoint) && doCurve(nextPoint)) {\n                    var lastX = lastPoint.plotX,\n                        lastY = lastPoint.plotY,\n                        nextX = nextPoint.plotX,\n                        nextY = nextPoint.plotY,\n                        correction = 0;\n\n                    leftContX = (smoothing * plotX + lastX) / denom;\n                    leftContY = (smoothing * plotY + lastY) / denom;\n                    rightContX = (smoothing * plotX + nextX) / denom;\n                    rightContY = (smoothing * plotY + nextY) / denom;\n\n                    // Have the two control points make a straight line through main point\n                    if (rightContX !== leftContX) { // #5016, division by zero\n                        correction = ((rightContY - leftContY) * (rightContX - plotX)) /\n                            (rightContX - leftContX) + plotY - rightContY;\n                    }\n\n                    leftContY += correction;\n                    rightContY += correction;\n\n                    // to prevent false extremes, check that control points are between\n                    // neighbouring points' y values\n                    if (leftContY > lastY && leftContY > plotY) {\n                        leftContY = Math.max(lastY, plotY);\n                        rightContY = 2 * plotY - leftContY; // mirror of left control point\n                    } else if (leftContY < lastY && leftContY < plotY) {\n                        leftContY = Math.min(lastY, plotY);\n                        rightContY = 2 * plotY - leftContY;\n                    }\n                    if (rightContY > nextY && rightContY > plotY) {\n                        rightContY = Math.max(nextY, plotY);\n                        leftContY = 2 * plotY - rightContY;\n                    } else if (rightContY < nextY && rightContY < plotY) {\n                        rightContY = Math.min(nextY, plotY);\n                        leftContY = 2 * plotY - rightContY;\n                    }\n\n                    // record for drawing in next point\n                    point.rightContX = rightContX;\n                    point.rightContY = rightContY;\n\n\n                }\n\n                // Visualize control points for debugging\n                /*\n                if (leftContX) {\n                \tthis.chart.renderer.circle(leftContX + this.chart.plotLeft, leftContY + this.chart.plotTop, 2)\n                \t\t.attr({\n                \t\t\tstroke: 'red',\n                \t\t\t'stroke-width': 2,\n                \t\t\tfill: 'none',\n                \t\t\tzIndex: 9\n                \t\t})\n                \t\t.add();\n                \tthis.chart.renderer.path(['M', leftContX + this.chart.plotLeft, leftContY + this.chart.plotTop,\n                \t\t'L', plotX + this.chart.plotLeft, plotY + this.chart.plotTop])\n                \t\t.attr({\n                \t\t\tstroke: 'red',\n                \t\t\t'stroke-width': 2,\n                \t\t\tzIndex: 9\n                \t\t})\n                \t\t.add();\n                }\n                if (rightContX) {\n                \tthis.chart.renderer.circle(rightContX + this.chart.plotLeft, rightContY + this.chart.plotTop, 2)\n                \t\t.attr({\n                \t\t\tstroke: 'green',\n                \t\t\t'stroke-width': 2,\n                \t\t\tfill: 'none',\n                \t\t\tzIndex: 9\n                \t\t})\n                \t\t.add();\n                \tthis.chart.renderer.path(['M', rightContX + this.chart.plotLeft, rightContY + this.chart.plotTop,\n                \t\t'L', plotX + this.chart.plotLeft, plotY + this.chart.plotTop])\n                \t\t.attr({\n                \t\t\tstroke: 'green',\n                \t\t\t'stroke-width': 2,\n                \t\t\tzIndex: 9\n                \t\t})\n                \t\t.add();\n                }\n                // */\n                ret = [\n                    'C',\n                    pick(lastPoint.rightContX, lastPoint.plotX),\n                    pick(lastPoint.rightContY, lastPoint.plotY),\n                    pick(leftContX, plotX),\n                    pick(leftContY, plotY),\n                    plotX,\n                    plotY\n                ];\n                lastPoint.rightContX = lastPoint.rightContY = null; // reset for updating series later\n                return ret;\n            }\n        });\n\n    }(Highcharts));\n    (function(H) {\n        /**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */\n        var areaProto = H.seriesTypes.area.prototype,\n            defaultPlotOptions = H.defaultPlotOptions,\n            LegendSymbolMixin = H.LegendSymbolMixin,\n            seriesType = H.seriesType;\n        /**\n         * AreaSplineSeries object\n         */\n        seriesType('areaspline', 'spline', defaultPlotOptions.area, {\n            getStackPoints: areaProto.getStackPoints,\n            getGraphPath: areaProto.getGraphPath,\n            setStackCliffs: areaProto.setStackCliffs,\n            drawGraph: areaProto.drawGraph,\n            drawLegendSymbol: LegendSymbolMixin.drawRectangle\n        });\n\n    }(Highcharts));\n    (function(H) {\n        /**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */\n        var animObject = H.animObject,\n            color = H.color,\n            each = H.each,\n            extend = H.extend,\n            isNumber = H.isNumber,\n            LegendSymbolMixin = H.LegendSymbolMixin,\n            merge = H.merge,\n            noop = H.noop,\n            pick = H.pick,\n            Series = H.Series,\n            seriesType = H.seriesType,\n            svg = H.svg;\n        /**\n         * The column series type.\n         *\n         * @constructor seriesTypes.column\n         * @augments Series\n         */\n        seriesType('column', 'line', {\n            borderRadius: 0,\n            //colorByPoint: undefined,\n            crisp: true,\n            groupPadding: 0.2,\n            //grouping: true,\n            marker: null, // point options are specified in the base options\n            pointPadding: 0.1,\n            //pointWidth: null,\n            minPointLength: 0,\n            cropThreshold: 50, // when there are more points, they will not animate out of the chart on xAxis.setExtremes\n            pointRange: null, // null means auto, meaning 1 in a categorized axis and least distance between points if not categories\n            states: {\n                hover: {\n                    halo: false,\n\n                    brightness: 0.1,\n                    shadow: false\n\n                },\n\n                select: {\n                    color: '#cccccc',\n                    borderColor: '#000000',\n                    shadow: false\n                }\n\n            },\n            dataLabels: {\n                align: null, // auto\n                verticalAlign: null, // auto\n                y: null\n            },\n            softThreshold: false,\n            startFromThreshold: true, // false doesn't work well: http://jsfiddle.net/highcharts/hz8fopan/14/\n            stickyTracking: false,\n            tooltip: {\n                distance: 6\n            },\n            threshold: 0,\n\n            borderColor: '#ffffff'\n            // borderWidth: 1\n\n\n        }, /** @lends seriesTypes.column.prototype */ {\n            cropShoulder: 0,\n            directTouch: true, // When tooltip is not shared, this series (and derivatives) requires direct touch/hover. KD-tree does not apply.\n            trackerGroups: ['group', 'dataLabelsGroup'],\n            negStacks: true, // use separate negative stacks, unlike area stacks where a negative\n            // point is substracted from previous (#1910)\n\n            /**\n             * Initialize the series. Extends the basic Series.init method by\n             * marking other series of the same type as dirty.\n             *\n             * @function #init\n             * @memberOf seriesTypes.column\n             * @returns {void}\n             */\n            init: function() {\n                Series.prototype.init.apply(this, arguments);\n\n                var series = this,\n                    chart = series.chart;\n\n                // if the series is added dynamically, force redraw of other\n                // series affected by a new column\n                if (chart.hasRendered) {\n                    each(chart.series, function(otherSeries) {\n                        if (otherSeries.type === series.type) {\n                            otherSeries.isDirty = true;\n                        }\n                    });\n                }\n            },\n\n            /**\n             * Return the width and x offset of the columns adjusted for grouping, groupPadding, pointPadding,\n             * pointWidth etc.\n             */\n            getColumnMetrics: function() {\n\n                var series = this,\n                    options = series.options,\n                    xAxis = series.xAxis,\n                    yAxis = series.yAxis,\n                    reversedXAxis = xAxis.reversed,\n                    stackKey,\n                    stackGroups = {},\n                    columnCount = 0;\n\n                // Get the total number of column type series.\n                // This is called on every series. Consider moving this logic to a\n                // chart.orderStacks() function and call it on init, addSeries and removeSeries\n                if (options.grouping === false) {\n                    columnCount = 1;\n                } else {\n                    each(series.chart.series, function(otherSeries) {\n                        var otherOptions = otherSeries.options,\n                            otherYAxis = otherSeries.yAxis,\n                            columnIndex;\n                        if (otherSeries.type === series.type && otherSeries.visible &&\n                            yAxis.len === otherYAxis.len && yAxis.pos === otherYAxis.pos) { // #642, #2086\n                            if (otherOptions.stacking) {\n                                stackKey = otherSeries.stackKey;\n                                if (stackGroups[stackKey] === undefined) {\n                                    stackGroups[stackKey] = columnCount++;\n                                }\n                                columnIndex = stackGroups[stackKey];\n                            } else if (otherOptions.grouping !== false) { // #1162\n                                columnIndex = columnCount++;\n                            }\n                            otherSeries.columnIndex = columnIndex;\n                        }\n                    });\n                }\n\n                var categoryWidth = Math.min(\n                        Math.abs(xAxis.transA) * (xAxis.ordinalSlope || options.pointRange || xAxis.closestPointRange || xAxis.tickInterval || 1), // #2610\n                        xAxis.len // #1535\n                    ),\n                    groupPadding = categoryWidth * options.groupPadding,\n                    groupWidth = categoryWidth - 2 * groupPadding,\n                    pointOffsetWidth = groupWidth / (columnCount || 1),\n                    pointWidth = Math.min(\n                        options.maxPointWidth || xAxis.len,\n                        pick(options.pointWidth, pointOffsetWidth * (1 - 2 * options.pointPadding))\n                    ),\n                    pointPadding = (pointOffsetWidth - pointWidth) / 2,\n                    colIndex = (series.columnIndex || 0) + (reversedXAxis ? 1 : 0), // #1251, #3737\n                    pointXOffset = pointPadding + (groupPadding + colIndex *\n                        pointOffsetWidth - (categoryWidth / 2)) *\n                    (reversedXAxis ? -1 : 1);\n\n                // Save it for reading in linked series (Error bars particularly)\n                series.columnMetrics = {\n                    width: pointWidth,\n                    offset: pointXOffset\n                };\n                return series.columnMetrics;\n\n            },\n\n            /**\n             * Make the columns crisp. The edges are rounded to the nearest full pixel.\n             */\n            crispCol: function(x, y, w, h) {\n                var chart = this.chart,\n                    borderWidth = this.borderWidth,\n                    xCrisp = -(borderWidth % 2 ? 0.5 : 0),\n                    yCrisp = borderWidth % 2 ? 0.5 : 1,\n                    right,\n                    bottom,\n                    fromTop;\n\n                if (chart.inverted && chart.renderer.isVML) {\n                    yCrisp += 1;\n                }\n\n                // Horizontal. We need to first compute the exact right edge, then round it\n                // and compute the width from there.\n                if (this.options.crisp) {\n                    right = Math.round(x + w) + xCrisp;\n                    x = Math.round(x) + xCrisp;\n                    w = right - x;\n                }\n\n                // Vertical\n                bottom = Math.round(y + h) + yCrisp;\n                fromTop = Math.abs(y) <= 0.5 && bottom > 0.5; // #4504, #4656\n                y = Math.round(y) + yCrisp;\n                h = bottom - y;\n\n                // Top edges are exceptions\n                if (fromTop && h) { // #5146\n                    y -= 1;\n                    h += 1;\n                }\n\n                return {\n                    x: x,\n                    y: y,\n                    width: w,\n                    height: h\n                };\n            },\n\n            /**\n             * Translate each point to the plot area coordinate system and find shape positions\n             */\n            translate: function() {\n                var series = this,\n                    chart = series.chart,\n                    options = series.options,\n                    dense = series.dense = series.closestPointRange * series.xAxis.transA < 2,\n                    borderWidth = series.borderWidth = pick(\n                        options.borderWidth,\n                        dense ? 0 : 1 // #3635\n                    ),\n                    yAxis = series.yAxis,\n                    threshold = options.threshold,\n                    translatedThreshold = series.translatedThreshold = yAxis.getThreshold(threshold),\n                    minPointLength = pick(options.minPointLength, 5),\n                    metrics = series.getColumnMetrics(),\n                    pointWidth = metrics.width,\n                    seriesBarW = series.barW = Math.max(pointWidth, 1 + 2 * borderWidth), // postprocessed for border width\n                    pointXOffset = series.pointXOffset = metrics.offset;\n\n                if (chart.inverted) {\n                    translatedThreshold -= 0.5; // #3355\n                }\n\n                // When the pointPadding is 0, we want the columns to be packed tightly, so we allow individual\n                // columns to have individual sizes. When pointPadding is greater, we strive for equal-width\n                // columns (#2694).\n                if (options.pointPadding) {\n                    seriesBarW = Math.ceil(seriesBarW);\n                }\n\n                Series.prototype.translate.apply(series);\n\n                // Record the new values\n                each(series.points, function(point) {\n                    var yBottom = pick(point.yBottom, translatedThreshold),\n                        safeDistance = 999 + Math.abs(yBottom),\n                        plotY = Math.min(Math.max(-safeDistance, point.plotY), yAxis.len + safeDistance), // Don't draw too far outside plot area (#1303, #2241, #4264)\n                        barX = point.plotX + pointXOffset,\n                        barW = seriesBarW,\n                        barY = Math.min(plotY, yBottom),\n                        up,\n                        barH = Math.max(plotY, yBottom) - barY;\n\n                    // Handle options.minPointLength\n                    if (Math.abs(barH) < minPointLength) {\n                        if (minPointLength) {\n                            barH = minPointLength;\n                            up = (!yAxis.reversed && !point.negative) || (yAxis.reversed && point.negative);\n                            barY = Math.abs(barY - translatedThreshold) > minPointLength ? // stacked\n                                yBottom - minPointLength : // keep position\n                                translatedThreshold - (up ? minPointLength : 0); // #1485, #4051\n                        }\n                    }\n\n                    // Cache for access in polar\n                    point.barX = barX;\n                    point.pointWidth = pointWidth;\n\n                    // Fix the tooltip on center of grouped columns (#1216, #424, #3648)\n                    point.tooltipPos = chart.inverted ? [yAxis.len + yAxis.pos - chart.plotLeft - plotY, series.xAxis.len - barX - barW / 2, barH] : [barX + barW / 2, plotY + yAxis.pos - chart.plotTop, barH];\n\n                    // Register shape type and arguments to be used in drawPoints\n                    point.shapeType = 'rect';\n                    point.shapeArgs = series.crispCol.apply(\n                        series,\n                        point.isNull ? [point.plotX, yAxis.len / 2, 0, 0] : // #3169, drilldown from null must have a position to work from\n                        [barX, barY, barW, barH]\n                    );\n                });\n\n            },\n\n            getSymbol: noop,\n\n            /**\n             * Use a solid rectangle like the area series types\n             */\n            drawLegendSymbol: LegendSymbolMixin.drawRectangle,\n\n\n            /**\n             * Columns have no graph\n             */\n            drawGraph: function() {\n                this.group[this.dense ? 'addClass' : 'removeClass']('highcharts-dense-data');\n            },\n\n\n            /**\n             * Get presentational attributes\n             */\n            pointAttribs: function(point, state) {\n                var options = this.options,\n                    stateOptions,\n                    ret,\n                    p2o = this.pointAttrToOptions || {},\n                    strokeOption = p2o.stroke || 'borderColor',\n                    strokeWidthOption = p2o['stroke-width'] || 'borderWidth',\n                    fill = (point && point.color) || this.color,\n                    stroke = point[strokeOption] || options[strokeOption] ||\n                    this.color || fill, // set to fill when borderColor null\n                    strokeWidth = point[strokeWidthOption] ||\n                    options[strokeWidthOption] || this[strokeWidthOption] || 0,\n                    dashstyle = options.dashStyle,\n                    zone,\n                    brightness;\n\n                // Handle zone colors\n                if (point && this.zones.length) {\n                    zone = point.getZone();\n                    fill = (zone && zone.color) || point.options.color || this.color; // When zones are present, don't use point.color (#4267)\n                }\n\n                // Select or hover states\n                if (state) {\n                    stateOptions = merge(\n                        options.states[state],\n                        point.options.states && point.options.states[state] || {} // #6401\n                    );\n                    brightness = stateOptions.brightness;\n                    fill = stateOptions.color ||\n                        (brightness !== undefined && color(fill).brighten(stateOptions.brightness).get()) ||\n                        fill;\n                    stroke = stateOptions[strokeOption] || stroke;\n                    strokeWidth = stateOptions[strokeWidthOption] || strokeWidth;\n                    dashstyle = stateOptions.dashStyle || dashstyle;\n                }\n\n                ret = {\n                    'fill': fill,\n                    'stroke': stroke,\n                    'stroke-width': strokeWidth\n                };\n                if (options.borderRadius) {\n                    ret.r = options.borderRadius;\n                }\n\n                if (dashstyle) {\n                    ret.dashstyle = dashstyle;\n                }\n\n                return ret;\n            },\n\n\n            /**\n             * Draw the columns. For bars, the series.group is rotated, so the same coordinates\n             * apply for columns and bars. This method is inherited by scatter series.\n             *\n             */\n            drawPoints: function() {\n                var series = this,\n                    chart = this.chart,\n                    options = series.options,\n                    renderer = chart.renderer,\n                    animationLimit = options.animationLimit || 250,\n                    shapeArgs;\n\n                // draw the columns\n                each(series.points, function(point) {\n                    var plotY = point.plotY,\n                        graphic = point.graphic;\n\n                    if (isNumber(plotY) && point.y !== null) {\n                        shapeArgs = point.shapeArgs;\n\n                        if (graphic) { // update\n                            graphic[chart.pointCount < animationLimit ? 'animate' : 'attr'](\n                                merge(shapeArgs)\n                            );\n\n                        } else {\n                            point.graphic = graphic = renderer[point.shapeType](shapeArgs)\n                                .add(point.group || series.group);\n                        }\n\n\n                        // Presentational\n                        graphic\n                            .attr(series.pointAttribs(point, point.selected && 'select'))\n                            .shadow(options.shadow, null, options.stacking && !options.borderRadius);\n\n\n                        graphic.addClass(point.getClassName(), true);\n\n\n                    } else if (graphic) {\n                        point.graphic = graphic.destroy(); // #1269\n                    }\n                });\n            },\n\n            /**\n             * Animate the column heights one by one from zero\n             * @param {Boolean} init Whether to initialize the animation or run it\n             */\n            animate: function(init) {\n                var series = this,\n                    yAxis = this.yAxis,\n                    options = series.options,\n                    inverted = this.chart.inverted,\n                    attr = {},\n                    translatedThreshold;\n\n                if (svg) { // VML is too slow anyway\n                    if (init) {\n                        attr.scaleY = 0.001;\n                        translatedThreshold = Math.min(yAxis.pos + yAxis.len, Math.max(yAxis.pos, yAxis.toPixels(options.threshold)));\n                        if (inverted) {\n                            attr.translateX = translatedThreshold - yAxis.len;\n                        } else {\n                            attr.translateY = translatedThreshold;\n                        }\n                        series.group.attr(attr);\n\n                    } else { // run the animation\n\n                        attr[inverted ? 'translateX' : 'translateY'] = yAxis.pos;\n                        series.group.animate(attr, extend(animObject(series.options.animation), {\n                            // Do the scale synchronously to ensure smooth updating (#5030)\n                            step: function(val, fx) {\n                                series.group.attr({\n                                    scaleY: Math.max(0.001, fx.pos) // #5250\n                                });\n                            }\n                        }));\n\n                        // delete this function to allow it only once\n                        series.animate = null;\n                    }\n                }\n            },\n\n            /**\n             * Remove this series from the chart\n             */\n            remove: function() {\n                var series = this,\n                    chart = series.chart;\n\n                // column and bar series affects other series of the same type\n                // as they are either stacked or grouped\n                if (chart.hasRendered) {\n                    each(chart.series, function(otherSeries) {\n                        if (otherSeries.type === series.type) {\n                            otherSeries.isDirty = true;\n                        }\n                    });\n                }\n\n                Series.prototype.remove.apply(series, arguments);\n            }\n        });\n\n    }(Highcharts));\n    (function(H) {\n        /**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */\n\n        var seriesType = H.seriesType;\n\n        /**\n         * The Bar series class\n         */\n        seriesType('bar', 'column', null, {\n            inverted: true\n        });\n\n    }(Highcharts));\n    (function(H) {\n        /**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */\n        var Series = H.Series,\n            seriesType = H.seriesType;\n        /**\n         * The scatter series type\n         */\n        seriesType('scatter', 'line', {\n            lineWidth: 0,\n            findNearestPointBy: 'xy',\n            marker: {\n                enabled: true // Overrides auto-enabling in line series (#3647)\n            },\n            tooltip: {\n\n                headerFormat: '<span style=\"color:{point.color}\">\\u25CF</span> ' +\n                    '<span style=\"font-size: 0.85em\"> {series.name}</span><br/>',\n\n                pointFormat: 'x: <b>{point.x}</b><br/>y: <b>{point.y}</b><br/>'\n            }\n\n            // Prototype members\n        }, {\n            sorted: false,\n            requireSorting: false,\n            noSharedTooltip: true,\n            trackerGroups: ['group', 'markerGroup', 'dataLabelsGroup'],\n            takeOrdinalPosition: false, // #2342\n            drawGraph: function() {\n                if (this.options.lineWidth) {\n                    Series.prototype.drawGraph.call(this);\n                }\n            }\n        });\n\n    }(Highcharts));\n    (function(H) {\n        /**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */\n        var pick = H.pick,\n            relativeLength = H.relativeLength;\n\n        H.CenteredSeriesMixin = {\n            /**\n             * Get the center of the pie based on the size and center options relative to the\n             * plot area. Borrowed by the polar and gauge series types.\n             */\n            getCenter: function() {\n\n                var options = this.options,\n                    chart = this.chart,\n                    slicingRoom = 2 * (options.slicedOffset || 0),\n                    handleSlicingRoom,\n                    plotWidth = chart.plotWidth - 2 * slicingRoom,\n                    plotHeight = chart.plotHeight - 2 * slicingRoom,\n                    centerOption = options.center,\n                    positions = [pick(centerOption[0], '50%'), pick(centerOption[1], '50%'), options.size || '100%', options.innerSize || 0],\n                    smallestSize = Math.min(plotWidth, plotHeight),\n                    i,\n                    value;\n\n                for (i = 0; i < 4; ++i) {\n                    value = positions[i];\n                    handleSlicingRoom = i < 2 || (i === 2 && /%$/.test(value));\n\n                    // i == 0: centerX, relative to width\n                    // i == 1: centerY, relative to height\n                    // i == 2: size, relative to smallestSize\n                    // i == 3: innerSize, relative to size\n                    positions[i] = relativeLength(value, [plotWidth, plotHeight, smallestSize, positions[2]][i]) +\n                        (handleSlicingRoom ? slicingRoom : 0);\n\n                }\n                // innerSize cannot be larger than size (#3632)\n                if (positions[3] > positions[2]) {\n                    positions[3] = positions[2];\n                }\n                return positions;\n            }\n        };\n\n    }(Highcharts));\n    (function(H) {\n        /**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */\n        var addEvent = H.addEvent,\n            CenteredSeriesMixin = H.CenteredSeriesMixin,\n            defined = H.defined,\n            each = H.each,\n            extend = H.extend,\n            inArray = H.inArray,\n            LegendSymbolMixin = H.LegendSymbolMixin,\n            noop = H.noop,\n            pick = H.pick,\n            Point = H.Point,\n            Series = H.Series,\n            seriesType = H.seriesType,\n            seriesTypes = H.seriesTypes,\n            setAnimation = H.setAnimation;\n\n        /**\n         * The pie series type.\n         *\n         * @constructor seriesTypes.pie\n         * @augments Series\n         */\n        seriesType('pie', 'line', {\n            center: [null, null],\n            clip: false,\n            colorByPoint: true, // always true for pies\n            dataLabels: {\n                // align: null,\n                // connectorWidth: 1,\n                // connectorColor: point.color,\n                // connectorPadding: 5,\n                distance: 30,\n                enabled: true,\n                formatter: function() { // #2945\n                    return this.y === null ? undefined : this.point.name;\n                },\n                // softConnector: true,\n                x: 0\n                // y: 0\n            },\n            ignoreHiddenPoint: true,\n            //innerSize: 0,\n            legendType: 'point',\n            marker: null, // point options are specified in the base options\n            size: null,\n            showInLegend: false,\n            slicedOffset: 10,\n            stickyTracking: false,\n            tooltip: {\n                followPointer: true\n            },\n\n            borderColor: '#ffffff',\n            borderWidth: 1,\n            states: {\n                hover: {\n                    brightness: 0.1,\n                    shadow: false\n                }\n            }\n\n\n        }, /** @lends seriesTypes.pie.prototype */ {\n            isCartesian: false,\n            requireSorting: false,\n            directTouch: true,\n            noSharedTooltip: true,\n            trackerGroups: ['group', 'dataLabelsGroup'],\n            axisTypes: [],\n            pointAttribs: seriesTypes.column.prototype.pointAttribs,\n            /**\n             * Animate the pies in\n             */\n            animate: function(init) {\n                var series = this,\n                    points = series.points,\n                    startAngleRad = series.startAngleRad;\n\n                if (!init) {\n                    each(points, function(point) {\n                        var graphic = point.graphic,\n                            args = point.shapeArgs;\n\n                        if (graphic) {\n                            // start values\n                            graphic.attr({\n                                r: point.startR || (series.center[3] / 2), // animate from inner radius (#779)\n                                start: startAngleRad,\n                                end: startAngleRad\n                            });\n\n                            // animate\n                            graphic.animate({\n                                r: args.r,\n                                start: args.start,\n                                end: args.end\n                            }, series.options.animation);\n                        }\n                    });\n\n                    // delete this function to allow it only once\n                    series.animate = null;\n                }\n            },\n\n            /**\n             * Recompute total chart sum and update percentages of points.\n             */\n            updateTotals: function() {\n                var i,\n                    total = 0,\n                    points = this.points,\n                    len = points.length,\n                    point,\n                    ignoreHiddenPoint = this.options.ignoreHiddenPoint;\n\n                // Get the total sum\n                for (i = 0; i < len; i++) {\n                    point = points[i];\n                    // Disallow negative values (#1530, #3623, #5322)\n                    if (point.y < 0) {\n                        point.y = null;\n                    }\n                    total += (ignoreHiddenPoint && !point.visible) ? 0 : point.y;\n                }\n                this.total = total;\n\n                // Set each point's properties\n                for (i = 0; i < len; i++) {\n                    point = points[i];\n                    point.percentage = (total > 0 && (point.visible || !ignoreHiddenPoint)) ? point.y / total * 100 : 0;\n                    point.total = total;\n                }\n            },\n\n            /**\n             * Extend the generatePoints method by adding total and percentage properties to each point\n             */\n            generatePoints: function() {\n                Series.prototype.generatePoints.call(this);\n                this.updateTotals();\n            },\n\n            /**\n             * Do translation for pie slices\n             */\n            translate: function(positions) {\n                this.generatePoints();\n\n                var series = this,\n                    cumulative = 0,\n                    precision = 1000, // issue #172\n                    options = series.options,\n                    slicedOffset = options.slicedOffset,\n                    connectorOffset = slicedOffset + (options.borderWidth || 0),\n                    start,\n                    end,\n                    angle,\n                    startAngle = options.startAngle || 0,\n                    startAngleRad = series.startAngleRad = Math.PI / 180 * (startAngle - 90),\n                    endAngleRad = series.endAngleRad = Math.PI / 180 * ((pick(options.endAngle, startAngle + 360)) - 90),\n                    circ = endAngleRad - startAngleRad, //2 * Math.PI,\n                    points = series.points,\n                    radiusX, // the x component of the radius vector for a given point\n                    radiusY,\n                    labelDistance = options.dataLabels.distance,\n                    ignoreHiddenPoint = options.ignoreHiddenPoint,\n                    i,\n                    len = points.length,\n                    point;\n\n                // Get positions - either an integer or a percentage string must be given.\n                // If positions are passed as a parameter, we're in a recursive loop for adjusting\n                // space for data labels.\n                if (!positions) {\n                    series.center = positions = series.getCenter();\n                }\n\n                // utility for getting the x value from a given y, used for anticollision logic in data labels\n                series.getX = function(y, left) {\n\n                    angle = Math.asin(Math.min((y - positions[1]) / (positions[2] / 2 + labelDistance), 1));\n\n                    return positions[0] +\n                        (left ? -1 : 1) *\n                        (Math.cos(angle) * (positions[2] / 2 + labelDistance));\n                };\n\n                // Calculate the geometry for each point\n                for (i = 0; i < len; i++) {\n\n                    point = points[i];\n\n                    // set start and end angle\n                    start = startAngleRad + (cumulative * circ);\n                    if (!ignoreHiddenPoint || point.visible) {\n                        cumulative += point.percentage / 100;\n                    }\n                    end = startAngleRad + (cumulative * circ);\n\n                    // set the shape\n                    point.shapeType = 'arc';\n                    point.shapeArgs = {\n                        x: positions[0],\n                        y: positions[1],\n                        r: positions[2] / 2,\n                        innerR: positions[3] / 2,\n                        start: Math.round(start * precision) / precision,\n                        end: Math.round(end * precision) / precision\n                    };\n\n                    // The angle must stay within -90 and 270 (#2645)\n                    angle = (end + start) / 2;\n                    if (angle > 1.5 * Math.PI) {\n                        angle -= 2 * Math.PI;\n                    } else if (angle < -Math.PI / 2) {\n                        angle += 2 * Math.PI;\n                    }\n\n                    // Center for the sliced out slice\n                    point.slicedTranslation = {\n                        translateX: Math.round(Math.cos(angle) * slicedOffset),\n                        translateY: Math.round(Math.sin(angle) * slicedOffset)\n                    };\n\n                    // set the anchor point for tooltips\n                    radiusX = Math.cos(angle) * positions[2] / 2;\n                    radiusY = Math.sin(angle) * positions[2] / 2;\n                    point.tooltipPos = [\n                        positions[0] + radiusX * 0.7,\n                        positions[1] + radiusY * 0.7\n                    ];\n\n                    point.half = angle < -Math.PI / 2 || angle > Math.PI / 2 ? 1 : 0;\n                    point.angle = angle;\n\n                    // set the anchor point for data labels\n                    connectorOffset = Math.min(connectorOffset, labelDistance / 5); // #1678\n                    point.labelPos = [\n                        positions[0] + radiusX + Math.cos(angle) * labelDistance, // first break of connector\n                        positions[1] + radiusY + Math.sin(angle) * labelDistance, // a/a\n                        positions[0] + radiusX + Math.cos(angle) * connectorOffset, // second break, right outside pie\n                        positions[1] + radiusY + Math.sin(angle) * connectorOffset, // a/a\n                        positions[0] + radiusX, // landing point for connector\n                        positions[1] + radiusY, // a/a\n                        labelDistance < 0 ? // alignment\n                        'center' :\n                        point.half ? 'right' : 'left', // alignment\n                        angle // center angle\n                    ];\n\n                }\n            },\n\n            drawGraph: null,\n\n            /**\n             * Draw the data points\n             */\n            drawPoints: function() {\n                var series = this,\n                    chart = series.chart,\n                    renderer = chart.renderer,\n                    groupTranslation,\n                    //center,\n                    graphic,\n                    //group,\n                    pointAttr,\n                    shapeArgs;\n\n\n                var shadow = series.options.shadow;\n                if (shadow && !series.shadowGroup) {\n                    series.shadowGroup = renderer.g('shadow')\n                        .add(series.group);\n                }\n\n\n                // draw the slices\n                each(series.points, function(point) {\n                    if (point.y !== null) {\n                        graphic = point.graphic;\n                        shapeArgs = point.shapeArgs;\n\n\n                        // If the point is sliced, use special translation, else use\n                        // plot area traslation\n                        groupTranslation = point.getTranslate();\n\n\n                        // Put the shadow behind all points\n                        var shadowGroup = point.shadowGroup;\n                        if (shadow && !shadowGroup) {\n                            shadowGroup = point.shadowGroup = renderer.g('shadow')\n                                .add(series.shadowGroup);\n                        }\n\n                        if (shadowGroup) {\n                            shadowGroup.attr(groupTranslation);\n                        }\n                        pointAttr = series.pointAttribs(point, point.selected && 'select');\n\n\n                        // Draw the slice\n                        if (graphic) {\n                            graphic\n                                .setRadialReference(series.center)\n\n                                .attr(pointAttr)\n\n                                .animate(extend(shapeArgs, groupTranslation));\n                        } else {\n\n                            point.graphic = graphic = renderer[point.shapeType](shapeArgs)\n                                .setRadialReference(series.center)\n                                .attr(groupTranslation)\n                                .add(series.group);\n\n                            if (!point.visible) {\n                                graphic.attr({\n                                    visibility: 'hidden'\n                                });\n                            }\n\n\n                            graphic\n                                .attr(pointAttr)\n                                .attr({\n                                    'stroke-linejoin': 'round'\n                                })\n                                .shadow(shadow, shadowGroup);\n\n                        }\n\n                        graphic.addClass(point.getClassName());\n\n                    }\n                });\n\n            },\n\n\n            searchPoint: noop,\n\n            /**\n             * Utility for sorting data labels\n             */\n            sortByAngle: function(points, sign) {\n                points.sort(function(a, b) {\n                    return a.angle !== undefined && (b.angle - a.angle) * sign;\n                });\n            },\n\n            /**\n             * Use a simple symbol from LegendSymbolMixin\n             */\n            drawLegendSymbol: LegendSymbolMixin.drawRectangle,\n\n            /**\n             * Use the getCenter method from drawLegendSymbol\n             */\n            getCenter: CenteredSeriesMixin.getCenter,\n\n            /**\n             * Pies don't have point marker symbols\n             */\n            getSymbol: noop\n\n\n            /**\n             * @constructor seriesTypes.pie.prototype.pointClass\n             * @extends {Point}\n             */\n        }, /** @lends seriesTypes.pie.prototype.pointClass.prototype */ {\n            /**\n             * Initiate the pie slice\n             */\n            init: function() {\n\n                Point.prototype.init.apply(this, arguments);\n\n                var point = this,\n                    toggleSlice;\n\n                point.name = pick(point.name, 'Slice');\n\n                // add event listener for select\n                toggleSlice = function(e) {\n                    point.slice(e.type === 'select');\n                };\n                addEvent(point, 'select', toggleSlice);\n                addEvent(point, 'unselect', toggleSlice);\n\n                return point;\n            },\n\n            /**\n             * Toggle the visibility of the pie slice\n             * @param {Boolean} vis Whether to show the slice or not. If undefined, the\n             *    visibility is toggled\n             */\n            setVisible: function(vis, redraw) {\n                var point = this,\n                    series = point.series,\n                    chart = series.chart,\n                    ignoreHiddenPoint = series.options.ignoreHiddenPoint;\n\n                redraw = pick(redraw, ignoreHiddenPoint);\n\n                if (vis !== point.visible) {\n\n                    // If called without an argument, toggle visibility\n                    point.visible = point.options.visible = vis = vis === undefined ? !point.visible : vis;\n                    series.options.data[inArray(point, series.data)] = point.options; // update userOptions.data\n\n                    // Show and hide associated elements. This is performed regardless of redraw or not,\n                    // because chart.redraw only handles full series.\n                    each(['graphic', 'dataLabel', 'connector', 'shadowGroup'], function(key) {\n                        if (point[key]) {\n                            point[key][vis ? 'show' : 'hide'](true);\n                        }\n                    });\n\n                    if (point.legendItem) {\n                        chart.legend.colorizeItem(point, vis);\n                    }\n\n                    // #4170, hide halo after hiding point\n                    if (!vis && point.state === 'hover') {\n                        point.setState('');\n                    }\n\n                    // Handle ignore hidden slices\n                    if (ignoreHiddenPoint) {\n                        series.isDirty = true;\n                    }\n\n                    if (redraw) {\n                        chart.redraw();\n                    }\n                }\n            },\n\n            /**\n             * Set or toggle whether the slice is cut out from the pie\n             * @param {Boolean} sliced When undefined, the slice state is toggled\n             * @param {Boolean} redraw Whether to redraw the chart. True by default.\n             */\n            slice: function(sliced, redraw, animation) {\n                var point = this,\n                    series = point.series,\n                    chart = series.chart;\n\n                setAnimation(animation, chart);\n\n                // redraw is true by default\n                redraw = pick(redraw, true);\n\n                // if called without an argument, toggle\n                point.sliced = point.options.sliced = sliced = defined(sliced) ? sliced : !point.sliced;\n                series.options.data[inArray(point, series.data)] = point.options; // update userOptions.data\n\n                point.graphic.animate(this.getTranslate());\n\n\n                if (point.shadowGroup) {\n                    point.shadowGroup.animate(this.getTranslate());\n                }\n\n            },\n\n            getTranslate: function() {\n                return this.sliced ? this.slicedTranslation : {\n                    translateX: 0,\n                    translateY: 0\n                };\n            },\n\n            haloPath: function(size) {\n                var shapeArgs = this.shapeArgs;\n\n                return this.sliced || !this.visible ? [] :\n                    this.series.chart.renderer.symbols.arc(\n                        shapeArgs.x,\n                        shapeArgs.y,\n                        shapeArgs.r + size,\n                        shapeArgs.r + size, {\n                            innerR: this.shapeArgs.r,\n                            start: shapeArgs.start,\n                            end: shapeArgs.end\n                        }\n                    );\n            }\n        });\n\n    }(Highcharts));\n    (function(H) {\n        /**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */\n        var addEvent = H.addEvent,\n            arrayMax = H.arrayMax,\n            defined = H.defined,\n            each = H.each,\n            extend = H.extend,\n            format = H.format,\n            map = H.map,\n            merge = H.merge,\n            noop = H.noop,\n            pick = H.pick,\n            relativeLength = H.relativeLength,\n            Series = H.Series,\n            seriesTypes = H.seriesTypes,\n            stableSort = H.stableSort;\n\n\n        /**\n         * Generatl distribution algorithm for distributing labels of differing size along a\n         * confined length in two dimensions. The algorithm takes an array of objects containing\n         * a size, a target and a rank. It will place the labels as close as possible to their \n         * targets, skipping the lowest ranked labels if necessary.\n         */\n        H.distribute = function(boxes, len) {\n\n            var i,\n                overlapping = true,\n                origBoxes = boxes, // Original array will be altered with added .pos\n                restBoxes = [], // The outranked overshoot\n                box,\n                target,\n                total = 0;\n\n            function sortByTarget(a, b) {\n                return a.target - b.target;\n            }\n\n            // If the total size exceeds the len, remove those boxes with the lowest rank\n            i = boxes.length;\n            while (i--) {\n                total += boxes[i].size;\n            }\n\n            // Sort by rank, then slice away overshoot\n            if (total > len) {\n                stableSort(boxes, function(a, b) {\n                    return (b.rank || 0) - (a.rank || 0);\n                });\n                i = 0;\n                total = 0;\n                while (total <= len) {\n                    total += boxes[i].size;\n                    i++;\n                }\n                restBoxes = boxes.splice(i - 1, boxes.length);\n            }\n\n            // Order by target\n            stableSort(boxes, sortByTarget);\n\n\n            // So far we have been mutating the original array. Now\n            // create a copy with target arrays\n            boxes = map(boxes, function(box) {\n                return {\n                    size: box.size,\n                    targets: [box.target]\n                };\n            });\n\n            while (overlapping) {\n                // Initial positions: target centered in box\n                i = boxes.length;\n                while (i--) {\n                    box = boxes[i];\n                    // Composite box, average of targets\n                    target = (Math.min.apply(0, box.targets) + Math.max.apply(0, box.targets)) / 2;\n                    box.pos = Math.min(Math.max(0, target - box.size / 2), len - box.size);\n                }\n\n                // Detect overlap and join boxes\n                i = boxes.length;\n                overlapping = false;\n                while (i--) {\n                    if (i > 0 && boxes[i - 1].pos + boxes[i - 1].size > boxes[i].pos) { // Overlap\n                        boxes[i - 1].size += boxes[i].size; // Add this size to the previous box\n                        boxes[i - 1].targets = boxes[i - 1].targets.concat(boxes[i].targets);\n\n                        // Overlapping right, push left\n                        if (boxes[i - 1].pos + boxes[i - 1].size > len) {\n                            boxes[i - 1].pos = len - boxes[i - 1].size;\n                        }\n                        boxes.splice(i, 1); // Remove this item\n                        overlapping = true;\n                    }\n                }\n            }\n\n            // Now the composite boxes are placed, we need to put the original boxes within them\n            i = 0;\n            each(boxes, function(box) {\n                var posInCompositeBox = 0;\n                each(box.targets, function() {\n                    origBoxes[i].pos = box.pos + posInCompositeBox;\n                    posInCompositeBox += origBoxes[i].size;\n                    i++;\n                });\n            });\n\n            // Add the rest (hidden) boxes and sort by target\n            origBoxes.push.apply(origBoxes, restBoxes);\n            stableSort(origBoxes, sortByTarget);\n        };\n\n\n        /**\n         * Draw the data labels\n         */\n        Series.prototype.drawDataLabels = function() {\n            var series = this,\n                seriesOptions = series.options,\n                options = seriesOptions.dataLabels,\n                points = series.points,\n                pointOptions,\n                generalOptions,\n                hasRendered = series.hasRendered || 0,\n                str,\n                dataLabelsGroup,\n                defer = pick(options.defer, true),\n                renderer = series.chart.renderer;\n\n            if (options.enabled || series._hasPointLabels) {\n\n                // Process default alignment of data labels for columns\n                if (series.dlProcessOptions) {\n                    series.dlProcessOptions(options);\n                }\n\n                // Create a separate group for the data labels to avoid rotation\n                dataLabelsGroup = series.plotGroup(\n                    'dataLabelsGroup',\n                    'data-labels',\n                    defer && !hasRendered ? 'hidden' : 'visible', // #5133\n                    options.zIndex || 6\n                );\n\n                if (defer) {\n                    dataLabelsGroup.attr({\n                        opacity: +hasRendered\n                    }); // #3300\n                    if (!hasRendered) {\n                        addEvent(series, 'afterAnimate', function() {\n                            if (series.visible) { // #2597, #3023, #3024\n                                dataLabelsGroup.show(true);\n                            }\n                            dataLabelsGroup[seriesOptions.animation ? 'animate' : 'attr']({\n                                opacity: 1\n                            }, {\n                                duration: 200\n                            });\n                        });\n                    }\n                }\n\n                // Make the labels for each point\n                generalOptions = options;\n                each(points, function(point) {\n                    var enabled,\n                        dataLabel = point.dataLabel,\n                        labelConfig,\n                        attr,\n                        name,\n                        rotation,\n                        connector = point.connector,\n                        isNew = !dataLabel,\n                        style;\n                    // Determine if each data label is enabled\n                    // @note dataLabelAttribs (like pointAttribs) would eradicate\n                    // the need for dlOptions, and simplify the section below.\n                    pointOptions = point.dlOptions || (point.options && point.options.dataLabels); // dlOptions is used in treemaps\n                    enabled = pick(pointOptions && pointOptions.enabled, generalOptions.enabled) && point.y !== null; // #2282, #4641\n                    if (enabled) {\n                        // Create individual options structure that can be extended without\n                        // affecting others\n                        options = merge(generalOptions, pointOptions);\n                        labelConfig = point.getLabelConfig();\n                        str = options.format ?\n                            format(options.format, labelConfig) :\n                            options.formatter.call(labelConfig, options);\n                        style = options.style;\n                        rotation = options.rotation;\n\n                        // Determine the color\n                        style.color = pick(options.color, style.color, series.color, '#000000');\n                        // Get automated contrast color\n                        if (style.color === 'contrast') {\n                            point.contrastColor = renderer.getContrast(point.color || series.color);\n                            style.color = options.inside || options.distance < 0 || !!seriesOptions.stacking ?\n                                point.contrastColor : '#000000';\n                        }\n                        if (seriesOptions.cursor) {\n                            style.cursor = seriesOptions.cursor;\n                        }\n\n\n                        attr = {\n                            //align: align,\n\n                            fill: options.backgroundColor,\n                            stroke: options.borderColor,\n                            'stroke-width': options.borderWidth,\n\n                            r: options.borderRadius || 0,\n                            rotation: rotation,\n                            padding: options.padding,\n                            zIndex: 1\n                        };\n\n                        // Remove unused attributes (#947)\n                        for (name in attr) {\n                            if (attr[name] === undefined) {\n                                delete attr[name];\n                            }\n                        }\n                    }\n                    // If the point is outside the plot area, destroy it. #678, #820\n                    if (dataLabel && (!enabled || !defined(str))) {\n                        point.dataLabel = dataLabel = dataLabel.destroy();\n                        if (connector) {\n                            point.connector = connector.destroy();\n                        }\n                        // Individual labels are disabled if the are explicitly disabled\n                        // in the point options, or if they fall outside the plot area.\n                    } else if (enabled && defined(str)) {\n                        // create new label\n                        if (!dataLabel) {\n                            dataLabel = point.dataLabel = renderer[rotation ? 'text' : 'label']( // labels don't support rotation\n                                str,\n                                0, -9999,\n                                options.shape,\n                                null,\n                                null,\n                                options.useHTML,\n                                null,\n                                'data-label'\n                            );\n                            dataLabel.addClass(\n                                'highcharts-data-label-color-' + point.colorIndex +\n                                ' ' + (options.className || '') +\n                                (options.useHTML ? 'highcharts-tracker' : '') // #3398\n                            );\n                        } else {\n                            attr.text = str;\n                        }\n                        dataLabel.attr(attr);\n\n                        // Styles must be applied before add in order to read text bounding box\n                        dataLabel.css(style).shadow(options.shadow);\n\n\n                        if (!dataLabel.added) {\n                            dataLabel.add(dataLabelsGroup);\n                        }\n                        // Now the data label is created and placed at 0,0, so we need to align it\n                        series.alignDataLabel(point, dataLabel, options, null, isNew);\n                    }\n                });\n            }\n        };\n\n        /**\n         * Align each individual data label\n         */\n        Series.prototype.alignDataLabel = function(point, dataLabel, options, alignTo, isNew) {\n            var chart = this.chart,\n                inverted = chart.inverted,\n                plotX = pick(point.plotX, -9999),\n                plotY = pick(point.plotY, -9999),\n                bBox = dataLabel.getBBox(),\n                fontSize,\n                baseline,\n                rotation = options.rotation,\n                normRotation,\n                negRotation,\n                align = options.align,\n                rotCorr, // rotation correction\n                // Math.round for rounding errors (#2683), alignTo to allow column labels (#2700)\n                visible =\n                this.visible &&\n                (\n                    point.series.forceDL ||\n                    chart.isInsidePlot(plotX, Math.round(plotY), inverted) ||\n                    (\n                        alignTo && chart.isInsidePlot(\n                            plotX,\n                            inverted ? alignTo.x + 1 : alignTo.y + alignTo.height - 1,\n                            inverted\n                        )\n                    )\n                ),\n                alignAttr, // the final position;\n                justify = pick(options.overflow, 'justify') === 'justify';\n\n            if (visible) {\n\n\n                fontSize = options.style.fontSize;\n\n\n                baseline = chart.renderer.fontMetrics(fontSize, dataLabel).b;\n\n                // The alignment box is a singular point\n                alignTo = extend({\n                    x: inverted ? chart.plotWidth - plotY : plotX,\n                    y: Math.round(inverted ? chart.plotHeight - plotX : plotY),\n                    width: 0,\n                    height: 0\n                }, alignTo);\n\n                // Add the text size for alignment calculation\n                extend(options, {\n                    width: bBox.width,\n                    height: bBox.height\n                });\n\n                // Allow a hook for changing alignment in the last moment, then do the alignment\n                if (rotation) {\n                    justify = false; // Not supported for rotated text\n                    rotCorr = chart.renderer.rotCorr(baseline, rotation); // #3723\n                    alignAttr = {\n                        x: alignTo.x + options.x + alignTo.width / 2 + rotCorr.x,\n                        y: alignTo.y + options.y + {\n                            top: 0,\n                            middle: 0.5,\n                            bottom: 1\n                        }[options.verticalAlign] * alignTo.height\n                    };\n                    dataLabel[isNew ? 'attr' : 'animate'](alignAttr)\n                        .attr({ // #3003\n                            align: align\n                        });\n\n                    // Compensate for the rotated label sticking out on the sides\n                    normRotation = (rotation + 720) % 360;\n                    negRotation = normRotation > 180 && normRotation < 360;\n\n                    if (align === 'left') {\n                        alignAttr.y -= negRotation ? bBox.height : 0;\n                    } else if (align === 'center') {\n                        alignAttr.x -= bBox.width / 2;\n                        alignAttr.y -= bBox.height / 2;\n                    } else if (align === 'right') {\n                        alignAttr.x -= bBox.width;\n                        alignAttr.y -= negRotation ? 0 : bBox.height;\n                    }\n\n\n                } else {\n                    dataLabel.align(options, null, alignTo);\n                    alignAttr = dataLabel.alignAttr;\n                }\n\n                // Handle justify or crop\n                if (justify) {\n                    point.isLabelJustified = this.justifyDataLabel(\n                        dataLabel,\n                        options,\n                        alignAttr,\n                        bBox,\n                        alignTo,\n                        isNew\n                    );\n\n                    // Now check that the data label is within the plot area\n                } else if (pick(options.crop, true)) {\n                    visible = chart.isInsidePlot(alignAttr.x, alignAttr.y) && chart.isInsidePlot(alignAttr.x + bBox.width, alignAttr.y + bBox.height);\n                }\n\n                // When we're using a shape, make it possible with a connector or an arrow pointing to thie point\n                if (options.shape && !rotation) {\n                    dataLabel.attr({\n                        anchorX: point.plotX,\n                        anchorY: point.plotY\n                    });\n                }\n            }\n\n            // Show or hide based on the final aligned position\n            if (!visible) {\n                dataLabel.attr({\n                    y: -9999\n                });\n                dataLabel.placed = false; // don't animate back in\n            }\n\n        };\n\n        /**\n         * If data labels fall partly outside the plot area, align them back in, in a way that\n         * doesn't hide the point.\n         */\n        Series.prototype.justifyDataLabel = function(dataLabel, options, alignAttr, bBox, alignTo, isNew) {\n            var chart = this.chart,\n                align = options.align,\n                verticalAlign = options.verticalAlign,\n                off,\n                justified,\n                padding = dataLabel.box ? 0 : (dataLabel.padding || 0);\n\n            // Off left\n            off = alignAttr.x + padding;\n            if (off < 0) {\n                if (align === 'right') {\n                    options.align = 'left';\n                } else {\n                    options.x = -off;\n                }\n                justified = true;\n            }\n\n            // Off right\n            off = alignAttr.x + bBox.width - padding;\n            if (off > chart.plotWidth) {\n                if (align === 'left') {\n                    options.align = 'right';\n                } else {\n                    options.x = chart.plotWidth - off;\n                }\n                justified = true;\n            }\n\n            // Off top\n            off = alignAttr.y + padding;\n            if (off < 0) {\n                if (verticalAlign === 'bottom') {\n                    options.verticalAlign = 'top';\n                } else {\n                    options.y = -off;\n                }\n                justified = true;\n            }\n\n            // Off bottom\n            off = alignAttr.y + bBox.height - padding;\n            if (off > chart.plotHeight) {\n                if (verticalAlign === 'top') {\n                    options.verticalAlign = 'bottom';\n                } else {\n                    options.y = chart.plotHeight - off;\n                }\n                justified = true;\n            }\n\n            if (justified) {\n                dataLabel.placed = !isNew;\n                dataLabel.align(options, null, alignTo);\n            }\n\n            return justified;\n        };\n\n        /**\n         * Override the base drawDataLabels method by pie specific functionality\n         */\n        if (seriesTypes.pie) {\n            seriesTypes.pie.prototype.drawDataLabels = function() {\n                var series = this,\n                    data = series.data,\n                    point,\n                    chart = series.chart,\n                    options = series.options.dataLabels,\n                    connectorPadding = pick(options.connectorPadding, 10),\n                    connectorWidth = pick(options.connectorWidth, 1),\n                    plotWidth = chart.plotWidth,\n                    plotHeight = chart.plotHeight,\n                    connector,\n                    distanceOption = options.distance,\n                    seriesCenter = series.center,\n                    radius = seriesCenter[2] / 2,\n                    centerY = seriesCenter[1],\n                    outside = distanceOption > 0,\n                    dataLabel,\n                    dataLabelWidth,\n                    labelPos,\n                    labelHeight,\n                    halves = [ // divide the points into right and left halves for anti collision\n                        [], // right\n                        [] // left\n                    ],\n                    x,\n                    y,\n                    visibility,\n                    j,\n                    overflow = [0, 0, 0, 0]; // top, right, bottom, left\n\n                // get out if not enabled\n                if (!series.visible || (!options.enabled && !series._hasPointLabels)) {\n                    return;\n                }\n\n                // Reset all labels that have been shortened\n                each(data, function(point) {\n                    if (point.dataLabel && point.visible && point.dataLabel.shortened) {\n                        point.dataLabel\n                            .attr({\n                                width: 'auto'\n                            }).css({\n                                width: 'auto',\n                                textOverflow: 'clip'\n                            });\n                        point.dataLabel.shortened = false;\n                    }\n                });\n\n\n                // run parent method\n                Series.prototype.drawDataLabels.apply(series);\n\n                each(data, function(point) {\n                    if (point.dataLabel && point.visible) { // #407, #2510\n\n                        // Arrange points for detection collision\n                        halves[point.half].push(point);\n\n                        // Reset positions (#4905)\n                        point.dataLabel._pos = null;\n                    }\n                });\n\n                /* Loop over the points in each half, starting from the top and bottom\n                 * of the pie to detect overlapping labels.\n                 */\n                each(halves, function(points, i) {\n\n                    var top,\n                        bottom,\n                        length = points.length,\n                        positions,\n                        naturalY,\n                        sideOverflow,\n                        size;\n\n                    if (!length) {\n                        return;\n                    }\n\n                    // Sort by angle\n                    series.sortByAngle(points, i - 0.5);\n\n                    // Only do anti-collision when we are outside the pie and have connectors (#856)\n                    if (distanceOption > 0) {\n                        top = Math.max(0, centerY - radius - distanceOption);\n                        bottom = Math.min(centerY + radius + distanceOption, chart.plotHeight);\n                        positions = map(points, function(point) {\n                            if (point.dataLabel) {\n                                size = point.dataLabel.getBBox().height || 21;\n                                return {\n                                    target: point.labelPos[1] - top + size / 2,\n                                    size: size,\n                                    rank: point.y\n                                };\n                            }\n                        });\n                        H.distribute(positions, bottom + size - top);\n                    }\n\n                    // now the used slots are sorted, fill them up sequentially\n                    for (j = 0; j < length; j++) {\n\n                        point = points[j];\n                        labelPos = point.labelPos;\n                        dataLabel = point.dataLabel;\n                        visibility = point.visible === false ? 'hidden' : 'inherit';\n                        naturalY = labelPos[1];\n\n                        if (positions) {\n                            if (positions[j].pos === undefined) {\n                                visibility = 'hidden';\n                            } else {\n                                labelHeight = positions[j].size;\n                                y = top + positions[j].pos;\n                            }\n\n                        } else {\n                            y = naturalY;\n                        }\n\n                        // get the x - use the natural x position for labels near the top and bottom, to prevent the top\n                        // and botton slice connectors from touching each other on either side\n                        if (options.justify) {\n                            x = seriesCenter[0] + (i ? -1 : 1) * (radius + distanceOption);\n                        } else {\n                            x = series.getX(y < top + 2 || y > bottom - 2 ? naturalY : y, i);\n                        }\n\n\n                        // Record the placement and visibility\n                        dataLabel._attr = {\n                            visibility: visibility,\n                            align: labelPos[6]\n                        };\n                        dataLabel._pos = {\n                            x: x + options.x +\n                                ({\n                                    left: connectorPadding,\n                                    right: -connectorPadding\n                                }[labelPos[6]] || 0),\n                            y: y + options.y - 10 // 10 is for the baseline (label vs text)\n                        };\n                        labelPos.x = x;\n                        labelPos.y = y;\n\n\n                        // Detect overflowing data labels\n                        if (series.options.size === null) {\n                            dataLabelWidth = dataLabel.getBBox().width;\n\n                            sideOverflow = null;\n                            // Overflow left\n                            if (x - dataLabelWidth < connectorPadding) {\n                                sideOverflow = Math.round(\n                                    dataLabelWidth - x + connectorPadding\n                                );\n                                overflow[3] = Math.max(sideOverflow, overflow[3]);\n\n                                // Overflow right\n                            } else if (x + dataLabelWidth > plotWidth - connectorPadding) {\n                                sideOverflow = Math.round(\n                                    x + dataLabelWidth - plotWidth + connectorPadding\n                                );\n                                overflow[1] = Math.max(sideOverflow, overflow[1]);\n                            }\n\n                            // Overflow top\n                            if (y - labelHeight / 2 < 0) {\n                                overflow[0] = Math.max(\n                                    Math.round(-y + labelHeight / 2),\n                                    overflow[0]\n                                );\n\n                                // Overflow left\n                            } else if (y + labelHeight / 2 > plotHeight) {\n                                overflow[2] = Math.max(\n                                    Math.round(y + labelHeight / 2 - plotHeight),\n                                    overflow[2]\n                                );\n                            }\n                            dataLabel.sideOverflow = sideOverflow;\n                        }\n                    } // for each point\n                }); // for each half\n\n                // Do not apply the final placement and draw the connectors until we have verified\n                // that labels are not spilling over.\n                if (arrayMax(overflow) === 0 || this.verifyDataLabelOverflow(overflow)) {\n\n                    // Place the labels in the final position\n                    this.placeDataLabels();\n\n                    // Draw the connectors\n                    if (outside && connectorWidth) {\n                        each(this.points, function(point) {\n                            var isNew;\n\n                            connector = point.connector;\n                            dataLabel = point.dataLabel;\n\n                            if (dataLabel && dataLabel._pos && point.visible) {\n                                visibility = dataLabel._attr.visibility;\n\n                                isNew = !connector;\n\n                                if (isNew) {\n                                    point.connector = connector = chart.renderer.path()\n                                        .addClass('highcharts-data-label-connector highcharts-color-' + point.colorIndex)\n                                        .add(series.dataLabelsGroup);\n\n\n                                    connector.attr({\n                                        'stroke-width': connectorWidth,\n                                        'stroke': options.connectorColor || point.color || '#666666'\n                                    });\n\n                                }\n                                connector[isNew ? 'attr' : 'animate']({\n                                    d: series.connectorPath(point.labelPos)\n                                });\n                                connector.attr('visibility', visibility);\n\n                            } else if (connector) {\n                                point.connector = connector.destroy();\n                            }\n                        });\n                    }\n                }\n            };\n\n            /**\n             * Extendable method for getting the path of the connector between the data label\n             * and the pie slice.\n             */\n            seriesTypes.pie.prototype.connectorPath = function(labelPos) {\n                var x = labelPos.x,\n                    y = labelPos.y;\n                return pick(this.options.dataLabels.softConnector, true) ? [\n                    'M',\n                    x + (labelPos[6] === 'left' ? 5 : -5), y, // end of the string at the label\n                    'C',\n                    x, y, // first break, next to the label\n                    2 * labelPos[2] - labelPos[4], 2 * labelPos[3] - labelPos[5],\n                    labelPos[2], labelPos[3], // second break\n                    'L',\n                    labelPos[4], labelPos[5] // base\n                ] : [\n                    'M',\n                    x + (labelPos[6] === 'left' ? 5 : -5), y, // end of the string at the label\n                    'L',\n                    labelPos[2], labelPos[3], // second break\n                    'L',\n                    labelPos[4], labelPos[5] // base\n                ];\n            };\n\n            /**\n             * Perform the final placement of the data labels after we have verified that they\n             * fall within the plot area.\n             */\n            seriesTypes.pie.prototype.placeDataLabels = function() {\n                each(this.points, function(point) {\n                    var dataLabel = point.dataLabel,\n                        _pos;\n                    if (dataLabel && point.visible) {\n                        _pos = dataLabel._pos;\n                        if (_pos) {\n\n                            // Shorten data labels with ellipsis if they still overflow\n                            // after the pie has reached minSize (#223).\n                            if (dataLabel.sideOverflow) {\n                                dataLabel._attr.width =\n                                    dataLabel.getBBox().width - dataLabel.sideOverflow;\n                                dataLabel.css({\n                                    width: dataLabel._attr.width + 'px',\n                                    textOverflow: 'ellipsis'\n                                });\n                                dataLabel.shortened = true;\n                            }\n\n                            dataLabel.attr(dataLabel._attr);\n                            dataLabel[dataLabel.moved ? 'animate' : 'attr'](_pos);\n                            dataLabel.moved = true;\n                        } else if (dataLabel) {\n                            dataLabel.attr({\n                                y: -9999\n                            });\n                        }\n                    }\n                }, this);\n            };\n\n            seriesTypes.pie.prototype.alignDataLabel = noop;\n\n            /**\n             * Verify whether the data labels are allowed to draw, or we should run more translation and data\n             * label positioning to keep them inside the plot area. Returns true when data labels are ready\n             * to draw.\n             */\n            seriesTypes.pie.prototype.verifyDataLabelOverflow = function(overflow) {\n\n                var center = this.center,\n                    options = this.options,\n                    centerOption = options.center,\n                    minSize = options.minSize || 80,\n                    newSize = minSize,\n                    ret;\n\n                // Handle horizontal size and center\n                if (centerOption[0] !== null) { // Fixed center\n                    newSize = Math.max(center[2] - Math.max(overflow[1], overflow[3]), minSize);\n\n                } else { // Auto center\n                    newSize = Math.max(\n                        center[2] - overflow[1] - overflow[3], // horizontal overflow\n                        minSize\n                    );\n                    center[0] += (overflow[3] - overflow[1]) / 2; // horizontal center\n                }\n\n                // Handle vertical size and center\n                if (centerOption[1] !== null) { // Fixed center\n                    newSize = Math.max(Math.min(newSize, center[2] - Math.max(overflow[0], overflow[2])), minSize);\n\n                } else { // Auto center\n                    newSize = Math.max(\n                        Math.min(\n                            newSize,\n                            center[2] - overflow[0] - overflow[2] // vertical overflow\n                        ),\n                        minSize\n                    );\n                    center[1] += (overflow[0] - overflow[2]) / 2; // vertical center\n                }\n\n                // If the size must be decreased, we need to run translate and drawDataLabels again\n                if (newSize < center[2]) {\n                    center[2] = newSize;\n                    center[3] = Math.min(relativeLength(options.innerSize || 0, newSize), newSize); // #3632\n                    this.translate(center);\n\n                    if (this.drawDataLabels) {\n                        this.drawDataLabels();\n                    }\n                    // Else, return true to indicate that the pie and its labels is within the plot area\n                } else {\n                    ret = true;\n                }\n                return ret;\n            };\n        }\n\n        if (seriesTypes.column) {\n\n            /**\n             * Override the basic data label alignment by adjusting for the position of the column\n             */\n            seriesTypes.column.prototype.alignDataLabel = function(point, dataLabel, options, alignTo, isNew) {\n                var inverted = this.chart.inverted,\n                    series = point.series,\n                    dlBox = point.dlBox || point.shapeArgs, // data label box for alignment\n                    below = pick(point.below, point.plotY > pick(this.translatedThreshold, series.yAxis.len)), // point.below is used in range series\n                    inside = pick(options.inside, !!this.options.stacking), // draw it inside the box?\n                    overshoot;\n\n                // Align to the column itself, or the top of it\n                if (dlBox) { // Area range uses this method but not alignTo\n                    alignTo = merge(dlBox);\n\n                    if (alignTo.y < 0) {\n                        alignTo.height += alignTo.y;\n                        alignTo.y = 0;\n                    }\n                    overshoot = alignTo.y + alignTo.height - series.yAxis.len;\n                    if (overshoot > 0) {\n                        alignTo.height -= overshoot;\n                    }\n\n                    if (inverted) {\n                        alignTo = {\n                            x: series.yAxis.len - alignTo.y - alignTo.height,\n                            y: series.xAxis.len - alignTo.x - alignTo.width,\n                            width: alignTo.height,\n                            height: alignTo.width\n                        };\n                    }\n\n                    // Compute the alignment box\n                    if (!inside) {\n                        if (inverted) {\n                            alignTo.x += below ? 0 : alignTo.width;\n                            alignTo.width = 0;\n                        } else {\n                            alignTo.y += below ? alignTo.height : 0;\n                            alignTo.height = 0;\n                        }\n                    }\n                }\n\n\n                // When alignment is undefined (typically columns and bars), display the individual\n                // point below or above the point depending on the threshold\n                options.align = pick(\n                    options.align, !inverted || inside ? 'center' : below ? 'right' : 'left'\n                );\n                options.verticalAlign = pick(\n                    options.verticalAlign,\n                    inverted || inside ? 'middle' : below ? 'top' : 'bottom'\n                );\n\n                // Call the parent method\n                Series.prototype.alignDataLabel.call(this, point, dataLabel, options, alignTo, isNew);\n\n                // If label was justified and we have contrast, set it:\n                if (point.isLabelJustified && point.contrastColor) {\n                    point.dataLabel.css({\n                        color: point.contrastColor\n                    });\n                }\n            };\n        }\n\n    }(Highcharts));\n    (function(H) {\n        /**\n         * (c) 2009-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */\n        /**\n         * Highcharts module to hide overlapping data labels. This module is included in\n         * Highcharts.\n         */\n        var Chart = H.Chart,\n            each = H.each,\n            pick = H.pick,\n            addEvent = H.addEvent;\n\n        // Collect potensial overlapping data labels. Stack labels probably don't need\n        // to be considered because they are usually accompanied by data labels that lie\n        // inside the columns.\n        Chart.prototype.callbacks.push(function(chart) {\n            function collectAndHide() {\n                var labels = [];\n\n                each(chart.series || [], function(series) {\n                    var dlOptions = series.options.dataLabels,\n                        // Range series have two collections\n                        collections = series.dataLabelCollections || ['dataLabel'];\n\n                    if (\n                        (dlOptions.enabled || series._hasPointLabels) &&\n                        !dlOptions.allowOverlap &&\n                        series.visible\n                    ) { // #3866\n                        each(collections, function(coll) {\n                            each(series.points, function(point) {\n                                if (point[coll]) {\n                                    point[coll].labelrank = pick(\n                                        point.labelrank,\n                                        point.shapeArgs && point.shapeArgs.height\n                                    ); // #4118\n                                    labels.push(point[coll]);\n                                }\n                            });\n                        });\n                    }\n                });\n                chart.hideOverlappingLabels(labels);\n            }\n\n            // Do it now ...\n            collectAndHide();\n\n            // ... and after each chart redraw\n            addEvent(chart, 'redraw', collectAndHide);\n\n        });\n\n        /**\n         * Hide overlapping labels. Labels are moved and faded in and out on zoom to\n         * provide a smooth visual imression.\n         */\n        Chart.prototype.hideOverlappingLabels = function(labels) {\n\n            var len = labels.length,\n                label,\n                i,\n                j,\n                label1,\n                label2,\n                isIntersecting,\n                pos1,\n                pos2,\n                parent1,\n                parent2,\n                padding,\n                intersectRect = function(x1, y1, w1, h1, x2, y2, w2, h2) {\n                    return !(\n                        x2 > x1 + w1 ||\n                        x2 + w2 < x1 ||\n                        y2 > y1 + h1 ||\n                        y2 + h2 < y1\n                    );\n                };\n\n            // Mark with initial opacity\n            for (i = 0; i < len; i++) {\n                label = labels[i];\n                if (label) {\n                    label.oldOpacity = label.opacity;\n                    label.newOpacity = 1;\n                }\n            }\n\n            // Prevent a situation in a gradually rising slope, that each label will\n            // hide the previous one because the previous one always has lower rank.\n            labels.sort(function(a, b) {\n                return (b.labelrank || 0) - (a.labelrank || 0);\n            });\n\n            // Detect overlapping labels\n            for (i = 0; i < len; i++) {\n                label1 = labels[i];\n\n                for (j = i + 1; j < len; ++j) {\n                    label2 = labels[j];\n                    if (\n                        label1 && label2 &&\n                        label1 !== label2 && // #6465, polar chart with connectEnds\n                        label1.placed && label2.placed &&\n                        label1.newOpacity !== 0 && label2.newOpacity !== 0\n                    ) {\n                        pos1 = label1.alignAttr;\n                        pos2 = label2.alignAttr;\n                        // Different panes have different positions\n                        parent1 = label1.parentGroup;\n                        parent2 = label2.parentGroup;\n                        // Substract the padding if no background or border (#4333)\n                        padding = 2 * (label1.box ? 0 : label1.padding);\n                        isIntersecting = intersectRect(\n                            pos1.x + parent1.translateX,\n                            pos1.y + parent1.translateY,\n                            label1.width - padding,\n                            label1.height - padding,\n                            pos2.x + parent2.translateX,\n                            pos2.y + parent2.translateY,\n                            label2.width - padding,\n                            label2.height - padding\n                        );\n\n                        if (isIntersecting) {\n                            (label1.labelrank < label2.labelrank ? label1 : label2)\n                            .newOpacity = 0;\n                        }\n                    }\n                }\n            }\n\n            // Hide or show\n            each(labels, function(label) {\n                var complete,\n                    newOpacity;\n\n                if (label) {\n                    newOpacity = label.newOpacity;\n\n                    if (label.oldOpacity !== newOpacity && label.placed) {\n\n                        // Make sure the label is completely hidden to avoid catching\n                        // clicks (#4362)\n                        if (newOpacity) {\n                            label.show(true);\n                        } else {\n                            complete = function() {\n                                label.hide();\n                            };\n                        }\n\n                        // Animate or set the opacity\t\t\t\t\t\n                        label.alignAttr.opacity = newOpacity;\n                        label[label.isOld ? 'animate' : 'attr'](\n                            label.alignAttr,\n                            null,\n                            complete\n                        );\n\n                    }\n                    label.isOld = true;\n                }\n            });\n        };\n\n    }(Highcharts));\n    (function(H) {\n        /**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */\n        var addEvent = H.addEvent,\n            Chart = H.Chart,\n            createElement = H.createElement,\n            css = H.css,\n            defaultOptions = H.defaultOptions,\n            defaultPlotOptions = H.defaultPlotOptions,\n            each = H.each,\n            extend = H.extend,\n            fireEvent = H.fireEvent,\n            hasTouch = H.hasTouch,\n            inArray = H.inArray,\n            isObject = H.isObject,\n            Legend = H.Legend,\n            merge = H.merge,\n            pick = H.pick,\n            Point = H.Point,\n            Series = H.Series,\n            seriesTypes = H.seriesTypes,\n            svg = H.svg,\n            TrackerMixin;\n\n        /**\n         * TrackerMixin for points and graphs.\n         *\n         * @mixin\n         */\n        TrackerMixin = H.TrackerMixin = {\n\n            /**\n             * Draw the tracker for a point.\n             */\n            drawTrackerPoint: function() {\n                var series = this,\n                    chart = series.chart,\n                    pointer = chart.pointer,\n                    onMouseOver = function(e) {\n                        var point = pointer.getPointFromEvent(e);\n\n                        // undefined on graph in scatterchart\n                        if (point !== undefined) {\n                            point.onMouseOver(e);\n                        }\n                    };\n\n                // Add reference to the point\n                each(series.points, function(point) {\n                    if (point.graphic) {\n                        point.graphic.element.point = point;\n                    }\n                    if (point.dataLabel) {\n                        if (point.dataLabel.div) {\n                            point.dataLabel.div.point = point;\n                        } else {\n                            point.dataLabel.element.point = point;\n                        }\n                    }\n                });\n\n                // Add the event listeners, we need to do this only once\n                if (!series._hasTracking) {\n                    each(series.trackerGroups, function(key) {\n                        if (series[key]) { // we don't always have dataLabelsGroup\n                            series[key]\n                                .addClass('highcharts-tracker')\n                                .on('mouseover', onMouseOver)\n                                .on('mouseout', function(e) {\n                                    pointer.onTrackerMouseOut(e);\n                                });\n                            if (hasTouch) {\n                                series[key].on('touchstart', onMouseOver);\n                            }\n\n\n                            if (series.options.cursor) {\n                                series[key]\n                                    .css(css)\n                                    .css({\n                                        cursor: series.options.cursor\n                                    });\n                            }\n\n                        }\n                    });\n                    series._hasTracking = true;\n                }\n            },\n\n            /**\n             * Draw the tracker object that sits above all data labels and markers to\n             * track mouse events on the graph or points. For the line type charts\n             * the tracker uses the same graphPath, but with a greater stroke width\n             * for better control.\n             */\n            drawTrackerGraph: function() {\n                var series = this,\n                    options = series.options,\n                    trackByArea = options.trackByArea,\n                    trackerPath = [].concat(trackByArea ? series.areaPath : series.graphPath),\n                    trackerPathLength = trackerPath.length,\n                    chart = series.chart,\n                    pointer = chart.pointer,\n                    renderer = chart.renderer,\n                    snap = chart.options.tooltip.snap,\n                    tracker = series.tracker,\n                    i,\n                    onMouseOver = function() {\n                        if (chart.hoverSeries !== series) {\n                            series.onMouseOver();\n                        }\n                    },\n                    /*\n                     * Empirical lowest possible opacities for TRACKER_FILL for an element to stay invisible but clickable\n                     * IE6: 0.002\n                     * IE7: 0.002\n                     * IE8: 0.002\n                     * IE9: 0.00000000001 (unlimited)\n                     * IE10: 0.0001 (exporting only)\n                     * FF: 0.00000000001 (unlimited)\n                     * Chrome: 0.000001\n                     * Safari: 0.000001\n                     * Opera: 0.00000000001 (unlimited)\n                     */\n                    TRACKER_FILL = 'rgba(192,192,192,' + (svg ? 0.0001 : 0.002) + ')';\n\n                // Extend end points. A better way would be to use round linecaps,\n                // but those are not clickable in VML.\n                if (trackerPathLength && !trackByArea) {\n                    i = trackerPathLength + 1;\n                    while (i--) {\n                        if (trackerPath[i] === 'M') { // extend left side\n                            trackerPath.splice(i + 1, 0, trackerPath[i + 1] - snap, trackerPath[i + 2], 'L');\n                        }\n                        if ((i && trackerPath[i] === 'M') || i === trackerPathLength) { // extend right side\n                            trackerPath.splice(i, 0, 'L', trackerPath[i - 2] + snap, trackerPath[i - 1]);\n                        }\n                    }\n                }\n\n                // handle single points\n                /*for (i = 0; i < singlePoints.length; i++) {\n                \tsinglePoint = singlePoints[i];\n                \ttrackerPath.push(M, singlePoint.plotX - snap, singlePoint.plotY,\n                \tL, singlePoint.plotX + snap, singlePoint.plotY);\n                }*/\n\n                // draw the tracker\n                if (tracker) {\n                    tracker.attr({\n                        d: trackerPath\n                    });\n                } else if (series.graph) { // create\n\n                    series.tracker = renderer.path(trackerPath)\n                        .attr({\n                            'stroke-linejoin': 'round', // #1225\n                            visibility: series.visible ? 'visible' : 'hidden',\n                            stroke: TRACKER_FILL,\n                            fill: trackByArea ? TRACKER_FILL : 'none',\n                            'stroke-width': series.graph.strokeWidth() + (trackByArea ? 0 : 2 * snap),\n                            zIndex: 2\n                        })\n                        .add(series.group);\n\n                    // The tracker is added to the series group, which is clipped, but is covered\n                    // by the marker group. So the marker group also needs to capture events.\n                    each([series.tracker, series.markerGroup], function(tracker) {\n                        tracker.addClass('highcharts-tracker')\n                            .on('mouseover', onMouseOver)\n                            .on('mouseout', function(e) {\n                                pointer.onTrackerMouseOut(e);\n                            });\n\n\n                        if (options.cursor) {\n                            tracker.css({\n                                cursor: options.cursor\n                            });\n                        }\n\n\n                        if (hasTouch) {\n                            tracker.on('touchstart', onMouseOver);\n                        }\n                    });\n                }\n            }\n        };\n        /* End TrackerMixin */\n\n\n        /**\n         * Add tracking event listener to the series group, so the point graphics\n         * themselves act as trackers\n         */\n\n        if (seriesTypes.column) {\n            seriesTypes.column.prototype.drawTracker = TrackerMixin.drawTrackerPoint;\n        }\n\n        if (seriesTypes.pie) {\n            seriesTypes.pie.prototype.drawTracker = TrackerMixin.drawTrackerPoint;\n        }\n\n        if (seriesTypes.scatter) {\n            seriesTypes.scatter.prototype.drawTracker = TrackerMixin.drawTrackerPoint;\n        }\n\n        /*\n         * Extend Legend for item events\n         */\n        extend(Legend.prototype, {\n\n            setItemEvents: function(item, legendItem, useHTML) {\n                var legend = this,\n                    boxWrapper = legend.chart.renderer.boxWrapper,\n                    activeClass = 'highcharts-legend-' + (item.series ? 'point' : 'series') + '-active';\n\n                // Set the events on the item group, or in case of useHTML, the item itself (#1249)\n                (useHTML ? legendItem : item.legendGroup).on('mouseover', function() {\n                        item.setState('hover');\n\n                        // A CSS class to dim or hide other than the hovered series\n                        boxWrapper.addClass(activeClass);\n\n\n                        legendItem.css(legend.options.itemHoverStyle);\n\n                    })\n                    .on('mouseout', function() {\n\n                        legendItem.css(item.visible ? legend.itemStyle : legend.itemHiddenStyle);\n\n\n                        // A CSS class to dim or hide other than the hovered series\n                        boxWrapper.removeClass(activeClass);\n\n                        item.setState();\n                    })\n                    .on('click', function(event) {\n                        var strLegendItemClick = 'legendItemClick',\n                            fnLegendItemClick = function() {\n                                if (item.setVisible) {\n                                    item.setVisible();\n                                }\n                            };\n\n                        // Pass over the click/touch event. #4.\n                        event = {\n                            browserEvent: event\n                        };\n\n                        // click the name or symbol\n                        if (item.firePointEvent) { // point\n                            item.firePointEvent(strLegendItemClick, event, fnLegendItemClick);\n                        } else {\n                            fireEvent(item, strLegendItemClick, event, fnLegendItemClick);\n                        }\n                    });\n            },\n\n            createCheckboxForItem: function(item) {\n                var legend = this;\n\n                item.checkbox = createElement('input', {\n                    type: 'checkbox',\n                    checked: item.selected,\n                    defaultChecked: item.selected // required by IE7\n                }, legend.options.itemCheckboxStyle, legend.chart.container);\n\n                addEvent(item.checkbox, 'click', function(event) {\n                    var target = event.target;\n                    fireEvent(\n                        item.series || item,\n                        'checkboxClick', { // #3712\n                            checked: target.checked,\n                            item: item\n                        },\n                        function() {\n                            item.select();\n                        }\n                    );\n                });\n            }\n        });\n\n\n\n        // Add pointer cursor to legend itemstyle in defaultOptions\n        defaultOptions.legend.itemStyle.cursor = 'pointer';\n\n\n\n        /*\n         * Extend the Chart object with interaction\n         */\n\n        extend(Chart.prototype, /** @lends Chart.prototype */ {\n            /**\n             * Display the zoom button\n             */\n            showResetZoom: function() {\n                var chart = this,\n                    lang = defaultOptions.lang,\n                    btnOptions = chart.options.chart.resetZoomButton,\n                    theme = btnOptions.theme,\n                    states = theme.states,\n                    alignTo = btnOptions.relativeTo === 'chart' ? null : 'plotBox';\n\n                function zoomOut() {\n                    chart.zoomOut();\n                }\n\n                this.resetZoomButton = chart.renderer.button(lang.resetZoom, null, null, zoomOut, theme, states && states.hover)\n                    .attr({\n                        align: btnOptions.position.align,\n                        title: lang.resetZoomTitle\n                    })\n                    .addClass('highcharts-reset-zoom')\n                    .add()\n                    .align(btnOptions.position, false, alignTo);\n\n            },\n\n            /**\n             * Zoom out to 1:1\n             */\n            zoomOut: function() {\n                var chart = this;\n                fireEvent(chart, 'selection', {\n                    resetSelection: true\n                }, function() {\n                    chart.zoom();\n                });\n            },\n\n            /**\n             * Zoom into a given portion of the chart given by axis coordinates\n             * @param {Object} event\n             */\n            zoom: function(event) {\n                var chart = this,\n                    hasZoomed,\n                    pointer = chart.pointer,\n                    displayButton = false,\n                    resetZoomButton;\n\n                // If zoom is called with no arguments, reset the axes\n                if (!event || event.resetSelection) {\n                    each(chart.axes, function(axis) {\n                        hasZoomed = axis.zoom();\n                    });\n                } else { // else, zoom in on all axes\n                    each(event.xAxis.concat(event.yAxis), function(axisData) {\n                        var axis = axisData.axis,\n                            isXAxis = axis.isXAxis;\n\n                        // don't zoom more than minRange\n                        if (pointer[isXAxis ? 'zoomX' : 'zoomY']) {\n                            hasZoomed = axis.zoom(axisData.min, axisData.max);\n                            if (axis.displayBtn) {\n                                displayButton = true;\n                            }\n                        }\n                    });\n                }\n\n                // Show or hide the Reset zoom button\n                resetZoomButton = chart.resetZoomButton;\n                if (displayButton && !resetZoomButton) {\n                    chart.showResetZoom();\n                } else if (!displayButton && isObject(resetZoomButton)) {\n                    chart.resetZoomButton = resetZoomButton.destroy();\n                }\n\n\n                // Redraw\n                if (hasZoomed) {\n                    chart.redraw(\n                        pick(chart.options.chart.animation, event && event.animation, chart.pointCount < 100) // animation\n                    );\n                }\n            },\n\n            /**\n             * Pan the chart by dragging the mouse across the pane. This function is called\n             * on mouse move, and the distance to pan is computed from chartX compared to\n             * the first chartX position in the dragging operation.\n             */\n            pan: function(e, panning) {\n\n                var chart = this,\n                    hoverPoints = chart.hoverPoints,\n                    doRedraw;\n\n                // remove active points for shared tooltip\n                if (hoverPoints) {\n                    each(hoverPoints, function(point) {\n                        point.setState();\n                    });\n                }\n\n                each(panning === 'xy' ? [1, 0] : [1], function(isX) { // xy is used in maps\n                    var axis = chart[isX ? 'xAxis' : 'yAxis'][0],\n                        horiz = axis.horiz,\n                        mousePos = e[horiz ? 'chartX' : 'chartY'],\n                        mouseDown = horiz ? 'mouseDownX' : 'mouseDownY',\n                        startPos = chart[mouseDown],\n                        halfPointRange = (axis.pointRange || 0) / 2,\n                        extremes = axis.getExtremes(),\n                        panMin = axis.toValue(startPos - mousePos, true) +\n                        halfPointRange,\n                        panMax = axis.toValue(startPos + axis.len - mousePos, true) -\n                        halfPointRange,\n                        flipped = panMax < panMin,\n                        newMin = flipped ? panMax : panMin,\n                        newMax = flipped ? panMin : panMax,\n                        paddedMin = axis.toValue(\n                            axis.toPixels(extremes.min) - axis.minPixelPadding\n                        ),\n                        paddedMax = axis.toValue(\n                            axis.toPixels(extremes.max) + axis.minPixelPadding\n                        ),\n                        distMin = Math.min(extremes.dataMin, paddedMin) - newMin,\n                        distMax = newMax - Math.max(extremes.dataMax, paddedMax);\n\n                    // Negative distMin and distMax means that we're still inside the\n                    // data range.\n                    if (axis.series.length && distMin < 0 && distMax < 0) {\n                        axis.setExtremes(\n                            newMin,\n                            newMax,\n                            false,\n                            false, {\n                                trigger: 'pan'\n                            }\n                        );\n                        doRedraw = true;\n                    }\n\n                    chart[mouseDown] = mousePos; // set new reference for next run\n                });\n\n                if (doRedraw) {\n                    chart.redraw(false);\n                }\n                css(chart.container, {\n                    cursor: 'move'\n                });\n            }\n        });\n\n        /*\n         * Extend the Point object with interaction\n         */\n        extend(Point.prototype, /** @lends Point.prototype */ {\n            /**\n             * Toggle the selection status of a point\n             * @param {Boolean} selected Whether to select or unselect the point.\n             * @param {Boolean} accumulate Whether to add to the previous selection. By default,\n             *\t\t this happens if the control key (Cmd on Mac) was pressed during clicking.\n             */\n            select: function(selected, accumulate) {\n                var point = this,\n                    series = point.series,\n                    chart = series.chart;\n\n                selected = pick(selected, !point.selected);\n\n                // fire the event with the default handler\n                point.firePointEvent(selected ? 'select' : 'unselect', {\n                    accumulate: accumulate\n                }, function() {\n                    point.selected = point.options.selected = selected;\n                    series.options.data[inArray(point, series.data)] = point.options;\n\n                    point.setState(selected && 'select');\n\n                    // unselect all other points unless Ctrl or Cmd + click\n                    if (!accumulate) {\n                        each(chart.getSelectedPoints(), function(loopPoint) {\n                            if (loopPoint.selected && loopPoint !== point) {\n                                loopPoint.selected = loopPoint.options.selected = false;\n                                series.options.data[inArray(loopPoint, series.data)] = loopPoint.options;\n                                loopPoint.setState('');\n                                loopPoint.firePointEvent('unselect');\n                            }\n                        });\n                    }\n                });\n            },\n\n            /**\n             * Runs on mouse over the point\n             * \n             * @param {Object} e The event arguments\n             */\n            onMouseOver: function(e) {\n                var point = this,\n                    series = point.series,\n                    chart = series.chart,\n                    pointer = chart.pointer;\n                point.firePointEvent('mouseOver');\n                pointer.runPointActions(e, point);\n            },\n\n            /**\n             * Runs on mouse out from the point\n             */\n            onMouseOut: function() {\n                var point = this,\n                    chart = point.series.chart;\n                point.firePointEvent('mouseOut');\n                each(chart.hoverPoints || [], function(p) {\n                    p.setState();\n                });\n                chart.hoverPoints = chart.hoverPoint = null;\n            },\n\n            /**\n             * Import events from the series' and point's options. Only do it on\n             * demand, to save processing time on hovering.\n             */\n            importEvents: function() {\n                if (!this.hasImportedEvents) {\n                    var point = this,\n                        options = merge(point.series.options.point, point.options),\n                        events = options.events,\n                        eventType;\n\n                    point.events = events;\n\n                    for (eventType in events) {\n                        addEvent(point, eventType, events[eventType]);\n                    }\n                    this.hasImportedEvents = true;\n\n                }\n            },\n\n            /**\n             * Set the point's state\n             * @param {String} state\n             */\n            setState: function(state, move) {\n                var point = this,\n                    plotX = Math.floor(point.plotX), // #4586\n                    plotY = point.plotY,\n                    series = point.series,\n                    stateOptions = series.options.states[state] || {},\n                    markerOptions = defaultPlotOptions[series.type].marker &&\n                    series.options.marker,\n                    normalDisabled = markerOptions && markerOptions.enabled === false,\n                    markerStateOptions = (markerOptions && markerOptions.states &&\n                        markerOptions.states[state]) || {},\n                    stateDisabled = markerStateOptions.enabled === false,\n                    stateMarkerGraphic = series.stateMarkerGraphic,\n                    pointMarker = point.marker || {},\n                    chart = series.chart,\n                    halo = series.halo,\n                    haloOptions,\n                    markerAttribs,\n                    hasMarkers = markerOptions && series.markerAttribs,\n                    newSymbol;\n\n                state = state || ''; // empty string\n\n                if (\n                    // already has this state\n                    (state === point.state && !move) ||\n                    // selected points don't respond to hover\n                    (point.selected && state !== 'select') ||\n                    // series' state options is disabled\n                    (stateOptions.enabled === false) ||\n                    // general point marker's state options is disabled\n                    (state && (stateDisabled || (normalDisabled && markerStateOptions.enabled === false))) ||\n                    // individual point marker's state options is disabled\n                    (state && pointMarker.states && pointMarker.states[state] && pointMarker.states[state].enabled === false) // #1610\n\n                ) {\n                    return;\n                }\n\n                if (hasMarkers) {\n                    markerAttribs = series.markerAttribs(point, state);\n                }\n\n                // Apply hover styles to the existing point\n                if (point.graphic) {\n\n                    if (point.state) {\n                        point.graphic.removeClass('highcharts-point-' + point.state);\n                    }\n                    if (state) {\n                        point.graphic.addClass('highcharts-point-' + state);\n                    }\n\n                    /*attribs = radius ? { // new symbol attributes (#507, #612)\n                    \tx: plotX - radius,\n                    \ty: plotY - radius,\n                    \twidth: 2 * radius,\n                    \theight: 2 * radius\n                    } : {};*/\n\n\n                    //attribs = merge(series.pointAttribs(point, state), attribs);\n                    point.graphic.attr(series.pointAttribs(point, state));\n\n\n                    if (markerAttribs) {\n                        point.graphic.animate(\n                            markerAttribs,\n                            pick(\n                                chart.options.chart.animation, // Turn off globally\n                                markerStateOptions.animation,\n                                markerOptions.animation\n                            )\n                        );\n                    }\n\n                    // Zooming in from a range with no markers to a range with markers\n                    if (stateMarkerGraphic) {\n                        stateMarkerGraphic.hide();\n                    }\n                } else {\n                    // if a graphic is not applied to each point in the normal state, create a shared\n                    // graphic for the hover state\n                    if (state && markerStateOptions) {\n                        newSymbol = pointMarker.symbol || series.symbol;\n\n                        // If the point has another symbol than the previous one, throw away the\n                        // state marker graphic and force a new one (#1459)\n                        if (stateMarkerGraphic && stateMarkerGraphic.currentSymbol !== newSymbol) {\n                            stateMarkerGraphic = stateMarkerGraphic.destroy();\n                        }\n\n                        // Add a new state marker graphic\n                        if (!stateMarkerGraphic) {\n                            if (newSymbol) {\n                                series.stateMarkerGraphic = stateMarkerGraphic = chart.renderer.symbol(\n                                        newSymbol,\n                                        markerAttribs.x,\n                                        markerAttribs.y,\n                                        markerAttribs.width,\n                                        markerAttribs.height\n                                    )\n                                    .add(series.markerGroup);\n                                stateMarkerGraphic.currentSymbol = newSymbol;\n                            }\n\n                            // Move the existing graphic\n                        } else {\n                            stateMarkerGraphic[move ? 'animate' : 'attr']({ // #1054\n                                x: markerAttribs.x,\n                                y: markerAttribs.y\n                            });\n                        }\n\n                        if (stateMarkerGraphic) {\n                            stateMarkerGraphic.attr(series.pointAttribs(point, state));\n                        }\n\n                    }\n\n                    if (stateMarkerGraphic) {\n                        stateMarkerGraphic[state && chart.isInsidePlot(plotX, plotY, chart.inverted) ? 'show' : 'hide'](); // #2450\n                        stateMarkerGraphic.element.point = point; // #4310\n                    }\n                }\n\n                // Show me your halo\n                haloOptions = stateOptions.halo;\n                if (haloOptions && haloOptions.size) {\n                    if (!halo) {\n                        series.halo = halo = chart.renderer.path()\n                            // #5818, #5903\n                            .add(hasMarkers ? series.markerGroup : series.group);\n                    }\n                    halo[move ? 'animate' : 'attr']({\n                        d: point.haloPath(haloOptions.size)\n                    });\n                    halo.attr({\n                        'class': 'highcharts-halo highcharts-color-' +\n                            pick(point.colorIndex, series.colorIndex)\n                    });\n                    halo.point = point; // #6055\n\n\n                    halo.attr(extend({\n                        'fill': point.color || series.color,\n                        'fill-opacity': haloOptions.opacity,\n                        'zIndex': -1 // #4929, IE8 added halo above everything\n                    }, haloOptions.attributes));\n\n\n                } else if (halo && halo.point && halo.point.haloPath) {\n                    // Animate back to 0 on the current halo point (#6055)\n                    halo.animate({\n                        d: halo.point.haloPath(0)\n                    });\n                }\n\n                point.state = state;\n            },\n\n            /**\n             * Get the circular path definition for the halo\n             * @param  {Number} size The radius of the circular halo.\n             * @returns {Array} The path definition\n             */\n            haloPath: function(size) {\n                var series = this.series,\n                    chart = series.chart;\n\n                return chart.renderer.symbols.circle(\n                    Math.floor(this.plotX) - size,\n                    this.plotY - size,\n                    size * 2,\n                    size * 2\n                );\n            }\n        });\n\n        /*\n         * Extend the Series object with interaction\n         */\n\n        extend(Series.prototype, /** @lends Series.prototype */ {\n            /**\n             * Series mouse over handler\n             */\n            onMouseOver: function() {\n                var series = this,\n                    chart = series.chart,\n                    hoverSeries = chart.hoverSeries;\n\n                // set normal state to previous series\n                if (hoverSeries && hoverSeries !== series) {\n                    hoverSeries.onMouseOut();\n                }\n\n                // trigger the event, but to save processing time,\n                // only if defined\n                if (series.options.events.mouseOver) {\n                    fireEvent(series, 'mouseOver');\n                }\n\n                // hover this\n                series.setState('hover');\n                chart.hoverSeries = series;\n            },\n\n            /**\n             * Series mouse out handler\n             */\n            onMouseOut: function() {\n                // trigger the event only if listeners exist\n                var series = this,\n                    options = series.options,\n                    chart = series.chart,\n                    tooltip = chart.tooltip,\n                    hoverPoint = chart.hoverPoint;\n\n                chart.hoverSeries = null; // #182, set to null before the mouseOut event fires\n\n                // trigger mouse out on the point, which must be in this series\n                if (hoverPoint) {\n                    hoverPoint.onMouseOut();\n                }\n\n                // fire the mouse out event\n                if (series && options.events.mouseOut) {\n                    fireEvent(series, 'mouseOut');\n                }\n\n\n                // hide the tooltip\n                if (tooltip && !series.stickyTracking && (!tooltip.shared || series.noSharedTooltip)) {\n                    tooltip.hide();\n                }\n\n                // set normal state\n                series.setState();\n            },\n\n            /**\n             * Set the state of the graph\n             */\n            setState: function(state) {\n                var series = this,\n                    options = series.options,\n                    graph = series.graph,\n                    stateOptions = options.states,\n                    lineWidth = options.lineWidth,\n                    attribs,\n                    i = 0;\n\n                state = state || '';\n\n                if (series.state !== state) {\n\n                    // Toggle class names\n                    each([\n                        series.group,\n                        series.markerGroup,\n                        series.dataLabelsGroup\n                    ], function(group) {\n                        if (group) {\n                            // Old state\n                            if (series.state) {\n                                group.removeClass('highcharts-series-' + series.state);\n                            }\n                            // New state\n                            if (state) {\n                                group.addClass('highcharts-series-' + state);\n                            }\n                        }\n                    });\n\n                    series.state = state;\n\n\n\n                    if (stateOptions[state] && stateOptions[state].enabled === false) {\n                        return;\n                    }\n\n                    if (state) {\n                        lineWidth = stateOptions[state].lineWidth || lineWidth + (stateOptions[state].lineWidthPlus || 0); // #4035\n                    }\n\n                    if (graph && !graph.dashstyle) { // hover is turned off for dashed lines in VML\n                        attribs = {\n                            'stroke-width': lineWidth\n                        };\n\n                        // Animate the graph stroke-width. By default a quick animation\n                        // to hover, slower to un-hover.\n                        graph.animate(\n                            attribs,\n                            pick(\n                                series.chart.options.chart.animation,\n                                stateOptions[state] && stateOptions[state].animation\n                            )\n                        );\n                        while (series['zone-graph-' + i]) {\n                            series['zone-graph-' + i].attr(attribs);\n                            i = i + 1;\n                        }\n                    }\n\n                }\n            },\n\n            /**\n             * Set the visibility of the graph\n             *\n             * @param vis {Boolean} True to show the series, false to hide. If undefined,\n             *\t\t\t\tthe visibility is toggled.\n             */\n            setVisible: function(vis, redraw) {\n                var series = this,\n                    chart = series.chart,\n                    legendItem = series.legendItem,\n                    showOrHide,\n                    ignoreHiddenSeries = chart.options.chart.ignoreHiddenSeries,\n                    oldVisibility = series.visible;\n\n                // if called without an argument, toggle visibility\n                series.visible = vis = series.options.visible = series.userOptions.visible = vis === undefined ? !oldVisibility : vis; // #5618\n                showOrHide = vis ? 'show' : 'hide';\n\n                // show or hide elements\n                each(['group', 'dataLabelsGroup', 'markerGroup', 'tracker', 'tt'], function(key) {\n                    if (series[key]) {\n                        series[key][showOrHide]();\n                    }\n                });\n\n\n                // hide tooltip (#1361)\n                if (chart.hoverSeries === series || (chart.hoverPoint && chart.hoverPoint.series) === series) {\n                    series.onMouseOut();\n                }\n\n\n                if (legendItem) {\n                    chart.legend.colorizeItem(series, vis);\n                }\n\n\n                // rescale or adapt to resized chart\n                series.isDirty = true;\n                // in a stack, all other series are affected\n                if (series.options.stacking) {\n                    each(chart.series, function(otherSeries) {\n                        if (otherSeries.options.stacking && otherSeries.visible) {\n                            otherSeries.isDirty = true;\n                        }\n                    });\n                }\n\n                // show or hide linked series\n                each(series.linkedSeries, function(otherSeries) {\n                    otherSeries.setVisible(vis, false);\n                });\n\n                if (ignoreHiddenSeries) {\n                    chart.isDirtyBox = true;\n                }\n                if (redraw !== false) {\n                    chart.redraw();\n                }\n\n                fireEvent(series, showOrHide);\n            },\n\n            /**\n             * Show the graph\n             */\n            show: function() {\n                this.setVisible(true);\n            },\n\n            /**\n             * Hide the graph\n             */\n            hide: function() {\n                this.setVisible(false);\n            },\n\n\n            /**\n             * Set the selected state of the graph\n             *\n             * @param selected {Boolean} True to select the series, false to unselect. If\n             *\t\t\t\tundefined, the selection state is toggled.\n             */\n            select: function(selected) {\n                var series = this;\n                // if called without an argument, toggle\n                series.selected = selected = (selected === undefined) ? !series.selected : selected;\n\n                if (series.checkbox) {\n                    series.checkbox.checked = selected;\n                }\n\n                fireEvent(series, selected ? 'select' : 'unselect');\n            },\n\n            drawTracker: TrackerMixin.drawTrackerGraph\n        });\n\n    }(Highcharts));\n    (function(H) {\n        /**\n         * (c) 2010-2017 Torstein Honsi\n         *\n         * License: www.highcharts.com/license\n         */\n        var Chart = H.Chart,\n            each = H.each,\n            inArray = H.inArray,\n            isArray = H.isArray,\n            isObject = H.isObject,\n            pick = H.pick,\n            splat = H.splat;\n\n        /**\n         * Update the chart based on the current chart/document size and options for\n         * responsiveness.\n         */\n        Chart.prototype.setResponsive = function(redraw) {\n            var options = this.options.responsive,\n                ruleIds = [],\n                currentResponsive = this.currentResponsive,\n                currentRuleIds;\n\n            if (options && options.rules) {\n                each(options.rules, function(rule) {\n                    if (rule._id === undefined) {\n                        rule._id = H.uniqueKey();\n                    }\n\n                    this.matchResponsiveRule(rule, ruleIds, redraw);\n                }, this);\n            }\n\n            // Merge matching rules\n            var mergedOptions = H.merge.apply(0, H.map(ruleIds, function(ruleId) {\n                return H.find(options.rules, function(rule) {\n                    return rule._id === ruleId;\n                }).chartOptions;\n            }));\n\n            // Stringified key for the rules that currently apply.\n            ruleIds = ruleIds.toString() || undefined;\n            currentRuleIds = currentResponsive && currentResponsive.ruleIds;\n\n\n            // Changes in what rules apply\n            if (ruleIds !== currentRuleIds) {\n\n                // Undo previous rules. Before we apply a new set of rules, we need to\n                // roll back completely to base options (#6291).\n                if (currentResponsive) {\n                    this.update(currentResponsive.undoOptions, redraw);\n                }\n\n                if (ruleIds) {\n                    // Get undo-options for matching rules\n                    this.currentResponsive = {\n                        ruleIds: ruleIds,\n                        mergedOptions: mergedOptions,\n                        undoOptions: this.currentOptions(mergedOptions)\n                    };\n\n                    this.update(mergedOptions, redraw);\n\n                } else {\n                    this.currentResponsive = undefined;\n                }\n            }\n        };\n\n        /**\n         * Handle a single responsiveness rule\n         */\n        Chart.prototype.matchResponsiveRule = function(rule, matches) {\n            var condition = rule.condition,\n                fn = condition.callback || function() {\n                    return this.chartWidth <= pick(condition.maxWidth, Number.MAX_VALUE) &&\n                        this.chartHeight <= pick(condition.maxHeight, Number.MAX_VALUE) &&\n                        this.chartWidth >= pick(condition.minWidth, 0) &&\n                        this.chartHeight >= pick(condition.minHeight, 0);\n                };\n\n            if (fn.call(this)) {\n                matches.push(rule._id);\n            }\n\n        };\n\n        /**\n         * Get the current values for a given set of options. Used before we update\n         * the chart with a new responsiveness rule.\n         * TODO: Restore axis options (by id?)\n         */\n        Chart.prototype.currentOptions = function(options) {\n\n            var ret = {};\n\n            /**\n             * Recurse over a set of options and its current values,\n             * and store the current values in the ret object.\n             */\n            function getCurrent(options, curr, ret, depth) {\n                var key, i;\n                for (key in options) {\n                    if (!depth && inArray(key, ['series', 'xAxis', 'yAxis']) > -1) {\n                        options[key] = splat(options[key]);\n\n                        ret[key] = [];\n\n                        // Iterate over collections like series, xAxis or yAxis and map\n                        // the items by index.\n                        for (i = 0; i < options[key].length; i++) {\n                            if (curr[key][i]) { // Item exists in current data (#6347)\n                                ret[key][i] = {};\n                                getCurrent(\n                                    options[key][i],\n                                    curr[key][i],\n                                    ret[key][i],\n                                    depth + 1\n                                );\n                            }\n                        }\n                    } else if (isObject(options[key])) {\n                        ret[key] = isArray(options[key]) ? [] : {};\n                        getCurrent(\n                            options[key],\n                            curr[key] || {},\n                            ret[key],\n                            depth + 1\n                        );\n                    } else {\n                        ret[key] = curr[key] || null;\n                    }\n                }\n            }\n\n            getCurrent(options, this.options, ret, 0);\n            return ret;\n        };\n\n    }(Highcharts));\n    return Highcharts\n}));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./atlas_bundles/baseline-expression/~/highcharts/highcharts.js\n// module id = 2619\n// module chunks = 2","/*\n Highcharts JS v5.0.10 (2017-03-31)\n\n (c) 2009-2017 Torstein Honsi\n\n License: www.highcharts.com/license\n*/\n(function(n){\"object\"===typeof module&&module.exports?module.exports=n:n(Highcharts)})(function(n){(function(c){var k=c.Axis,r=c.Chart,m=c.color,l,e=c.each,v=c.extend,w=c.isNumber,p=c.Legend,f=c.LegendSymbolMixin,x=c.noop,q=c.merge,u=c.pick,t=c.wrap;l=c.ColorAxis=function(){this.init.apply(this,arguments)};v(l.prototype,k.prototype);v(l.prototype,{defaultColorAxisOptions:{lineWidth:0,minPadding:0,maxPadding:0,gridLineWidth:1,tickPixelInterval:72,startOnTick:!0,endOnTick:!0,offset:0,marker:{animation:{duration:50},\nwidth:.01,color:\"#999999\"},labels:{overflow:\"justify\",rotation:0},minColor:\"#e6ebf5\",maxColor:\"#003399\",tickLength:5,showInLegend:!0},keepProps:[\"legendGroup\",\"legendItemHeight\",\"legendItemWidth\",\"legendItem\",\"legendSymbol\"].concat(k.prototype.keepProps),init:function(a,b){var d=\"vertical\"!==a.options.legend.layout,g;this.coll=\"colorAxis\";g=q(this.defaultColorAxisOptions,{side:d?2:1,reversed:!d},b,{opposite:!d,showEmpty:!1,title:null});k.prototype.init.call(this,a,g);b.dataClasses&&this.initDataClasses(b);\nthis.initStops(b);this.horiz=d;this.zoomEnabled=!1;this.defaultLegendLength=200},tweenColors:function(a,b,d){var g;b.rgba.length&&a.rgba.length?(a=a.rgba,b=b.rgba,g=1!==b[3]||1!==a[3],a=(g?\"rgba(\":\"rgb(\")+Math.round(b[0]+(a[0]-b[0])*(1-d))+\",\"+Math.round(b[1]+(a[1]-b[1])*(1-d))+\",\"+Math.round(b[2]+(a[2]-b[2])*(1-d))+(g?\",\"+(b[3]+(a[3]-b[3])*(1-d)):\"\")+\")\"):a=b.input||\"none\";return a},initDataClasses:function(a){var b=this,d=this.chart,g,h=0,c=d.options.chart.colorCount,y=this.options,f=a.dataClasses.length;\nthis.dataClasses=g=[];this.legendItems=[];e(a.dataClasses,function(a,e){a=q(a);g.push(a);a.color||(\"category\"===y.dataClassColor?(e=d.options.colors,c=e.length,a.color=e[h],a.colorIndex=h,h++,h===c&&(h=0)):a.color=b.tweenColors(m(y.minColor),m(y.maxColor),2>f?.5:e/(f-1)))})},initStops:function(a){this.stops=a.stops||[[0,this.options.minColor],[1,this.options.maxColor]];e(this.stops,function(a){a.color=m(a[1])})},setOptions:function(a){k.prototype.setOptions.call(this,a);this.options.crosshair=this.options.marker},\nsetAxisSize:function(){var a=this.legendSymbol,b=this.chart,d=b.options.legend||{},g,h;a?(this.left=d=a.attr(\"x\"),this.top=g=a.attr(\"y\"),this.width=h=a.attr(\"width\"),this.height=a=a.attr(\"height\"),this.right=b.chartWidth-d-h,this.bottom=b.chartHeight-g-a,this.len=this.horiz?h:a,this.pos=this.horiz?d:g):this.len=(this.horiz?d.symbolWidth:d.symbolHeight)||this.defaultLegendLength},toColor:function(a,b){var d=this.stops,g,h,c=this.dataClasses,e,f;if(c)for(f=c.length;f--;){if(e=c[f],g=e.from,d=e.to,(void 0===\ng||a>=g)&&(void 0===d||a<=d)){h=e.color;b&&(b.dataClass=f,b.colorIndex=e.colorIndex);break}}else{this.isLog&&(a=this.val2lin(a));a=1-(this.max-a)/(this.max-this.min||1);for(f=d.length;f--&&!(a>d[f][0]););g=d[f]||d[f+1];d=d[f+1]||g;a=1-(d[0]-a)/(d[0]-g[0]||1);h=this.tweenColors(g.color,d.color,a)}return h},getOffset:function(){var a=this.legendGroup,b=this.chart.axisOffset[this.side];a&&(this.axisParent=a,k.prototype.getOffset.call(this),this.added||(this.added=!0,this.labelLeft=0,this.labelRight=\nthis.width),this.chart.axisOffset[this.side]=b)},setLegendColor:function(){var a,b=this.options,d=this.reversed;a=d?1:0;d=d?0:1;a=this.horiz?[a,0,d,0]:[0,d,0,a];this.legendColor={linearGradient:{x1:a[0],y1:a[1],x2:a[2],y2:a[3]},stops:b.stops||[[0,b.minColor],[1,b.maxColor]]}},drawLegendSymbol:function(a,b){var d=a.padding,g=a.options,h=this.horiz,c=u(g.symbolWidth,h?this.defaultLegendLength:12),f=u(g.symbolHeight,h?12:this.defaultLegendLength),e=u(g.labelPadding,h?16:30),g=u(g.itemDistance,10);this.setLegendColor();\nb.legendSymbol=this.chart.renderer.rect(0,a.baseline-11,c,f).attr({zIndex:1}).add(b.legendGroup);this.legendItemWidth=c+d+(h?g:e);this.legendItemHeight=f+d+(h?e:0)},setState:x,visible:!0,setVisible:x,getSeriesExtremes:function(){var a=this.series,b=a.length;this.dataMin=Infinity;for(this.dataMax=-Infinity;b--;)void 0!==a[b].valueMin&&(this.dataMin=Math.min(this.dataMin,a[b].valueMin),this.dataMax=Math.max(this.dataMax,a[b].valueMax))},drawCrosshair:function(a,b){var d=b&&b.plotX,c=b&&b.plotY,h,f=\nthis.pos,e=this.len;b&&(h=this.toPixels(b[b.series.colorKey]),h<f?h=f-2:h>f+e&&(h=f+e+2),b.plotX=h,b.plotY=this.len-h,k.prototype.drawCrosshair.call(this,a,b),b.plotX=d,b.plotY=c,this.cross&&(this.cross.addClass(\"highcharts-coloraxis-marker\").add(this.legendGroup),this.cross.attr({fill:this.crosshair.color})))},getPlotLinePath:function(a,b,d,c,h){return w(h)?this.horiz?[\"M\",h-4,this.top-6,\"L\",h+4,this.top-6,h,this.top,\"Z\"]:[\"M\",this.left,h,\"L\",this.left-6,h+6,this.left-6,h-6,\"Z\"]:k.prototype.getPlotLinePath.call(this,\na,b,d,c)},update:function(a,b){var d=this.chart,c=d.legend;e(this.series,function(a){a.isDirtyData=!0});a.dataClasses&&c.allItems&&(e(c.allItems,function(a){a.isDataClass&&a.legendGroup.destroy()}),d.isDirtyLegend=!0);d.options[this.coll]=q(this.userOptions,a);k.prototype.update.call(this,a,b);this.legendItem&&(this.setLegendColor(),c.colorizeItem(this,!0))},getDataClassLegendSymbols:function(){var a=this,b=this.chart,d=this.legendItems,g=b.options.legend,h=g.valueDecimals,t=g.valueSuffix||\"\",k;d.length||\ne(this.dataClasses,function(g,p){var l=!0,q=g.from,m=g.to;k=\"\";void 0===q?k=\"\\x3c \":void 0===m&&(k=\"\\x3e \");void 0!==q&&(k+=c.numberFormat(q,h)+t);void 0!==q&&void 0!==m&&(k+=\" - \");void 0!==m&&(k+=c.numberFormat(m,h)+t);d.push(v({chart:b,name:k,options:{},drawLegendSymbol:f.drawRectangle,visible:!0,setState:x,isDataClass:!0,setVisible:function(){l=this.visible=!l;e(a.series,function(a){e(a.points,function(a){a.dataClass===p&&a.setVisible(l)})});b.legend.colorizeItem(this,l)}},g))});return d},name:\"\"});\ne([\"fill\",\"stroke\"],function(a){c.Fx.prototype[a+\"Setter\"]=function(){this.elem.attr(a,l.prototype.tweenColors(m(this.start),m(this.end),this.pos),null,!0)}});t(r.prototype,\"getAxes\",function(a){var b=this.options.colorAxis;a.call(this);this.colorAxis=[];b&&new l(this,b)});t(p.prototype,\"getAllItems\",function(a){var b=[],d=this.chart.colorAxis[0];d&&d.options&&(d.options.showInLegend&&(d.options.dataClasses?b=b.concat(d.getDataClassLegendSymbols()):b.push(d)),e(d.series,function(a){a.options.showInLegend=\n!1}));return b.concat(a.call(this))});t(p.prototype,\"colorizeItem\",function(a,b,d){a.call(this,b,d);d&&b.legendColor&&b.legendSymbol.attr({fill:b.legendColor})})})(n);(function(c){var k=c.defined,r=c.each,m=c.noop,l=c.seriesTypes;c.colorPointMixin={isValid:function(){return null!==this.value},setVisible:function(c){var e=this,k=c?\"show\":\"hide\";r([\"graphic\",\"dataLabel\"],function(c){if(e[c])e[c][k]()})},setState:function(e){c.Point.prototype.setState.call(this,e);this.graphic&&this.graphic.attr({zIndex:\"hover\"===\ne?1:0})}};c.colorSeriesMixin={pointArrayMap:[\"value\"],axisTypes:[\"xAxis\",\"yAxis\",\"colorAxis\"],optionalAxis:\"colorAxis\",trackerGroups:[\"group\",\"markerGroup\",\"dataLabelsGroup\"],getSymbol:m,parallelArrays:[\"x\",\"y\",\"value\"],colorKey:\"value\",pointAttribs:l.column.prototype.pointAttribs,translateColors:function(){var c=this,k=this.options.nullColor,l=this.colorAxis,m=this.colorKey;r(this.data,function(f){var e=f[m];if(e=f.options.color||(f.isNull?k:l&&void 0!==e?l.toColor(e,f):f.color||c.color))f.color=\ne})},colorAttribs:function(c){var e={};k(c.color)&&(e[this.colorProp||\"fill\"]=c.color);return e}}})(n);(function(c){var k=c.colorPointMixin,r=c.each,m=c.merge,l=c.noop,e=c.pick,n=c.Series,w=c.seriesType,p=c.seriesTypes;w(\"heatmap\",\"scatter\",{animation:!1,borderWidth:0,nullColor:\"#f7f7f7\",dataLabels:{formatter:function(){return this.point.value},inside:!0,verticalAlign:\"middle\",crop:!1,overflow:!1,padding:0},marker:null,pointRange:null,tooltip:{pointFormat:\"{point.x}, {point.y}: {point.value}\\x3cbr/\\x3e\"},\nstates:{normal:{animation:!0},hover:{halo:!1,brightness:.2}}},m(c.colorSeriesMixin,{pointArrayMap:[\"y\",\"value\"],hasPointSpecificOptions:!0,supportsDrilldown:!0,getExtremesFromAll:!0,directTouch:!0,init:function(){var c;p.scatter.prototype.init.apply(this,arguments);c=this.options;c.pointRange=e(c.pointRange,c.colsize||1);this.yAxis.axisPointRange=c.rowsize||1},translate:function(){var c=this.options,e=this.xAxis,k=this.yAxis,l=function(c,a,b){return Math.min(Math.max(a,c),b)};this.generatePoints();\nr(this.points,function(f){var a=(c.colsize||1)/2,b=(c.rowsize||1)/2,d=l(Math.round(e.len-e.translate(f.x-a,0,1,0,1)),-e.len,2*e.len),a=l(Math.round(e.len-e.translate(f.x+a,0,1,0,1)),-e.len,2*e.len),g=l(Math.round(k.translate(f.y-b,0,1,0,1)),-k.len,2*k.len),b=l(Math.round(k.translate(f.y+b,0,1,0,1)),-k.len,2*k.len);f.plotX=f.clientX=(d+a)/2;f.plotY=(g+b)/2;f.shapeType=\"rect\";f.shapeArgs={x:Math.min(d,a),y:Math.min(g,b),width:Math.abs(a-d),height:Math.abs(b-g)}});this.translateColors()},drawPoints:function(){p.column.prototype.drawPoints.call(this);\nr(this.points,function(c){c.graphic.attr(this.colorAttribs(c))},this)},animate:l,getBox:l,drawLegendSymbol:c.LegendSymbolMixin.drawRectangle,alignDataLabel:p.column.prototype.alignDataLabel,getExtremes:function(){n.prototype.getExtremes.call(this,this.valueData);this.valueMin=this.dataMin;this.valueMax=this.dataMax;n.prototype.getExtremes.call(this)}}),k)})(n)});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./atlas_bundles/baseline-expression/~/highcharts/modules/heatmap.js\n// module id = 2620\n// module chunks = 2","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../css-loader/index.js!../../../../../../../node_modules/less-loader/index.js!./Tooltips.less\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!../../../../style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../../../css-loader/index.js!../../../../../../../node_modules/less-loader/index.js!./Tooltips.less\", function() {\n\t\t\tvar newContent = require(\"!!../../../../css-loader/index.js!../../../../../../../node_modules/less-loader/index.js!./Tooltips.less\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./atlas_bundles/baseline-expression/~/expression-atlas-heatmap-highcharts/src/manipulate/tooltips/Tooltips.less\n// module id = 2627\n// module chunks = 2","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../css-loader/index.js!../../../../../../../node_modules/less-loader/index.js!./DataSeriesHeatmapLegend.less\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!../../../../style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../../../css-loader/index.js!../../../../../../../node_modules/less-loader/index.js!./DataSeriesHeatmapLegend.less\", function() {\n\t\t\tvar newContent = require(\"!!../../../../css-loader/index.js!../../../../../../../node_modules/less-loader/index.js!./DataSeriesHeatmapLegend.less\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./atlas_bundles/baseline-expression/~/expression-atlas-heatmap-highcharts/src/manipulate/heatmap-legend/DataSeriesHeatmapLegend.less\n// module id = 2637\n// module chunks = 2","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../css-loader/index.js!../../../../../../../node_modules/less-loader/index.js!./GradientHeatmapLegend.less\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!../../../../style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../../../css-loader/index.js!../../../../../../../node_modules/less-loader/index.js!./GradientHeatmapLegend.less\", function() {\n\t\t\tvar newContent = require(\"!!../../../../css-loader/index.js!../../../../../../../node_modules/less-loader/index.js!./GradientHeatmapLegend.less\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./atlas_bundles/baseline-expression/~/expression-atlas-heatmap-highcharts/src/manipulate/heatmap-legend/GradientHeatmapLegend.less\n// module id = 2641\n// module chunks = 2","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');\n\nvar _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _rcTrigger = require('rc-trigger');\n\nvar _rcTrigger2 = _interopRequireDefault(_rcTrigger);\n\nvar _placements = require('./placements');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar Tooltip = function (_Component) {\n  (0, _inherits3[\"default\"])(Tooltip, _Component);\n\n  function Tooltip() {\n    var _temp, _this, _ret;\n\n    (0, _classCallCheck3[\"default\"])(this, Tooltip);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3[\"default\"])(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.getPopupElement = function () {\n      var _this$props = _this.props,\n          arrowContent = _this$props.arrowContent,\n          overlay = _this$props.overlay,\n          prefixCls = _this$props.prefixCls;\n\n      return [_react2[\"default\"].createElement(\n        'div',\n        { className: prefixCls + '-arrow', key: 'arrow' },\n        arrowContent\n      ), _react2[\"default\"].createElement(\n        'div',\n        { className: prefixCls + '-inner', key: 'content' },\n        typeof overlay === 'function' ? overlay() : overlay\n      )];\n    }, _temp), (0, _possibleConstructorReturn3[\"default\"])(_this, _ret);\n  }\n\n  Tooltip.prototype.getPopupDomNode = function getPopupDomNode() {\n    return this.refs.trigger.getPopupDomNode();\n  };\n\n  Tooltip.prototype.render = function render() {\n    var _props = this.props,\n        overlayClassName = _props.overlayClassName,\n        trigger = _props.trigger,\n        mouseEnterDelay = _props.mouseEnterDelay,\n        mouseLeaveDelay = _props.mouseLeaveDelay,\n        overlayStyle = _props.overlayStyle,\n        prefixCls = _props.prefixCls,\n        children = _props.children,\n        onVisibleChange = _props.onVisibleChange,\n        transitionName = _props.transitionName,\n        animation = _props.animation,\n        placement = _props.placement,\n        align = _props.align,\n        destroyTooltipOnHide = _props.destroyTooltipOnHide,\n        defaultVisible = _props.defaultVisible,\n        getTooltipContainer = _props.getTooltipContainer,\n        restProps = (0, _objectWithoutProperties3[\"default\"])(_props, ['overlayClassName', 'trigger', 'mouseEnterDelay', 'mouseLeaveDelay', 'overlayStyle', 'prefixCls', 'children', 'onVisibleChange', 'transitionName', 'animation', 'placement', 'align', 'destroyTooltipOnHide', 'defaultVisible', 'getTooltipContainer']);\n\n    var extraProps = (0, _extends3[\"default\"])({}, restProps);\n    if ('visible' in this.props) {\n      extraProps.popupVisible = this.props.visible;\n    }\n    return _react2[\"default\"].createElement(\n      _rcTrigger2[\"default\"],\n      (0, _extends3[\"default\"])({\n        popupClassName: overlayClassName,\n        ref: 'trigger',\n        prefixCls: prefixCls,\n        popup: this.getPopupElement,\n        action: trigger,\n        builtinPlacements: _placements.placements,\n        popupPlacement: placement,\n        popupAlign: align,\n        getPopupContainer: getTooltipContainer,\n        onPopupVisibleChange: onVisibleChange,\n        popupTransitionName: transitionName,\n        popupAnimation: animation,\n        defaultPopupVisible: defaultVisible,\n        destroyPopupOnHide: destroyTooltipOnHide,\n        mouseLeaveDelay: mouseLeaveDelay,\n        popupStyle: overlayStyle,\n        mouseEnterDelay: mouseEnterDelay\n      }, extraProps),\n      children\n    );\n  };\n\n  return Tooltip;\n}(_react.Component);\n\nTooltip.propTypes = {\n  trigger: _propTypes2[\"default\"].any,\n  children: _propTypes2[\"default\"].any,\n  defaultVisible: _propTypes2[\"default\"].bool,\n  visible: _propTypes2[\"default\"].bool,\n  placement: _propTypes2[\"default\"].string,\n  transitionName: _propTypes2[\"default\"].string,\n  animation: _propTypes2[\"default\"].any,\n  onVisibleChange: _propTypes2[\"default\"].func,\n  afterVisibleChange: _propTypes2[\"default\"].func,\n  overlay: _propTypes2[\"default\"].oneOfType([_propTypes2[\"default\"].node, _propTypes2[\"default\"].func]).isRequired,\n  overlayStyle: _propTypes2[\"default\"].object,\n  overlayClassName: _propTypes2[\"default\"].string,\n  prefixCls: _propTypes2[\"default\"].string,\n  mouseEnterDelay: _propTypes2[\"default\"].number,\n  mouseLeaveDelay: _propTypes2[\"default\"].number,\n  getTooltipContainer: _propTypes2[\"default\"].func,\n  destroyTooltipOnHide: _propTypes2[\"default\"].bool,\n  align: _propTypes2[\"default\"].object,\n  arrowContent: _propTypes2[\"default\"].any\n};\nTooltip.defaultProps = {\n  prefixCls: 'rc-tooltip',\n  mouseEnterDelay: 0,\n  destroyTooltipOnHide: false,\n  mouseLeaveDelay: 0.1,\n  align: {},\n  placement: 'right',\n  trigger: ['hover'],\n  arrowContent: null\n};\nexports[\"default\"] = Tooltip;\nmodule.exports = exports['default'];\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./atlas_bundles/baseline-expression/~/rc-tooltip/lib/Tooltip.js\n// module id = 2659\n// module chunks = 2","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var REACT_ELEMENT_TYPE = (typeof Symbol === 'function' &&\n    Symbol.for &&\n    Symbol.for('react.element')) ||\n    0xeac7;\n\n  var isValidElement = function(object) {\n    return typeof object === 'object' &&\n      object !== null &&\n      object.$$typeof === REACT_ELEMENT_TYPE;\n  };\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(isValidElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./atlas_bundles/baseline-expression/~/prop-types/index.js\n// module id = 2660\n// module chunks = 2","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n'use strict';\n\nvar emptyFunction = require('fbjs/lib/emptyFunction');\nvar invariant = require('fbjs/lib/invariant');\nvar warning = require('fbjs/lib/warning');\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\nvar checkPropTypes = require('./checkPropTypes');\n\nmodule.exports = function(isValidElement, throwOnDirectAccess) {\n  /* global Symbol */\n  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\n  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.\n\n  /**\n   * Returns the iterator method function contained on the iterable object.\n   *\n   * Be sure to invoke the function with the iterable as context:\n   *\n   *     var iteratorFn = getIteratorFn(myIterable);\n   *     if (iteratorFn) {\n   *       var iterator = iteratorFn.call(myIterable);\n   *       ...\n   *     }\n   *\n   * @param {?object} maybeIterable\n   * @return {?function}\n   */\n  function getIteratorFn(maybeIterable) {\n    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);\n    if (typeof iteratorFn === 'function') {\n      return iteratorFn;\n    }\n  }\n\n  /**\n   * Collection of methods that allow declaration and validation of props that are\n   * supplied to React components. Example usage:\n   *\n   *   var Props = require('ReactPropTypes');\n   *   var MyArticle = React.createClass({\n   *     propTypes: {\n   *       // An optional string prop named \"description\".\n   *       description: Props.string,\n   *\n   *       // A required enum prop named \"category\".\n   *       category: Props.oneOf(['News','Photos']).isRequired,\n   *\n   *       // A prop named \"dialog\" that requires an instance of Dialog.\n   *       dialog: Props.instanceOf(Dialog).isRequired\n   *     },\n   *     render: function() { ... }\n   *   });\n   *\n   * A more formal specification of how these methods are used:\n   *\n   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)\n   *   decl := ReactPropTypes.{type}(.isRequired)?\n   *\n   * Each and every declaration produces a function with the same signature. This\n   * allows the creation of custom validation functions. For example:\n   *\n   *  var MyLink = React.createClass({\n   *    propTypes: {\n   *      // An optional string or URI prop named \"href\".\n   *      href: function(props, propName, componentName) {\n   *        var propValue = props[propName];\n   *        if (propValue != null && typeof propValue !== 'string' &&\n   *            !(propValue instanceof URI)) {\n   *          return new Error(\n   *            'Expected a string or an URI for ' + propName + ' in ' +\n   *            componentName\n   *          );\n   *        }\n   *      }\n   *    },\n   *    render: function() {...}\n   *  });\n   *\n   * @internal\n   */\n\n  var ANONYMOUS = '<<anonymous>>';\n\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.\n  var ReactPropTypes = {\n    array: createPrimitiveTypeChecker('array'),\n    bool: createPrimitiveTypeChecker('boolean'),\n    func: createPrimitiveTypeChecker('function'),\n    number: createPrimitiveTypeChecker('number'),\n    object: createPrimitiveTypeChecker('object'),\n    string: createPrimitiveTypeChecker('string'),\n    symbol: createPrimitiveTypeChecker('symbol'),\n\n    any: createAnyTypeChecker(),\n    arrayOf: createArrayOfTypeChecker,\n    element: createElementTypeChecker(),\n    instanceOf: createInstanceTypeChecker,\n    node: createNodeChecker(),\n    objectOf: createObjectOfTypeChecker,\n    oneOf: createEnumTypeChecker,\n    oneOfType: createUnionTypeChecker,\n    shape: createShapeTypeChecker\n  };\n\n  /**\n   * inlined Object.is polyfill to avoid requiring consumers ship their own\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n   */\n  /*eslint-disable no-self-compare*/\n  function is(x, y) {\n    // SameValue algorithm\n    if (x === y) {\n      // Steps 1-5, 7-10\n      // Steps 6.b-6.e: +0 != -0\n      return x !== 0 || 1 / x === 1 / y;\n    } else {\n      // Step 6.a: NaN == NaN\n      return x !== x && y !== y;\n    }\n  }\n  /*eslint-enable no-self-compare*/\n\n  /**\n   * We use an Error-like object for backward compatibility as people may call\n   * PropTypes directly and inspect their output. However, we don't use real\n   * Errors anymore. We don't inspect their stack anyway, and creating them\n   * is prohibitively expensive if they are created too often, such as what\n   * happens in oneOfType() for any type before the one that matched.\n   */\n  function PropTypeError(message) {\n    this.message = message;\n    this.stack = '';\n  }\n  // Make `instanceof Error` still work for returned errors.\n  PropTypeError.prototype = Error.prototype;\n\n  function createChainableTypeChecker(validate) {\n    if (process.env.NODE_ENV !== 'production') {\n      var manualPropTypeCallCache = {};\n      var manualPropTypeWarningCount = 0;\n    }\n    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {\n      componentName = componentName || ANONYMOUS;\n      propFullName = propFullName || propName;\n\n      if (secret !== ReactPropTypesSecret) {\n        if (throwOnDirectAccess) {\n          // New behavior only for users of `prop-types` package\n          invariant(\n            false,\n            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n            'Use `PropTypes.checkPropTypes()` to call them. ' +\n            'Read more at http://fb.me/use-check-prop-types'\n          );\n        } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {\n          // Old behavior for people using React.PropTypes\n          var cacheKey = componentName + ':' + propName;\n          if (\n            !manualPropTypeCallCache[cacheKey] &&\n            // Avoid spamming the console because they are often not actionable except for lib authors\n            manualPropTypeWarningCount < 3\n          ) {\n            warning(\n              false,\n              'You are manually calling a React.PropTypes validation ' +\n              'function for the `%s` prop on `%s`. This is deprecated ' +\n              'and will throw in the standalone `prop-types` package. ' +\n              'You may be seeing this warning due to a third-party PropTypes ' +\n              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.',\n              propFullName,\n              componentName\n            );\n            manualPropTypeCallCache[cacheKey] = true;\n            manualPropTypeWarningCount++;\n          }\n        }\n      }\n      if (props[propName] == null) {\n        if (isRequired) {\n          if (props[propName] === null) {\n            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));\n          }\n          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));\n        }\n        return null;\n      } else {\n        return validate(props, propName, componentName, location, propFullName);\n      }\n    }\n\n    var chainedCheckType = checkType.bind(null, false);\n    chainedCheckType.isRequired = checkType.bind(null, true);\n\n    return chainedCheckType;\n  }\n\n  function createPrimitiveTypeChecker(expectedType) {\n    function validate(props, propName, componentName, location, propFullName, secret) {\n      var propValue = props[propName];\n      var propType = getPropType(propValue);\n      if (propType !== expectedType) {\n        // `propValue` being instance of, say, date/regexp, pass the 'object'\n        // check, but we can offer a more precise error message here rather than\n        // 'of type `object`'.\n        var preciseType = getPreciseType(propValue);\n\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createAnyTypeChecker() {\n    return createChainableTypeChecker(emptyFunction.thatReturnsNull);\n  }\n\n  function createArrayOfTypeChecker(typeChecker) {\n    function validate(props, propName, componentName, location, propFullName) {\n      if (typeof typeChecker !== 'function') {\n        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');\n      }\n      var propValue = props[propName];\n      if (!Array.isArray(propValue)) {\n        var propType = getPropType(propValue);\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));\n      }\n      for (var i = 0; i < propValue.length; i++) {\n        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);\n        if (error instanceof Error) {\n          return error;\n        }\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createElementTypeChecker() {\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n      if (!isValidElement(propValue)) {\n        var propType = getPropType(propValue);\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createInstanceTypeChecker(expectedClass) {\n    function validate(props, propName, componentName, location, propFullName) {\n      if (!(props[propName] instanceof expectedClass)) {\n        var expectedClassName = expectedClass.name || ANONYMOUS;\n        var actualClassName = getClassName(props[propName]);\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createEnumTypeChecker(expectedValues) {\n    if (!Array.isArray(expectedValues)) {\n      process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;\n      return emptyFunction.thatReturnsNull;\n    }\n\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n      for (var i = 0; i < expectedValues.length; i++) {\n        if (is(propValue, expectedValues[i])) {\n          return null;\n        }\n      }\n\n      var valuesString = JSON.stringify(expectedValues);\n      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createObjectOfTypeChecker(typeChecker) {\n    function validate(props, propName, componentName, location, propFullName) {\n      if (typeof typeChecker !== 'function') {\n        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');\n      }\n      var propValue = props[propName];\n      var propType = getPropType(propValue);\n      if (propType !== 'object') {\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));\n      }\n      for (var key in propValue) {\n        if (propValue.hasOwnProperty(key)) {\n          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);\n          if (error instanceof Error) {\n            return error;\n          }\n        }\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createUnionTypeChecker(arrayOfTypeCheckers) {\n    if (!Array.isArray(arrayOfTypeCheckers)) {\n      process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;\n      return emptyFunction.thatReturnsNull;\n    }\n\n    function validate(props, propName, componentName, location, propFullName) {\n      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {\n        var checker = arrayOfTypeCheckers[i];\n        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {\n          return null;\n        }\n      }\n\n      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createNodeChecker() {\n    function validate(props, propName, componentName, location, propFullName) {\n      if (!isNode(props[propName])) {\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createShapeTypeChecker(shapeTypes) {\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n      var propType = getPropType(propValue);\n      if (propType !== 'object') {\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));\n      }\n      for (var key in shapeTypes) {\n        var checker = shapeTypes[key];\n        if (!checker) {\n          continue;\n        }\n        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);\n        if (error) {\n          return error;\n        }\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function isNode(propValue) {\n    switch (typeof propValue) {\n      case 'number':\n      case 'string':\n      case 'undefined':\n        return true;\n      case 'boolean':\n        return !propValue;\n      case 'object':\n        if (Array.isArray(propValue)) {\n          return propValue.every(isNode);\n        }\n        if (propValue === null || isValidElement(propValue)) {\n          return true;\n        }\n\n        var iteratorFn = getIteratorFn(propValue);\n        if (iteratorFn) {\n          var iterator = iteratorFn.call(propValue);\n          var step;\n          if (iteratorFn !== propValue.entries) {\n            while (!(step = iterator.next()).done) {\n              if (!isNode(step.value)) {\n                return false;\n              }\n            }\n          } else {\n            // Iterator will provide entry [k,v] tuples rather than values.\n            while (!(step = iterator.next()).done) {\n              var entry = step.value;\n              if (entry) {\n                if (!isNode(entry[1])) {\n                  return false;\n                }\n              }\n            }\n          }\n        } else {\n          return false;\n        }\n\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  function isSymbol(propType, propValue) {\n    // Native Symbol.\n    if (propType === 'symbol') {\n      return true;\n    }\n\n    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'\n    if (propValue['@@toStringTag'] === 'Symbol') {\n      return true;\n    }\n\n    // Fallback for non-spec compliant Symbols which are polyfilled.\n    if (typeof Symbol === 'function' && propValue instanceof Symbol) {\n      return true;\n    }\n\n    return false;\n  }\n\n  // Equivalent of `typeof` but with special handling for array and regexp.\n  function getPropType(propValue) {\n    var propType = typeof propValue;\n    if (Array.isArray(propValue)) {\n      return 'array';\n    }\n    if (propValue instanceof RegExp) {\n      // Old webkits (at least until Android 4.0) return 'function' rather than\n      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/\n      // passes PropTypes.object.\n      return 'object';\n    }\n    if (isSymbol(propType, propValue)) {\n      return 'symbol';\n    }\n    return propType;\n  }\n\n  // This handles more types than `getPropType`. Only used for error messages.\n  // See `createPrimitiveTypeChecker`.\n  function getPreciseType(propValue) {\n    var propType = getPropType(propValue);\n    if (propType === 'object') {\n      if (propValue instanceof Date) {\n        return 'date';\n      } else if (propValue instanceof RegExp) {\n        return 'regexp';\n      }\n    }\n    return propType;\n  }\n\n  // Returns class name of the object, if any.\n  function getClassName(propValue) {\n    if (!propValue.constructor || !propValue.constructor.name) {\n      return ANONYMOUS;\n    }\n    return propValue.constructor.name;\n  }\n\n  ReactPropTypes.checkPropTypes = checkPropTypes;\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./atlas_bundles/baseline-expression/~/prop-types/factoryWithTypeCheckers.js\n// module id = 2661\n// module chunks = 2","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./atlas_bundles/baseline-expression/~/prop-types/lib/ReactPropTypesSecret.js\n// module id = 2665\n// module chunks = 2","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n'use strict';\n\nif (process.env.NODE_ENV !== 'production') {\n  var invariant = require('fbjs/lib/invariant');\n  var warning = require('fbjs/lib/warning');\n  var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n  var loggedTypeFailures = {};\n}\n\n/**\n * Assert that the values match with the type specs.\n * Error messages are memorized and will only be shown once.\n *\n * @param {object} typeSpecs Map of name to a ReactPropType\n * @param {object} values Runtime values that need to be type-checked\n * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n * @param {string} componentName Name of the component for error messages.\n * @param {?Function} getStack Returns the component stack.\n * @private\n */\nfunction checkPropTypes(typeSpecs, values, location, componentName, getStack) {\n  if (process.env.NODE_ENV !== 'production') {\n    for (var typeSpecName in typeSpecs) {\n      if (typeSpecs.hasOwnProperty(typeSpecName)) {\n        var error;\n        // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          invariant(typeof typeSpecs[typeSpecName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', componentName || 'React class', location, typeSpecName);\n          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);\n        } catch (ex) {\n          error = ex;\n        }\n        warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error);\n        if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error.message] = true;\n\n          var stack = getStack ? getStack() : '';\n\n          warning(false, 'Failed %s type: %s%s', location, error.message, stack != null ? stack : '');\n        }\n      }\n    }\n  }\n}\n\nmodule.exports = checkPropTypes;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./atlas_bundles/baseline-expression/~/prop-types/checkPropTypes.js\n// module id = 2666\n// module chunks = 2","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactDom = require('react-dom');\n\nvar _createReactClass = require('create-react-class');\n\nvar _createReactClass2 = _interopRequireDefault(_createReactClass);\n\nvar _contains = require('rc-util/lib/Dom/contains');\n\nvar _contains2 = _interopRequireDefault(_contains);\n\nvar _addEventListener = require('rc-util/lib/Dom/addEventListener');\n\nvar _addEventListener2 = _interopRequireDefault(_addEventListener);\n\nvar _Popup = require('./Popup');\n\nvar _Popup2 = _interopRequireDefault(_Popup);\n\nvar _utils = require('./utils');\n\nvar _getContainerRenderMixin = require('rc-util/lib/getContainerRenderMixin');\n\nvar _getContainerRenderMixin2 = _interopRequireDefault(_getContainerRenderMixin);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction noop() {}\n\nfunction returnEmptyString() {\n  return '';\n}\n\nfunction returnDocument() {\n  return window.document;\n}\n\nvar ALL_HANDLERS = ['onClick', 'onMouseDown', 'onTouchStart', 'onMouseEnter', 'onMouseLeave', 'onFocus', 'onBlur'];\n\nvar Trigger = (0, _createReactClass2[\"default\"])({\n  displayName: 'Trigger',\n  propTypes: {\n    children: _propTypes2[\"default\"].any,\n    action: _propTypes2[\"default\"].oneOfType([_propTypes2[\"default\"].string, _propTypes2[\"default\"].arrayOf(_propTypes2[\"default\"].string)]),\n    showAction: _propTypes2[\"default\"].any,\n    hideAction: _propTypes2[\"default\"].any,\n    getPopupClassNameFromAlign: _propTypes2[\"default\"].any,\n    onPopupVisibleChange: _propTypes2[\"default\"].func,\n    afterPopupVisibleChange: _propTypes2[\"default\"].func,\n    popup: _propTypes2[\"default\"].oneOfType([_propTypes2[\"default\"].node, _propTypes2[\"default\"].func]).isRequired,\n    popupStyle: _propTypes2[\"default\"].object,\n    prefixCls: _propTypes2[\"default\"].string,\n    popupClassName: _propTypes2[\"default\"].string,\n    popupPlacement: _propTypes2[\"default\"].string,\n    builtinPlacements: _propTypes2[\"default\"].object,\n    popupTransitionName: _propTypes2[\"default\"].oneOfType([_propTypes2[\"default\"].string, _propTypes2[\"default\"].object]),\n    popupAnimation: _propTypes2[\"default\"].any,\n    mouseEnterDelay: _propTypes2[\"default\"].number,\n    mouseLeaveDelay: _propTypes2[\"default\"].number,\n    zIndex: _propTypes2[\"default\"].number,\n    focusDelay: _propTypes2[\"default\"].number,\n    blurDelay: _propTypes2[\"default\"].number,\n    getPopupContainer: _propTypes2[\"default\"].func,\n    getDocument: _propTypes2[\"default\"].func,\n    destroyPopupOnHide: _propTypes2[\"default\"].bool,\n    mask: _propTypes2[\"default\"].bool,\n    maskClosable: _propTypes2[\"default\"].bool,\n    onPopupAlign: _propTypes2[\"default\"].func,\n    popupAlign: _propTypes2[\"default\"].object,\n    popupVisible: _propTypes2[\"default\"].bool,\n    maskTransitionName: _propTypes2[\"default\"].oneOfType([_propTypes2[\"default\"].string, _propTypes2[\"default\"].object]),\n    maskAnimation: _propTypes2[\"default\"].string\n  },\n\n  mixins: [(0, _getContainerRenderMixin2[\"default\"])({\n    autoMount: false,\n\n    isVisible: function isVisible(instance) {\n      return instance.state.popupVisible;\n    },\n    getContainer: function getContainer(instance) {\n      var props = instance.props;\n\n      var popupContainer = document.createElement('div');\n      // Make sure default popup container will never cause scrollbar appearing\n      // https://github.com/react-component/trigger/issues/41\n      popupContainer.style.position = 'absolute';\n      popupContainer.style.top = '0';\n      popupContainer.style.left = '0';\n      popupContainer.style.width = '100%';\n      var mountNode = props.getPopupContainer ? props.getPopupContainer((0, _reactDom.findDOMNode)(instance)) : props.getDocument().body;\n      mountNode.appendChild(popupContainer);\n      return popupContainer;\n    }\n  })],\n\n  getDefaultProps: function getDefaultProps() {\n    return {\n      prefixCls: 'rc-trigger-popup',\n      getPopupClassNameFromAlign: returnEmptyString,\n      getDocument: returnDocument,\n      onPopupVisibleChange: noop,\n      afterPopupVisibleChange: noop,\n      onPopupAlign: noop,\n      popupClassName: '',\n      mouseEnterDelay: 0,\n      mouseLeaveDelay: 0.1,\n      focusDelay: 0,\n      blurDelay: 0.15,\n      popupStyle: {},\n      destroyPopupOnHide: false,\n      popupAlign: {},\n      defaultPopupVisible: false,\n      mask: false,\n      maskClosable: true,\n      action: [],\n      showAction: [],\n      hideAction: []\n    };\n  },\n  getInitialState: function getInitialState() {\n    var props = this.props;\n    var popupVisible = void 0;\n    if ('popupVisible' in props) {\n      popupVisible = !!props.popupVisible;\n    } else {\n      popupVisible = !!props.defaultPopupVisible;\n    }\n    return {\n      popupVisible: popupVisible\n    };\n  },\n  componentWillMount: function componentWillMount() {\n    var _this = this;\n\n    ALL_HANDLERS.forEach(function (h) {\n      _this['fire' + h] = function (e) {\n        _this.fireEvents(h, e);\n      };\n    });\n  },\n  componentDidMount: function componentDidMount() {\n    this.componentDidUpdate({}, {\n      popupVisible: this.state.popupVisible\n    });\n  },\n  componentWillReceiveProps: function componentWillReceiveProps(_ref) {\n    var popupVisible = _ref.popupVisible;\n\n    if (popupVisible !== undefined) {\n      this.setState({\n        popupVisible: popupVisible\n      });\n    }\n  },\n  componentDidUpdate: function componentDidUpdate(_, prevState) {\n    var props = this.props;\n    var state = this.state;\n    this.renderComponent(null, function () {\n      if (prevState.popupVisible !== state.popupVisible) {\n        props.afterPopupVisibleChange(state.popupVisible);\n      }\n    });\n\n    if (state.popupVisible) {\n      var currentDocument = void 0;\n      if (!this.clickOutsideHandler && this.isClickToHide()) {\n        currentDocument = props.getDocument();\n        this.clickOutsideHandler = (0, _addEventListener2[\"default\"])(currentDocument, 'mousedown', this.onDocumentClick);\n      }\n      // always hide on mobile\n      if (!this.touchOutsideHandler) {\n        currentDocument = currentDocument || props.getDocument();\n        this.touchOutsideHandler = (0, _addEventListener2[\"default\"])(currentDocument, 'touchstart', this.onDocumentClick);\n      }\n      return;\n    }\n\n    this.clearOutsideHandler();\n  },\n  componentWillUnmount: function componentWillUnmount() {\n    this.clearDelayTimer();\n    this.clearOutsideHandler();\n  },\n  onMouseEnter: function onMouseEnter(e) {\n    this.fireEvents('onMouseEnter', e);\n    this.delaySetPopupVisible(true, this.props.mouseEnterDelay);\n  },\n  onMouseLeave: function onMouseLeave(e) {\n    this.fireEvents('onMouseLeave', e);\n    this.delaySetPopupVisible(false, this.props.mouseLeaveDelay);\n  },\n  onPopupMouseEnter: function onPopupMouseEnter() {\n    this.clearDelayTimer();\n  },\n  onPopupMouseLeave: function onPopupMouseLeave(e) {\n    // https://github.com/react-component/trigger/pull/13\n    // react bug?\n    if (e.relatedTarget && !e.relatedTarget.setTimeout && this._component && (0, _contains2[\"default\"])(this._component.getPopupDomNode(), e.relatedTarget)) {\n      return;\n    }\n    this.delaySetPopupVisible(false, this.props.mouseLeaveDelay);\n  },\n  onFocus: function onFocus(e) {\n    this.fireEvents('onFocus', e);\n    // incase focusin and focusout\n    this.clearDelayTimer();\n    if (this.isFocusToShow()) {\n      this.focusTime = Date.now();\n      this.delaySetPopupVisible(true, this.props.focusDelay);\n    }\n  },\n  onMouseDown: function onMouseDown(e) {\n    this.fireEvents('onMouseDown', e);\n    this.preClickTime = Date.now();\n  },\n  onTouchStart: function onTouchStart(e) {\n    this.fireEvents('onTouchStart', e);\n    this.preTouchTime = Date.now();\n  },\n  onBlur: function onBlur(e) {\n    this.fireEvents('onBlur', e);\n    this.clearDelayTimer();\n    if (this.isBlurToHide()) {\n      this.delaySetPopupVisible(false, this.props.blurDelay);\n    }\n  },\n  onClick: function onClick(event) {\n    this.fireEvents('onClick', event);\n    // focus will trigger click\n    if (this.focusTime) {\n      var preTime = void 0;\n      if (this.preClickTime && this.preTouchTime) {\n        preTime = Math.min(this.preClickTime, this.preTouchTime);\n      } else if (this.preClickTime) {\n        preTime = this.preClickTime;\n      } else if (this.preTouchTime) {\n        preTime = this.preTouchTime;\n      }\n      if (Math.abs(preTime - this.focusTime) < 20) {\n        return;\n      }\n      this.focusTime = 0;\n    }\n    this.preClickTime = 0;\n    this.preTouchTime = 0;\n    event.preventDefault();\n    var nextVisible = !this.state.popupVisible;\n    if (this.isClickToHide() && !nextVisible || nextVisible && this.isClickToShow()) {\n      this.setPopupVisible(!this.state.popupVisible);\n    }\n  },\n  onDocumentClick: function onDocumentClick(event) {\n    if (this.props.mask && !this.props.maskClosable) {\n      return;\n    }\n    var target = event.target;\n    var root = (0, _reactDom.findDOMNode)(this);\n    var popupNode = this.getPopupDomNode();\n    if (!(0, _contains2[\"default\"])(root, target) && !(0, _contains2[\"default\"])(popupNode, target)) {\n      this.close();\n    }\n  },\n  getPopupDomNode: function getPopupDomNode() {\n    // for test\n    if (this._component && this._component.getPopupDomNode) {\n      return this._component.getPopupDomNode();\n    }\n    return null;\n  },\n  getRootDomNode: function getRootDomNode() {\n    return (0, _reactDom.findDOMNode)(this);\n  },\n  getPopupClassNameFromAlign: function getPopupClassNameFromAlign(align) {\n    var className = [];\n    var props = this.props;\n    var popupPlacement = props.popupPlacement,\n        builtinPlacements = props.builtinPlacements,\n        prefixCls = props.prefixCls;\n\n    if (popupPlacement && builtinPlacements) {\n      className.push((0, _utils.getPopupClassNameFromAlign)(builtinPlacements, prefixCls, align));\n    }\n    if (props.getPopupClassNameFromAlign) {\n      className.push(props.getPopupClassNameFromAlign(align));\n    }\n    return className.join(' ');\n  },\n  getPopupAlign: function getPopupAlign() {\n    var props = this.props;\n    var popupPlacement = props.popupPlacement,\n        popupAlign = props.popupAlign,\n        builtinPlacements = props.builtinPlacements;\n\n    if (popupPlacement && builtinPlacements) {\n      return (0, _utils.getAlignFromPlacement)(builtinPlacements, popupPlacement, popupAlign);\n    }\n    return popupAlign;\n  },\n  getComponent: function getComponent() {\n    var props = this.props,\n        state = this.state;\n\n    var mouseProps = {};\n    if (this.isMouseEnterToShow()) {\n      mouseProps.onMouseEnter = this.onPopupMouseEnter;\n    }\n    if (this.isMouseLeaveToHide()) {\n      mouseProps.onMouseLeave = this.onPopupMouseLeave;\n    }\n    return _react2[\"default\"].createElement(\n      _Popup2[\"default\"],\n      (0, _extends3[\"default\"])({\n        prefixCls: props.prefixCls,\n        destroyPopupOnHide: props.destroyPopupOnHide,\n        visible: state.popupVisible,\n        className: props.popupClassName,\n        action: props.action,\n        align: this.getPopupAlign(),\n        onAlign: props.onPopupAlign,\n        animation: props.popupAnimation,\n        getClassNameFromAlign: this.getPopupClassNameFromAlign\n      }, mouseProps, {\n        getRootDomNode: this.getRootDomNode,\n        style: props.popupStyle,\n        mask: props.mask,\n        zIndex: props.zIndex,\n        transitionName: props.popupTransitionName,\n        maskAnimation: props.maskAnimation,\n        maskTransitionName: props.maskTransitionName\n      }),\n      typeof props.popup === 'function' ? props.popup() : props.popup\n    );\n  },\n  setPopupVisible: function setPopupVisible(popupVisible) {\n    this.clearDelayTimer();\n    if (this.state.popupVisible !== popupVisible) {\n      if (!('popupVisible' in this.props)) {\n        this.setState({\n          popupVisible: popupVisible\n        });\n      }\n      this.props.onPopupVisibleChange(popupVisible);\n    }\n  },\n  delaySetPopupVisible: function delaySetPopupVisible(visible, delayS) {\n    var _this2 = this;\n\n    var delay = delayS * 1000;\n    this.clearDelayTimer();\n    if (delay) {\n      this.delayTimer = setTimeout(function () {\n        _this2.setPopupVisible(visible);\n        _this2.clearDelayTimer();\n      }, delay);\n    } else {\n      this.setPopupVisible(visible);\n    }\n  },\n  clearDelayTimer: function clearDelayTimer() {\n    if (this.delayTimer) {\n      clearTimeout(this.delayTimer);\n      this.delayTimer = null;\n    }\n  },\n  clearOutsideHandler: function clearOutsideHandler() {\n    if (this.clickOutsideHandler) {\n      this.clickOutsideHandler.remove();\n      this.clickOutsideHandler = null;\n    }\n\n    if (this.touchOutsideHandler) {\n      this.touchOutsideHandler.remove();\n      this.touchOutsideHandler = null;\n    }\n  },\n  createTwoChains: function createTwoChains(event) {\n    var childPros = this.props.children.props;\n    var props = this.props;\n    if (childPros[event] && props[event]) {\n      return this['fire' + event];\n    }\n    return childPros[event] || props[event];\n  },\n  isClickToShow: function isClickToShow() {\n    var _props = this.props,\n        action = _props.action,\n        showAction = _props.showAction;\n\n    return action.indexOf('click') !== -1 || showAction.indexOf('click') !== -1;\n  },\n  isClickToHide: function isClickToHide() {\n    var _props2 = this.props,\n        action = _props2.action,\n        hideAction = _props2.hideAction;\n\n    return action.indexOf('click') !== -1 || hideAction.indexOf('click') !== -1;\n  },\n  isMouseEnterToShow: function isMouseEnterToShow() {\n    var _props3 = this.props,\n        action = _props3.action,\n        showAction = _props3.showAction;\n\n    return action.indexOf('hover') !== -1 || showAction.indexOf('mouseEnter') !== -1;\n  },\n  isMouseLeaveToHide: function isMouseLeaveToHide() {\n    var _props4 = this.props,\n        action = _props4.action,\n        hideAction = _props4.hideAction;\n\n    return action.indexOf('hover') !== -1 || hideAction.indexOf('mouseLeave') !== -1;\n  },\n  isFocusToShow: function isFocusToShow() {\n    var _props5 = this.props,\n        action = _props5.action,\n        showAction = _props5.showAction;\n\n    return action.indexOf('focus') !== -1 || showAction.indexOf('focus') !== -1;\n  },\n  isBlurToHide: function isBlurToHide() {\n    var _props6 = this.props,\n        action = _props6.action,\n        hideAction = _props6.hideAction;\n\n    return action.indexOf('focus') !== -1 || hideAction.indexOf('blur') !== -1;\n  },\n  forcePopupAlign: function forcePopupAlign() {\n    if (this.state.popupVisible && this.popupInstance && this.popupInstance.alignInstance) {\n      this.popupInstance.alignInstance.forceAlign();\n    }\n  },\n  fireEvents: function fireEvents(type, e) {\n    var childCallback = this.props.children.props[type];\n    if (childCallback) {\n      childCallback(e);\n    }\n    var callback = this.props[type];\n    if (callback) {\n      callback(e);\n    }\n  },\n  close: function close() {\n    this.setPopupVisible(false);\n  },\n  render: function render() {\n    var props = this.props;\n    var children = props.children;\n    var child = _react2[\"default\"].Children.only(children);\n    var newChildProps = {};\n    if (this.isClickToHide() || this.isClickToShow()) {\n      newChildProps.onClick = this.onClick;\n      newChildProps.onMouseDown = this.onMouseDown;\n      newChildProps.onTouchStart = this.onTouchStart;\n    } else {\n      newChildProps.onClick = this.createTwoChains('onClick');\n      newChildProps.onMouseDown = this.createTwoChains('onMouseDown');\n      newChildProps.onTouchStart = this.createTwoChains('onTouchStart');\n    }\n    if (this.isMouseEnterToShow()) {\n      newChildProps.onMouseEnter = this.onMouseEnter;\n    } else {\n      newChildProps.onMouseEnter = this.createTwoChains('onMouseEnter');\n    }\n    if (this.isMouseLeaveToHide()) {\n      newChildProps.onMouseLeave = this.onMouseLeave;\n    } else {\n      newChildProps.onMouseLeave = this.createTwoChains('onMouseLeave');\n    }\n    if (this.isFocusToShow() || this.isBlurToHide()) {\n      newChildProps.onFocus = this.onFocus;\n      newChildProps.onBlur = this.onBlur;\n    } else {\n      newChildProps.onFocus = this.createTwoChains('onFocus');\n      newChildProps.onBlur = this.createTwoChains('onBlur');\n    }\n\n    return _react2[\"default\"].cloneElement(child, newChildProps);\n  }\n});\n\nexports[\"default\"] = Trigger;\nmodule.exports = exports['default'];\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./atlas_bundles/baseline-expression/~/rc-trigger/lib/Trigger.js\n// module id = 2668\n// module chunks = 2","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n */\n\n'use strict';\n\nvar React = require('react');\nvar factory = require('./factory');\n\n// Hack to grab NoopUpdateQueue from isomorphic React\nvar ReactNoopUpdateQueue = new React.Component().updater;\n\nmodule.exports = factory(\n  React.Component,\n  React.isValidElement,\n  ReactNoopUpdateQueue\n);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./atlas_bundles/baseline-expression/~/create-react-class/index.js\n// module id = 2669\n// module chunks = 2","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n */\n\n'use strict';\n\nvar _assign = require('object-assign');\n\nvar emptyObject = require('fbjs/lib/emptyObject');\nvar _invariant = require('fbjs/lib/invariant');\n\nif (process.env.NODE_ENV !== 'production') {\n  var warning = require('fbjs/lib/warning');\n}\n\nvar MIXINS_KEY = 'mixins';\n\n// Helper function to allow the creation of anonymous functions which do not\n// have .name set to the name of the variable being assigned to.\nfunction identity(fn) {\n  return fn;\n}\n\nvar ReactPropTypeLocationNames;\nif (process.env.NODE_ENV !== 'production') {\n  ReactPropTypeLocationNames = {\n    prop: 'prop',\n    context: 'context',\n    childContext: 'child context',\n  };\n} else {\n  ReactPropTypeLocationNames = {};\n}\n\nfunction factory(ReactComponent, isValidElement, ReactNoopUpdateQueue) {\n  /**\n   * Policies that describe methods in `ReactClassInterface`.\n   */\n\n\n  var injectedMixins = [];\n\n  /**\n   * Composite components are higher-level components that compose other composite\n   * or host components.\n   *\n   * To create a new type of `ReactClass`, pass a specification of\n   * your new class to `React.createClass`. The only requirement of your class\n   * specification is that you implement a `render` method.\n   *\n   *   var MyComponent = React.createClass({\n   *     render: function() {\n   *       return <div>Hello World</div>;\n   *     }\n   *   });\n   *\n   * The class specification supports a specific protocol of methods that have\n   * special meaning (e.g. `render`). See `ReactClassInterface` for\n   * more the comprehensive protocol. Any other properties and methods in the\n   * class specification will be available on the prototype.\n   *\n   * @interface ReactClassInterface\n   * @internal\n   */\n  var ReactClassInterface = {\n\n    /**\n     * An array of Mixin objects to include when defining your component.\n     *\n     * @type {array}\n     * @optional\n     */\n    mixins: 'DEFINE_MANY',\n\n    /**\n     * An object containing properties and methods that should be defined on\n     * the component's constructor instead of its prototype (static methods).\n     *\n     * @type {object}\n     * @optional\n     */\n    statics: 'DEFINE_MANY',\n\n    /**\n     * Definition of prop types for this component.\n     *\n     * @type {object}\n     * @optional\n     */\n    propTypes: 'DEFINE_MANY',\n\n    /**\n     * Definition of context types for this component.\n     *\n     * @type {object}\n     * @optional\n     */\n    contextTypes: 'DEFINE_MANY',\n\n    /**\n     * Definition of context types this component sets for its children.\n     *\n     * @type {object}\n     * @optional\n     */\n    childContextTypes: 'DEFINE_MANY',\n\n    // ==== Definition methods ====\n\n    /**\n     * Invoked when the component is mounted. Values in the mapping will be set on\n     * `this.props` if that prop is not specified (i.e. using an `in` check).\n     *\n     * This method is invoked before `getInitialState` and therefore cannot rely\n     * on `this.state` or use `this.setState`.\n     *\n     * @return {object}\n     * @optional\n     */\n    getDefaultProps: 'DEFINE_MANY_MERGED',\n\n    /**\n     * Invoked once before the component is mounted. The return value will be used\n     * as the initial value of `this.state`.\n     *\n     *   getInitialState: function() {\n     *     return {\n     *       isOn: false,\n     *       fooBaz: new BazFoo()\n     *     }\n     *   }\n     *\n     * @return {object}\n     * @optional\n     */\n    getInitialState: 'DEFINE_MANY_MERGED',\n\n    /**\n     * @return {object}\n     * @optional\n     */\n    getChildContext: 'DEFINE_MANY_MERGED',\n\n    /**\n     * Uses props from `this.props` and state from `this.state` to render the\n     * structure of the component.\n     *\n     * No guarantees are made about when or how often this method is invoked, so\n     * it must not have side effects.\n     *\n     *   render: function() {\n     *     var name = this.props.name;\n     *     return <div>Hello, {name}!</div>;\n     *   }\n     *\n     * @return {ReactComponent}\n     * @nosideeffects\n     * @required\n     */\n    render: 'DEFINE_ONCE',\n\n    // ==== Delegate methods ====\n\n    /**\n     * Invoked when the component is initially created and about to be mounted.\n     * This may have side effects, but any external subscriptions or data created\n     * by this method must be cleaned up in `componentWillUnmount`.\n     *\n     * @optional\n     */\n    componentWillMount: 'DEFINE_MANY',\n\n    /**\n     * Invoked when the component has been mounted and has a DOM representation.\n     * However, there is no guarantee that the DOM node is in the document.\n     *\n     * Use this as an opportunity to operate on the DOM when the component has\n     * been mounted (initialized and rendered) for the first time.\n     *\n     * @param {DOMElement} rootNode DOM element representing the component.\n     * @optional\n     */\n    componentDidMount: 'DEFINE_MANY',\n\n    /**\n     * Invoked before the component receives new props.\n     *\n     * Use this as an opportunity to react to a prop transition by updating the\n     * state using `this.setState`. Current props are accessed via `this.props`.\n     *\n     *   componentWillReceiveProps: function(nextProps, nextContext) {\n     *     this.setState({\n     *       likesIncreasing: nextProps.likeCount > this.props.likeCount\n     *     });\n     *   }\n     *\n     * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop\n     * transition may cause a state change, but the opposite is not true. If you\n     * need it, you are probably looking for `componentWillUpdate`.\n     *\n     * @param {object} nextProps\n     * @optional\n     */\n    componentWillReceiveProps: 'DEFINE_MANY',\n\n    /**\n     * Invoked while deciding if the component should be updated as a result of\n     * receiving new props, state and/or context.\n     *\n     * Use this as an opportunity to `return false` when you're certain that the\n     * transition to the new props/state/context will not require a component\n     * update.\n     *\n     *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {\n     *     return !equal(nextProps, this.props) ||\n     *       !equal(nextState, this.state) ||\n     *       !equal(nextContext, this.context);\n     *   }\n     *\n     * @param {object} nextProps\n     * @param {?object} nextState\n     * @param {?object} nextContext\n     * @return {boolean} True if the component should update.\n     * @optional\n     */\n    shouldComponentUpdate: 'DEFINE_ONCE',\n\n    /**\n     * Invoked when the component is about to update due to a transition from\n     * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`\n     * and `nextContext`.\n     *\n     * Use this as an opportunity to perform preparation before an update occurs.\n     *\n     * NOTE: You **cannot** use `this.setState()` in this method.\n     *\n     * @param {object} nextProps\n     * @param {?object} nextState\n     * @param {?object} nextContext\n     * @param {ReactReconcileTransaction} transaction\n     * @optional\n     */\n    componentWillUpdate: 'DEFINE_MANY',\n\n    /**\n     * Invoked when the component's DOM representation has been updated.\n     *\n     * Use this as an opportunity to operate on the DOM when the component has\n     * been updated.\n     *\n     * @param {object} prevProps\n     * @param {?object} prevState\n     * @param {?object} prevContext\n     * @param {DOMElement} rootNode DOM element representing the component.\n     * @optional\n     */\n    componentDidUpdate: 'DEFINE_MANY',\n\n    /**\n     * Invoked when the component is about to be removed from its parent and have\n     * its DOM representation destroyed.\n     *\n     * Use this as an opportunity to deallocate any external resources.\n     *\n     * NOTE: There is no `componentDidUnmount` since your component will have been\n     * destroyed by that point.\n     *\n     * @optional\n     */\n    componentWillUnmount: 'DEFINE_MANY',\n\n    // ==== Advanced methods ====\n\n    /**\n     * Updates the component's currently mounted DOM representation.\n     *\n     * By default, this implements React's rendering and reconciliation algorithm.\n     * Sophisticated clients may wish to override this.\n     *\n     * @param {ReactReconcileTransaction} transaction\n     * @internal\n     * @overridable\n     */\n    updateComponent: 'OVERRIDE_BASE'\n\n  };\n\n  /**\n   * Mapping from class specification keys to special processing functions.\n   *\n   * Although these are declared like instance properties in the specification\n   * when defining classes using `React.createClass`, they are actually static\n   * and are accessible on the constructor instead of the prototype. Despite\n   * being static, they must be defined outside of the \"statics\" key under\n   * which all other static methods are defined.\n   */\n  var RESERVED_SPEC_KEYS = {\n    displayName: function (Constructor, displayName) {\n      Constructor.displayName = displayName;\n    },\n    mixins: function (Constructor, mixins) {\n      if (mixins) {\n        for (var i = 0; i < mixins.length; i++) {\n          mixSpecIntoComponent(Constructor, mixins[i]);\n        }\n      }\n    },\n    childContextTypes: function (Constructor, childContextTypes) {\n      if (process.env.NODE_ENV !== 'production') {\n        validateTypeDef(Constructor, childContextTypes, 'childContext');\n      }\n      Constructor.childContextTypes = _assign({}, Constructor.childContextTypes, childContextTypes);\n    },\n    contextTypes: function (Constructor, contextTypes) {\n      if (process.env.NODE_ENV !== 'production') {\n        validateTypeDef(Constructor, contextTypes, 'context');\n      }\n      Constructor.contextTypes = _assign({}, Constructor.contextTypes, contextTypes);\n    },\n    /**\n     * Special case getDefaultProps which should move into statics but requires\n     * automatic merging.\n     */\n    getDefaultProps: function (Constructor, getDefaultProps) {\n      if (Constructor.getDefaultProps) {\n        Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);\n      } else {\n        Constructor.getDefaultProps = getDefaultProps;\n      }\n    },\n    propTypes: function (Constructor, propTypes) {\n      if (process.env.NODE_ENV !== 'production') {\n        validateTypeDef(Constructor, propTypes, 'prop');\n      }\n      Constructor.propTypes = _assign({}, Constructor.propTypes, propTypes);\n    },\n    statics: function (Constructor, statics) {\n      mixStaticSpecIntoComponent(Constructor, statics);\n    },\n    autobind: function () {} };\n\n  function validateTypeDef(Constructor, typeDef, location) {\n    for (var propName in typeDef) {\n      if (typeDef.hasOwnProperty(propName)) {\n        // use a warning instead of an _invariant so components\n        // don't show up in prod but only in __DEV__\n        process.env.NODE_ENV !== 'production' ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : void 0;\n      }\n    }\n  }\n\n  function validateMethodOverride(isAlreadyDefined, name) {\n    var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;\n\n    // Disallow overriding of base class methods unless explicitly allowed.\n    if (ReactClassMixin.hasOwnProperty(name)) {\n      _invariant(specPolicy === 'OVERRIDE_BASE', 'ReactClassInterface: You are attempting to override ' + '`%s` from your class specification. Ensure that your method names ' + 'do not overlap with React methods.', name);\n    }\n\n    // Disallow defining methods more than once unless explicitly allowed.\n    if (isAlreadyDefined) {\n      _invariant(specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED', 'ReactClassInterface: You are attempting to define ' + '`%s` on your component more than once. This conflict may be due ' + 'to a mixin.', name);\n    }\n  }\n\n  /**\n   * Mixin helper which handles policy validation and reserved\n   * specification keys when building React classes.\n   */\n  function mixSpecIntoComponent(Constructor, spec) {\n    if (!spec) {\n      if (process.env.NODE_ENV !== 'production') {\n        var typeofSpec = typeof spec;\n        var isMixinValid = typeofSpec === 'object' && spec !== null;\n\n        process.env.NODE_ENV !== 'production' ? warning(isMixinValid, '%s: You\\'re attempting to include a mixin that is either null ' + 'or not an object. Check the mixins included by the component, ' + 'as well as any mixins they include themselves. ' + 'Expected object but got %s.', Constructor.displayName || 'ReactClass', spec === null ? null : typeofSpec) : void 0;\n      }\n\n      return;\n    }\n\n    _invariant(typeof spec !== 'function', 'ReactClass: You\\'re attempting to ' + 'use a component class or function as a mixin. Instead, just use a ' + 'regular object.');\n    _invariant(!isValidElement(spec), 'ReactClass: You\\'re attempting to ' + 'use a component as a mixin. Instead, just use a regular object.');\n\n    var proto = Constructor.prototype;\n    var autoBindPairs = proto.__reactAutoBindPairs;\n\n    // By handling mixins before any other properties, we ensure the same\n    // chaining order is applied to methods with DEFINE_MANY policy, whether\n    // mixins are listed before or after these methods in the spec.\n    if (spec.hasOwnProperty(MIXINS_KEY)) {\n      RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);\n    }\n\n    for (var name in spec) {\n      if (!spec.hasOwnProperty(name)) {\n        continue;\n      }\n\n      if (name === MIXINS_KEY) {\n        // We have already handled mixins in a special case above.\n        continue;\n      }\n\n      var property = spec[name];\n      var isAlreadyDefined = proto.hasOwnProperty(name);\n      validateMethodOverride(isAlreadyDefined, name);\n\n      if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {\n        RESERVED_SPEC_KEYS[name](Constructor, property);\n      } else {\n        // Setup methods on prototype:\n        // The following member methods should not be automatically bound:\n        // 1. Expected ReactClass methods (in the \"interface\").\n        // 2. Overridden methods (that were mixed in).\n        var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);\n        var isFunction = typeof property === 'function';\n        var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;\n\n        if (shouldAutoBind) {\n          autoBindPairs.push(name, property);\n          proto[name] = property;\n        } else {\n          if (isAlreadyDefined) {\n            var specPolicy = ReactClassInterface[name];\n\n            // These cases should already be caught by validateMethodOverride.\n            _invariant(isReactClassMethod && (specPolicy === 'DEFINE_MANY_MERGED' || specPolicy === 'DEFINE_MANY'), 'ReactClass: Unexpected spec policy %s for key %s ' + 'when mixing in component specs.', specPolicy, name);\n\n            // For methods which are defined more than once, call the existing\n            // methods before calling the new property, merging if appropriate.\n            if (specPolicy === 'DEFINE_MANY_MERGED') {\n              proto[name] = createMergedResultFunction(proto[name], property);\n            } else if (specPolicy === 'DEFINE_MANY') {\n              proto[name] = createChainedFunction(proto[name], property);\n            }\n          } else {\n            proto[name] = property;\n            if (process.env.NODE_ENV !== 'production') {\n              // Add verbose displayName to the function, which helps when looking\n              // at profiling tools.\n              if (typeof property === 'function' && spec.displayName) {\n                proto[name].displayName = spec.displayName + '_' + name;\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  function mixStaticSpecIntoComponent(Constructor, statics) {\n    if (!statics) {\n      return;\n    }\n    for (var name in statics) {\n      var property = statics[name];\n      if (!statics.hasOwnProperty(name)) {\n        continue;\n      }\n\n      var isReserved = name in RESERVED_SPEC_KEYS;\n      _invariant(!isReserved, 'ReactClass: You are attempting to define a reserved ' + 'property, `%s`, that shouldn\\'t be on the \"statics\" key. Define it ' + 'as an instance property instead; it will still be accessible on the ' + 'constructor.', name);\n\n      var isInherited = name in Constructor;\n      _invariant(!isInherited, 'ReactClass: You are attempting to define ' + '`%s` on your component more than once. This conflict may be ' + 'due to a mixin.', name);\n      Constructor[name] = property;\n    }\n  }\n\n  /**\n   * Merge two objects, but throw if both contain the same key.\n   *\n   * @param {object} one The first object, which is mutated.\n   * @param {object} two The second object\n   * @return {object} one after it has been mutated to contain everything in two.\n   */\n  function mergeIntoWithNoDuplicateKeys(one, two) {\n    _invariant(one && two && typeof one === 'object' && typeof two === 'object', 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.');\n\n    for (var key in two) {\n      if (two.hasOwnProperty(key)) {\n        _invariant(one[key] === undefined, 'mergeIntoWithNoDuplicateKeys(): ' + 'Tried to merge two objects with the same key: `%s`. This conflict ' + 'may be due to a mixin; in particular, this may be caused by two ' + 'getInitialState() or getDefaultProps() methods returning objects ' + 'with clashing keys.', key);\n        one[key] = two[key];\n      }\n    }\n    return one;\n  }\n\n  /**\n   * Creates a function that invokes two functions and merges their return values.\n   *\n   * @param {function} one Function to invoke first.\n   * @param {function} two Function to invoke second.\n   * @return {function} Function that invokes the two argument functions.\n   * @private\n   */\n  function createMergedResultFunction(one, two) {\n    return function mergedResult() {\n      var a = one.apply(this, arguments);\n      var b = two.apply(this, arguments);\n      if (a == null) {\n        return b;\n      } else if (b == null) {\n        return a;\n      }\n      var c = {};\n      mergeIntoWithNoDuplicateKeys(c, a);\n      mergeIntoWithNoDuplicateKeys(c, b);\n      return c;\n    };\n  }\n\n  /**\n   * Creates a function that invokes two functions and ignores their return vales.\n   *\n   * @param {function} one Function to invoke first.\n   * @param {function} two Function to invoke second.\n   * @return {function} Function that invokes the two argument functions.\n   * @private\n   */\n  function createChainedFunction(one, two) {\n    return function chainedFunction() {\n      one.apply(this, arguments);\n      two.apply(this, arguments);\n    };\n  }\n\n  /**\n   * Binds a method to the component.\n   *\n   * @param {object} component Component whose method is going to be bound.\n   * @param {function} method Method to be bound.\n   * @return {function} The bound method.\n   */\n  function bindAutoBindMethod(component, method) {\n    var boundMethod = method.bind(component);\n    if (process.env.NODE_ENV !== 'production') {\n      boundMethod.__reactBoundContext = component;\n      boundMethod.__reactBoundMethod = method;\n      boundMethod.__reactBoundArguments = null;\n      var componentName = component.constructor.displayName;\n      var _bind = boundMethod.bind;\n      boundMethod.bind = function (newThis) {\n        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n\n        // User is trying to bind() an autobound method; we effectively will\n        // ignore the value of \"this\" that the user is trying to use, so\n        // let's warn.\n        if (newThis !== component && newThis !== null) {\n          process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : void 0;\n        } else if (!args.length) {\n          process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : void 0;\n          return boundMethod;\n        }\n        var reboundMethod = _bind.apply(boundMethod, arguments);\n        reboundMethod.__reactBoundContext = component;\n        reboundMethod.__reactBoundMethod = method;\n        reboundMethod.__reactBoundArguments = args;\n        return reboundMethod;\n      };\n    }\n    return boundMethod;\n  }\n\n  /**\n   * Binds all auto-bound methods in a component.\n   *\n   * @param {object} component Component whose method is going to be bound.\n   */\n  function bindAutoBindMethods(component) {\n    var pairs = component.__reactAutoBindPairs;\n    for (var i = 0; i < pairs.length; i += 2) {\n      var autoBindKey = pairs[i];\n      var method = pairs[i + 1];\n      component[autoBindKey] = bindAutoBindMethod(component, method);\n    }\n  }\n\n  var IsMountedMixin = {\n    componentDidMount: function () {\n      this.__isMounted = true;\n    },\n    componentWillUnmount: function () {\n      this.__isMounted = false;\n    }\n  };\n\n  /**\n   * Add more to the ReactClass base class. These are all legacy features and\n   * therefore not already part of the modern ReactComponent.\n   */\n  var ReactClassMixin = {\n\n    /**\n     * TODO: This will be deprecated because state should always keep a consistent\n     * type signature and the only use case for this, is to avoid that.\n     */\n    replaceState: function (newState, callback) {\n      this.updater.enqueueReplaceState(this, newState, callback);\n    },\n\n    /**\n     * Checks whether or not this composite component is mounted.\n     * @return {boolean} True if mounted, false otherwise.\n     * @protected\n     * @final\n     */\n    isMounted: function () {\n      if (process.env.NODE_ENV !== 'production') {\n        process.env.NODE_ENV !== 'production' ? warning(this.__didWarnIsMounted, '%s: isMounted is deprecated. Instead, make sure to clean up ' + 'subscriptions and pending requests in componentWillUnmount to ' + 'prevent memory leaks.', this.constructor && this.constructor.displayName || this.name || 'Component') : void 0;\n        this.__didWarnIsMounted = true;\n      }\n      return !!this.__isMounted;\n    }\n  };\n\n  var ReactClassComponent = function () {};\n  _assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);\n\n  /**\n   * Creates a composite component class given a class specification.\n   * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass\n   *\n   * @param {object} spec Class specification (which must define `render`).\n   * @return {function} Component constructor function.\n   * @public\n   */\n  function createClass(spec) {\n    // To keep our warnings more understandable, we'll use a little hack here to\n    // ensure that Constructor.name !== 'Constructor'. This makes sure we don't\n    // unnecessarily identify a class without displayName as 'Constructor'.\n    var Constructor = identity(function (props, context, updater) {\n      // This constructor gets overridden by mocks. The argument is used\n      // by mocks to assert on what gets mounted.\n\n      if (process.env.NODE_ENV !== 'production') {\n        process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : void 0;\n      }\n\n      // Wire up auto-binding\n      if (this.__reactAutoBindPairs.length) {\n        bindAutoBindMethods(this);\n      }\n\n      this.props = props;\n      this.context = context;\n      this.refs = emptyObject;\n      this.updater = updater || ReactNoopUpdateQueue;\n\n      this.state = null;\n\n      // ReactClasses doesn't have constructors. Instead, they use the\n      // getInitialState and componentWillMount methods for initialization.\n\n      var initialState = this.getInitialState ? this.getInitialState() : null;\n      if (process.env.NODE_ENV !== 'production') {\n        // We allow auto-mocks to proceed as if they're returning null.\n        if (initialState === undefined && this.getInitialState._isMockFunction) {\n          // This is probably bad practice. Consider warning here and\n          // deprecating this convenience.\n          initialState = null;\n        }\n      }\n      _invariant(typeof initialState === 'object' && !Array.isArray(initialState), '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent');\n\n      this.state = initialState;\n    });\n    Constructor.prototype = new ReactClassComponent();\n    Constructor.prototype.constructor = Constructor;\n    Constructor.prototype.__reactAutoBindPairs = [];\n\n    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));\n\n    mixSpecIntoComponent(Constructor, IsMountedMixin);\n    mixSpecIntoComponent(Constructor, spec);\n\n    // Initialize the defaultProps property after all mixins have been merged.\n    if (Constructor.getDefaultProps) {\n      Constructor.defaultProps = Constructor.getDefaultProps();\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      // This is a tag to indicate that the use of these method names is ok,\n      // since it's used with createClass. If it's not, then it's likely a\n      // mistake so we'll warn you to use the static property, property\n      // initializer or constructor respectively.\n      if (Constructor.getDefaultProps) {\n        Constructor.getDefaultProps.isReactClassApproved = {};\n      }\n      if (Constructor.prototype.getInitialState) {\n        Constructor.prototype.getInitialState.isReactClassApproved = {};\n      }\n    }\n\n    _invariant(Constructor.prototype.render, 'createClass(...): Class specification must implement a `render` method.');\n\n    if (process.env.NODE_ENV !== 'production') {\n      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : void 0;\n      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : void 0;\n    }\n\n    // Reduce time spent doing lookups by setting these on the prototype.\n    for (var methodName in ReactClassInterface) {\n      if (!Constructor.prototype[methodName]) {\n        Constructor.prototype[methodName] = null;\n      }\n    }\n\n    return Constructor;\n  }\n\n  return createClass;\n}\n\nmodule.exports = factory;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./atlas_bundles/baseline-expression/~/create-react-class/factory.js\n// module id = 2670\n// module chunks = 2","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _rcAlign = require('rc-align');\n\nvar _rcAlign2 = _interopRequireDefault(_rcAlign);\n\nvar _rcAnimate = require('rc-animate');\n\nvar _rcAnimate2 = _interopRequireDefault(_rcAnimate);\n\nvar _PopupInner = require('./PopupInner');\n\nvar _PopupInner2 = _interopRequireDefault(_PopupInner);\n\nvar _LazyRenderBox = require('./LazyRenderBox');\n\nvar _LazyRenderBox2 = _interopRequireDefault(_LazyRenderBox);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar Popup = function (_Component) {\n  (0, _inherits3[\"default\"])(Popup, _Component);\n\n  function Popup() {\n    var _temp, _this, _ret;\n\n    (0, _classCallCheck3[\"default\"])(this, Popup);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3[\"default\"])(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.onAlign = function (popupDomNode, align) {\n      var props = _this.props;\n      var alignClassName = props.getClassNameFromAlign(props.align);\n      var currentAlignClassName = props.getClassNameFromAlign(align);\n      if (alignClassName !== currentAlignClassName) {\n        _this.currentAlignClassName = currentAlignClassName;\n        popupDomNode.className = _this.getClassName(currentAlignClassName);\n      }\n      props.onAlign(popupDomNode, align);\n    }, _this.getTarget = function () {\n      return _this.props.getRootDomNode();\n    }, _this.saveAlign = function (align) {\n      _this.alignInstance = align;\n    }, _temp), (0, _possibleConstructorReturn3[\"default\"])(_this, _ret);\n  }\n\n  Popup.prototype.componentDidMount = function componentDidMount() {\n    this.rootNode = this.getPopupDomNode();\n  };\n\n  Popup.prototype.getPopupDomNode = function getPopupDomNode() {\n    return _reactDom2[\"default\"].findDOMNode(this.refs.popup);\n  };\n\n  Popup.prototype.getMaskTransitionName = function getMaskTransitionName() {\n    var props = this.props;\n    var transitionName = props.maskTransitionName;\n    var animation = props.maskAnimation;\n    if (!transitionName && animation) {\n      transitionName = props.prefixCls + '-' + animation;\n    }\n    return transitionName;\n  };\n\n  Popup.prototype.getTransitionName = function getTransitionName() {\n    var props = this.props;\n    var transitionName = props.transitionName;\n    if (!transitionName && props.animation) {\n      transitionName = props.prefixCls + '-' + props.animation;\n    }\n    return transitionName;\n  };\n\n  Popup.prototype.getClassName = function getClassName(currentAlignClassName) {\n    return this.props.prefixCls + ' ' + this.props.className + ' ' + currentAlignClassName;\n  };\n\n  Popup.prototype.getPopupElement = function getPopupElement() {\n    var props = this.props;\n    var align = props.align,\n        style = props.style,\n        visible = props.visible,\n        prefixCls = props.prefixCls,\n        destroyPopupOnHide = props.destroyPopupOnHide;\n\n    var className = this.getClassName(this.currentAlignClassName || props.getClassNameFromAlign(align));\n    var hiddenClassName = prefixCls + '-hidden';\n    if (!visible) {\n      this.currentAlignClassName = null;\n    }\n    var newStyle = (0, _extends3[\"default\"])({}, style, this.getZIndexStyle());\n    var popupInnerProps = {\n      className: className,\n      prefixCls: prefixCls,\n      ref: 'popup',\n      onMouseEnter: props.onMouseEnter,\n      onMouseLeave: props.onMouseLeave,\n      style: newStyle\n    };\n    if (destroyPopupOnHide) {\n      return _react2[\"default\"].createElement(\n        _rcAnimate2[\"default\"],\n        {\n          component: '',\n          exclusive: true,\n          transitionAppear: true,\n          transitionName: this.getTransitionName()\n        },\n        visible ? _react2[\"default\"].createElement(\n          _rcAlign2[\"default\"],\n          {\n            target: this.getTarget,\n            key: 'popup',\n            ref: this.saveAlign,\n            monitorWindowResize: true,\n            align: align,\n            onAlign: this.onAlign\n          },\n          _react2[\"default\"].createElement(\n            _PopupInner2[\"default\"],\n            (0, _extends3[\"default\"])({\n              visible: true\n            }, popupInnerProps),\n            props.children\n          )\n        ) : null\n      );\n    }\n    return _react2[\"default\"].createElement(\n      _rcAnimate2[\"default\"],\n      {\n        component: '',\n        exclusive: true,\n        transitionAppear: true,\n        transitionName: this.getTransitionName(),\n        showProp: 'xVisible'\n      },\n      _react2[\"default\"].createElement(\n        _rcAlign2[\"default\"],\n        {\n          target: this.getTarget,\n          key: 'popup',\n          ref: this.saveAlign,\n          monitorWindowResize: true,\n          xVisible: visible,\n          childrenProps: { visible: 'xVisible' },\n          disabled: !visible,\n          align: align,\n          onAlign: this.onAlign\n        },\n        _react2[\"default\"].createElement(\n          _PopupInner2[\"default\"],\n          (0, _extends3[\"default\"])({\n            hiddenClassName: hiddenClassName\n          }, popupInnerProps),\n          props.children\n        )\n      )\n    );\n  };\n\n  Popup.prototype.getZIndexStyle = function getZIndexStyle() {\n    var style = {};\n    var props = this.props;\n    if (props.zIndex !== undefined) {\n      style.zIndex = props.zIndex;\n    }\n    return style;\n  };\n\n  Popup.prototype.getMaskElement = function getMaskElement() {\n    var props = this.props;\n    var maskElement = void 0;\n    if (props.mask) {\n      var maskTransition = this.getMaskTransitionName();\n      maskElement = _react2[\"default\"].createElement(_LazyRenderBox2[\"default\"], {\n        style: this.getZIndexStyle(),\n        key: 'mask',\n        className: props.prefixCls + '-mask',\n        hiddenClassName: props.prefixCls + '-mask-hidden',\n        visible: props.visible\n      });\n      if (maskTransition) {\n        maskElement = _react2[\"default\"].createElement(\n          _rcAnimate2[\"default\"],\n          {\n            key: 'mask',\n            showProp: 'visible',\n            transitionAppear: true,\n            component: '',\n            transitionName: maskTransition\n          },\n          maskElement\n        );\n      }\n    }\n    return maskElement;\n  };\n\n  Popup.prototype.render = function render() {\n    return _react2[\"default\"].createElement(\n      'div',\n      null,\n      this.getMaskElement(),\n      this.getPopupElement()\n    );\n  };\n\n  return Popup;\n}(_react.Component);\n\nPopup.propTypes = {\n  visible: _propTypes2[\"default\"].bool,\n  style: _propTypes2[\"default\"].object,\n  getClassNameFromAlign: _propTypes2[\"default\"].func,\n  onAlign: _propTypes2[\"default\"].func,\n  getRootDomNode: _propTypes2[\"default\"].func,\n  onMouseEnter: _propTypes2[\"default\"].func,\n  align: _propTypes2[\"default\"].any,\n  destroyPopupOnHide: _propTypes2[\"default\"].bool,\n  className: _propTypes2[\"default\"].string,\n  prefixCls: _propTypes2[\"default\"].string,\n  onMouseLeave: _propTypes2[\"default\"].func\n};\nexports[\"default\"] = Popup;\nmodule.exports = exports['default'];\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./atlas_bundles/baseline-expression/~/rc-trigger/lib/Popup.js\n// module id = 2674\n// module chunks = 2","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _domAlign = require('dom-align');\n\nvar _domAlign2 = _interopRequireDefault(_domAlign);\n\nvar _addEventListener = require('rc-util/lib/Dom/addEventListener');\n\nvar _addEventListener2 = _interopRequireDefault(_addEventListener);\n\nvar _isWindow = require('./isWindow');\n\nvar _isWindow2 = _interopRequireDefault(_isWindow);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }\n\nfunction buffer(fn, ms) {\n  var timer = void 0;\n\n  function clear() {\n    if (timer) {\n      clearTimeout(timer);\n      timer = null;\n    }\n  }\n\n  function bufferFn() {\n    clear();\n    timer = setTimeout(fn, ms);\n  }\n\n  bufferFn.clear = clear;\n\n  return bufferFn;\n}\n\nvar Align = function (_Component) {\n  _inherits(Align, _Component);\n\n  function Align() {\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, Align);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.forceAlign = function () {\n      var props = _this.props;\n      if (!props.disabled) {\n        var source = _reactDom2[\"default\"].findDOMNode(_this);\n        props.onAlign(source, (0, _domAlign2[\"default\"])(source, props.target(), props.align));\n      }\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  Align.prototype.componentDidMount = function componentDidMount() {\n    var props = this.props;\n    // if parent ref not attached .... use document.getElementById\n    this.forceAlign();\n    if (!props.disabled && props.monitorWindowResize) {\n      this.startMonitorWindowResize();\n    }\n  };\n\n  Align.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var reAlign = false;\n    var props = this.props;\n\n    if (!props.disabled) {\n      if (prevProps.disabled || prevProps.align !== props.align) {\n        reAlign = true;\n      } else {\n        var lastTarget = prevProps.target();\n        var currentTarget = props.target();\n        if ((0, _isWindow2[\"default\"])(lastTarget) && (0, _isWindow2[\"default\"])(currentTarget)) {\n          reAlign = false;\n        } else if (lastTarget !== currentTarget) {\n          reAlign = true;\n        }\n      }\n    }\n\n    if (reAlign) {\n      this.forceAlign();\n    }\n\n    if (props.monitorWindowResize && !props.disabled) {\n      this.startMonitorWindowResize();\n    } else {\n      this.stopMonitorWindowResize();\n    }\n  };\n\n  Align.prototype.componentWillUnmount = function componentWillUnmount() {\n    this.stopMonitorWindowResize();\n  };\n\n  Align.prototype.startMonitorWindowResize = function startMonitorWindowResize() {\n    if (!this.resizeHandler) {\n      this.bufferMonitor = buffer(this.forceAlign, this.props.monitorBufferTime);\n      this.resizeHandler = (0, _addEventListener2[\"default\"])(window, 'resize', this.bufferMonitor);\n    }\n  };\n\n  Align.prototype.stopMonitorWindowResize = function stopMonitorWindowResize() {\n    if (this.resizeHandler) {\n      this.bufferMonitor.clear();\n      this.resizeHandler.remove();\n      this.resizeHandler = null;\n    }\n  };\n\n  Align.prototype.render = function render() {\n    var _props = this.props,\n        childrenProps = _props.childrenProps,\n        children = _props.children;\n\n    var child = _react2[\"default\"].Children.only(children);\n    if (childrenProps) {\n      var newProps = {};\n      for (var prop in childrenProps) {\n        if (childrenProps.hasOwnProperty(prop)) {\n          newProps[prop] = this.props[childrenProps[prop]];\n        }\n      }\n      return _react2[\"default\"].cloneElement(child, newProps);\n    }\n    return child;\n  };\n\n  return Align;\n}(_react.Component);\n\nAlign.propTypes = {\n  childrenProps: _propTypes2[\"default\"].object,\n  align: _propTypes2[\"default\"].object.isRequired,\n  target: _propTypes2[\"default\"].func,\n  onAlign: _propTypes2[\"default\"].func,\n  monitorBufferTime: _propTypes2[\"default\"].number,\n  monitorWindowResize: _propTypes2[\"default\"].bool,\n  disabled: _propTypes2[\"default\"].bool,\n  children: _propTypes2[\"default\"].any\n};\nAlign.defaultProps = {\n  target: function target() {\n    return window;\n  },\n  onAlign: function onAlign() {},\n  monitorBufferTime: 50,\n  monitorWindowResize: false,\n  disabled: false\n};\nexports[\"default\"] = Align;\nmodule.exports = exports['default'];\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./atlas_bundles/baseline-expression/~/rc-align/lib/Align.js\n// module id = 2676\n// module chunks = 2","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _ChildrenUtils = require('./ChildrenUtils');\n\nvar _AnimateChild = require('./AnimateChild');\n\nvar _AnimateChild2 = _interopRequireDefault(_AnimateChild);\n\nvar _util = require('./util');\n\nvar _util2 = _interopRequireDefault(_util);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }\n\nvar defaultKey = 'rc_animate_' + Date.now();\n\n\nfunction getChildrenFromProps(props) {\n  var children = props.children;\n  if (_react2[\"default\"].isValidElement(children)) {\n    if (!children.key) {\n      return _react2[\"default\"].cloneElement(children, {\n        key: defaultKey\n      });\n    }\n  }\n  return children;\n}\n\nfunction noop() {}\n\nvar Animate = function (_React$Component) {\n  _inherits(Animate, _React$Component);\n\n  function Animate(props) {\n    _classCallCheck(this, Animate);\n\n    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));\n\n    _initialiseProps.call(_this);\n\n    _this.currentlyAnimatingKeys = {};\n    _this.keysToEnter = [];\n    _this.keysToLeave = [];\n\n    _this.state = {\n      children: (0, _ChildrenUtils.toArrayChildren)(getChildrenFromProps(_this.props))\n    };\n    return _this;\n  }\n\n  Animate.prototype.componentDidMount = function componentDidMount() {\n    var _this2 = this;\n\n    var showProp = this.props.showProp;\n    var children = this.state.children;\n    if (showProp) {\n      children = children.filter(function (child) {\n        return !!child.props[showProp];\n      });\n    }\n    children.forEach(function (child) {\n      if (child) {\n        _this2.performAppear(child.key);\n      }\n    });\n  };\n\n  Animate.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    var _this3 = this;\n\n    this.nextProps = nextProps;\n    var nextChildren = (0, _ChildrenUtils.toArrayChildren)(getChildrenFromProps(nextProps));\n    var props = this.props;\n    // exclusive needs immediate response\n    if (props.exclusive) {\n      Object.keys(this.currentlyAnimatingKeys).forEach(function (key) {\n        _this3.stop(key);\n      });\n    }\n    var showProp = props.showProp;\n    var currentlyAnimatingKeys = this.currentlyAnimatingKeys;\n    // last props children if exclusive\n    var currentChildren = props.exclusive ? (0, _ChildrenUtils.toArrayChildren)(getChildrenFromProps(props)) : this.state.children;\n    // in case destroy in showProp mode\n    var newChildren = [];\n    if (showProp) {\n      currentChildren.forEach(function (currentChild) {\n        var nextChild = currentChild && (0, _ChildrenUtils.findChildInChildrenByKey)(nextChildren, currentChild.key);\n        var newChild = void 0;\n        if ((!nextChild || !nextChild.props[showProp]) && currentChild.props[showProp]) {\n          newChild = _react2[\"default\"].cloneElement(nextChild || currentChild, _defineProperty({}, showProp, true));\n        } else {\n          newChild = nextChild;\n        }\n        if (newChild) {\n          newChildren.push(newChild);\n        }\n      });\n      nextChildren.forEach(function (nextChild) {\n        if (!nextChild || !(0, _ChildrenUtils.findChildInChildrenByKey)(currentChildren, nextChild.key)) {\n          newChildren.push(nextChild);\n        }\n      });\n    } else {\n      newChildren = (0, _ChildrenUtils.mergeChildren)(currentChildren, nextChildren);\n    }\n\n    // need render to avoid update\n    this.setState({\n      children: newChildren\n    });\n\n    nextChildren.forEach(function (child) {\n      var key = child && child.key;\n      if (child && currentlyAnimatingKeys[key]) {\n        return;\n      }\n      var hasPrev = child && (0, _ChildrenUtils.findChildInChildrenByKey)(currentChildren, key);\n      if (showProp) {\n        var showInNext = child.props[showProp];\n        if (hasPrev) {\n          var showInNow = (0, _ChildrenUtils.findShownChildInChildrenByKey)(currentChildren, key, showProp);\n          if (!showInNow && showInNext) {\n            _this3.keysToEnter.push(key);\n          }\n        } else if (showInNext) {\n          _this3.keysToEnter.push(key);\n        }\n      } else if (!hasPrev) {\n        _this3.keysToEnter.push(key);\n      }\n    });\n\n    currentChildren.forEach(function (child) {\n      var key = child && child.key;\n      if (child && currentlyAnimatingKeys[key]) {\n        return;\n      }\n      var hasNext = child && (0, _ChildrenUtils.findChildInChildrenByKey)(nextChildren, key);\n      if (showProp) {\n        var showInNow = child.props[showProp];\n        if (hasNext) {\n          var showInNext = (0, _ChildrenUtils.findShownChildInChildrenByKey)(nextChildren, key, showProp);\n          if (!showInNext && showInNow) {\n            _this3.keysToLeave.push(key);\n          }\n        } else if (showInNow) {\n          _this3.keysToLeave.push(key);\n        }\n      } else if (!hasNext) {\n        _this3.keysToLeave.push(key);\n      }\n    });\n  };\n\n  Animate.prototype.componentDidUpdate = function componentDidUpdate() {\n    var keysToEnter = this.keysToEnter;\n    this.keysToEnter = [];\n    keysToEnter.forEach(this.performEnter);\n    var keysToLeave = this.keysToLeave;\n    this.keysToLeave = [];\n    keysToLeave.forEach(this.performLeave);\n  };\n\n  Animate.prototype.isValidChildByKey = function isValidChildByKey(currentChildren, key) {\n    var showProp = this.props.showProp;\n    if (showProp) {\n      return (0, _ChildrenUtils.findShownChildInChildrenByKey)(currentChildren, key, showProp);\n    }\n    return (0, _ChildrenUtils.findChildInChildrenByKey)(currentChildren, key);\n  };\n\n  Animate.prototype.stop = function stop(key) {\n    delete this.currentlyAnimatingKeys[key];\n    var component = this.refs[key];\n    if (component) {\n      component.stop();\n    }\n  };\n\n  Animate.prototype.render = function render() {\n    var props = this.props;\n    this.nextProps = props;\n    var stateChildren = this.state.children;\n    var children = null;\n    if (stateChildren) {\n      children = stateChildren.map(function (child) {\n        if (child === null || child === undefined) {\n          return child;\n        }\n        if (!child.key) {\n          throw new Error('must set key for <rc-animate> children');\n        }\n        return _react2[\"default\"].createElement(\n          _AnimateChild2[\"default\"],\n          {\n            key: child.key,\n            ref: child.key,\n            animation: props.animation,\n            transitionName: props.transitionName,\n            transitionEnter: props.transitionEnter,\n            transitionAppear: props.transitionAppear,\n            transitionLeave: props.transitionLeave\n          },\n          child\n        );\n      });\n    }\n    var Component = props.component;\n    if (Component) {\n      var passedProps = props;\n      if (typeof Component === 'string') {\n        passedProps = _extends({\n          className: props.className,\n          style: props.style\n        }, props.componentProps);\n      }\n      return _react2[\"default\"].createElement(\n        Component,\n        passedProps,\n        children\n      );\n    }\n    return children[0] || null;\n  };\n\n  return Animate;\n}(_react2[\"default\"].Component);\n\nAnimate.propTypes = {\n  component: _propTypes2[\"default\"].any,\n  componentProps: _propTypes2[\"default\"].object,\n  animation: _propTypes2[\"default\"].object,\n  transitionName: _propTypes2[\"default\"].oneOfType([_propTypes2[\"default\"].string, _propTypes2[\"default\"].object]),\n  transitionEnter: _propTypes2[\"default\"].bool,\n  transitionAppear: _propTypes2[\"default\"].bool,\n  exclusive: _propTypes2[\"default\"].bool,\n  transitionLeave: _propTypes2[\"default\"].bool,\n  onEnd: _propTypes2[\"default\"].func,\n  onEnter: _propTypes2[\"default\"].func,\n  onLeave: _propTypes2[\"default\"].func,\n  onAppear: _propTypes2[\"default\"].func,\n  showProp: _propTypes2[\"default\"].string\n};\nAnimate.defaultProps = {\n  animation: {},\n  component: 'span',\n  componentProps: {},\n  transitionEnter: true,\n  transitionLeave: true,\n  transitionAppear: false,\n  onEnd: noop,\n  onEnter: noop,\n  onLeave: noop,\n  onAppear: noop\n};\n\nvar _initialiseProps = function _initialiseProps() {\n  var _this4 = this;\n\n  this.performEnter = function (key) {\n    // may already remove by exclusive\n    if (_this4.refs[key]) {\n      _this4.currentlyAnimatingKeys[key] = true;\n      _this4.refs[key].componentWillEnter(_this4.handleDoneAdding.bind(_this4, key, 'enter'));\n    }\n  };\n\n  this.performAppear = function (key) {\n    if (_this4.refs[key]) {\n      _this4.currentlyAnimatingKeys[key] = true;\n      _this4.refs[key].componentWillAppear(_this4.handleDoneAdding.bind(_this4, key, 'appear'));\n    }\n  };\n\n  this.handleDoneAdding = function (key, type) {\n    var props = _this4.props;\n    delete _this4.currentlyAnimatingKeys[key];\n    // if update on exclusive mode, skip check\n    if (props.exclusive && props !== _this4.nextProps) {\n      return;\n    }\n    var currentChildren = (0, _ChildrenUtils.toArrayChildren)(getChildrenFromProps(props));\n    if (!_this4.isValidChildByKey(currentChildren, key)) {\n      // exclusive will not need this\n      _this4.performLeave(key);\n    } else {\n      if (type === 'appear') {\n        if (_util2[\"default\"].allowAppearCallback(props)) {\n          props.onAppear(key);\n          props.onEnd(key, true);\n        }\n      } else {\n        if (_util2[\"default\"].allowEnterCallback(props)) {\n          props.onEnter(key);\n          props.onEnd(key, true);\n        }\n      }\n    }\n  };\n\n  this.performLeave = function (key) {\n    // may already remove by exclusive\n    if (_this4.refs[key]) {\n      _this4.currentlyAnimatingKeys[key] = true;\n      _this4.refs[key].componentWillLeave(_this4.handleDoneLeaving.bind(_this4, key));\n    }\n  };\n\n  this.handleDoneLeaving = function (key) {\n    var props = _this4.props;\n    delete _this4.currentlyAnimatingKeys[key];\n    // if update on exclusive mode, skip check\n    if (props.exclusive && props !== _this4.nextProps) {\n      return;\n    }\n    var currentChildren = (0, _ChildrenUtils.toArrayChildren)(getChildrenFromProps(props));\n    // in case state change is too fast\n    if (_this4.isValidChildByKey(currentChildren, key)) {\n      _this4.performEnter(key);\n    } else {\n      var end = function end() {\n        if (_util2[\"default\"].allowLeaveCallback(props)) {\n          props.onLeave(key);\n          props.onEnd(key, false);\n        }\n      };\n      if (!(0, _ChildrenUtils.isSameChildren)(_this4.state.children, currentChildren, props.showProp)) {\n        _this4.setState({\n          children: currentChildren\n        }, end);\n      } else {\n        end();\n      }\n    }\n  };\n};\n\nexports[\"default\"] = Animate;\nmodule.exports = exports['default'];\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./atlas_bundles/baseline-expression/~/rc-animate/lib/Animate.js\n// module id = 2689\n// module chunks = 2","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _cssAnimation = require('css-animation');\n\nvar _cssAnimation2 = _interopRequireDefault(_cssAnimation);\n\nvar _util = require('./util');\n\nvar _util2 = _interopRequireDefault(_util);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }\n\nvar transitionMap = {\n  enter: 'transitionEnter',\n  appear: 'transitionAppear',\n  leave: 'transitionLeave'\n};\n\nvar AnimateChild = function (_React$Component) {\n  _inherits(AnimateChild, _React$Component);\n\n  function AnimateChild() {\n    _classCallCheck(this, AnimateChild);\n\n    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));\n  }\n\n  AnimateChild.prototype.componentWillUnmount = function componentWillUnmount() {\n    this.stop();\n  };\n\n  AnimateChild.prototype.componentWillEnter = function componentWillEnter(done) {\n    if (_util2[\"default\"].isEnterSupported(this.props)) {\n      this.transition('enter', done);\n    } else {\n      done();\n    }\n  };\n\n  AnimateChild.prototype.componentWillAppear = function componentWillAppear(done) {\n    if (_util2[\"default\"].isAppearSupported(this.props)) {\n      this.transition('appear', done);\n    } else {\n      done();\n    }\n  };\n\n  AnimateChild.prototype.componentWillLeave = function componentWillLeave(done) {\n    if (_util2[\"default\"].isLeaveSupported(this.props)) {\n      this.transition('leave', done);\n    } else {\n      // always sync, do not interupt with react component life cycle\n      // update hidden -> animate hidden ->\n      // didUpdate -> animate leave -> unmount (if animate is none)\n      done();\n    }\n  };\n\n  AnimateChild.prototype.transition = function transition(animationType, finishCallback) {\n    var _this2 = this;\n\n    var node = _reactDom2[\"default\"].findDOMNode(this);\n    var props = this.props;\n    var transitionName = props.transitionName;\n    var nameIsObj = (typeof transitionName === 'undefined' ? 'undefined' : _typeof(transitionName)) === 'object';\n    this.stop();\n    var end = function end() {\n      _this2.stopper = null;\n      finishCallback();\n    };\n    if ((_cssAnimation.isCssAnimationSupported || !props.animation[animationType]) && transitionName && props[transitionMap[animationType]]) {\n      var name = nameIsObj ? transitionName[animationType] : transitionName + '-' + animationType;\n      var activeName = name + '-active';\n      if (nameIsObj && transitionName[animationType + 'Active']) {\n        activeName = transitionName[animationType + 'Active'];\n      }\n      this.stopper = (0, _cssAnimation2[\"default\"])(node, {\n        name: name,\n        active: activeName\n      }, end);\n    } else {\n      this.stopper = props.animation[animationType](node, end);\n    }\n  };\n\n  AnimateChild.prototype.stop = function stop() {\n    var stopper = this.stopper;\n    if (stopper) {\n      this.stopper = null;\n      stopper.stop();\n    }\n  };\n\n  AnimateChild.prototype.render = function render() {\n    return this.props.children;\n  };\n\n  return AnimateChild;\n}(_react2[\"default\"].Component);\n\nAnimateChild.propTypes = {\n  children: _propTypes2[\"default\"].any\n};\nexports[\"default\"] = AnimateChild;\nmodule.exports = exports['default'];\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./atlas_bundles/baseline-expression/~/rc-animate/lib/AnimateChild.js\n// module id = 2691\n// module chunks = 2","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _LazyRenderBox = require('./LazyRenderBox');\n\nvar _LazyRenderBox2 = _interopRequireDefault(_LazyRenderBox);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar PopupInner = function (_Component) {\n  (0, _inherits3[\"default\"])(PopupInner, _Component);\n\n  function PopupInner() {\n    (0, _classCallCheck3[\"default\"])(this, PopupInner);\n    return (0, _possibleConstructorReturn3[\"default\"])(this, _Component.apply(this, arguments));\n  }\n\n  PopupInner.prototype.render = function render() {\n    var props = this.props;\n    var className = props.className;\n    if (!props.visible) {\n      className += ' ' + props.hiddenClassName;\n    }\n    return _react2[\"default\"].createElement(\n      'div',\n      {\n        className: className,\n        onMouseEnter: props.onMouseEnter,\n        onMouseLeave: props.onMouseLeave,\n        style: props.style\n      },\n      _react2[\"default\"].createElement(\n        _LazyRenderBox2[\"default\"],\n        { className: props.prefixCls + '-content', visible: props.visible },\n        props.children\n      )\n    );\n  };\n\n  return PopupInner;\n}(_react.Component);\n\nPopupInner.propTypes = {\n  hiddenClassName: _propTypes2[\"default\"].string,\n  className: _propTypes2[\"default\"].string,\n  prefixCls: _propTypes2[\"default\"].string,\n  onMouseEnter: _propTypes2[\"default\"].func,\n  onMouseLeave: _propTypes2[\"default\"].func,\n  children: _propTypes2[\"default\"].any\n};\nexports[\"default\"] = PopupInner;\nmodule.exports = exports['default'];\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./atlas_bundles/baseline-expression/~/rc-trigger/lib/PopupInner.js\n// module id = 2697\n// module chunks = 2","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');\n\nvar _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar LazyRenderBox = function (_Component) {\n  (0, _inherits3[\"default\"])(LazyRenderBox, _Component);\n\n  function LazyRenderBox() {\n    (0, _classCallCheck3[\"default\"])(this, LazyRenderBox);\n    return (0, _possibleConstructorReturn3[\"default\"])(this, _Component.apply(this, arguments));\n  }\n\n  LazyRenderBox.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {\n    return nextProps.hiddenClassName || nextProps.visible;\n  };\n\n  LazyRenderBox.prototype.render = function render() {\n    var _props = this.props,\n        hiddenClassName = _props.hiddenClassName,\n        visible = _props.visible,\n        props = (0, _objectWithoutProperties3[\"default\"])(_props, ['hiddenClassName', 'visible']);\n\n\n    if (hiddenClassName || _react2[\"default\"].Children.count(props.children) > 1) {\n      if (!visible && hiddenClassName) {\n        props.className += ' ' + hiddenClassName;\n      }\n      return _react2[\"default\"].createElement('div', props);\n    }\n\n    return _react2[\"default\"].Children.only(props.children);\n  };\n\n  return LazyRenderBox;\n}(_react.Component);\n\nLazyRenderBox.propTypes = {\n  children: _propTypes2[\"default\"].any,\n  className: _propTypes2[\"default\"].string,\n  visible: _propTypes2[\"default\"].bool,\n  hiddenClassName: _propTypes2[\"default\"].string\n};\nexports[\"default\"] = LazyRenderBox;\nmodule.exports = exports['default'];\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./atlas_bundles/baseline-expression/~/rc-trigger/lib/LazyRenderBox.js\n// module id = 2698\n// module chunks = 2","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../css-loader/index.js!../../../../../../../node_modules/less-loader/index.js!./CoexpressionOption.less\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!../../../../style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../../../css-loader/index.js!../../../../../../../node_modules/less-loader/index.js!./CoexpressionOption.less\", function() {\n\t\t\tvar newContent = require(\"!!../../../../css-loader/index.js!../../../../../../../node_modules/less-loader/index.js!./CoexpressionOption.less\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./atlas_bundles/baseline-expression/~/expression-atlas-heatmap-highcharts/src/manipulate/coexpression/CoexpressionOption.less\n// module id = 2706\n// module chunks = 2","/*\n Highcharts JS v5.0.10 (2017-03-31)\n\n (c) 2009-2016 Torstein Honsi\n\n License: www.highcharts.com/license\n*/\n(function(y){\"object\"===typeof module&&module.exports?module.exports=y:y(Highcharts)})(function(y){(function(a){function p(a,b){this.init(a,b)}var r=a.CenteredSeriesMixin,v=a.each,m=a.extend,k=a.merge,h=a.splat;m(p.prototype,{coll:\"pane\",init:function(a,b){this.chart=b;this.background=[];b.pane.push(this);this.setOptions(a)},setOptions:function(a){this.options=k(this.defaultOptions,this.chart.angular?{background:{}}:void 0,a)},render:function(){var a=this.options,b=this.options.background,d=this.chart.renderer;\nthis.group||(this.group=d.g(\"pane-group\").attr({zIndex:a.zIndex||0}).add());this.updateCenter();if(b)for(b=h(b),a=Math.max(b.length,this.background.length||0),d=0;d<a;d++)b[d]?this.renderBackground(k(this.defaultBackgroundOptions,b[d]),d):this.background[d]&&(this.background[d]=this.background[d].destroy(),this.background.splice(d,1))},renderBackground:function(a,b){var d=\"animate\";this.background[b]||(this.background[b]=this.chart.renderer.path().add(this.group),d=\"attr\");this.background[b][d]({d:this.axis.getPlotBandPath(a.from,\na.to,a)}).attr({fill:a.backgroundColor,stroke:a.borderColor,\"stroke-width\":a.borderWidth,\"class\":\"highcharts-pane \"+(a.className||\"\")})},defaultOptions:{center:[\"50%\",\"50%\"],size:\"85%\",startAngle:0},defaultBackgroundOptions:{shape:\"circle\",borderWidth:1,borderColor:\"#cccccc\",backgroundColor:{linearGradient:{x1:0,y1:0,x2:0,y2:1},stops:[[0,\"#ffffff\"],[1,\"#e6e6e6\"]]},from:-Number.MAX_VALUE,innerRadius:0,to:Number.MAX_VALUE,outerRadius:\"105%\"},updateCenter:function(a){this.center=(a||this.axis||{}).center=\nr.getCenter.call(this)},update:function(a,b){k(!0,this.options,a);this.setOptions(this.options);this.render();v(this.chart.axes,function(d){d.pane===this&&(d.pane=null,d.update({},b))},this)}});a.Pane=p})(y);(function(a){var p=a.each,r=a.extend,v=a.map,m=a.merge,k=a.noop,h=a.pick,t=a.pInt,b=a.wrap,d,e,g=a.Axis.prototype;a=a.Tick.prototype;d={getOffset:k,redraw:function(){this.isDirty=!1},render:function(){this.isDirty=!1},setScale:k,setCategories:k,setTitle:k};e={defaultRadialGaugeOptions:{labels:{align:\"center\",\nx:0,y:null},minorGridLineWidth:0,minorTickInterval:\"auto\",minorTickLength:10,minorTickPosition:\"inside\",minorTickWidth:1,tickLength:10,tickPosition:\"inside\",tickWidth:2,title:{rotation:0},zIndex:2},defaultRadialXOptions:{gridLineWidth:1,labels:{align:null,distance:15,x:0,y:null},maxPadding:0,minPadding:0,showLastLabel:!1,tickLength:0},defaultRadialYOptions:{gridLineInterpolation:\"circle\",labels:{align:\"right\",x:-3,y:-2},showLastLabel:!1,title:{x:4,text:null,rotation:90}},setOptions:function(c){c=\nthis.options=m(this.defaultOptions,this.defaultRadialOptions,c);c.plotBands||(c.plotBands=[])},getOffset:function(){g.getOffset.call(this);this.chart.axisOffset[this.side]=0},getLinePath:function(c,b){c=this.center;var d=this.chart,f=h(b,c[2]/2-this.offset);this.isCircular||void 0!==b?b=this.chart.renderer.symbols.arc(this.left+c[0],this.top+c[1],f,f,{start:this.startAngleRad,end:this.endAngleRad,open:!0,innerR:0}):(b=this.postTranslate(this.angleRad,f),b=[\"M\",c[0]+d.plotLeft,c[1]+d.plotTop,\"L\",b.x,\nb.y]);return b},setAxisTranslation:function(){g.setAxisTranslation.call(this);this.center&&(this.transA=this.isCircular?(this.endAngleRad-this.startAngleRad)/(this.max-this.min||1):this.center[2]/2/(this.max-this.min||1),this.minPixelPadding=this.isXAxis?this.transA*this.minPointOffset:0)},beforeSetTickPositions:function(){if(this.autoConnect=this.isCircular&&void 0===h(this.userMax,this.options.max)&&this.endAngleRad-this.startAngleRad===2*Math.PI)this.max+=this.categories&&1||this.pointRange||this.closestPointRange||\n0},setAxisSize:function(){g.setAxisSize.call(this);this.isRadial&&(this.pane.updateCenter(this),this.isCircular&&(this.sector=this.endAngleRad-this.startAngleRad),this.len=this.width=this.height=this.center[2]*h(this.sector,1)/2)},getPosition:function(c,b){return this.postTranslate(this.isCircular?this.translate(c):this.angleRad,h(this.isCircular?b:this.translate(c),this.center[2]/2)-this.offset)},postTranslate:function(c,b){var d=this.chart,f=this.center;c=this.startAngleRad+c;return{x:d.plotLeft+\nf[0]+Math.cos(c)*b,y:d.plotTop+f[1]+Math.sin(c)*b}},getPlotBandPath:function(c,b,d){var f=this.center,n=this.startAngleRad,a=f[2]/2,e=[h(d.outerRadius,\"100%\"),d.innerRadius,h(d.thickness,10)],g=Math.min(this.offset,0),u=/%$/,k,m=this.isCircular;\"polygon\"===this.options.gridLineInterpolation?f=this.getPlotLinePath(c).concat(this.getPlotLinePath(b,!0)):(c=Math.max(c,this.min),b=Math.min(b,this.max),m||(e[0]=this.translate(c),e[1]=this.translate(b)),e=v(e,function(c){u.test(c)&&(c=t(c,10)*a/100);return c}),\n\"circle\"!==d.shape&&m?(c=n+this.translate(c),b=n+this.translate(b)):(c=-Math.PI/2,b=1.5*Math.PI,k=!0),e[0]-=g,e[2]-=g,f=this.chart.renderer.symbols.arc(this.left+f[0],this.top+f[1],e[0],e[0],{start:Math.min(c,b),end:Math.max(c,b),innerR:h(e[1],e[0]-e[2]),open:k}));return f},getPlotLinePath:function(c,b){var d=this,f=d.center,e=d.chart,a=d.getPosition(c),g,t,h;d.isCircular?h=[\"M\",f[0]+e.plotLeft,f[1]+e.plotTop,\"L\",a.x,a.y]:\"circle\"===d.options.gridLineInterpolation?(c=d.translate(c))&&(h=d.getLinePath(0,\nc)):(p(e.xAxis,function(c){c.pane===d.pane&&(g=c)}),h=[],c=d.translate(c),f=g.tickPositions,g.autoConnect&&(f=f.concat([f[0]])),b&&(f=[].concat(f).reverse()),p(f,function(b,d){t=g.getPosition(b,c);h.push(d?\"L\":\"M\",t.x,t.y)}));return h},getTitlePosition:function(){var c=this.center,b=this.chart,d=this.options.title;return{x:b.plotLeft+c[0]+(d.x||0),y:b.plotTop+c[1]-{high:.5,middle:.25,low:0}[d.align]*c[2]+(d.y||0)}}};b(g,\"init\",function(c,b,a){var f=b.angular,n=b.polar,g=a.isX,t=f&&g,x,k=b.options,\np=this.pane=b.pane[a.pane||0],z=p.options;if(f){if(r(this,t?d:e),x=!g)this.defaultRadialOptions=this.defaultRadialGaugeOptions}else n&&(r(this,e),this.defaultRadialOptions=(x=g)?this.defaultRadialXOptions:m(this.defaultYAxisOptions,this.defaultRadialYOptions));f||n?(this.isRadial=!0,b.inverted=!1,k.chart.zoomType=null):this.isRadial=!1;x&&(p.axis=this);c.call(this,b,a);t||!f&&!n||(c=this.options,this.angleRad=(c.angle||0)*Math.PI/180,this.startAngleRad=(z.startAngle-90)*Math.PI/180,this.endAngleRad=\n(h(z.endAngle,z.startAngle+360)-90)*Math.PI/180,this.offset=c.offset||0,this.isCircular=x)});b(g,\"autoLabelAlign\",function(b){if(!this.isRadial)return b.apply(this,[].slice.call(arguments,1))});b(a,\"getPosition\",function(b,d,e,a,l){var c=this.axis;return c.getPosition?c.getPosition(e):b.call(this,d,e,a,l)});b(a,\"getLabelPosition\",function(b,d,e,a,l,g,t,k,u){var c=this.axis,f=g.y,n=20,q=g.align,w=(c.translate(this.pos)+c.startAngleRad+Math.PI/2)/Math.PI*180%360;c.isRadial?(b=c.getPosition(this.pos,\nc.center[2]/2+h(g.distance,-25)),\"auto\"===g.rotation?a.attr({rotation:w}):null===f&&(f=c.chart.renderer.fontMetrics(a.styles.fontSize).b-a.getBBox().height/2),null===q&&(c.isCircular?(this.label.getBBox().width>c.len*c.tickInterval/(c.max-c.min)&&(n=0),q=w>n&&w<180-n?\"left\":w>180+n&&w<360-n?\"right\":\"center\"):q=\"center\",a.attr({align:q})),b.x+=g.x,b.y+=f):b=b.call(this,d,e,a,l,g,t,k,u);return b});b(a,\"getMarkPath\",function(b,d,e,a,l,g,t){var c=this.axis;c.isRadial?(b=c.getPosition(this.pos,c.center[2]/\n2+a),d=[\"M\",d,e,\"L\",b.x,b.y]):d=b.call(this,d,e,a,l,g,t);return d})})(y);(function(a){var p=a.each,r=a.noop,v=a.pick,m=a.Series,k=a.seriesType,h=a.seriesTypes;k(\"arearange\",\"area\",{lineWidth:1,marker:null,threshold:null,tooltip:{pointFormat:'\\x3cspan style\\x3d\"color:{series.color}\"\\x3e\\u25cf\\x3c/span\\x3e {series.name}: \\x3cb\\x3e{point.low}\\x3c/b\\x3e - \\x3cb\\x3e{point.high}\\x3c/b\\x3e\\x3cbr/\\x3e'},trackByArea:!0,dataLabels:{align:null,verticalAlign:null,xLow:0,xHigh:0,yLow:0,yHigh:0},states:{hover:{halo:!1}}},\n{pointArrayMap:[\"low\",\"high\"],dataLabelCollections:[\"dataLabel\",\"dataLabelUpper\"],toYData:function(a){return[a.low,a.high]},pointValKey:\"low\",deferTranslatePolar:!0,highToXY:function(a){var b=this.chart,d=this.xAxis.postTranslate(a.rectPlotX,this.yAxis.len-a.plotHigh);a.plotHighX=d.x-b.plotLeft;a.plotHigh=d.y-b.plotTop},translate:function(){var a=this,b=a.yAxis,d=!!a.modifyValue;h.area.prototype.translate.apply(a);p(a.points,function(e){var g=e.low,c=e.high,f=e.plotY;null===c||null===g?e.isNull=!0:\n(e.plotLow=f,e.plotHigh=b.translate(d?a.modifyValue(c,e):c,0,1,0,1),d&&(e.yBottom=e.plotHigh))});this.chart.polar&&p(this.points,function(b){a.highToXY(b)})},getGraphPath:function(a){var b=[],d=[],e,g=h.area.prototype.getGraphPath,c,f,n;n=this.options;var w=this.chart.polar&&!1!==n.connectEnds,l=n.step;a=a||this.points;for(e=a.length;e--;)c=a[e],c.isNull||w||a[e+1]&&!a[e+1].isNull||d.push({plotX:c.plotX,plotY:c.plotY,doCurve:!1}),f={polarPlotY:c.polarPlotY,rectPlotX:c.rectPlotX,yBottom:c.yBottom,\nplotX:v(c.plotHighX,c.plotX),plotY:c.plotHigh,isNull:c.isNull},d.push(f),b.push(f),c.isNull||w||a[e-1]&&!a[e-1].isNull||d.push({plotX:c.plotX,plotY:c.plotY,doCurve:!1});a=g.call(this,a);l&&(!0===l&&(l=\"left\"),n.step={left:\"right\",center:\"center\",right:\"left\"}[l]);b=g.call(this,b);d=g.call(this,d);n.step=l;n=[].concat(a,b);this.chart.polar||\"M\"!==d[0]||(d[0]=\"L\");this.graphPath=n;this.areaPath=this.areaPath.concat(a,d);n.isArea=!0;n.xMap=a.xMap;this.areaPath.xMap=a.xMap;return n},drawDataLabels:function(){var a=\nthis.data,b=a.length,d,e=[],g=m.prototype,c=this.options.dataLabels,f=c.align,n=c.verticalAlign,w=c.inside,l,q,h=this.chart.inverted;if(c.enabled||this._hasPointLabels){for(d=b;d--;)if(l=a[d])q=w?l.plotHigh<l.plotLow:l.plotHigh>l.plotLow,l.y=l.high,l._plotY=l.plotY,l.plotY=l.plotHigh,e[d]=l.dataLabel,l.dataLabel=l.dataLabelUpper,l.below=q,h?f||(c.align=q?\"right\":\"left\"):n||(c.verticalAlign=q?\"top\":\"bottom\"),c.x=c.xHigh,c.y=c.yHigh;g.drawDataLabels&&g.drawDataLabels.apply(this,arguments);for(d=b;d--;)if(l=\na[d])q=w?l.plotHigh<l.plotLow:l.plotHigh>l.plotLow,l.dataLabelUpper=l.dataLabel,l.dataLabel=e[d],l.y=l.low,l.plotY=l._plotY,l.below=!q,h?f||(c.align=q?\"left\":\"right\"):n||(c.verticalAlign=q?\"bottom\":\"top\"),c.x=c.xLow,c.y=c.yLow;g.drawDataLabels&&g.drawDataLabels.apply(this,arguments)}c.align=f;c.verticalAlign=n},alignDataLabel:function(){h.column.prototype.alignDataLabel.apply(this,arguments)},setStackedPoints:r,getSymbol:r,drawPoints:r})})(y);(function(a){var p=a.seriesType;p(\"areasplinerange\",\"arearange\",\nnull,{getPointSpline:a.seriesTypes.spline.prototype.getPointSpline})})(y);(function(a){var p=a.defaultPlotOptions,r=a.each,v=a.merge,m=a.noop,k=a.pick,h=a.seriesType,t=a.seriesTypes.column.prototype;h(\"columnrange\",\"arearange\",v(p.column,p.arearange,{lineWidth:1,pointRange:null}),{translate:function(){var b=this,d=b.yAxis,a=b.xAxis,g=a.startAngleRad,c,f=b.chart,n=b.xAxis.isRadial,w;t.translate.apply(b);r(b.points,function(e){var l=e.shapeArgs,h=b.options.minPointLength,x,u;e.plotHigh=w=d.translate(e.high,\n0,1,0,1);e.plotLow=e.plotY;u=w;x=k(e.rectPlotY,e.plotY)-w;Math.abs(x)<h?(h-=x,x+=h,u-=h/2):0>x&&(x*=-1,u-=x);n?(c=e.barX+g,e.shapeType=\"path\",e.shapeArgs={d:b.polarArc(u+x,u,c,c+e.pointWidth)}):(l.height=x,l.y=u,e.tooltipPos=f.inverted?[d.len+d.pos-f.plotLeft-u-x/2,a.len+a.pos-f.plotTop-l.x-l.width/2,x]:[a.left-f.plotLeft+l.x+l.width/2,d.pos-f.plotTop+u+x/2,x])})},directTouch:!0,trackerGroups:[\"group\",\"dataLabelsGroup\"],drawGraph:m,crispCol:t.crispCol,drawPoints:t.drawPoints,drawTracker:t.drawTracker,\ngetColumnMetrics:t.getColumnMetrics,animate:function(){return t.animate.apply(this,arguments)},polarArc:function(){return t.polarArc.apply(this,arguments)},pointAttribs:t.pointAttribs})})(y);(function(a){var p=a.each,r=a.isNumber,v=a.merge,m=a.pick,k=a.pInt,h=a.Series,t=a.seriesType,b=a.TrackerMixin;t(\"gauge\",\"line\",{dataLabels:{enabled:!0,defer:!1,y:15,borderRadius:3,crop:!1,verticalAlign:\"top\",zIndex:2,borderWidth:1,borderColor:\"#cccccc\"},dial:{},pivot:{},tooltip:{headerFormat:\"\"},showInLegend:!1},\n{angular:!0,directTouch:!0,drawGraph:a.noop,fixedBox:!0,forceDL:!0,noSharedTooltip:!0,trackerGroups:[\"group\",\"dataLabelsGroup\"],translate:function(){var b=this.yAxis,a=this.options,g=b.center;this.generatePoints();p(this.points,function(c){var d=v(a.dial,c.dial),e=k(m(d.radius,80))*g[2]/200,w=k(m(d.baseLength,70))*e/100,l=k(m(d.rearLength,10))*e/100,q=d.baseWidth||3,h=d.topWidth||1,x=a.overshoot,u=b.startAngleRad+b.translate(c.y,null,null,null,!0);r(x)?(x=x/180*Math.PI,u=Math.max(b.startAngleRad-\nx,Math.min(b.endAngleRad+x,u))):!1===a.wrap&&(u=Math.max(b.startAngleRad,Math.min(b.endAngleRad,u)));u=180*u/Math.PI;c.shapeType=\"path\";c.shapeArgs={d:d.path||[\"M\",-l,-q/2,\"L\",w,-q/2,e,-h/2,e,h/2,w,q/2,-l,q/2,\"z\"],translateX:g[0],translateY:g[1],rotation:u};c.plotX=g[0];c.plotY=g[1]})},drawPoints:function(){var b=this,a=b.yAxis.center,g=b.pivot,c=b.options,f=c.pivot,n=b.chart.renderer;p(b.points,function(d){var a=d.graphic,f=d.shapeArgs,e=f.d,g=v(c.dial,d.dial);a?(a.animate(f),f.d=e):(d.graphic=n[d.shapeType](f).attr({rotation:f.rotation,\nzIndex:1}).addClass(\"highcharts-dial\").add(b.group),d.graphic.attr({stroke:g.borderColor||\"none\",\"stroke-width\":g.borderWidth||0,fill:g.backgroundColor||\"#000000\"}))});g?g.animate({translateX:a[0],translateY:a[1]}):(b.pivot=n.circle(0,0,m(f.radius,5)).attr({zIndex:2}).addClass(\"highcharts-pivot\").translate(a[0],a[1]).add(b.group),b.pivot.attr({\"stroke-width\":f.borderWidth||0,stroke:f.borderColor||\"#cccccc\",fill:f.backgroundColor||\"#000000\"}))},animate:function(b){var d=this;b||(p(d.points,function(b){var c=\nb.graphic;c&&(c.attr({rotation:180*d.yAxis.startAngleRad/Math.PI}),c.animate({rotation:b.shapeArgs.rotation},d.options.animation))}),d.animate=null)},render:function(){this.group=this.plotGroup(\"group\",\"series\",this.visible?\"visible\":\"hidden\",this.options.zIndex,this.chart.seriesGroup);h.prototype.render.call(this);this.group.clip(this.chart.clipRect)},setData:function(b,a){h.prototype.setData.call(this,b,!1);this.processData();this.generatePoints();m(a,!0)&&this.chart.redraw()},drawTracker:b&&b.drawTrackerPoint},\n{setState:function(b){this.state=b}})})(y);(function(a){var p=a.each,r=a.noop,v=a.pick,m=a.seriesType,k=a.seriesTypes;m(\"boxplot\",\"column\",{threshold:null,tooltip:{pointFormat:'\\x3cspan style\\x3d\"color:{point.color}\"\\x3e\\u25cf\\x3c/span\\x3e \\x3cb\\x3e {series.name}\\x3c/b\\x3e\\x3cbr/\\x3eMaximum: {point.high}\\x3cbr/\\x3eUpper quartile: {point.q3}\\x3cbr/\\x3eMedian: {point.median}\\x3cbr/\\x3eLower quartile: {point.q1}\\x3cbr/\\x3eMinimum: {point.low}\\x3cbr/\\x3e'},whiskerLength:\"50%\",fillColor:\"#ffffff\",lineWidth:1,\nmedianWidth:2,states:{hover:{brightness:-.3}},whiskerWidth:2},{pointArrayMap:[\"low\",\"q1\",\"median\",\"q3\",\"high\"],toYData:function(a){return[a.low,a.q1,a.median,a.q3,a.high]},pointValKey:\"high\",pointAttribs:function(a){var h=this.options,b=a&&a.color||this.color;return{fill:a.fillColor||h.fillColor||b,stroke:h.lineColor||b,\"stroke-width\":h.lineWidth||0}},drawDataLabels:r,translate:function(){var a=this.yAxis,m=this.pointArrayMap;k.column.prototype.translate.apply(this);p(this.points,function(b){p(m,\nfunction(d){null!==b[d]&&(b[d+\"Plot\"]=a.translate(b[d],0,1,0,1))})})},drawPoints:function(){var a=this,k=a.options,b=a.chart.renderer,d,e,g,c,f,n,w=0,l,q,m,x,u=!1!==a.doQuartiles,r,z=a.options.whiskerLength;p(a.points,function(h){var A=h.graphic,p=A?\"animate\":\"attr\",t=h.shapeArgs,y={},D={},H={},I=h.color||a.color;void 0!==h.plotY&&(l=t.width,q=Math.floor(t.x),m=q+l,x=Math.round(l/2),d=Math.floor(u?h.q1Plot:h.lowPlot),e=Math.floor(u?h.q3Plot:h.lowPlot),g=Math.floor(h.highPlot),c=Math.floor(h.lowPlot),\nA||(h.graphic=A=b.g(\"point\").add(a.group),h.stem=b.path().addClass(\"highcharts-boxplot-stem\").add(A),z&&(h.whiskers=b.path().addClass(\"highcharts-boxplot-whisker\").add(A)),u&&(h.box=b.path(void 0).addClass(\"highcharts-boxplot-box\").add(A)),h.medianShape=b.path(void 0).addClass(\"highcharts-boxplot-median\").add(A)),y.stroke=h.stemColor||k.stemColor||I,y[\"stroke-width\"]=v(h.stemWidth,k.stemWidth,k.lineWidth),y.dashstyle=h.stemDashStyle||k.stemDashStyle,h.stem.attr(y),z&&(D.stroke=h.whiskerColor||k.whiskerColor||\nI,D[\"stroke-width\"]=v(h.whiskerWidth,k.whiskerWidth,k.lineWidth),h.whiskers.attr(D)),u&&(A=a.pointAttribs(h),h.box.attr(A)),H.stroke=h.medianColor||k.medianColor||I,H[\"stroke-width\"]=v(h.medianWidth,k.medianWidth,k.lineWidth),h.medianShape.attr(H),n=h.stem.strokeWidth()%2/2,w=q+x+n,h.stem[p]({d:[\"M\",w,e,\"L\",w,g,\"M\",w,d,\"L\",w,c]}),u&&(n=h.box.strokeWidth()%2/2,d=Math.floor(d)+n,e=Math.floor(e)+n,q+=n,m+=n,h.box[p]({d:[\"M\",q,e,\"L\",q,d,\"L\",m,d,\"L\",m,e,\"L\",q,e,\"z\"]})),z&&(n=h.whiskers.strokeWidth()%2/\n2,g+=n,c+=n,r=/%$/.test(z)?x*parseFloat(z)/100:z/2,h.whiskers[p]({d:[\"M\",w-r,g,\"L\",w+r,g,\"M\",w-r,c,\"L\",w+r,c]})),f=Math.round(h.medianPlot),n=h.medianShape.strokeWidth()%2/2,f+=n,h.medianShape[p]({d:[\"M\",q,f,\"L\",m,f]}))})},setStackedPoints:r})})(y);(function(a){var p=a.each,r=a.noop,v=a.seriesType,m=a.seriesTypes;v(\"errorbar\",\"boxplot\",{color:\"#000000\",grouping:!1,linkedTo:\":previous\",tooltip:{pointFormat:'\\x3cspan style\\x3d\"color:{point.color}\"\\x3e\\u25cf\\x3c/span\\x3e {series.name}: \\x3cb\\x3e{point.low}\\x3c/b\\x3e - \\x3cb\\x3e{point.high}\\x3c/b\\x3e\\x3cbr/\\x3e'},\nwhiskerWidth:null},{type:\"errorbar\",pointArrayMap:[\"low\",\"high\"],toYData:function(a){return[a.low,a.high]},pointValKey:\"high\",doQuartiles:!1,drawDataLabels:m.arearange?function(){var a=this.pointValKey;m.arearange.prototype.drawDataLabels.call(this);p(this.data,function(h){h.y=h[a]})}:r,getColumnMetrics:function(){return this.linkedParent&&this.linkedParent.columnMetrics||m.column.prototype.getColumnMetrics.call(this)}})})(y);(function(a){var p=a.correctFloat,r=a.isNumber,v=a.pick,m=a.Point,k=a.Series,\nh=a.seriesType,t=a.seriesTypes;h(\"waterfall\",\"column\",{dataLabels:{inside:!0},lineWidth:1,lineColor:\"#333333\",dashStyle:\"dot\",borderColor:\"#333333\",states:{hover:{lineWidthPlus:0}}},{pointValKey:\"y\",translate:function(){var b=this.options,a=this.yAxis,e,g,c,f,n,h,l,q,k,m,u=v(b.minPointLength,5),r=u/2,z=b.threshold,y=b.stacking,B;t.column.prototype.translate.apply(this);q=k=z;g=this.points;e=0;for(b=g.length;e<b;e++)c=g[e],l=this.processedYData[e],f=c.shapeArgs,n=y&&a.stacks[(this.negStacks&&l<z?\"-\":\n\"\")+this.stackKey],B=this.getStackIndicator(B,c.x,this.index),m=n?n[c.x].points[B.key]:[0,l],c.isSum?c.y=p(l):c.isIntermediateSum&&(c.y=p(l-k)),h=Math.max(q,q+c.y)+m[0],f.y=a.toPixels(h,!0),c.isSum?(f.y=a.toPixels(m[1],!0),f.height=Math.min(a.toPixels(m[0],!0),a.len)-f.y):c.isIntermediateSum?(f.y=a.toPixels(m[1],!0),f.height=Math.min(a.toPixels(k,!0),a.len)-f.y,k=m[1]):(f.height=0<l?a.toPixels(q,!0)-f.y:a.toPixels(q,!0)-a.toPixels(q-l,!0),q+=n&&n[c.x]?n[c.x].total:l),0>f.height&&(f.y+=f.height,f.height*=\n-1),c.plotY=f.y=Math.round(f.y)-this.borderWidth%2/2,f.height=Math.max(Math.round(f.height),.001),c.yBottom=f.y+f.height,f.height<=u&&!c.isNull?(f.height=u,f.y-=r,c.plotY=f.y,c.minPointLengthOffset=0>c.y?-r:r):c.minPointLengthOffset=0,f=c.plotY+(c.negative?f.height:0),this.chart.inverted?c.tooltipPos[0]=a.len-f:c.tooltipPos[1]=f},processData:function(b){var a=this.yData,e=this.options.data,g,c=a.length,f,n,h,l,q,m;n=f=h=l=this.options.threshold||0;for(m=0;m<c;m++)q=a[m],g=e&&e[m]?e[m]:{},\"sum\"===\nq||g.isSum?a[m]=p(n):\"intermediateSum\"===q||g.isIntermediateSum?a[m]=p(f):(n+=q,f+=q),h=Math.min(n,h),l=Math.max(n,l);k.prototype.processData.call(this,b);this.options.stacking||(this.dataMin=h,this.dataMax=l)},toYData:function(b){return b.isSum?0===b.x?null:\"sum\":b.isIntermediateSum?0===b.x?null:\"intermediateSum\":b.y},pointAttribs:function(b,a){var d=this.options.upColor;d&&!b.options.color&&(b.color=0<b.y?d:null);b=t.column.prototype.pointAttribs.call(this,b,a);delete b.dashstyle;return b},getGraphPath:function(){return[\"M\",\n0,0]},getCrispPath:function(){var b=this.data,a=b.length,e=this.graph.strokeWidth()+this.borderWidth,e=Math.round(e)%2/2,g=[],c,f,n;for(n=1;n<a;n++)f=b[n].shapeArgs,c=b[n-1].shapeArgs,f=[\"M\",c.x+c.width,c.y+b[n-1].minPointLengthOffset+e,\"L\",f.x,c.y+b[n-1].minPointLengthOffset+e],0>b[n-1].y&&(f[2]+=c.height,f[5]+=c.height),g=g.concat(f);return g},drawGraph:function(){k.prototype.drawGraph.call(this);this.graph.attr({d:this.getCrispPath()})},setStackedPoints:function(){var b=this.options,a,e;k.prototype.setStackedPoints.apply(this,\narguments);a=this.stackedYData?this.stackedYData.length:0;for(e=1;e<a;e++)b.data[e].isSum||b.data[e].isIntermediateSum||(this.stackedYData[e]+=this.stackedYData[e-1])},getExtremes:function(){if(this.options.stacking)return k.prototype.getExtremes.apply(this,arguments)}},{getClassName:function(){var b=m.prototype.getClassName.call(this);this.isSum?b+=\" highcharts-sum\":this.isIntermediateSum&&(b+=\" highcharts-intermediate-sum\");return b},isValid:function(){return r(this.y,!0)||this.isSum||this.isIntermediateSum}})})(y);\n(function(a){var p=a.Series,r=a.seriesType,v=a.seriesTypes;r(\"polygon\",\"scatter\",{marker:{enabled:!1,states:{hover:{enabled:!1}}},stickyTracking:!1,tooltip:{followPointer:!0,pointFormat:\"\"},trackByArea:!0},{type:\"polygon\",getGraphPath:function(){for(var a=p.prototype.getGraphPath.call(this),k=a.length+1;k--;)(k===a.length||\"M\"===a[k])&&0<k&&a.splice(k,0,\"z\");return this.areaPath=a},drawGraph:function(){this.options.fillColor=this.color;v.area.prototype.drawGraph.call(this)},drawLegendSymbol:a.LegendSymbolMixin.drawRectangle,\ndrawTracker:p.prototype.drawTracker,setStackedPoints:a.noop})})(y);(function(a){var p=a.arrayMax,r=a.arrayMin,v=a.Axis,m=a.color,k=a.each,h=a.isNumber,t=a.noop,b=a.pick,d=a.pInt,e=a.Point,g=a.Series,c=a.seriesType,f=a.seriesTypes;c(\"bubble\",\"scatter\",{dataLabels:{formatter:function(){return this.point.z},inside:!0,verticalAlign:\"middle\"},marker:{lineColor:null,lineWidth:1,radius:null,states:{hover:{radiusPlus:0}},symbol:\"circle\"},minSize:8,maxSize:\"20%\",softThreshold:!1,states:{hover:{halo:{size:5}}},\ntooltip:{pointFormat:\"({point.x}, {point.y}), Size: {point.z}\"},turboThreshold:0,zThreshold:0,zoneAxis:\"z\"},{pointArrayMap:[\"y\",\"z\"],parallelArrays:[\"x\",\"y\",\"z\"],trackerGroups:[\"markerGroup\",\"dataLabelsGroup\"],bubblePadding:!0,zoneAxis:\"z\",directTouch:!0,pointAttribs:function(a,c){var d=b(this.options.marker.fillOpacity,.5);a=g.prototype.pointAttribs.call(this,a,c);1!==d&&(a.fill=m(a.fill).setOpacity(d).get(\"rgba\"));return a},getRadii:function(b,a,c,d){var f,e,g,n=this.zData,h=[],l=this.options,q=\n\"width\"!==l.sizeBy,k=l.zThreshold,m=a-b;e=0;for(f=n.length;e<f;e++)g=n[e],l.sizeByAbsoluteValue&&null!==g&&(g=Math.abs(g-k),a=Math.max(a-k,Math.abs(b-k)),b=0),null===g?g=null:g<b?g=c/2-1:(g=0<m?(g-b)/m:.5,q&&0<=g&&(g=Math.sqrt(g)),g=Math.ceil(c+g*(d-c))/2),h.push(g);this.radii=h},animate:function(b){var a=this.options.animation;b||(k(this.points,function(b){var c=b.graphic,d;c&&c.width&&(d={x:c.x,y:c.y,width:c.width,height:c.height},c.attr({x:b.plotX,y:b.plotY,width:1,height:1}),c.animate(d,a))}),\nthis.animate=null)},translate:function(){var b,c=this.data,d,e,g=this.radii;f.scatter.prototype.translate.call(this);for(b=c.length;b--;)d=c[b],e=g?g[b]:0,h(e)&&e>=this.minPxSize/2?(d.marker=a.extend(d.marker,{radius:e,width:2*e,height:2*e}),d.dlBox={x:d.plotX-e,y:d.plotY-e,width:2*e,height:2*e}):d.shapeArgs=d.plotY=d.dlBox=void 0},alignDataLabel:f.column.prototype.alignDataLabel,buildKDTree:t,applyZones:t},{haloPath:function(b){return e.prototype.haloPath.call(this,0===b?0:(this.marker?this.marker.radius||\n0:0)+b)},ttBelow:!1});v.prototype.beforePadding=function(){var a=this,c=this.len,f=this.chart,e=0,g=c,m=this.isXAxis,t=m?\"xData\":\"yData\",v=this.min,y={},J=Math.min(f.plotWidth,f.plotHeight),B=Number.MAX_VALUE,E=-Number.MAX_VALUE,F=this.max-v,C=c/F,G=[];k(this.series,function(c){var e=c.options;!c.bubblePadding||!c.visible&&f.options.chart.ignoreHiddenSeries||(a.allowZoomOutside=!0,G.push(c),m&&(k([\"minSize\",\"maxSize\"],function(b){var a=e[b],c=/%$/.test(a),a=d(a);y[b]=c?J*a/100:a}),c.minPxSize=y.minSize,\nc.maxPxSize=Math.max(y.maxSize,y.minSize),c=c.zData,c.length&&(B=b(e.zMin,Math.min(B,Math.max(r(c),!1===e.displayNegative?e.zThreshold:-Number.MAX_VALUE))),E=b(e.zMax,Math.max(E,p(c))))))});k(G,function(b){var c=b[t],d=c.length,f;m&&b.getRadii(B,E,b.minPxSize,b.maxPxSize);if(0<F)for(;d--;)h(c[d])&&a.dataMin<=c[d]&&c[d]<=a.dataMax&&(f=b.radii[d],e=Math.min((c[d]-v)*C-f,e),g=Math.max((c[d]-v)*C+f,g))});G.length&&0<F&&!this.isLog&&(g-=c,C*=(c+e-g)/c,k([[\"min\",\"userMin\",e],[\"max\",\"userMax\",g]],function(c){void 0===\nb(a.options[c[0]],a[c[1]])&&(a[c[0]]+=c[2]/C)}))}})(y);(function(a){function p(b,a){var d=this.chart,g=this.options.animation,c=this.group,f=this.markerGroup,h=this.xAxis.center,k=d.plotLeft,l=d.plotTop;d.polar?d.renderer.isSVG&&(!0===g&&(g={}),a?(b={translateX:h[0]+k,translateY:h[1]+l,scaleX:.001,scaleY:.001},c.attr(b),f&&f.attr(b)):(b={translateX:k,translateY:l,scaleX:1,scaleY:1},c.animate(b,g),f&&f.animate(b,g),this.animate=null)):b.call(this,a)}var r=a.each,v=a.pick,m=a.seriesTypes,k=a.wrap,h=\na.Series.prototype,t=a.Pointer.prototype;h.searchPointByAngle=function(b){var a=this.chart,e=this.xAxis.pane.center;return this.searchKDTree({clientX:180+-180/Math.PI*Math.atan2(b.chartX-e[0]-a.plotLeft,b.chartY-e[1]-a.plotTop)})};h.getConnectors=function(b,a,e,g){var c,d,h,k,l,m,p,r;d=g?1:0;c=0<=a&&a<=b.length-1?a:0>a?b.length-1+a:0;a=0>c-1?b.length-(1+d):c-1;d=c+1>b.length-1?d:c+1;h=b[a];d=b[d];k=h.plotX;h=h.plotY;l=d.plotX;m=d.plotY;d=b[c].plotX;c=b[c].plotY;k=(1.5*d+k)/2.5;h=(1.5*c+h)/2.5;l=(1.5*\nd+l)/2.5;p=(1.5*c+m)/2.5;m=Math.sqrt(Math.pow(k-d,2)+Math.pow(h-c,2));r=Math.sqrt(Math.pow(l-d,2)+Math.pow(p-c,2));k=Math.atan2(h-c,k-d);p=Math.PI/2+(k+Math.atan2(p-c,l-d))/2;Math.abs(k-p)>Math.PI/2&&(p-=Math.PI);k=d+Math.cos(p)*m;h=c+Math.sin(p)*m;l=d+Math.cos(Math.PI+p)*r;p=c+Math.sin(Math.PI+p)*r;d={rightContX:l,rightContY:p,leftContX:k,leftContY:h,plotX:d,plotY:c};e&&(d.prevPointCont=this.getConnectors(b,a,!1,g));return d};k(h,\"buildKDTree\",function(b){this.chart.polar&&(this.kdByAngle?this.searchPoint=\nthis.searchPointByAngle:this.options.findNearestPointBy=\"xy\");b.apply(this)});h.toXY=function(b){var a,e=this.chart,g=b.plotX;a=b.plotY;b.rectPlotX=g;b.rectPlotY=a;a=this.xAxis.postTranslate(b.plotX,this.yAxis.len-a);b.plotX=b.polarPlotX=a.x-e.plotLeft;b.plotY=b.polarPlotY=a.y-e.plotTop;this.kdByAngle?(e=(g/Math.PI*180+this.xAxis.pane.options.startAngle)%360,0>e&&(e+=360),b.clientX=e):b.clientX=b.plotX};m.spline&&(k(m.spline.prototype,\"getPointSpline\",function(a,d,e,g){this.chart.polar?g?(a=this.getConnectors(d,\ng,!0,this.connectEnds),a=[\"C\",a.prevPointCont.rightContX,a.prevPointCont.rightContY,a.leftContX,a.leftContY,a.plotX,a.plotY]):a=[\"M\",e.plotX,e.plotY]:a=a.call(this,d,e,g);return a}),m.areasplinerange&&(m.areasplinerange.prototype.getPointSpline=m.spline.prototype.getPointSpline));k(h,\"translate\",function(a){var b=this.chart;a.call(this);if(b.polar&&(this.kdByAngle=b.tooltip&&b.tooltip.shared,!this.preventPostTranslate))for(a=this.points,b=a.length;b--;)this.toXY(a[b])});k(h,\"getGraphPath\",function(a,\nd){var b=this,g,c,f;if(this.chart.polar){d=d||this.points;for(g=0;g<d.length;g++)if(!d[g].isNull){c=g;break}!1!==this.options.connectEnds&&void 0!==c&&(this.connectEnds=!0,d.splice(d.length,0,d[c]),f=!0);r(d,function(a){void 0===a.polarPlotY&&b.toXY(a)})}g=a.apply(this,[].slice.call(arguments,1));f&&d.pop();return g});k(h,\"animate\",p);m.column&&(m=m.column.prototype,m.polarArc=function(a,d,e,g){var b=this.xAxis.center,f=this.yAxis.len;return this.chart.renderer.symbols.arc(b[0],b[1],f-d,null,{start:e,\nend:g,innerR:f-v(a,f)})},k(m,\"animate\",p),k(m,\"translate\",function(a){var b=this.xAxis,e=b.startAngleRad,g,c,f;this.preventPostTranslate=!0;a.call(this);if(b.isRadial)for(g=this.points,f=g.length;f--;)c=g[f],a=c.barX+e,c.shapeType=\"path\",c.shapeArgs={d:this.polarArc(c.yBottom,c.plotY,a,a+c.pointWidth)},this.toXY(c),c.tooltipPos=[c.plotX,c.plotY],c.ttBelow=c.plotY>b.center[1]}),k(m,\"alignDataLabel\",function(a,d,e,g,c,f){this.chart.polar?(a=d.rectPlotX/Math.PI*180,null===g.align&&(g.align=20<a&&160>\na?\"left\":200<a&&340>a?\"right\":\"center\"),null===g.verticalAlign&&(g.verticalAlign=45>a||315<a?\"bottom\":135<a&&225>a?\"top\":\"middle\"),h.alignDataLabel.call(this,d,e,g,c,f)):a.call(this,d,e,g,c,f)}));k(t,\"getCoordinates\",function(a,d){var b=this.chart,g={xAxis:[],yAxis:[]};b.polar?r(b.axes,function(a){var c=a.isXAxis,e=a.center,h=d.chartX-e[0]-b.plotLeft,e=d.chartY-e[1]-b.plotTop;g[c?\"xAxis\":\"yAxis\"].push({axis:a,value:a.translate(c?Math.PI-Math.atan2(h,e):Math.sqrt(Math.pow(h,2)+Math.pow(e,2)),!0)})}):\ng=a.call(this,d);return g});k(a.Chart.prototype,\"getAxes\",function(b){this.pane||(this.pane=[]);r(a.splat(this.options.pane),function(b){new a.Pane(b,this)},this);b.call(this)});k(a.Chart.prototype,\"drawChartBox\",function(a){a.call(this);r(this.pane,function(a){a.render()})});k(a.Chart.prototype,\"get\",function(b,d){return a.find(this.pane,function(a){return a.options.id===d})||b.call(this,d)})})(y)});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./atlas_bundles/baseline-expression/~/highcharts/highcharts-more.js\n// module id = 2712\n// module chunks = 2","var map = {\n\t\"./gsea_go-icon.png\": 2720,\n\t\"./gsea_interpro-icon.png\": 2721,\n\t\"./gsea_reactome-icon.png\": 2722,\n\t\"./ma-plot-icon.png\": 2723\n};\nfunction webpackContext(req) {\n\treturn __webpack_require__(webpackContextResolve(req));\n};\nfunction webpackContextResolve(req) {\n\treturn map[req] || (function() { throw new Error(\"Cannot find module '\" + req + \"'.\") }());\n};\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 2719;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./atlas_bundles/baseline-expression/~/expression-atlas-heatmap-highcharts/assets ^\\.\\/.*\\-icon\\.png$\n// module id = 2719\n// module chunks = 2","const Url = require('url');\nconst QueryString = require('querystring');\n\n/**\n * Stringify the `query` object, assign it to the `bs` search field in the URL and store it in the History\n * @param {object} querySelect\n * @param {boolean} replace - use `replaceState` instead of `pushState`\n */\nexports.baselinePush = function pushQueryIntoBrowserHistory(querySelect, replace) {\n    let currentUrlObject = Url.parse(window.location.toString());\n\n    let newUrlQueryParams = QueryString.parse(currentUrlObject.query);\n    newUrlQueryParams.bs = JSON.stringify(querySelect);\n\n    let newUrlObject = {\n        protocol: currentUrlObject.protocol,\n        host: currentUrlObject.host,\n        hash: currentUrlObject.hash,\n        pathname: currentUrlObject.pathname,\n        query: newUrlQueryParams\n    };\n\n    if (replace) {\n        history.replaceState(null, '', Url.format(newUrlObject));\n    } else {\n        history.pushState(null, '', Url.format(newUrlObject));\n    }\n};\n\nexports.parseBaselineUrlParameter = function getQuerySelectFromLocation(location = window.location) {\n    let currentURL = Url.parse(location.toString());\n    let differentialSelectParam = QueryString.parse(currentURL.query).bs;\n    return differentialSelectParam ? JSON.parse(differentialSelectParam) : {};\n};\n\n\n// WEBPACK FOOTER //\n// ./atlas_bundles/baseline-expression/src/urlManager.js"],"sourceRoot":""}