var expressionAtlasHeatmap =
webpackJsonp_name_([7],{

/***/ 0:
/*!************************************!*\
  !*** multi expressionAtlasHeatmap ***!
  \************************************/
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(/*! babel-polyfill */524);
	__webpack_require__(/*! whatwg-fetch */1356);
	module.exports = __webpack_require__(/*! ./atlas_bundles/heatmap */6190);


/***/ },

/***/ 2919:
/*!************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/react.js ***!
  \************************************************/
[7161, 2920],

/***/ 2920:
/*!****************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/React.js ***!
  \****************************************************/
[7162, 2921, 2922, 2934, 2937, 2938, 2943, 2926, 2948, 2949, 2950, 2928, 2944],

/***/ 2921:
/*!********************************************************!*\
  !*** ./atlas_bundles/heatmap/~/object-assign/index.js ***!
  \********************************************************/
5,

/***/ 2922:
/*!************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/ReactChildren.js ***!
  \************************************************************/
[7163, 2923, 2926, 2929, 2931],

/***/ 2923:
/*!**********************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/PooledClass.js ***!
  \**********************************************************/
[7164, 2924, 2925],

/***/ 2924:
/*!*****************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/reactProdInvariant.js ***!
  \*****************************************************************/
8,

/***/ 2925:
/*!*******************************************************!*\
  !*** ./atlas_bundles/heatmap/~/fbjs/lib/invariant.js ***!
  \*******************************************************/
9,

/***/ 2926:
/*!***********************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/ReactElement.js ***!
  \***********************************************************/
[7165, 2921, 2927, 2928, 2930],

/***/ 2927:
/*!****************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/ReactCurrentOwner.js ***!
  \****************************************************************/
11,

/***/ 2928:
/*!*****************************************************!*\
  !*** ./atlas_bundles/heatmap/~/fbjs/lib/warning.js ***!
  \*****************************************************/
[7166, 2929],

/***/ 2929:
/*!***********************************************************!*\
  !*** ./atlas_bundles/heatmap/~/fbjs/lib/emptyFunction.js ***!
  \***********************************************************/
13,

/***/ 2930:
/*!****************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/canDefineProperty.js ***!
  \****************************************************************/
14,

/***/ 2931:
/*!******************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/traverseAllChildren.js ***!
  \******************************************************************/
[7167, 2924, 2927, 2926, 2932, 2925, 2933, 2928],

/***/ 2932:
/*!************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/getIteratorFn.js ***!
  \************************************************************/
16,

/***/ 2933:
/*!*************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/KeyEscapeUtils.js ***!
  \*************************************************************/
17,

/***/ 2934:
/*!*************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/ReactComponent.js ***!
  \*************************************************************/
[7168, 2924, 2935, 2930, 2936, 2925, 2928],

/***/ 2935:
/*!*******************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/ReactNoopUpdateQueue.js ***!
  \*******************************************************************/
[7169, 2928],

/***/ 2936:
/*!*********************************************************!*\
  !*** ./atlas_bundles/heatmap/~/fbjs/lib/emptyObject.js ***!
  \*********************************************************/
20,

/***/ 2937:
/*!*****************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/ReactPureComponent.js ***!
  \*****************************************************************/
[7170, 2921, 2934, 2935, 2936],

/***/ 2938:
/*!*********************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/ReactClass.js ***!
  \*********************************************************/
[7171, 2924, 2921, 2934, 2926, 2939, 2941, 2935, 2936, 2925, 2940, 2942, 2928],

/***/ 2939:
/*!*********************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/ReactPropTypeLocations.js ***!
  \*********************************************************************/
[7172, 2940],

/***/ 2940:
/*!*******************************************************!*\
  !*** ./atlas_bundles/heatmap/~/fbjs/lib/keyMirror.js ***!
  \*******************************************************/
[7173, 2925],

/***/ 2941:
/*!*************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/ReactPropTypeLocationNames.js ***!
  \*************************************************************************/
25,

/***/ 2942:
/*!***************************************************!*\
  !*** ./atlas_bundles/heatmap/~/fbjs/lib/keyOf.js ***!
  \***************************************************/
26,

/***/ 2943:
/*!****************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/ReactDOMFactories.js ***!
  \****************************************************************/
[7174, 2926, 2944],

/***/ 2944:
/*!********************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/ReactElementValidator.js ***!
  \********************************************************************/
[7175, 2927, 2945, 2926, 2939, 2946, 2930, 2932, 2928],

/***/ 2945:
/*!*********************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/ReactComponentTreeHook.js ***!
  \*********************************************************************/
[7176, 2924, 2927, 2925, 2928],

/***/ 2946:
/*!*****************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/checkReactTypeSpec.js ***!
  \*****************************************************************/
[7177, 2924, 2941, 2947, 2925, 2928, 2945, 2945],

/***/ 2947:
/*!*******************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/ReactPropTypesSecret.js ***!
  \*******************************************************************/
32,

/***/ 2948:
/*!*************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/ReactPropTypes.js ***!
  \*************************************************************/
[7178, 2926, 2941, 2947, 2929, 2932, 2928],

/***/ 2949:
/*!***********************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/ReactVersion.js ***!
  \***********************************************************/
34,

/***/ 2950:
/*!********************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/onlyChild.js ***!
  \********************************************************/
[7179, 2924, 2926, 2925],

/***/ 2951:
/*!****************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react-dom/index.js ***!
  \****************************************************/
[7182, 2952],

/***/ 2952:
/*!*******************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/ReactDOM.js ***!
  \*******************************************************/
[7183, 2953, 2956, 3079, 2976, 2973, 2949, 3084, 3085, 3086, 2928, 2966, 2979, 3087, 3088],

/***/ 2953:
/*!********************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/ReactDOMComponentTree.js ***!
  \********************************************************************/
[7184, 2924, 2954, 2955, 2925],

/***/ 2954:
/*!**********************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/DOMProperty.js ***!
  \**********************************************************/
[7185, 2924, 2925],

/***/ 2955:
/*!*********************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/ReactDOMComponentFlags.js ***!
  \*********************************************************************/
42,

/***/ 2956:
/*!********************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/ReactDefaultInjection.js ***!
  \********************************************************************/
[7186, 2957, 2972, 2990, 2991, 2996, 2997, 3011, 2953, 3050, 3051, 3052, 3053, 3054, 3057, 3058, 3066, 3067, 3068],

/***/ 2957:
/*!*********************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/BeforeInputEventPlugin.js ***!
  \*********************************************************************/
[7187, 2958, 2959, 2966, 2967, 2969, 2971, 2942],

/***/ 2958:
/*!*************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/EventConstants.js ***!
  \*************************************************************/
[7188, 2940],

/***/ 2959:
/*!***************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/EventPropagators.js ***!
  \***************************************************************/
[7189, 2958, 2960, 2962, 2964, 2965, 2928],

/***/ 2960:
/*!*************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/EventPluginHub.js ***!
  \*************************************************************/
[7190, 2924, 2961, 2962, 2963, 2964, 2965, 2925],

/***/ 2961:
/*!******************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/EventPluginRegistry.js ***!
  \******************************************************************/
[7191, 2924, 2925],

/***/ 2962:
/*!***************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/EventPluginUtils.js ***!
  \***************************************************************/
[7192, 2924, 2958, 2963, 2925, 2928],

/***/ 2963:
/*!**************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/ReactErrorUtils.js ***!
  \**************************************************************/
50,

/***/ 2964:
/*!*************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/accumulateInto.js ***!
  \*************************************************************/
[7193, 2924, 2925],

/***/ 2965:
/*!*****************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/forEachAccumulated.js ***!
  \*****************************************************************/
52,

/***/ 2966:
/*!******************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/fbjs/lib/ExecutionEnvironment.js ***!
  \******************************************************************/
53,

/***/ 2967:
/*!***********************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/FallbackCompositionState.js ***!
  \***********************************************************************/
[7194, 2921, 2923, 2968],

/***/ 2968:
/*!*********************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/getTextContentAccessor.js ***!
  \*********************************************************************/
[7195, 2966],

/***/ 2969:
/*!************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/SyntheticCompositionEvent.js ***!
  \************************************************************************/
[7196, 2970],

/***/ 2970:
/*!*************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/SyntheticEvent.js ***!
  \*************************************************************/
[7197, 2921, 2923, 2929, 2928],

/***/ 2971:
/*!******************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/SyntheticInputEvent.js ***!
  \******************************************************************/
[7198, 2970],

/***/ 2972:
/*!****************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/ChangeEventPlugin.js ***!
  \****************************************************************/
[7199, 2958, 2960, 2959, 2966, 2953, 2973, 2970, 2987, 2988, 2989, 2942],

/***/ 2973:
/*!***********************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/ReactUpdates.js ***!
  \***********************************************************/
[7200, 2924, 2921, 2974, 2923, 2975, 2976, 2986, 2925],

/***/ 2974:
/*!************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/CallbackQueue.js ***!
  \************************************************************/
[7201, 2924, 2921, 2923, 2925],

/***/ 2975:
/*!****************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/ReactFeatureFlags.js ***!
  \****************************************************************/
62,

/***/ 2976:
/*!**************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/ReactReconciler.js ***!
  \**************************************************************/
[7202, 2977, 2979, 2928],

/***/ 2977:
/*!*******************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/ReactRef.js ***!
  \*******************************************************/
[7203, 2978],

/***/ 2978:
/*!*********************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/ReactOwner.js ***!
  \*********************************************************/
[7204, 2924, 2925],

/***/ 2979:
/*!*******************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/ReactInstrumentation.js ***!
  \*******************************************************************/
[7205, 2980],

/***/ 2980:
/*!*************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/ReactDebugTool.js ***!
  \*************************************************************/
[7206, 2981, 2982, 2945, 2983, 2966, 2984, 2928],

/***/ 2981:
/*!******************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/ReactInvalidSetStateWarningHook.js ***!
  \******************************************************************************/
[7207, 2928],

/***/ 2982:
/*!****************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/ReactHostOperationHistoryHook.js ***!
  \****************************************************************************/
69,

/***/ 2983:
/*!*******************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/ReactChildrenMutationWarningHook.js ***!
  \*******************************************************************************/
[7208, 2945, 2928],

/***/ 2984:
/*!************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/fbjs/lib/performanceNow.js ***!
  \************************************************************/
[7209, 2985],

/***/ 2985:
/*!*********************************************************!*\
  !*** ./atlas_bundles/heatmap/~/fbjs/lib/performance.js ***!
  \*********************************************************/
[7210, 2966],

/***/ 2986:
/*!**********************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/Transaction.js ***!
  \**********************************************************/
[7211, 2924, 2925],

/***/ 2987:
/*!*************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/getEventTarget.js ***!
  \*************************************************************/
74,

/***/ 2988:
/*!***************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/isEventSupported.js ***!
  \***************************************************************/
[7212, 2966],

/***/ 2989:
/*!*****************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/isTextInputElement.js ***!
  \*****************************************************************/
76,

/***/ 2990:
/*!**********************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/DefaultEventPluginOrder.js ***!
  \**********************************************************************/
[7213, 2942],

/***/ 2991:
/*!********************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/EnterLeaveEventPlugin.js ***!
  \********************************************************************/
[7214, 2958, 2959, 2953, 2992, 2942],

/***/ 2992:
/*!******************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/SyntheticMouseEvent.js ***!
  \******************************************************************/
[7215, 2993, 2994, 2995],

/***/ 2993:
/*!***************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/SyntheticUIEvent.js ***!
  \***************************************************************/
[7216, 2970, 2987],

/***/ 2994:
/*!**************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/ViewportMetrics.js ***!
  \**************************************************************/
81,

/***/ 2995:
/*!********************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/getEventModifierState.js ***!
  \********************************************************************/
82,

/***/ 2996:
/*!********************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/HTMLDOMPropertyConfig.js ***!
  \********************************************************************/
[7217, 2954],

/***/ 2997:
/*!*******************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/ReactComponentBrowserEnvironment.js ***!
  \*******************************************************************************/
[7218, 2998, 3010],

/***/ 2998:
/*!********************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/DOMChildrenOperations.js ***!
  \********************************************************************/
[7219, 2999, 3005, 3009, 2953, 2979, 3002, 3001, 3003],

/***/ 2999:
/*!**********************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/DOMLazyTree.js ***!
  \**********************************************************/
[7220, 3000, 3001, 3002, 3003],

/***/ 3000:
/*!************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/DOMNamespaces.js ***!
  \************************************************************/
87,

/***/ 3001:
/*!***********************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/setInnerHTML.js ***!
  \***********************************************************/
[7221, 2966, 3000, 3002],

/***/ 3002:
/*!*********************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/createMicrosoftUnsafeLocalFunction.js ***!
  \*********************************************************************************/
89,

/***/ 3003:
/*!*************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/setTextContent.js ***!
  \*************************************************************/
[7222, 2966, 3004, 3001],

/***/ 3004:
/*!**************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/escapeTextContentForBrowser.js ***!
  \**************************************************************************/
91,

/***/ 3005:
/*!*****************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/Danger.js ***!
  \*****************************************************/
[7223, 2924, 2999, 2966, 3006, 2929, 2925],

/***/ 3006:
/*!*******************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/fbjs/lib/createNodesFromMarkup.js ***!
  \*******************************************************************/
[7224, 2966, 3007, 3008, 2925],

/***/ 3007:
/*!******************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/fbjs/lib/createArrayFromMixed.js ***!
  \******************************************************************/
[7225, 2925],

/***/ 3008:
/*!***********************************************************!*\
  !*** ./atlas_bundles/heatmap/~/fbjs/lib/getMarkupWrap.js ***!
  \***********************************************************/
[7226, 2966, 2925],

/***/ 3009:
/*!*************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/ReactMultiChildUpdateTypes.js ***!
  \*************************************************************************/
[7227, 2940],

/***/ 3010:
/*!*******************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/ReactDOMIDOperations.js ***!
  \*******************************************************************/
[7228, 2998, 2953],

/***/ 3011:
/*!****************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/ReactDOMComponent.js ***!
  \****************************************************************/
[7229, 2924, 2921, 3012, 3014, 2999, 3000, 2954, 3022, 2958, 2960, 2961, 3024, 3027, 2955, 2953, 3029, 3031, 3032, 3033, 2979, 3034, 3046, 2929, 3004, 2925, 2988, 2942, 3041, 3049, 2928],

/***/ 3012:
/*!*************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/AutoFocusUtils.js ***!
  \*************************************************************/
[7230, 2953, 3013],

/***/ 3013:
/*!*******************************************************!*\
  !*** ./atlas_bundles/heatmap/~/fbjs/lib/focusNode.js ***!
  \*******************************************************/
100,

/***/ 3014:
/*!********************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/CSSPropertyOperations.js ***!
  \********************************************************************/
[7231, 3015, 2966, 2979, 3016, 3018, 3019, 3021, 2928],

/***/ 3015:
/*!**********************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/CSSProperty.js ***!
  \**********************************************************/
102,

/***/ 3016:
/*!***************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/fbjs/lib/camelizeStyleName.js ***!
  \***************************************************************/
[7232, 3017],

/***/ 3017:
/*!******************************************************!*\
  !*** ./atlas_bundles/heatmap/~/fbjs/lib/camelize.js ***!
  \******************************************************/
104,

/***/ 3018:
/*!******************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/dangerousStyleValue.js ***!
  \******************************************************************/
[7233, 3015, 2928],

/***/ 3019:
/*!****************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/fbjs/lib/hyphenateStyleName.js ***!
  \****************************************************************/
[7234, 3020],

/***/ 3020:
/*!*******************************************************!*\
  !*** ./atlas_bundles/heatmap/~/fbjs/lib/hyphenate.js ***!
  \*******************************************************/
107,

/***/ 3021:
/*!***************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/fbjs/lib/memoizeStringOnly.js ***!
  \***************************************************************/
108,

/***/ 3022:
/*!********************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/DOMPropertyOperations.js ***!
  \********************************************************************/
[7235, 2954, 2953, 2979, 3023, 2928],

/***/ 3023:
/*!****************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/quoteAttributeValueForBrowser.js ***!
  \****************************************************************************/
[7236, 3004],

/***/ 3024:
/*!***********************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/ReactBrowserEventEmitter.js ***!
  \***********************************************************************/
[7237, 2921, 2958, 2961, 3025, 2994, 3026, 2988],

/***/ 3025:
/*!*********************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/ReactEventEmitterMixin.js ***!
  \*********************************************************************/
[7238, 2960],

/***/ 3026:
/*!*************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/getVendorPrefixedEventName.js ***!
  \*************************************************************************/
[7239, 2966],

/***/ 3027:
/*!*************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/ReactDOMButton.js ***!
  \*************************************************************/
[7240, 3028],

/***/ 3028:
/*!*****************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/DisabledInputUtils.js ***!
  \*****************************************************************/
115,

/***/ 3029:
/*!************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/ReactDOMInput.js ***!
  \************************************************************/
[7241, 2924, 2921, 3028, 3022, 3030, 2953, 2973, 2925, 2928],

/***/ 3030:
/*!***************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/LinkedValueUtils.js ***!
  \***************************************************************/
[7242, 2924, 2948, 2939, 2947, 2925, 2928],

/***/ 3031:
/*!*************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/ReactDOMOption.js ***!
  \*************************************************************/
[7243, 2921, 2922, 2953, 3032, 2928],

/***/ 3032:
/*!*************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/ReactDOMSelect.js ***!
  \*************************************************************/
[7244, 2921, 3028, 3030, 2953, 2973, 2928],

/***/ 3033:
/*!***************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/ReactDOMTextarea.js ***!
  \***************************************************************/
[7245, 2924, 2921, 3028, 3030, 2953, 2973, 2925, 2928],

/***/ 3034:
/*!**************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/ReactMultiChild.js ***!
  \**************************************************************/
[7246, 2924, 3035, 3036, 2979, 3009, 2927, 2976, 3037, 2929, 3045, 2925],

/***/ 3035:
/*!************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/ReactComponentEnvironment.js ***!
  \************************************************************************/
[7247, 2924, 2925],

/***/ 3036:
/*!***************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/ReactInstanceMap.js ***!
  \***************************************************************/
123,

/***/ 3037:
/*!*******************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/ReactChildReconciler.js ***!
  \*******************************************************************/
[7248, 2976, 3038, 2933, 3042, 2931, 2928, 2945, 2945],

/***/ 3038:
/*!************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/instantiateReactComponent.js ***!
  \************************************************************************/
[7249, 2924, 2921, 3039, 3043, 3044, 2925, 2928],

/***/ 3039:
/*!**********************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/ReactCompositeComponent.js ***!
  \**********************************************************************/
[7250, 2924, 2921, 3035, 2927, 2926, 2963, 3036, 2979, 3040, 2939, 2976, 2946, 2936, 2925, 3041, 3042, 2928],

/***/ 3040:
/*!*************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/ReactNodeTypes.js ***!
  \*************************************************************/
[7251, 2924, 2926, 2925],

/***/ 3041:
/*!**********************************************************!*\
  !*** ./atlas_bundles/heatmap/~/fbjs/lib/shallowEqual.js ***!
  \**********************************************************/
128,

/***/ 3042:
/*!*************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/shouldUpdateReactComponent.js ***!
  \*************************************************************************/
129,

/***/ 3043:
/*!******************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/ReactEmptyComponent.js ***!
  \******************************************************************/
130,

/***/ 3044:
/*!*****************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/ReactHostComponent.js ***!
  \*****************************************************************/
[7252, 2924, 2921, 2925],

/***/ 3045:
/*!**************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/flattenChildren.js ***!
  \**************************************************************/
[7253, 2933, 2931, 2928, 2945, 2945],

/***/ 3046:
/*!******************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/ReactServerRenderingTransaction.js ***!
  \******************************************************************************/
[7254, 2921, 2923, 2986, 2979, 3047],

/***/ 3047:
/*!*********************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/ReactServerUpdateQueue.js ***!
  \*********************************************************************/
[7255, 3048, 2986, 2928],

/***/ 3048:
/*!***************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/ReactUpdateQueue.js ***!
  \***************************************************************/
[7256, 2924, 2927, 3036, 2979, 2973, 2925, 2928],

/***/ 3049:
/*!*****************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/validateDOMNesting.js ***!
  \*****************************************************************/
[7257, 2921, 2929, 2928],

/***/ 3050:
/*!*********************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/ReactDOMEmptyComponent.js ***!
  \*********************************************************************/
[7258, 2921, 2999, 2953],

/***/ 3051:
/*!********************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/ReactDOMTreeTraversal.js ***!
  \********************************************************************/
[7259, 2924, 2925],

/***/ 3052:
/*!********************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/ReactDOMTextComponent.js ***!
  \********************************************************************/
[7260, 2924, 2921, 2998, 2999, 2953, 3004, 2925, 3049],

/***/ 3053:
/*!***************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/ReactDefaultBatchingStrategy.js ***!
  \***************************************************************************/
[7261, 2921, 2973, 2986, 2929],

/***/ 3054:
/*!*****************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/ReactEventListener.js ***!
  \*****************************************************************/
[7262, 2921, 3055, 2966, 2923, 2953, 2973, 2987, 3056],

/***/ 3055:
/*!***********************************************************!*\
  !*** ./atlas_bundles/heatmap/~/fbjs/lib/EventListener.js ***!
  \***********************************************************/
[7263, 2929],

/***/ 3056:
/*!************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/fbjs/lib/getUnboundedScrollPosition.js ***!
  \************************************************************************/
143,

/***/ 3057:
/*!*************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/ReactInjection.js ***!
  \*************************************************************/
[7264, 2954, 2960, 2962, 3035, 2938, 3043, 3024, 3044, 2973],

/***/ 3058:
/*!************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/ReactReconcileTransaction.js ***!
  \************************************************************************/
[7265, 2921, 2974, 2923, 3024, 3059, 2979, 2986, 3048],

/***/ 3059:
/*!******************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/ReactInputSelection.js ***!
  \******************************************************************/
[7266, 3060, 3062, 3013, 3065],

/***/ 3060:
/*!****************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/ReactDOMSelection.js ***!
  \****************************************************************/
[7267, 2966, 3061, 2968],

/***/ 3061:
/*!************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/getNodeForCharacterOffset.js ***!
  \************************************************************************/
148,

/***/ 3062:
/*!**********************************************************!*\
  !*** ./atlas_bundles/heatmap/~/fbjs/lib/containsNode.js ***!
  \**********************************************************/
[7268, 3063],

/***/ 3063:
/*!********************************************************!*\
  !*** ./atlas_bundles/heatmap/~/fbjs/lib/isTextNode.js ***!
  \********************************************************/
[7269, 3064],

/***/ 3064:
/*!****************************************************!*\
  !*** ./atlas_bundles/heatmap/~/fbjs/lib/isNode.js ***!
  \****************************************************/
151,

/***/ 3065:
/*!**************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/fbjs/lib/getActiveElement.js ***!
  \**************************************************************/
152,

/***/ 3066:
/*!*******************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/SVGDOMPropertyConfig.js ***!
  \*******************************************************************/
153,

/***/ 3067:
/*!****************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/SelectEventPlugin.js ***!
  \****************************************************************/
[7270, 2958, 2959, 2966, 2953, 3059, 2970, 3065, 2989, 2942, 3041],

/***/ 3068:
/*!****************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/SimpleEventPlugin.js ***!
  \****************************************************************/
[7271, 2924, 2958, 3055, 2959, 2953, 3069, 3070, 2970, 3071, 3072, 2992, 3075, 3076, 3077, 2993, 3078, 2929, 3073, 2925, 2942],

/***/ 3069:
/*!**********************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/SyntheticAnimationEvent.js ***!
  \**********************************************************************/
[7272, 2970],

/***/ 3070:
/*!**********************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/SyntheticClipboardEvent.js ***!
  \**********************************************************************/
[7273, 2970],

/***/ 3071:
/*!******************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/SyntheticFocusEvent.js ***!
  \******************************************************************/
[7274, 2993],

/***/ 3072:
/*!*********************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/SyntheticKeyboardEvent.js ***!
  \*********************************************************************/
[7275, 2993, 3073, 3074, 2995],

/***/ 3073:
/*!***************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/getEventCharCode.js ***!
  \***************************************************************/
160,

/***/ 3074:
/*!**********************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/getEventKey.js ***!
  \**********************************************************/
[7276, 3073],

/***/ 3075:
/*!*****************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/SyntheticDragEvent.js ***!
  \*****************************************************************/
[7277, 2992],

/***/ 3076:
/*!******************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/SyntheticTouchEvent.js ***!
  \******************************************************************/
[7278, 2993, 2995],

/***/ 3077:
/*!***********************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/SyntheticTransitionEvent.js ***!
  \***********************************************************************/
[7279, 2970],

/***/ 3078:
/*!******************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/SyntheticWheelEvent.js ***!
  \******************************************************************/
[7280, 2992],

/***/ 3079:
/*!*********************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/ReactMount.js ***!
  \*********************************************************/
[7281, 2924, 2999, 2954, 3024, 2927, 2953, 3080, 3081, 2926, 2975, 3036, 2979, 3082, 2976, 3048, 2973, 2936, 3038, 2925, 3001, 3042, 2928],

/***/ 3080:
/*!********************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/ReactDOMContainerInfo.js ***!
  \********************************************************************/
[7282, 3049],

/***/ 3081:
/*!*******************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/ReactDOMFeatureFlags.js ***!
  \*******************************************************************/
168,

/***/ 3082:
/*!******************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/ReactMarkupChecksum.js ***!
  \******************************************************************/
[7283, 3083],

/***/ 3083:
/*!******************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/adler32.js ***!
  \******************************************************/
170,

/***/ 3084:
/*!**********************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/findDOMNode.js ***!
  \**********************************************************/
[7284, 2924, 2927, 2953, 3036, 3085, 2925, 2928],

/***/ 3085:
/*!****************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/getHostComponentFromComposite.js ***!
  \****************************************************************************/
[7285, 3040],

/***/ 3086:
/*!*************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/renderSubtreeIntoContainer.js ***!
  \*************************************************************************/
[7286, 3079],

/***/ 3087:
/*!**************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/ReactDOMUnknownPropertyHook.js ***!
  \**************************************************************************/
[7287, 2954, 2961, 2945, 2928],

/***/ 3088:
/*!*****************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/ReactDOMNullInputValuePropHook.js ***!
  \*****************************************************************************/
[7288, 2945, 2928],

/***/ 3090:
/*!*******************************************************!*\
  !*** ./atlas_bundles/heatmap/~/jquery/dist/jquery.js ***!
  \*******************************************************/
837,

/***/ 3092:
/*!**********************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/jquery-hc-sticky/jquery.hc-sticky.js ***!
  \**********************************************************************/
[7699, 3090],

/***/ 3093:
/*!**************************************************!*\
  !*** ./atlas_bundles/heatmap/~/events/events.js ***!
  \**************************************************/
863,

/***/ 3094:
/*!******************************************************!*\
  !*** ./atlas_bundles/heatmap/~/anatomogram/index.js ***!
  \******************************************************/
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	module.exports = __webpack_require__(/*! ./src/AnatomogramFactory.jsx */ 3095);

/***/ },

/***/ 3095:
/*!************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/anatomogram/src/AnatomogramFactory.jsx ***!
  \************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var React = __webpack_require__(/*! react */ 2919);
	var Anatomogram = __webpack_require__(/*! ./Anatomogram.jsx */ 3096);
	var getSvgsForSpecies = __webpack_require__(/*! ./imagesAvailable.js */ 3100).GetSvgsForSpecies;
	__webpack_require__(/*! ./ContainerLayout.less */ 3156);
	
	// See note below, consider using something like https://flowtype.org if type checking is necessary
	// const argumentShape= {
	//     pathToFolderWithBundledResources: RequiredString,
	//     anatomogramData: React.PropTypes.shape({
	//         species: RequiredString,
	//         allSvgPathIds: React.PropTypes.arrayOf(RequiredString) //if not provided, we use properties read in from the file
	//     }).isRequired,
	//     expressedTissueColour: RequiredString,
	//     hoveredTissueColour: RequiredString,
	//     eventEmitter: React.PropTypes.instanceOf(EventEmitter)
	// };
	
	var _availableAnatomograms = function _availableAnatomograms(species, pathToFolderWithBundledResources, allSvgPathIds) {
	    return getSvgsForSpecies(pathToFolderWithBundledResources, species).filter(function (e) {
	        return !allSvgPathIds || allSvgPathIds.some(function (id) {
	            return e.ids.indexOf(id) > -1;
	        });
	    });
	};
	
	var callEmitterWhenMousedOverTissuesChange = function callEmitterWhenMousedOverTissuesChange(eventEmitter) {
	    var forEachXNotInYsEmit = function forEachXNotInYsEmit(xs, ys, eventName) {
	        xs.filter(function (id) {
	            return ys.indexOf(id) === -1;
	        }).forEach(function (id) {
	            eventEmitter.emit(eventName, id);
	        });
	    };
	
	    return function emitEvents(nextIds, previousIds) {
	        forEachXNotInYsEmit(nextIds, previousIds, 'gxaAnatomogramTissueMouseEnter');
	        forEachXNotInYsEmit(previousIds, nextIds, 'gxaAnatomogramTissueMouseLeave');
	    };
	};
	
	var createAnatomogram = function createAnatomogram(args) {
	    // PropTypes should only be used with proper React components
	    // https://facebook.github.io/react/warnings/dont-call-proptypes.html
	    // validate(argumentShape, args, "Error!");
	
	    var availableAnatomograms = _availableAnatomograms(args.anatomogramData.species, args.pathToFolderWithBundledResources, args.anatomogramData.allSvgPathIds || null);
	
	    return availableAnatomograms.length ? React.createElement(Anatomogram, _extends({
	        pathToFolderWithBundledResources: args.pathToFolderWithBundledResources,
	        expressedTissueColour: args.expressedTissueColour,
	        hoveredTissueColour: args.hoveredTissueColour,
	        availableAnatomograms: availableAnatomograms,
	        height: args.anatomogramData.species.indexOf("homo sapiens") > -1 ? 375 : 265,
	        whenMousedOverIdsChange: args.whenMousedOverIdsChange || (args.eventEmitter ? callEmitterWhenMousedOverTissuesChange(args.eventEmitter) : function () {}),
	        idsExpressedInExperiment: args.idsExpressedInExperiment || args.ontologyIdsForTissuesExpressedInAllRows || [],
	        idsToBeHighlighted: args.idsToBeHighlighted || []
	    }, args.anatomogramData.allSvgPathIds ? { allSvgPathIds: args.anatomogramData.allSvgPathIds } : {})) : null;
	};
	
	//http://stackoverflow.com/questions/3115982/how-to-check-if-two-arrays-are-equal-with-javascript
	var arraysEqual = function arraysEqual(a, b) {
	    if (a === b) return true;
	    if (a == null || b == null) return false;
	    if (a.length != b.length) return false;
	    for (var i = 0; i < a.length; ++i) {
	        if (a[i] !== b[i]) return false;
	    }
	    return true;
	};
	
	var makeWrapper = function makeWrapper(ComponentClass) {
	    return React.createClass({
	        displayName: "WrappedComponent",
	        propTypes: {
	            ontologyIdsToHighlight: React.PropTypes.arrayOf(React.PropTypes.string).isRequired,
	            onOntologyIdIsUnderFocus: React.PropTypes.func.isRequired,
	            componentProps: React.PropTypes.object.isRequired
	        },
	
	        shouldComponentUpdate: function shouldComponentUpdate(nextProps) {
	            return !arraysEqual(nextProps.ontologyIdsToHighlight, this.props.ontologyIdsToHighlight);
	        },
	        render: function render() {
	            return React.createElement(
	                'div',
	                { id: 'gxaAnatomogramWrapper' },
	                React.createElement(ComponentClass, _extends({ ontologyIdsToHighlight: this.props.ontologyIdsToHighlight,
	                    onOntologyIdIsUnderFocus: this.props.onOntologyIdIsUnderFocus
	                }, this.props.componentProps))
	            );
	        }
	    });
	};
	
	/**
	anatomogramConfig: see argumentShape
	componentClass : a React class to be wrapped. Should accept props onOntologyIdIsUnderFocus and ontologyIdsToHighlight
	componentProps : other props to be passed over.
	*/
	var wrapComponentWithAnatomogram = function wrapComponentWithAnatomogram(anatomogramConfig, componentClass, componentProps) {
	    var Wrapped = makeWrapper(componentClass);
	
	    return React.createClass({
	        displayName: "AnatomogramComponentWrapper",
	
	        getInitialState: function getInitialState() {
	            return {
	                ontologyIdsForComponentContentUnderFocus: [],
	                ontologyIdsForAnatomogramContentUnderFocus: []
	            };
	        },
	        render: function render() {
	            var _this = this;
	
	            return React.createElement(
	                'div',
	                null,
	                React.createElement(
	                    'div',
	                    { id: 'gxaAnatomogramAside' },
	                    createAnatomogram(Object.assign({}, anatomogramConfig, {
	                        idsToBeHighlighted: this.state.ontologyIdsForComponentContentUnderFocus,
	                        whenMousedOverIdsChange: function whenMousedOverIdsChange(nextIds) {
	                            _this.setState({ ontologyIdsForAnatomogramContentUnderFocus: nextIds });
	                        }
	                    }))
	                ),
	                React.createElement(Wrapped, { componentProps: componentProps,
	                    onOntologyIdIsUnderFocus: function onOntologyIdIsUnderFocus(selectedIdOrIds) {
	                        _this.setState({
	                            ontologyIdsForComponentContentUnderFocus: selectedIdOrIds ? typeof selectedIdOrIds === 'string' ? [selectedIdOrIds] : selectedIdOrIds : [] });
	                    },
	                    ontologyIdsToHighlight: this.state.ontologyIdsForAnatomogramContentUnderFocus })
	            );
	        }
	    });
	};
	
	module.exports = { "create": createAnatomogram, "wrapComponent": wrapComponentWithAnatomogram };

/***/ },

/***/ 3096:
/*!*****************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/anatomogram/src/Anatomogram.jsx ***!
  \*****************************************************************/
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var React = __webpack_require__(/*! react */ 2919);
	var AnatomogramImage = __webpack_require__(/*! ./AnatomogramImage.jsx */ 3097);
	var SelectionIcon = __webpack_require__(/*! ./SelectionIcon.jsx */ 3099);
	
	var Anatomogram = React.createClass({
	    displayName: "Anatomogram",
	
	    propTypes: {
	        pathToFolderWithBundledResources: React.PropTypes.string.isRequired,
	        expressedTissueColour: React.PropTypes.string.isRequired,
	        hoveredTissueColour: React.PropTypes.string.isRequired,
	        availableAnatomograms: React.PropTypes.arrayOf(React.PropTypes.shape({
	            type: React.PropTypes.string.isRequired,
	            path: React.PropTypes.string.isRequired,
	            ids: React.PropTypes.arrayOf(React.PropTypes.string).isRequired
	        })).isRequired,
	        height: React.PropTypes.number.isRequired,
	        whenMousedOverIdsChange: React.PropTypes.func,
	        allSvgPathIds: React.PropTypes.arrayOf(React.PropTypes.string),
	        idsToBeHighlighted: React.PropTypes.arrayOf(React.PropTypes.string).isRequired
	    },
	
	    getInitialState: function getInitialState() {
	        return { selectedType: this.props.availableAnatomograms[0].type };
	    },
	    render: function render() {
	        return React.createElement(
	            "div",
	            { className: "gxaAnatomogram", style: { display: "table", paddingTop: "4px" } },
	            React.createElement(
	                "div",
	                { style: { display: "table-row" } },
	                React.createElement(
	                    "div",
	                    { style: { display: "table-cell", verticalAlign: "top" } },
	                    this._anatomogramSelectImageButtons()
	                ),
	                React.createElement(AnatomogramImage, _extends({
	                    key: this.state.selectedType,
	                    file: this._selectedAnatomogram().path,
	                    allSvgPathIds: this.props.allSvgPathIds || this._selectedAnatomogram().ids
	                }, this.props))
	            )
	        );
	    },
	    _anatomogramSelectImageButtons: function _anatomogramSelectImageButtons() {
	        var _this = this;
	
	        return this.props.availableAnatomograms.length < 2 ? [] : this.props.availableAnatomograms.map(function (availableAnatomogram) {
	            return React.createElement(SelectionIcon, {
	                key: availableAnatomogram.type + "_toggle",
	                pathToFolderWithBundledResources: _this.props.pathToFolderWithBundledResources,
	                anatomogramType: availableAnatomogram.type,
	                selected: _this.state.selectedType === availableAnatomogram.type,
	                onClick: function onClick() {
	                    _this._afterUserSelectedAnatomogram(availableAnatomogram.type);
	                } });
	        });
	    },
	    _afterUserSelectedAnatomogram: function _afterUserSelectedAnatomogram(newSelectedType) {
	        if (newSelectedType !== this.state.selectedType) {
	            this.setState({ selectedType: newSelectedType });
	        }
	    },
	    _selectedAnatomogram: function _selectedAnatomogram() {
	        var _this2 = this;
	
	        return this.props.availableAnatomograms.filter(function (e) {
	            return e.type === _this2.state.selectedType;
	        }).concat({
	            type: "_",
	            path: "__invalid__.svg",
	            ids: []
	        })[0];
	    }
	});
	
	module.exports = Anatomogram;

/***/ },

/***/ 3097:
/*!**********************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/anatomogram/src/AnatomogramImage.jsx ***!
  \**********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }
	
	var React = __webpack_require__(/*! react */ 2919);
	var ReactDOM = __webpack_require__(/*! react-dom */ 2951);
	var Snap = __webpack_require__(/*! imports-loader?this=>window,fix=>module.exports=0!snapsvg/dist/snap.svg.js */ 3098);
	
	//http://stackoverflow.com/questions/3115982/how-to-check-if-two-arrays-are-equal-with-javascript
	var ArraysEqual = function ArraysEqual(a, b) {
	    if (a === b) return true;
	    if (a == null || b == null) return false;
	    if (a.length != b.length) return false;
	    for (var i = 0; i < a.length; ++i) {
	        if (a[i] !== b[i]) return false;
	    }
	    return true;
	};
	
	var AnatomogramImageParts = React.createClass({
	    displayName: "AnatomogramImageParts",
	
	    propTypes: {
	        idsExpressedInExperiment: React.PropTypes.arrayOf(React.PropTypes.string).isRequired,
	        idsHeatmapWantsHighlighted: React.PropTypes.arrayOf(React.PropTypes.string).isRequired,
	        idsMousedOver: React.PropTypes.arrayOf(React.PropTypes.string).isRequired,
	        idsNotHighlighted: React.PropTypes.arrayOf(React.PropTypes.string).isRequired,
	        expressedTissueColour: React.PropTypes.string.isRequired,
	        hoveredTissueColour: React.PropTypes.string.isRequired,
	        whenMousedOverIdsChange: React.PropTypes.func
	    },
	
	    getDefaultProps: function getDefaultProps() {
	        return { whenMousedOverIdsChange: function whenMousedOverIdsChange(nextIds, oldIds) {} };
	    },
	    getInitialState: function getInitialState() {
	        return {
	            toDraw: [].concat(this._idsThatShouldBeStronglyHighlighted(this.props).map(this._highlightStrongly), this.props.idsExpressedInExperiment.map(this._highlightSlightly), this.props.idsNotHighlighted.map(this._highlightAsBackground)) };
	    },
	    render: function render() {
	        return React.createElement("span", null);
	    },
	    _highlightStrongly: function _highlightStrongly(svgPathId) {
	        return { id: svgPathId, colour: this.props.hoveredTissueColour, opacity: 0.7 };
	    },
	    _highlightSlightly: function _highlightSlightly(svgPathId) {
	        return { id: svgPathId, colour: this.props.expressedTissueColour, opacity: 0.5 };
	    },
	    _highlightAsBackground: function _highlightAsBackground(svgPathId) {
	        return { id: svgPathId, colour: "gray", opacity: 0.5 };
	    },
	    componentWillUnmount: function componentWillUnmount() {
	        this.props.whenMousedOverIdsChange([], this.props.idsMousedOver);
	    },
	    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	        var _this = this;
	
	        if (!ArraysEqual(nextProps.idsMousedOver, this.props.idsMousedOver)) {
	            this.props.whenMousedOverIdsChange(nextProps.idsMousedOver, this.props.idsMousedOver);
	        }
	        var oldStrong = this._idsThatShouldBeStronglyHighlighted(this.props);
	        var newStrong = this._idsThatShouldBeStronglyHighlighted(nextProps);
	        var oldWeak = this.props.idsExpressedInExperiment;
	        var newWeak = nextProps.idsExpressedInExperiment;
	
	        var toDraw = [].concat(
	        //ids that heatmap wants highlighted are the most highlighted
	        newStrong.filter(function (id) {
	            return !oldStrong.includes(id);
	        }).map(this._highlightStrongly),
	        //ids that are expressed in the experiment are highlighted with a weaker colour, often the same as background
	        newWeak.filter(function (id) {
	            return !newStrong.includes(id);
	        }).filter(function (id) {
	            return !oldWeak.includes(id);
	        }).map(this._highlightSlightly), nextProps.idsNotHighlighted.filter(function (id) {
	            return !_this.props.idsNotHighlighted.includes(id);
	        }).map(this._highlightAsBackground));
	
	        this.setState({ toDraw: toDraw });
	    },
	    _idsThatShouldBeStronglyHighlighted: function _idsThatShouldBeStronglyHighlighted(properties) {
	        return properties.idsHeatmapWantsHighlighted.concat(properties.idsMousedOver);
	    }
	});
	
	var AnatomogramImage = React.createClass({
	    displayName: "AnatomogramImage",
	
	    propTypes: {
	        file: function file(props, propName, componentName) {
	            if (propName === "file") {
	                if (typeof props[propName] !== "string") {
	                    return new Error("Expected string to specify file, got: " + props[propName]);
	                }
	                if (!props[propName]) {
	                    return new Error("Path to file empty!");
	                }
	            }
	            return "";
	        },
	        height: React.PropTypes.number.isRequired,
	        allSvgPathIds: React.PropTypes.arrayOf(React.PropTypes.string).isRequired,
	        idsExpressedInExperiment: React.PropTypes.arrayOf(React.PropTypes.string).isRequired,
	        idsToBeHighlighted: React.PropTypes.arrayOf(React.PropTypes.string).isRequired,
	        expressedTissueColour: React.PropTypes.string.isRequired,
	        hoveredTissueColour: React.PropTypes.string.isRequired,
	        whenMousedOverIdsChange: React.PropTypes.func
	    },
	
	    getInitialState: function getInitialState() {
	        return { mousedOverSvgIds: [] };
	    },
	    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	        if (nextProps.file !== this.props.file) {
	            this._loadAnatomogram(nextProps.file);
	        }
	    },
	    componentDidMount: function componentDidMount() {
	        this._loadAnatomogram(this.props.file);
	        this._draw();
	    },
	    componentDidUpdate: function componentDidUpdate() {
	        this._draw();
	    },
	    _draw: function _draw() {
	        var svg = Snap(ReactDOM.findDOMNode(this._anatomogram)).select("#LAYER_EFO");
	        if (svg !== null) {
	            this._drawOnSvg(svg, this._imageParts.state.toDraw);
	            this._imageParts.setState({ toDraw: [] });
	        }
	    },
	    _drawInitialLayout: function _drawInitialLayout(svg) {
	        if (this._imageParts) {
	            this._drawOnSvg(svg, this._imageParts.getInitialState().toDraw);
	            this._imageParts.setState({ toDraw: [] });
	        }
	    },
	    _drawOnSvg: function _drawOnSvg(svg, instructions) {
	        var _this2 = this;
	
	        instructions.forEach(function (instruction) {
	            _this2._highlightOrganismParts(svg, instruction.id, instruction.colour, instruction.opacity);
	        });
	    },
	    render: function render() {
	        var _this3 = this;
	
	        var idsExpressedInExperiment = [],
	            idsHoveredOver = [],
	            idsHeatmapWantsHighlighted = [],
	            idsNotHighlighted = [];
	
	        this.props.allSvgPathIds.forEach(function (id) {
	            if (_this3.state.mousedOverSvgIds.includes(id)) {
	                idsHoveredOver.push(id);
	            } else if (_this3.props.idsToBeHighlighted.includes(id)) {
	                idsHeatmapWantsHighlighted.push(id);
	            } else if (_this3.props.idsExpressedInExperiment.includes(id)) {
	                idsExpressedInExperiment.push(id);
	            } else {
	                idsNotHighlighted.push(id);
	            }
	        });
	
	        return React.createElement(
	            "span",
	            null,
	            React.createElement("svg", { ref: function ref(c) {
	                    return _this3._anatomogram = c;
	                }, style: { display: "table-cell", width: "230px", height: this.props.height + "px" } }),
	            React.createElement(AnatomogramImageParts, {
	                ref: function ref(c) {
	                    return _this3._imageParts = c;
	                }, key: this.props.file,
	                idsExpressedInExperiment: idsExpressedInExperiment,
	                idsHeatmapWantsHighlighted: idsHeatmapWantsHighlighted,
	                idsMousedOver: idsHoveredOver,
	                idsNotHighlighted: idsNotHighlighted,
	                expressedTissueColour: this.props.expressedTissueColour,
	                hoveredTissueColour: this.props.hoveredTissueColour,
	                whenMousedOverIdsChange: this.props.whenMousedOverIdsChange
	            })
	        );
	    },
	    _highlightPath: function _highlightPath(svgPathId) {
	        this.setState({ hoveredPathId: svgPathId });
	    },
	    _loadAnatomogram: function _loadAnatomogram(svgFile) {
	        var _this4 = this;
	
	        var svgCanvas = Snap(ReactDOM.findDOMNode(this._anatomogram)),
	            allElements = svgCanvas.selectAll("*");
	
	        if (allElements) {
	            allElements.remove();
	        }
	
	        var displayAllOrganismPartsCallback = this._drawInitialLayout;
	        var registerHoverEventsCallback = this._registerHoverEvents;
	
	        Snap.load(svgFile, function (fragment) {
	            displayAllOrganismPartsCallback(fragment.select("#LAYER_EFO"));
	            registerHoverEventsCallback(fragment.select("#LAYER_EFO"));
	            fragment.selectAll("svg > g").forEach(function (g) {
	                g.transform("S1.6,0,0");
	                svgCanvas.append(g);
	            });
	            var img = fragment.select("#ccLogo");
	            if (img) {
	                // svgCanvas.node.clientHeight and svgCanvas.node.clientWidth is more “correct” but are 0 in Firefox
	                var heightTranslate = Number.parseInt(_this4._anatomogram.style.height) - 15;
	                var widthTranslate = Number.parseInt(_this4._anatomogram.style.width) / 2 - 40;
	                img.transform("t" + widthTranslate + "," + heightTranslate);
	                svgCanvas.append(img);
	            }
	        });
	    },
	    _registerHoverEvents: function _registerHoverEvents(svg) {
	        var _this5 = this;
	
	        if (svg) {
	            // Sometimes svg is null... why?
	            var MaxOverlappingTissues = 5;
	            var mouseoverCallback = function mouseoverCallback(svgPathId) {
	                _this5.setState(function (previousState) {
	                    return { mousedOverSvgIds: [].concat(_toConsumableArray(previousState.mousedOverSvgIds), [svgPathId]).slice(-MaxOverlappingTissues) };
	                });
	            };
	
	            var mouseoutCallback = function mouseoutCallback(svgPathId) {
	                _this5.setState(function (previousState) {
	                    return { mousedOverSvgIds: previousState.mousedOverSvgIds.map(function (el) {
	                            return el === svgPathId ? "" : el;
	                        }) };
	                });
	            };
	
	            var attachCallbacks = function attachCallbacks(svgElement, svgPathId) {
	                if (svgElement) {
	                    svgElement.mouseover(function () {
	                        mouseoverCallback(svgPathId);
	                    });
	                    svgElement.mouseout(function () {
	                        mouseoutCallback(svgPathId);
	                    });
	                }
	            };
	
	            this.props.allSvgPathIds.forEach(function (svgPathId) {
	                var svgElement = svg.select("#" + svgPathId);
	                attachCallbacks(svgElement, svgPathId);
	                if (svgElement && svgElement.type === "use") {
	                    attachCallbacks(svg.select(svgElement.node.getAttribute("xlink:href")), svgPathId);
	                }
	            });
	        }
	    },
	    _highlightOrganismParts: function _highlightOrganismParts(svg, svgPathId, colour, opacity) {
	        var el = svg.select("#" + svgPathId);
	        if (el && el.type === "use") {
	            this._recursivelyChangeProperties(svg.select(el.node.getAttribute("xlink:href")), colour, opacity);
	        }
	        this._recursivelyChangeProperties(el, colour, opacity);
	    },
	    _recursivelyChangeProperties: function _recursivelyChangeProperties(svgElement, colour, opacity) {
	        var _this6 = this;
	
	        if (svgElement) {
	            svgElement.selectAll("*").forEach(function (innerElement) {
	                _this6._recursivelyChangeProperties(innerElement);
	            });
	            svgElement.attr({ "fill": colour, "fill-opacity": opacity });
	        }
	    }
	});
	
	module.exports = AnatomogramImage;

/***/ },

/***/ 3098:
/*!**************************************************************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/imports-loader?this=>window,fix=>module.exports=0!./atlas_bundles/heatmap/~/snapsvg/dist/snap.svg.js ***!
  \**************************************************************************************************************************************/
176,

/***/ 3099:
/*!*******************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/anatomogram/src/SelectionIcon.jsx ***!
  \*******************************************************************/
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var React = __webpack_require__(/*! react */ 2919);
	var ResolvePathToIcon = __webpack_require__(/*! ./imagesAvailable.js */ 3100).ResolvePathToIcon;
	__webpack_require__(/*! ./SelectionIcon.less */ 3152);
	
	var SelectionIcon = React.createClass({
	    displayName: "SelectionIcon",
	
	    propTypes: {
	        pathToFolderWithBundledResources: React.PropTypes.string.isRequired,
	        anatomogramType: React.PropTypes.oneOf(["brain", "female", "male", "whole_plant", "flower_parts"]).isRequired,
	        selected: React.PropTypes.bool.isRequired,
	        onClick: React.PropTypes.func.isRequired
	    },
	
	    render: function render() {
	        return React.createElement("img", { className: "selection-icon", onClick: this.props.onClick,
	            src: ResolvePathToIcon(this.props.pathToFolderWithBundledResources, this.props.anatomogramType, this.props.selected) });
	    },
	    shouldComponentUpdate: function shouldComponentUpdate(nextProps) {
	        return this.props.selected !== nextProps.selected;
	    }
	});
	
	module.exports = SelectionIcon;

/***/ },

/***/ 3100:
/*!********************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/anatomogram/src/imagesAvailable.js ***!
  \********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var Url = __webpack_require__(/*! url */ 3101);
	var Path = __webpack_require__(/*! path */ 186);
	var SvgsForSpecies = __webpack_require__(/*! ../resources/json/svgsForSpecies.json */ 3107);
	var IdsForSvgs = __webpack_require__(/*! ../resources/json/idsForSvgs.json */ 3108);
	
	var ResolvePathToIcon = function ResolvePathToIcon(pathToFolderWithBundledResources, type, selected) {
	    return Url.resolve(pathToFolderWithBundledResources, Path.basename(__webpack_require__(/*! ../resources/icons */ 3109)("./" + type + "_" + (selected ? "" : "un") + "selected.png")));
	};
	
	var ResolvePathToSvg = function ResolvePathToSvg(pathToFolderWithBundledResources, svg) {
	    return Url.resolve(pathToFolderWithBundledResources, Path.basename(__webpack_require__(/*! ../resources/svg */ 3120)("./" + svg)));
	};
	
	var GetSvgsForSpecies = function GetSvgsForSpecies(pathToFolderWithBundledResources, species) {
	    var svgEntry = SvgsForSpecies[species];
	    if (typeof svgEntry === "object") {
	        return Object.keys(svgEntry).map(function (anatomogramType) {
	            return {
	                type: anatomogramType,
	                path: ResolvePathToSvg(pathToFolderWithBundledResources, svgEntry[anatomogramType]),
	                ids: IdsForSvgs[svgEntry[anatomogramType]]
	            };
	        });
	    } else if (typeof svgEntry === "string") {
	        return [{
	            type: "svg",
	            path: ResolvePathToSvg(pathToFolderWithBundledResources, svgEntry),
	            ids: IdsForSvgs[svgEntry]
	        }];
	    } else {
	        return [];
	    }
	};
	
	module.exports = { GetSvgsForSpecies: GetSvgsForSpecies, ResolvePathToIcon: ResolvePathToIcon };

/***/ },

/***/ 3101:
/*!********************************************!*\
  !*** ./atlas_bundles/heatmap/~/url/url.js ***!
  \********************************************/
[7291, 3102, 3103, 3104],

/***/ 3102:
/*!************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/url/~/punycode/punycode.js ***!
  \************************************************************/
180,

/***/ 3103:
/*!*********************************************!*\
  !*** ./atlas_bundles/heatmap/~/url/util.js ***!
  \*********************************************/
182,

/***/ 3104:
/*!******************************************************!*\
  !*** ./atlas_bundles/heatmap/~/querystring/index.js ***!
  \******************************************************/
[7292, 3105, 3106],

/***/ 3105:
/*!*******************************************************!*\
  !*** ./atlas_bundles/heatmap/~/querystring/decode.js ***!
  \*******************************************************/
184,

/***/ 3106:
/*!*******************************************************!*\
  !*** ./atlas_bundles/heatmap/~/querystring/encode.js ***!
  \*******************************************************/
185,

/***/ 3107:
/*!********************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/anatomogram/resources/json/svgsForSpecies.json ***!
  \********************************************************************************/
187,

/***/ 3108:
/*!****************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/anatomogram/resources/json/idsForSvgs.json ***!
  \****************************************************************************/
188,

/***/ 3109:
/*!***********************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/anatomogram/resources/icons ^\.\/.*selected\.png$ ***!
  \***********************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./brain_selected.png": 3110,
		"./brain_unselected.png": 3111,
		"./female_selected.png": 3112,
		"./female_unselected.png": 3113,
		"./flower_parts_selected.png": 3114,
		"./flower_parts_unselected.png": 3115,
		"./male_selected.png": 3116,
		"./male_unselected.png": 3117,
		"./whole_plant_selected.png": 3118,
		"./whole_plant_unselected.png": 3119
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 3109;


/***/ },

/***/ 3110:
/*!********************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/anatomogram/resources/icons/brain_selected.png ***!
  \********************************************************************************/
190,

/***/ 3111:
/*!**********************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/anatomogram/resources/icons/brain_unselected.png ***!
  \**********************************************************************************/
191,

/***/ 3112:
/*!*********************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/anatomogram/resources/icons/female_selected.png ***!
  \*********************************************************************************/
192,

/***/ 3113:
/*!***********************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/anatomogram/resources/icons/female_unselected.png ***!
  \***********************************************************************************/
193,

/***/ 3114:
/*!***************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/anatomogram/resources/icons/flower_parts_selected.png ***!
  \***************************************************************************************/
194,

/***/ 3115:
/*!*****************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/anatomogram/resources/icons/flower_parts_unselected.png ***!
  \*****************************************************************************************/
195,

/***/ 3116:
/*!*******************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/anatomogram/resources/icons/male_selected.png ***!
  \*******************************************************************************/
196,

/***/ 3117:
/*!*********************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/anatomogram/resources/icons/male_unselected.png ***!
  \*********************************************************************************/
197,

/***/ 3118:
/*!**************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/anatomogram/resources/icons/whole_plant_selected.png ***!
  \**************************************************************************************/
198,

/***/ 3119:
/*!****************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/anatomogram/resources/icons/whole_plant_unselected.png ***!
  \****************************************************************************************/
199,

/***/ 3120:
/*!********************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/anatomogram/resources/svg ^\.\/.*$ ***!
  \********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./anolis_carolinensis.svg": 3121,
		"./arabidopsis_thaliana_whole_plant.svg": 3122,
		"./brachypodium_distachyon_flower_parts.svg": 3123,
		"./brachypodium_distachyon_whole_plant.svg": 3124,
		"./chicken.svg": 3125,
		"./cow.svg": 3126,
		"./hordeum_vulgare_flower_parts.svg": 3127,
		"./hordeum_vulgare_whole_plant.svg": 3128,
		"./human_brain.svg": 3129,
		"./human_female.svg": 3130,
		"./human_male.svg": 3131,
		"./macaca_mulatta.svg": 3132,
		"./monodelphis_domestica.svg": 3133,
		"./mouse_brain.svg": 3134,
		"./mouse_female.svg": 3135,
		"./mouse_male.svg": 3136,
		"./oryza_sativa_flower_parts.svg": 3137,
		"./oryza_sativa_whole_plant.svg": 3138,
		"./papio_anubis.svg": 3139,
		"./rat.svg": 3140,
		"./solanum_lycopersicum_flower_parts.svg": 3141,
		"./solanum_lycopersicum_whole_plant.svg": 3142,
		"./solanum_tuberosum_whole_plant.svg": 3143,
		"./sorghum_bicolor_flower_parts.svg": 3144,
		"./sorghum_bicolor_whole_plant.svg": 3145,
		"./tetraodon_nigroviridis.svg": 3146,
		"./triticum_aestivum_flower_parts.svg": 3147,
		"./triticum_aestivum_whole_plant.svg": 3148,
		"./xenopus_tropicalis.svg": 3149,
		"./zea_mays_flower_parts.svg": 3150,
		"./zea_mays_whole_plant.svg": 3151
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 3120;


/***/ },

/***/ 3121:
/*!***********************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/anatomogram/resources/svg/anolis_carolinensis.svg ***!
  \***********************************************************************************/
201,

/***/ 3122:
/*!************************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/anatomogram/resources/svg/arabidopsis_thaliana_whole_plant.svg ***!
  \************************************************************************************************/
202,

/***/ 3123:
/*!****************************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/anatomogram/resources/svg/brachypodium_distachyon_flower_parts.svg ***!
  \****************************************************************************************************/
203,

/***/ 3124:
/*!***************************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/anatomogram/resources/svg/brachypodium_distachyon_whole_plant.svg ***!
  \***************************************************************************************************/
204,

/***/ 3125:
/*!***********************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/anatomogram/resources/svg/chicken.svg ***!
  \***********************************************************************/
205,

/***/ 3126:
/*!*******************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/anatomogram/resources/svg/cow.svg ***!
  \*******************************************************************/
206,

/***/ 3127:
/*!********************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/anatomogram/resources/svg/hordeum_vulgare_flower_parts.svg ***!
  \********************************************************************************************/
207,

/***/ 3128:
/*!*******************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/anatomogram/resources/svg/hordeum_vulgare_whole_plant.svg ***!
  \*******************************************************************************************/
208,

/***/ 3129:
/*!***************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/anatomogram/resources/svg/human_brain.svg ***!
  \***************************************************************************/
209,

/***/ 3130:
/*!****************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/anatomogram/resources/svg/human_female.svg ***!
  \****************************************************************************/
210,

/***/ 3131:
/*!**************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/anatomogram/resources/svg/human_male.svg ***!
  \**************************************************************************/
211,

/***/ 3132:
/*!******************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/anatomogram/resources/svg/macaca_mulatta.svg ***!
  \******************************************************************************/
212,

/***/ 3133:
/*!*************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/anatomogram/resources/svg/monodelphis_domestica.svg ***!
  \*************************************************************************************/
213,

/***/ 3134:
/*!***************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/anatomogram/resources/svg/mouse_brain.svg ***!
  \***************************************************************************/
214,

/***/ 3135:
/*!****************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/anatomogram/resources/svg/mouse_female.svg ***!
  \****************************************************************************/
215,

/***/ 3136:
/*!**************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/anatomogram/resources/svg/mouse_male.svg ***!
  \**************************************************************************/
216,

/***/ 3137:
/*!*****************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/anatomogram/resources/svg/oryza_sativa_flower_parts.svg ***!
  \*****************************************************************************************/
217,

/***/ 3138:
/*!****************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/anatomogram/resources/svg/oryza_sativa_whole_plant.svg ***!
  \****************************************************************************************/
218,

/***/ 3139:
/*!****************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/anatomogram/resources/svg/papio_anubis.svg ***!
  \****************************************************************************/
219,

/***/ 3140:
/*!*******************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/anatomogram/resources/svg/rat.svg ***!
  \*******************************************************************/
220,

/***/ 3141:
/*!*************************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/anatomogram/resources/svg/solanum_lycopersicum_flower_parts.svg ***!
  \*************************************************************************************************/
221,

/***/ 3142:
/*!************************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/anatomogram/resources/svg/solanum_lycopersicum_whole_plant.svg ***!
  \************************************************************************************************/
222,

/***/ 3143:
/*!*********************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/anatomogram/resources/svg/solanum_tuberosum_whole_plant.svg ***!
  \*********************************************************************************************/
223,

/***/ 3144:
/*!********************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/anatomogram/resources/svg/sorghum_bicolor_flower_parts.svg ***!
  \********************************************************************************************/
224,

/***/ 3145:
/*!*******************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/anatomogram/resources/svg/sorghum_bicolor_whole_plant.svg ***!
  \*******************************************************************************************/
225,

/***/ 3146:
/*!**************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/anatomogram/resources/svg/tetraodon_nigroviridis.svg ***!
  \**************************************************************************************/
226,

/***/ 3147:
/*!**********************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/anatomogram/resources/svg/triticum_aestivum_flower_parts.svg ***!
  \**********************************************************************************************/
227,

/***/ 3148:
/*!*********************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/anatomogram/resources/svg/triticum_aestivum_whole_plant.svg ***!
  \*********************************************************************************************/
228,

/***/ 3149:
/*!**********************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/anatomogram/resources/svg/xenopus_tropicalis.svg ***!
  \**********************************************************************************/
229,

/***/ 3150:
/*!*************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/anatomogram/resources/svg/zea_mays_flower_parts.svg ***!
  \*************************************************************************************/
230,

/***/ 3151:
/*!************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/anatomogram/resources/svg/zea_mays_whole_plant.svg ***!
  \************************************************************************************/
231,

/***/ 3152:
/*!********************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/anatomogram/src/SelectionIcon.less ***!
  \********************************************************************/
[7293, 3153, 3155],

/***/ 3153:
/*!***********************************************************************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/css-loader!./atlas_bundles/heatmap/~/less-loader!./atlas_bundles/heatmap/~/anatomogram/src/SelectionIcon.less ***!
  \***********************************************************************************************************************************************/
[7294, 3154],

/***/ 3154:
/*!************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/css-loader/lib/css-base.js ***!
  \************************************************************/
234,

/***/ 3155:
/*!***********************************************************!*\
  !*** ./atlas_bundles/heatmap/~/style-loader/addStyles.js ***!
  \***********************************************************/
235,

/***/ 3156:
/*!**********************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/anatomogram/src/ContainerLayout.less ***!
  \**********************************************************************/
[7295, 3157, 3155],

/***/ 3157:
/*!*************************************************************************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/css-loader!./atlas_bundles/heatmap/~/less-loader!./atlas_bundles/heatmap/~/anatomogram/src/ContainerLayout.less ***!
  \*************************************************************************************************************************************************/
[7296, 3154],

/***/ 3170:
/*!***************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react-bootstrap/lib/Button.js ***!
  \***************************************************************/
[7307, 3171, 3206, 3207, 3214, 3215, 3251, 3259, 2919, 3260, 3262, 3267, 3268],

/***/ 3171:
/*!************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/core-js/object/values.js ***!
  \************************************************************************/
[7308, 3172],

/***/ 3172:
/*!*************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/fn/object/values.js ***!
  \*************************************************************************************/
[7309, 3173, 3176],

/***/ 3173:
/*!**********************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/es7.object.values.js ***!
  \**********************************************************************************************/
[7310, 3174, 3189],

/***/ 3174:
/*!************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/_export.js ***!
  \************************************************************************************/
[7311, 3175, 3176, 3177, 3179],

/***/ 3175:
/*!************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/_global.js ***!
  \************************************************************************************/
255,

/***/ 3176:
/*!**********************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/_core.js ***!
  \**********************************************************************************/
256,

/***/ 3177:
/*!*********************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/_ctx.js ***!
  \*********************************************************************************/
[7312, 3178],

/***/ 3178:
/*!****************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/_a-function.js ***!
  \****************************************************************************************/
258,

/***/ 3179:
/*!**********************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/_hide.js ***!
  \**********************************************************************************/
[7313, 3180, 3188, 3184],

/***/ 3180:
/*!***************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/_object-dp.js ***!
  \***************************************************************************************/
[7314, 3181, 3183, 3187, 3184],

/***/ 3181:
/*!***************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/_an-object.js ***!
  \***************************************************************************************/
[7315, 3182],

/***/ 3182:
/*!***************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/_is-object.js ***!
  \***************************************************************************************/
262,

/***/ 3183:
/*!********************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/_ie8-dom-define.js ***!
  \********************************************************************************************/
[7316, 3184, 3185, 3186],

/***/ 3184:
/*!*****************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/_descriptors.js ***!
  \*****************************************************************************************/
[7317, 3185],

/***/ 3185:
/*!***********************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/_fails.js ***!
  \***********************************************************************************/
265,

/***/ 3186:
/*!****************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/_dom-create.js ***!
  \****************************************************************************************/
[7318, 3182, 3175],

/***/ 3187:
/*!******************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/_to-primitive.js ***!
  \******************************************************************************************/
[7319, 3182],

/***/ 3188:
/*!*******************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/_property-desc.js ***!
  \*******************************************************************************************/
268,

/***/ 3189:
/*!*********************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/_object-to-array.js ***!
  \*********************************************************************************************/
[7320, 3190, 3193, 3205],

/***/ 3190:
/*!*****************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/_object-keys.js ***!
  \*****************************************************************************************/
[7321, 3191, 3204],

/***/ 3191:
/*!**************************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/_object-keys-internal.js ***!
  \**************************************************************************************************/
[7322, 3192, 3193, 3197, 3201],

/***/ 3192:
/*!*********************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/_has.js ***!
  \*********************************************************************************/
272,

/***/ 3193:
/*!****************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/_to-iobject.js ***!
  \****************************************************************************************/
[7323, 3194, 3196],

/***/ 3194:
/*!*************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/_iobject.js ***!
  \*************************************************************************************/
[7324, 3195],

/***/ 3195:
/*!*********************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/_cof.js ***!
  \*********************************************************************************/
275,

/***/ 3196:
/*!*************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/_defined.js ***!
  \*************************************************************************************/
276,

/***/ 3197:
/*!********************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/_array-includes.js ***!
  \********************************************************************************************/
[7325, 3193, 3198, 3200],

/***/ 3198:
/*!***************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/_to-length.js ***!
  \***************************************************************************************/
[7326, 3199],

/***/ 3199:
/*!****************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/_to-integer.js ***!
  \****************************************************************************************/
279,

/***/ 3200:
/*!**************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/_to-index.js ***!
  \**************************************************************************************/
[7327, 3199],

/***/ 3201:
/*!****************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/_shared-key.js ***!
  \****************************************************************************************/
[7328, 3202, 3203],

/***/ 3202:
/*!************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/_shared.js ***!
  \************************************************************************************/
[7329, 3175],

/***/ 3203:
/*!*********************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/_uid.js ***!
  \*********************************************************************************/
283,

/***/ 3204:
/*!*******************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/_enum-bug-keys.js ***!
  \*******************************************************************************************/
284,

/***/ 3205:
/*!****************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/_object-pie.js ***!
  \****************************************************************************************/
285,

/***/ 3206:
/*!**********************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/helpers/objectWithoutProperties.js ***!
  \**********************************************************************************/
286,

/***/ 3207:
/*!******************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/helpers/extends.js ***!
  \******************************************************************/
[7330, 3208],

/***/ 3208:
/*!************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/core-js/object/assign.js ***!
  \************************************************************************/
[7331, 3209],

/***/ 3209:
/*!*************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/fn/object/assign.js ***!
  \*************************************************************************************/
[7332, 3210, 3176],

/***/ 3210:
/*!**********************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/es6.object.assign.js ***!
  \**********************************************************************************************/
[7333, 3174, 3211],

/***/ 3211:
/*!*******************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/_object-assign.js ***!
  \*******************************************************************************************/
[7334, 3190, 3212, 3205, 3213, 3194, 3185],

/***/ 3212:
/*!*****************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/_object-gops.js ***!
  \*****************************************************************************************/
292,

/***/ 3213:
/*!***************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/_to-object.js ***!
  \***************************************************************************************/
[7335, 3196],

/***/ 3214:
/*!*************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/helpers/classCallCheck.js ***!
  \*************************************************************************/
294,

/***/ 3215:
/*!************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/helpers/possibleConstructorReturn.js ***!
  \************************************************************************************/
[7336, 3216],

/***/ 3216:
/*!*****************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/helpers/typeof.js ***!
  \*****************************************************************/
[7337, 3217, 3237],

/***/ 3217:
/*!**************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/core-js/symbol/iterator.js ***!
  \**************************************************************************/
[7338, 3218],

/***/ 3218:
/*!***************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/fn/symbol/iterator.js ***!
  \***************************************************************************************/
[7339, 3219, 3232, 3236],

/***/ 3219:
/*!************************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/es6.string.iterator.js ***!
  \************************************************************************************************/
[7340, 3220, 3221],

/***/ 3220:
/*!***************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/_string-at.js ***!
  \***************************************************************************************/
[7341, 3199, 3196],

/***/ 3221:
/*!*****************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/_iter-define.js ***!
  \*****************************************************************************************/
[7342, 3222, 3174, 3223, 3179, 3192, 3224, 3225, 3229, 3231, 3230],

/***/ 3222:
/*!*************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/_library.js ***!
  \*************************************************************************************/
302,

/***/ 3223:
/*!**************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/_redefine.js ***!
  \**************************************************************************************/
[7343, 3179],

/***/ 3224:
/*!***************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/_iterators.js ***!
  \***************************************************************************************/
304,

/***/ 3225:
/*!*****************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/_iter-create.js ***!
  \*****************************************************************************************/
[7344, 3226, 3188, 3229, 3179, 3230],

/***/ 3226:
/*!*******************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/_object-create.js ***!
  \*******************************************************************************************/
[7345, 3181, 3227, 3204, 3201, 3186, 3228],

/***/ 3227:
/*!****************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/_object-dps.js ***!
  \****************************************************************************************/
[7346, 3180, 3181, 3190, 3184],

/***/ 3228:
/*!**********************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/_html.js ***!
  \**********************************************************************************/
[7347, 3175],

/***/ 3229:
/*!***********************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/_set-to-string-tag.js ***!
  \***********************************************************************************************/
[7348, 3180, 3192, 3230],

/***/ 3230:
/*!*********************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/_wks.js ***!
  \*********************************************************************************/
[7349, 3202, 3203, 3175],

/***/ 3231:
/*!****************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/_object-gpo.js ***!
  \****************************************************************************************/
[7350, 3192, 3213, 3201],

/***/ 3232:
/*!*********************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/web.dom.iterable.js ***!
  \*********************************************************************************************/
[7351, 3233, 3175, 3179, 3224, 3230],

/***/ 3233:
/*!***********************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/es6.array.iterator.js ***!
  \***********************************************************************************************/
[7352, 3234, 3235, 3224, 3193, 3221],

/***/ 3234:
/*!************************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/_add-to-unscopables.js ***!
  \************************************************************************************************/
314,

/***/ 3235:
/*!***************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/_iter-step.js ***!
  \***************************************************************************************/
315,

/***/ 3236:
/*!*************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/_wks-ext.js ***!
  \*************************************************************************************/
[7353, 3230],

/***/ 3237:
/*!*****************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/core-js/symbol.js ***!
  \*****************************************************************/
[7354, 3238],

/***/ 3238:
/*!************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/fn/symbol/index.js ***!
  \************************************************************************************/
[7355, 3239, 3248, 3249, 3250, 3176],

/***/ 3239:
/*!***************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/es6.symbol.js ***!
  \***************************************************************************************/
[7356, 3175, 3192, 3184, 3174, 3223, 3240, 3185, 3202, 3229, 3203, 3230, 3236, 3241, 3242, 3243, 3244, 3181, 3193, 3187, 3188, 3226, 3245, 3247, 3180, 3190, 3246, 3205, 3212, 3222, 3179],

/***/ 3240:
/*!**********************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/_meta.js ***!
  \**********************************************************************************/
[7357, 3203, 3182, 3192, 3180, 3185],

/***/ 3241:
/*!****************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/_wks-define.js ***!
  \****************************************************************************************/
[7358, 3175, 3176, 3222, 3236, 3180],

/***/ 3242:
/*!***********************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/_keyof.js ***!
  \***********************************************************************************/
[7359, 3190, 3193],

/***/ 3243:
/*!***************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/_enum-keys.js ***!
  \***************************************************************************************/
[7360, 3190, 3212, 3205],

/***/ 3244:
/*!**************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/_is-array.js ***!
  \**************************************************************************************/
[7361, 3195],

/***/ 3245:
/*!*********************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/_object-gopn-ext.js ***!
  \*********************************************************************************************/
[7362, 3193, 3246],

/***/ 3246:
/*!*****************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/_object-gopn.js ***!
  \*****************************************************************************************/
[7363, 3191, 3204],

/***/ 3247:
/*!*****************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/_object-gopd.js ***!
  \*****************************************************************************************/
[7364, 3205, 3188, 3193, 3187, 3192, 3183, 3184],

/***/ 3248:
/*!*************************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/es6.object.to-string.js ***!
  \*************************************************************************************************/
328,

/***/ 3249:
/*!******************************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/es7.symbol.async-iterator.js ***!
  \******************************************************************************************************/
[7365, 3241],

/***/ 3250:
/*!**************************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/es7.symbol.observable.js ***!
  \**************************************************************************************************/
[7366, 3241],

/***/ 3251:
/*!*******************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/helpers/inherits.js ***!
  \*******************************************************************/
[7367, 3252, 3256, 3216],

/***/ 3252:
/*!**********************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/core-js/object/set-prototype-of.js ***!
  \**********************************************************************************/
[7368, 3253],

/***/ 3253:
/*!***********************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/fn/object/set-prototype-of.js ***!
  \***********************************************************************************************/
[7369, 3254, 3176],

/***/ 3254:
/*!********************************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/es6.object.set-prototype-of.js ***!
  \********************************************************************************************************/
[7370, 3174, 3255],

/***/ 3255:
/*!***************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/_set-proto.js ***!
  \***************************************************************************************/
[7371, 3182, 3181, 3177, 3247],

/***/ 3256:
/*!************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/core-js/object/create.js ***!
  \************************************************************************/
[7372, 3257],

/***/ 3257:
/*!*************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/fn/object/create.js ***!
  \*************************************************************************************/
[7373, 3258, 3176],

/***/ 3258:
/*!**********************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/es6.object.create.js ***!
  \**********************************************************************************************/
[7374, 3174, 3226],

/***/ 3259:
/*!*****************************************************!*\
  !*** ./atlas_bundles/heatmap/~/classnames/index.js ***!
  \*****************************************************/
339,

/***/ 3260:
/*!*********************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react-prop-types/lib/elementType.js ***!
  \*********************************************************************/
[7375, 2919, 3261],

/***/ 3261:
/*!******************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react-prop-types/lib/utils/createChainableTypeChecker.js ***!
  \******************************************************************************************/
341,

/***/ 3262:
/*!*****************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react-bootstrap/lib/utils/bootstrapUtils.js ***!
  \*****************************************************************************/
[7376, 3263, 3207, 3266, 2919, 3267],

/***/ 3263:
/*!*************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/core-js/object/entries.js ***!
  \*************************************************************************/
[7377, 3264],

/***/ 3264:
/*!**************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/fn/object/entries.js ***!
  \**************************************************************************************/
[7378, 3265, 3176],

/***/ 3265:
/*!***********************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/es7.object.entries.js ***!
  \***********************************************************************************************/
[7379, 3174, 3189],

/***/ 3266:
/*!******************************************************!*\
  !*** ./atlas_bundles/heatmap/~/invariant/browser.js ***!
  \******************************************************/
346,

/***/ 3267:
/*!**************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react-bootstrap/lib/utils/StyleConfig.js ***!
  \**************************************************************************/
347,

/***/ 3268:
/*!*******************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react-bootstrap/lib/SafeAnchor.js ***!
  \*******************************************************************/
[7380, 3207, 3206, 3214, 3215, 3251, 2919, 3260],

/***/ 3272:
/*!****************************************************!*\
  !*** ./atlas_bundles/heatmap/~/warning/browser.js ***!
  \****************************************************/
352,

/***/ 3274:
/*!******************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react-bootstrap/lib/Glyphicon.js ***!
  \******************************************************************/
[7385, 3207, 3206, 3214, 3215, 3251, 3259, 2919, 3262],

/***/ 3444:
/*!***********************************************!*\
  !*** ./atlas_bundles/heatmap/src/Heatmap.jsx ***!
  \***********************************************/
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	//*------------------------------------------------------------------*
	
	var React = __webpack_require__(/*! react */ 2919);
	var ReactDOM = __webpack_require__(/*! react-dom */ 2951);
	var ReactDOMServer = __webpack_require__(/*! react-dom/server */ 3445);
	var RadioGroup = __webpack_require__(/*! react-radio-group */ 3449);
	var Slider = __webpack_require__(/*! rc-slider */ 3450);
	__webpack_require__(/*! rc-slider/assets/index.css */ 3508);
	
	var DownloadProfilesButton = __webpack_require__(/*! expression-atlas-download-profiles-button */ 3510);
	var shallowCompare = __webpack_require__(/*! react-addons-shallow-compare */ 3563);
	
	var $ = __webpack_require__(/*! jquery */ 3090);
	
	__webpack_require__(/*! jquery-ui-bundle */ 3565);
	__webpack_require__(/*! jquery-hc-sticky */ 3092);
	__webpack_require__(/*! atlas-modernizr */ 3566); // Leaks Modernizr to the global window namespace
	
	__webpack_require__(/*! fancybox */ 3567)($);
	__webpack_require__(/*! fancybox/dist/css/jquery.fancybox.css */ 3568);
	
	__webpack_require__(/*! jquery-toolbar */ 3576);
	__webpack_require__(/*! jquery-toolbar/jquery.toolbar.css */ 3577);
	
	//*------------------------------------------------------------------*
	
	var HeatmapBaselineCellVariance = __webpack_require__(/*! expression-atlas-heatmap-baseline-cell-variance */ 3579);
	var Legend = __webpack_require__(/*! expression-atlas-legend */ 3584);
	var LegendBaseline = Legend.LegendBaseline;
	var LegendDifferential = Legend.LegendDifferential;
	var CellDifferential = __webpack_require__(/*! expression-atlas-cell-differential */ 3598);
	var DisplayLevelsButton = __webpack_require__(/*! expression-atlas-display-levels-button */ 3606);
	var NumberFormat = __webpack_require__(/*! expression-atlas-number-format */ 3600).default;
	var HelpTooltips = __webpack_require__(/*! expression-atlas-help-tooltips */ 3589);
	var ContrastTooltips = __webpack_require__(/*! expression-atlas-contrast-tooltips */ 3608);
	
	var GenePropertiesTooltipModule = __webpack_require__(/*! ./genePropertiesTooltipModule.js */ 3613);
	var FactorTooltipModule = __webpack_require__(/*! ./factorTooltipModule.js */ 3616);
	
	var StickyHeaderModule = __webpack_require__(/*! ./stickyHeaderModule.js */ 3620);
	__webpack_require__(/*! ./stickyHeaderModule.css */ 3621);
	
	//*------------------------------------------------------------------*
	
	__webpack_require__(/*! ./Heatmap.css */ 3623);
	
	//*------------------------------------------------------------------*
	
	var Heatmap = React.createClass({
	    displayName: 'Heatmap',
	
	
	    propTypes: {
	        type: React.PropTypes.shape({
	            isBaseline: React.PropTypes.bool,
	            isProteomics: React.PropTypes.bool,
	            isDifferential: React.PropTypes.bool,
	            isMultiExperiment: React.PropTypes.bool,
	            heatmapTooltip: React.PropTypes.string.isRequired
	        }),
	        heatmapConfig: React.PropTypes.object.isRequired,
	        columnHeaders: React.PropTypes.oneOfType([React.PropTypes.arrayOf(React.PropTypes.shape({
	            assayGroupId: React.PropTypes.string.isRequired,
	            factorValue: React.PropTypes.string.isRequired,
	            factorValueOntologyTermId: React.PropTypes.string
	        })), React.PropTypes.arrayOf(React.PropTypes.shape({
	            id: React.PropTypes.string.isRequired,
	            referenceAssayGroup: React.PropTypes.shape({
	                id: React.PropTypes.string.isRequired,
	                assayAccessions: React.PropTypes.arrayOf(React.PropTypes.string).isRequired,
	                replicates: React.PropTypes.number.isRequired
	            }).isRequired,
	            testAssayGroup: React.PropTypes.shape({
	                id: React.PropTypes.string.isRequired,
	                assayAccessions: React.PropTypes.arrayOf(React.PropTypes.string).isRequired,
	                replicates: React.PropTypes.number.isRequired
	            }).isRequired,
	            displayName: React.PropTypes.string.isRequired
	        }))]).isRequired,
	        profiles: React.PropTypes.object.isRequired,
	        jsonCoexpressions: React.PropTypes.arrayOf(React.PropTypes.shape({
	            geneId: React.PropTypes.string.isRequired,
	            geneName: React.PropTypes.string.isRequired,
	            jsonProfiles: React.PropTypes.object
	        })),
	        geneSetProfiles: React.PropTypes.object,
	        prefFormDisplayLevels: React.PropTypes.object,
	        anatomogramEventEmitter: React.PropTypes.object,
	        googleAnalytics: React.PropTypes.bool,
	        atlasBaseURL: React.PropTypes.string.isRequired,
	        linksAtlasBaseURL: React.PropTypes.string.isRequired,
	        selectGeneIdCallback: React.PropTypes.func,
	        selectedGeneId: React.PropTypes.string,
	        selectColumnIdCallback: React.PropTypes.func,
	        selectedColumnId: React.PropTypes.string,
	        googleAnalyticsCallback: React.PropTypes.func.isRequired
	    },
	
	    getInitialState: function getInitialState() {
	        var displayLevels = this.props.prefFormDisplayLevels ? this.props.prefFormDisplayLevels.val() === "true" : false;
	        var coexpressionsDisplayed = {};
	        if (this.props.jsonCoexpressions) {
	            for (var i = 0; i < this.props.jsonCoexpressions.length; i++) {
	                coexpressionsDisplayed[this.props.jsonCoexpressions[i].geneId] = 0;
	            }
	        }
	        return {
	            showGeneSetProfiles: false,
	            displayLevels: displayLevels,
	            hoveredColumnId: null,
	            hoveredGeneId: null,
	            selectedRadioButton: "gradients",
	            coexpressionsDisplayed: coexpressionsDisplayed,
	            userInteractedWithTheHeatmap: false
	        };
	    },
	
	    _coexpressionsCurrentlyShown: function _coexpressionsCurrentlyShown() {
	        var ans = 0;
	        for (var k in this.state.coexpressionsDisplayed) {
	            ans += this.state.coexpressionsDisplayed[k];
	        }
	        return ans;
	    },
	
	    _getProfiles: function _getProfiles() {
	        if (this.state.showGeneSetProfiles) {
	            return this.props.geneSetProfiles;
	        } else if (!this.props.jsonCoexpressions) {
	            return this.props.profiles;
	        } else {
	            var newRows = [];
	            for (var i = 0; i < this.props.profiles.rows.length; i++) {
	                var thisRow = this.props.profiles.rows[i];
	                newRows.push(thisRow);
	                var coexpressionsForThisRow = this.props.jsonCoexpressions.filter(function (o) {
	                    return o.geneId === thisRow.id && this.state.coexpressionsDisplayed[o.geneId];
	                }.bind(this));
	                for (var j = 0; j < coexpressionsForThisRow.length; j++) {
	                    [].push.apply(newRows, coexpressionsForThisRow[j].jsonProfiles.rows.slice(0, this.state.coexpressionsDisplayed[coexpressionsForThisRow[j].geneId]));
	                }
	            }
	            return Object.create(this.props.profiles, { rows: { value: newRows } });
	        }
	    },
	
	    _hoverColumn: function _hoverColumn(columnId) {
	        this.setState({ hoveredColumnId: columnId }, function () {
	            this.props.anatomogramEventEmitter.emit('gxaHeatmapColumnHoverChange', columnId);
	        });
	    },
	
	    _hoverRow: function _hoverRow(rowId) {
	        this.setState({ hoveredRowId: rowId }, function () {
	            this.props.anatomogramEventEmitter.emit('gxaHeatmapRowHoverChange', rowId);
	        });
	    },
	
	    selectColumn: function selectColumn(columnId) {
	        if (this.props.selectColumnIdCallback) {
	            this.props.selectColumnIdCallback(columnId);
	        }
	    },
	
	    selectGene: function selectGene(geneId) {
	        if (this.props.selectGeneIdCallback) {
	            this.props.selectGeneIdCallback(geneId);
	        }
	    },
	
	    toggleGeneSets: function toggleGeneSets() {
	        this.setState({ showGeneSetProfiles: !this.state.showGeneSetProfiles });
	    },
	
	    toggleDisplayLevels: function toggleDisplayLevels() {
	        var newDisplayLevels = !this.state.displayLevels;
	        this.setState({ displayLevels: newDisplayLevels });
	        if (this.props.prefFormDisplayLevels) {
	            this.props.prefFormDisplayLevels.val(newDisplayLevels);
	        }
	        $(window).resize();
	    },
	
	    toggleRadioButton: function toggleRadioButton(newSelected) {
	        this.setState({ selectedRadioButton: newSelected });
	        this.setState({ displayLevels: newSelected === "levels" }); //update the LegendType
	    },
	
	    isMicroarray: function isMicroarray() {
	        return this.props.profiles.rows[0].hasOwnProperty("designElement") && this.props.profiles.rows[0].designElement;
	    },
	
	    hasQuartiles: function hasQuartiles() {
	        var hasQuartiles = false;
	        for (var i = 0; i < this.props.profiles.rows[0].expressions.length; i++) {
	            if (this.props.profiles.rows[0].expressions[i].quartiles != undefined) {
	                hasQuartiles = true;
	                break;
	            }
	        }
	        return hasQuartiles;
	    },
	
	    isSingleGeneResult: function isSingleGeneResult() {
	        return this.props.profiles.rows.length == 1;
	    },
	
	    _stateChangeRepresentsInteraction: function _stateChangeRepresentsInteraction(s1, s2) {
	        var ks = ["displayLevels", "showGeneSetProfiles", "hoveredColumnId", "hoveredGeneId", "hoveredRowId"];
	        for (var i = 0; i < ks.length; i++) {
	            var k = ks[i];
	            if (s1[k] !== s2[k]) {
	                return k || true;
	            }
	        }
	        return false;
	    },
	
	    _propsChangeRepresentsInteraction: function _propsChangeRepresentsInteraction(s1, s2) {
	        var ks = ["selectedGeneId", "selectedColumnId"];
	        for (var i = 0; i < ks.length; i++) {
	            var k = ks[i];
	            if (s1[k] !== s2[k]) {
	                return k || true;
	            }
	        }
	        return false;
	    },
	
	    shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {
	        return shallowCompare(this, nextProps, nextState);
	    },
	
	    componentWillUpdate: function componentWillUpdate(nextProps, nextState) {
	        if (!this.state.userInteractedWithTheHeatmap) {
	            if (this._stateChangeRepresentsInteraction(this.state, nextState)) {
	                this.props.googleAnalyticsCallback('send', 'event', 'HeatmapReact', 'interact');
	                this.setState({ userInteractedWithTheHeatmap: true });
	            }
	
	            if (this._propsChangeRepresentsInteraction(this.props, nextProps)) {
	                this.props.googleAnalyticsCallback('send', 'event', 'HeatmapReact', 'interact');
	                this.setState({ userInteractedWithTheHeatmap: true });
	            }
	        }
	
	        if (nextProps.ontologyIdsToHighlight) {
	            var forEachXNotInYsEmit = function forEachXNotInYsEmit(xs, ys, eventName) {
	                xs.filter(function (id) {
	                    return ys.indexOf(id) == -1;
	                }).forEach(function (id) {
	                    eventEmitter.emit(eventName, id);
	                });
	            };
	
	            forEachXNotInYsEmit(nextProps.ontologyIdsToHighlight, this.props.ontologyIdsToHighlight, 'gxaAnatomogramTissueMouseEnter');
	            forEachXNotInYsEmit(this.props.ontologyIdsToHighlight, nextProps.ontologyIdsToHighlight, 'gxaAnatomogramTissueMouseLeave');
	        }
	    },
	
	    componentDidMount: function componentDidMount() {
	        var table = ReactDOM.findDOMNode(this.refs.heatmapTable),
	            stickyIntersect = ReactDOM.findDOMNode(this.refs.stickyIntersect),
	            stickyColumn = ReactDOM.findDOMNode(this.refs.stickyColumn),
	            stickyHeadRow = ReactDOM.findDOMNode(this.refs.stickyHeader),
	            stickyWrap = ReactDOM.findDOMNode(this.refs.stickyWrap),
	            countAndLegend = ReactDOM.findDOMNode(this.refs.countAndLegend);
	
	        var stickyHeader = StickyHeaderModule(table, stickyIntersect, stickyColumn, stickyHeadRow, stickyWrap, countAndLegend);
	
	        stickyHeader.setWidthsAndReposition();
	        $(countAndLegend).hcSticky({ bottomEnd: stickyHeader.calculateAllowance() });
	
	        $(stickyWrap).scroll(stickyHeader.stickyReposition);
	        $(window).resize(stickyHeader.setWidthsAndReposition).scroll(stickyHeader.stickyReposition).on("gxaResizeHeatmapAnatomogramHeader", function () {
	            stickyHeader.setWidthAndHeight();
	            $(countAndLegend).hcSticky("resize");
	        });
	    },
	
	    _getMaxExpressionLevel: function _getMaxExpressionLevel() {
	        var maxExpressionLevel = -Infinity;
	        var profileRows = this._getProfiles().rows;
	        for (var i = 0; i < profileRows.length; i++) {
	            for (var j = 0; j < (profileRows[i].expressions || []).length; j++) {
	                var value = profileRows[i].expressions[j].value;
	                if (!isNaN(value) && value > maxExpressionLevel) {
	                    maxExpressionLevel = value;
	                }
	            }
	        }
	        return maxExpressionLevel;
	    },
	
	    _getMinExpressionLevel: function _getMinExpressionLevel() {
	        var minExpressionLevel = Infinity;
	        var profileRows = this._getProfiles().rows;
	        for (var i = 0; i < profileRows.length; i++) {
	            for (var j = 0; j < (profileRows[i].expressions || []).length; j++) {
	                var value = profileRows[i].expressions[j].value;
	                if (!isNaN(value) && value < minExpressionLevel) {
	                    minExpressionLevel = value;
	                }
	            }
	        }
	        return minExpressionLevel;
	    },
	
	    legendType: function legendType() {
	        if (this.props.type.isBaseline || this.props.type.isMultiExperiment) {
	            return React.createElement(LegendBaseline, {
	                atlasBaseURL: this.props.atlasBaseURL,
	                minExpressionLevel: this._getMinExpressionLevel(),
	                maxExpressionLevel: this._getMaxExpressionLevel(),
	                isMultiExperiment: this.props.type.isMultiExperiment ? true : false });
	        } else {
	            var ps = this._getProfiles();
	            return React.createElement(LegendDifferential, { atlasBaseURL: this.props.atlasBaseURL,
	                minDownLevel: parseFloat(ps.minDownLevel),
	                maxDownLevel: parseFloat(ps.maxDownLevel),
	                minUpLevel: parseFloat(ps.minUpLevel),
	                maxUpLevel: parseFloat(ps.maxUpLevel) });
	        }
	    },
	
	    _getCoexpressionsAvailable: function _getCoexpressionsAvailable() {
	        return !this.props.jsonCoexpressions ? [] : this.props.jsonCoexpressions.map(function (value) {
	            return { name: value.geneName, id: value.geneId, amount: value.jsonProfiles && value.jsonProfiles.rows ? value.jsonProfiles.rows.length : 0 };
	        });
	    },
	
	    _showCoexpressionsFor: function _showCoexpressionsFor(geneId, amount) {
	        this.setState(function (previousState) {
	            if (previousState.coexpressionsDisplayed.hasOwnProperty(geneId)) {
	                previousState.coexpressionsDisplayed[geneId] = amount;
	            }
	            return { coexpressionsDisplayed: JSON.parse(JSON.stringify(previousState.coexpressionsDisplayed)) };
	        });
	    },
	
	    _showGeneCount: function _showGeneCount() {
	        var shownRows, totalRows;
	        if (this.props.type.isMultiExperiment || !this.state.showGeneSetProfiles || !this.props.geneSetProfiles) {
	            shownRows = this.props.profiles.rows.length;
	            totalRows = this.props.profiles.searchResultTotal;
	        } else {
	            shownRows = this.props.geneSetProfiles.rows.length;
	            totalRows = this.props.geneSetProfiles.searchResultTotal;
	        }
	
	        return React.createElement(
	            'div',
	            { style: { display: "inline-block", 'verticalAlign': "top" } },
	            this.props.type.isMultiExperiment ? React.createElement(
	                'span',
	                { id: 'geneCount' },
	                'Showing ',
	                shownRows,
	                ' of ',
	                totalRows,
	                ' experiments found: '
	            ) : React.createElement(
	                'span',
	                { id: 'geneCount' },
	                'Showing ',
	                shownRows,
	                ' of ',
	                totalRows,
	                ' ',
	                this.state.showGeneSetProfiles ? 'gene sets' : 'genes',
	                ' found',
	                !this.props.jsonCoexpressions || !this.props.jsonCoexpressions.length ? ":" : " and " + (this._getProfiles().rows.length - shownRows) + " similarly expressed genes:"
	            ),
	            this.props.geneSetProfiles && !this.props.type.isMultiExperiment ? React.createElement(
	                'a',
	                { href: 'javascript:void(0)', onClick: this.toggleGeneSets },
	                this.state.showGeneSetProfiles ? '(show individual genes)' : '(show by gene set)'
	            ) : ''
	        );
	    },
	
	    _constructDownloadProfilesURL: function _constructDownloadProfilesURL() {
	        return this.props.heatmapConfig.downloadProfilesURL.match(/.*\?.+/) && Object.keys(this.state.coexpressionsDisplayed).length > 0 ? this.props.heatmapConfig.downloadProfilesURL + "&coexpressions=" + JSON.stringify(this.state.coexpressionsDisplayed) : this.props.heatmapConfig.downloadProfilesURL;
	    },
	
	    render: function render() {
	        var paddingMargin = "15px";
	
	        return React.createElement(
	            'div',
	            null,
	            React.createElement(
	                'div',
	                { ref: 'countAndLegend', className: 'gxaHeatmapCountAndLegend', style: { "paddingBottom": paddingMargin, "position": "sticky" } },
	                this._showGeneCount(),
	                React.createElement(
	                    'div',
	                    { style: { display: "inline-block", "paddingLeft": "10px", "verticalAlign": "top" } },
	                    React.createElement(DownloadProfilesButton, { ref: 'downloadProfilesButton',
	                        downloadProfilesURL: this._constructDownloadProfilesURL(),
	                        atlasBaseURL: this.props.atlasBaseURL,
	                        disclaimer: this.props.heatmapConfig.disclaimer,
	                        onDownloadCallbackForAnalytics: function () {
	                            this.props.googleAnalyticsCallback('send', 'event', 'HeatmapReact', 'downloadData');
	                        }.bind(this) })
	                ),
	                React.createElement(
	                    'div',
	                    { style: { display: "inline-block", "paddingLeft": "20px" } },
	                    this.legendType()
	                )
	            ),
	            React.createElement(
	                'div',
	                { ref: 'stickyWrap', className: 'gxaStickyTableWrap', style: { "marginTop": paddingMargin } },
	                React.createElement(
	                    'table',
	                    { ref: 'heatmapTable', className: 'gxaTableGrid gxaStickyEnabled', id: 'heatmap-table' },
	                    React.createElement(HeatmapTableHeader, { ref: 'heatmapTableHeader',
	                        radioId: 'table',
	                        isMicroarray: this.isMicroarray(),
	                        hasQuartiles: this.hasQuartiles(),
	                        isSingleGeneResult: this.isSingleGeneResult(),
	                        currentlyShowingCoexpressions: !!this._coexpressionsCurrentlyShown(),
	                        type: this.props.type,
	                        columnHeaders: this.props.columnHeaders,
	                        multipleColumnHeaders: this.props.multipleColumnHeaders,
	                        selectedColumnId: this.props.selectedColumnId,
	                        selectColumn: this.selectColumn,
	                        hoverColumnCallback: this._hoverColumn,
	                        heatmapConfig: this.props.heatmapConfig,
	                        atlasBaseURL: this.props.atlasBaseURL,
	                        displayLevels: this.state.displayLevels,
	                        toggleDisplayLevels: this.toggleDisplayLevels,
	                        showGeneSetProfiles: this.state.showGeneSetProfiles,
	                        selectedRadioButton: this.state.selectedRadioButton,
	                        toggleRadioButton: this.toggleRadioButton,
	                        renderContrastFactorHeaders: true,
	                        anatomogramEventEmitter: this.props.anatomogramEventEmitter }),
	                    React.createElement(HeatmapTableRows, { profiles: this._getProfiles().rows,
	                        selectedGeneId: this.props.selectedGeneId,
	                        selectGene: this.selectGene,
	                        type: this.props.type,
	                        heatmapConfig: this.props.heatmapConfig,
	                        atlasBaseURL: this.props.atlasBaseURL,
	                        linksAtlasBaseURL: this.props.linksAtlasBaseURL,
	                        displayLevels: this.state.displayLevels,
	                        showGeneSetProfiles: this.state.showGeneSetProfiles,
	                        selectedRadioButton: this.state.selectedRadioButton,
	                        hoverColumnCallback: this._hoverColumn,
	                        hoverRowCallback: this._hoverRow,
	                        hasQuartiles: this.hasQuartiles(),
	                        isSingleGeneResult: this.isSingleGeneResult(),
	                        renderExpressionCells: true })
	                ),
	                React.createElement(
	                    'div',
	                    { ref: 'stickyIntersect', className: 'gxaStickyTableIntersect' },
	                    React.createElement(
	                        'table',
	                        { className: 'gxaTableGrid' },
	                        React.createElement(HeatmapTableHeader, { isMicroarray: this.isMicroarray(),
	                            radioId: 'intersect',
	                            hasQuartiles: this.hasQuartiles(),
	                            isSingleGeneResult: this.isSingleGeneResult(),
	                            currentlyShowingCoexpressions: !!this._coexpressionsCurrentlyShown(),
	                            type: this.props.type,
	                            columnHeaders: this.props.columnHeaders,
	                            multipleColumnHeaders: this.props.multipleColumnHeaders,
	                            selectedColumnId: this.props.selectedColumnId,
	                            selectColumn: this.selectColumn,
	                            heatmapConfig: this.props.heatmapConfig,
	                            atlasBaseURL: this.props.atlasBaseURL,
	                            linksAtlasBaseURL: this.props.linksAtlasBaseURL,
	                            displayLevels: this.state.displayLevels,
	                            toggleDisplayLevels: this.toggleDisplayLevels,
	                            showGeneSetProfiles: this.state.showGeneSetProfiles,
	                            selectedRadioButton: this.state.selectedRadioButton,
	                            toggleRadioButton: this.toggleRadioButton,
	                            renderContrastFactorHeaders: false })
	                    )
	                ),
	                React.createElement(
	                    'div',
	                    { ref: 'stickyColumn', className: 'gxaStickyTableColumn' },
	                    React.createElement(
	                        'table',
	                        { className: 'gxaTableGrid' },
	                        React.createElement(HeatmapTableHeader, { isMicroarray: this.isMicroarray(),
	                            radioId: 'column',
	                            hasQuartiles: this.hasQuartiles(),
	                            isSingleGeneResult: this.isSingleGeneResult(),
	                            currentlyShowingCoexpressions: !!this._coexpressionsCurrentlyShown(),
	                            columnHeaders: this.props.columnHeaders,
	                            type: this.props.type,
	                            multipleColumnHeaders: this.props.multipleColumnHeaders,
	                            selectedColumnId: this.props.selectedColumnId,
	                            selectColumn: this.selectColumn,
	                            heatmapConfig: this.props.heatmapConfig,
	                            atlasBaseURL: this.props.atlasBaseURL,
	                            displayLevels: this.state.displayLevels,
	                            toggleDisplayLevels: this.toggleDisplayLevels,
	                            showGeneSetProfiles: this.state.showGeneSetProfiles,
	                            selectedRadioButton: this.state.selectedRadioButton,
	                            toggleRadioButton: this.toggleRadioButton,
	                            renderContrastFactorHeaders: false }),
	                        React.createElement(HeatmapTableRows, { profiles: this._getProfiles().rows,
	                            selectedGeneId: this.props.selectedGeneId,
	                            selectGene: this.selectGene,
	                            type: this.props.type,
	                            heatmapConfig: this.props.heatmapConfig,
	                            atlasBaseURL: this.props.atlasBaseURL,
	                            linksAtlasBaseURL: this.props.linksAtlasBaseURL,
	                            displayLevels: this.state.displayLevels,
	                            showGeneSetProfiles: this.state.showGeneSetProfiles,
	                            selectedRadioButton: this.state.selectedRadioButton,
	                            hoverRowCallback: this._hoverRow,
	                            hasQuartiles: this.hasQuartiles(),
	                            isSingleGeneResult: this.isSingleGeneResult(),
	                            renderExpressionCells: false })
	                    )
	                ),
	                React.createElement(
	                    'div',
	                    { ref: 'stickyHeader', className: 'gxaStickyTableHeader' },
	                    React.createElement(
	                        'table',
	                        { className: 'gxaTableGrid' },
	                        React.createElement(HeatmapTableHeader, { isMicroarray: this.isMicroarray(),
	                            radioId: 'header',
	                            hasQuartiles: this.hasQuartiles(),
	                            isSingleGeneResult: this.isSingleGeneResult(),
	                            currentlyShowingCoexpressions: !!this._coexpressionsCurrentlyShown(),
	                            hoverColumnCallback: this._hoverColumn,
	                            type: this.props.type,
	                            columnHeaders: this.props.columnHeaders,
	                            multipleColumnHeaders: this.props.multipleColumnHeaders,
	                            selectedColumnId: this.props.selectedColumnId,
	                            selectColumn: this.selectColumn,
	                            heatmapConfig: this.props.heatmapConfig,
	                            atlasBaseURL: this.props.atlasBaseURL,
	                            linksAtlasBaseURL: this.props.linksAtlasBaseURL,
	                            displayLevels: this.state.displayLevels,
	                            toggleDisplayLevels: this.toggleDisplayLevels,
	                            showGeneSetProfiles: this.state.showGeneSetProfiles,
	                            selectedRadioButton: this.state.selectedRadioButton,
	                            toggleRadioButton: this.toggleRadioButton,
	                            renderContrastFactorHeaders: true,
	                            anatomogramEventEmitter: this.props.anatomogramEventEmitter })
	                    )
	                ),
	                React.createElement(HeatmapBottomOptions, { coexpressionsAvailable: this._getCoexpressionsAvailable(),
	                    showCoexpressionsFor: this._showCoexpressionsFor,
	                    googleAnalyticsCallback: this.props.googleAnalyticsCallback })
	            )
	        );
	    }
	
	});
	
	var HeatmapTableHeader = React.createClass({
	    displayName: 'HeatmapTableHeader',
	
	    propTypes: {
	        currentlyShowingCoexpressions: React.PropTypes.bool.isRequired
	    },
	
	    renderContrastFactorHeaders: function renderContrastFactorHeaders() {
	        var heatmapConfig = this.props.heatmapConfig;
	
	        if (this.props.type.isBaseline) {
	            return renderFactorHeaders(heatmapConfig, this.props.atlasBaseURL, this.props.mainHeaderNames, this.props.type, this.props.columnHeaders, heatmapConfig.experimentAccession, this.props.selectColumn, this.props.selectedColumnId, this.props.hoverColumnCallback, this.props.anatomogramEventEmitter);
	        } else if (this.props.type.isDifferential) {
	            return renderContrastHeaders(heatmapConfig, this.props.atlasBaseURL, this.props.columnHeaders, this.props.selectedColumnId, this.props.selectColumn, heatmapConfig.experimentAccession);
	        } else if (this.props.type.isMultiExperiment) {
	            return renderFactorHeaders(heatmapConfig, this.props.atlasBaseURL, null, this.props.type, this.props.columnHeaders, "", this.props.selectColumn, this.props.selectedColumnId, this.props.hoverColumnCallback, this.props.anatomogramEventEmitter);
	        }
	    },
	
	    render: function render() {
	        var showGeneProfile = this.props.showGeneSetProfiles ? "Gene set" : "Gene";
	        var showExperimentProfile = this.props.type.isMultiExperiment ? "Experiment" : showGeneProfile;
	
	        return React.createElement(
	            'thead',
	            null,
	            React.createElement(
	                'tr',
	                null,
	                React.createElement(
	                    'th',
	                    { className: 'gxaHorizontalHeaderCell gxaHeatmapTableIntersect', colSpan: this.props.isMicroarray ? 2 : undefined },
	                    React.createElement(TopLeftCorner, { type: this.props.type,
	                        hasQuartiles: this.props.hasQuartiles,
	                        radioId: this.props.radioId,
	                        isSingleGeneResult: this.props.isSingleGeneResult,
	                        currentlyShowingCoexpressions: this.props.currentlyShowingCoexpressions,
	                        heatmapConfig: this.props.heatmapConfig,
	                        displayLevels: this.props.displayLevels,
	                        toggleDisplayLevels: this.props.toggleDisplayLevels,
	                        selectedRadioButton: this.props.selectedRadioButton,
	                        toggleRadioButton: this.props.toggleRadioButton,
	                        atlasBaseURL: this.props.atlasBaseURL })
	                ),
	                this.props.renderContrastFactorHeaders ? this.renderContrastFactorHeaders() : null
	            ),
	            React.createElement(
	                'tr',
	                null,
	                React.createElement(
	                    'th',
	                    { className: 'gxaHorizontalHeaderCell gxaHeatmapTableIntersect', style: this.props.isMicroarray ? { width: "166px" } : {} },
	                    React.createElement(
	                        'div',
	                        null,
	                        showExperimentProfile
	                    )
	                ),
	                this.props.isMicroarray ? React.createElement(
	                    'th',
	                    { className: 'gxaHorizontalHeaderCell gxaHeatmapTableIntersect' },
	                    React.createElement(
	                        'div',
	                        null,
	                        'Design Element'
	                    )
	                ) : null
	            )
	        );
	    }
	});
	
	function restrictLabelSize(label, maxSize) {
	    var result = label;
	    if (result.length > maxSize + 1) {
	        // +1 to account for the extra ellipsis character appended
	        result = result.substring(0, maxSize);
	        if (result.lastIndexOf(" ") > maxSize - 5) {
	            result = result.substring(0, result.lastIndexOf(" "));
	        }
	        result = result + "…";
	    }
	    return result;
	}
	
	function renderFactorHeaders(heatmapConfig, atlasBaseURL, mainHeaderNames, type, assayGroupFactors, experimentAccession, selectColumn, selectedColumnId, hoverColumnCallback, anatomogramEventEmitter) {
	
	    return assayGroupFactors.map(function (assayGroupFactor) {
	        return React.createElement(FactorHeader, { key: mainHeaderNames + assayGroupFactor.factorValue,
	            type: type,
	            heatmapConfig: heatmapConfig,
	            factorName: assayGroupFactor.factorValue,
	            svgPathId: assayGroupFactor.factorValueOntologyTermId,
	            assayGroupId: assayGroupFactor.assayGroupId,
	            experimentAccession: experimentAccession,
	            selectColumn: selectColumn,
	            selected: assayGroupFactor.assayGroupId === selectedColumnId,
	            hoverColumnCallback: hoverColumnCallback,
	            anatomogramEventEmitter: anatomogramEventEmitter,
	            atlasBaseURL: atlasBaseURL });
	    });
	}
	
	var FactorHeader = React.createClass({
	    displayName: 'FactorHeader',
	
	
	    getInitialState: function getInitialState() {
	        return { hover: false, selected: false };
	    },
	
	    onMouseEnter: function onMouseEnter() {
	        if (this.props.heatmapConfig.enableEnsemblLauncher) {
	            this.setState({ hover: true });
	        }
	        this.props.hoverColumnCallback(this.props.svgPathId);
	    },
	
	    onMouseLeave: function onMouseLeave() {
	        if (this.props.heatmapConfig.enableEnsemblLauncher) {
	            this.setState({ hover: false });
	        }
	        this.props.hoverColumnCallback(null);
	        this._closeTooltip();
	    },
	
	    _closeTooltip: function _closeTooltip() {
	        if (!this.props.type.isMultiExperiment) {
	            $(ReactDOM.findDOMNode(this)).tooltip("close");
	        }
	    },
	
	    _anatomogramTissueMouseEnter: function _anatomogramTissueMouseEnter(svgPathId) {
	        if (svgPathId === this.props.svgPathId) {
	            $(ReactDOM.findDOMNode(this.refs.headerCell)).addClass("gxaHeaderHover");
	        }
	    },
	
	    _anatomogramTissueMouseLeave: function _anatomogramTissueMouseLeave(svgPathId) {
	        if (svgPathId === this.props.svgPathId) {
	            $(ReactDOM.findDOMNode(this.refs.headerCell)).removeClass("gxaHeaderHover");
	        }
	    },
	
	    onClick: function onClick() {
	        if (this.props.heatmapConfig.enableEnsemblLauncher) {
	            this.props.selectColumn(this.props.assayGroupId);
	        }
	    },
	
	    componentDidMount: function componentDidMount() {
	        if (!this.props.type.isMultiExperiment) {
	            FactorTooltipModule.init(this.props.atlasBaseURL, this.props.heatmapConfig.accessKey, ReactDOM.findDOMNode(this), this.props.experimentAccession, this.props.assayGroupId);
	        }
	        if (this.props.anatomogramEventEmitter) {
	            this.props.anatomogramEventEmitter.addListener('gxaAnatomogramTissueMouseEnter', this._anatomogramTissueMouseEnter);
	            this.props.anatomogramEventEmitter.addListener('gxaAnatomogramTissueMouseLeave', this._anatomogramTissueMouseLeave);
	        }
	    },
	
	    render: function render() {
	        var showSelectTextOnHover = this.state.hover && !this.props.selected ? React.createElement(
	            'span',
	            { style: { position: "absolute", width: "10px", right: "0px", left: "95px", float: "right", color: "green" } },
	            '  select'
	        ) : null;
	        var showTickWhenSelected = this.props.selected ? React.createElement(
	            'span',
	            { className: 'rotate_tick', style: { position: "absolute", width: "5px", right: "0px", left: "125px", float: "right", color: "green" } },
	            ' \u2714 '
	        ) : null;
	        var thClass = "rotated_cell gxaHoverableHeader" + (this.props.selected ? " gxaVerticalHeaderCell-selected" : " gxaVerticalHeaderCell") + (this.props.heatmapConfig.enableEnsemblLauncher ? " gxaSelectableHeader" : "");
	        var divClass = "rotate_text factor-header";
	        var factorName = Modernizr.csstransforms ? restrictLabelSize(this.props.factorName, 14) : this.props.factorName;
	
	        return React.createElement(
	            'th',
	            { ref: 'headerCell', className: thClass, onMouseEnter: this.onMouseEnter, onMouseLeave: this.onMouseLeave, onClick: this.onClick, rowSpan: '2' },
	            React.createElement(
	                'div',
	                { 'data-assay-group-id': this.props.assayGroupId, 'data-experiment-accession': this.props.experimentAccession, className: divClass },
	                factorName,
	                showSelectTextOnHover,
	                showTickWhenSelected
	            )
	        );
	    }
	
	});
	
	function renderContrastHeaders(heatmapConfig, atlasBaseURL, contrasts, selectedColumnId, selectColumn, experimentAccession) {
	    var contrastHeaders = contrasts.map(function (contrast) {
	
	        var plotsThisContrast = {
	            maPlot: contrast.resources.some(function (e) {
	                return e.type === 'ma-plot';
	            }),
	            gseaGo: contrast.resources.some(function (e) {
	                return e.type === 'gsea_go';
	            }),
	            gseaInterpro: contrast.resources.some(function (e) {
	                return e.type === 'gsea_interpro';
	            }),
	            gseaReactome: contrast.resources.some(function (e) {
	                return e.type === 'gsea_reactome';
	            })
	        };
	
	        // var gseaPlotsThisContrast = this.props.gseaPlots ? this.props.gseaPlots[contrast.id] : {go: false, interpro: false, reactome: false};
	        return React.createElement(ContrastHeader, { key: contrast.id,
	            heatmapConfig: heatmapConfig,
	            atlasBaseURL: atlasBaseURL,
	            selectColumn: selectColumn,
	            selected: contrast.id === selectedColumnId,
	            contrastName: contrast.displayName, arrayDesignAccession: contrast.arrayDesignAccession,
	            contrastId: contrast.id, experimentAccession: experimentAccession,
	            showMaPlotButton: plotsThisContrast.maPlot,
	            showGseaGoPlot: plotsThisContrast.gseaGo,
	            showGseaInterproPlot: plotsThisContrast.gseaInterpro,
	            showGseaReactomePlot: plotsThisContrast.gseaReactome });
	    }.bind(this));
	
	    return contrastHeaders;
	}
	
	var ContrastHeader = React.createClass({
	    displayName: 'ContrastHeader',
	
	
	    getInitialState: function getInitialState() {
	        return { hover: false, selected: false };
	    },
	
	    onMouseEnter: function onMouseEnter() {
	        this.setState({ hover: true });
	    },
	
	    onMouseLeave: function onMouseLeave() {
	        this.setState({ hover: false });
	        this._closeTooltip();
	    },
	
	    _closeTooltip: function _closeTooltip() {
	        $(ReactDOM.findDOMNode(this)).tooltip("close");
	    },
	
	    onClick: function onClick() {
	        this.props.selectColumn(this.props.contrastId);
	    },
	
	    componentDidMount: function componentDidMount() {
	        ContrastTooltips(this.props.atlasBaseURL, this.props.heatmapConfig.accessKey, ReactDOM.findDOMNode(this), this.props.experimentAccession, this.props.contrastId);
	
	        if (this.showPlotsButton()) {
	            this.renderToolBarContent(ReactDOM.findDOMNode(this.refs.plotsToolBarContent));
	
	            var $plotsButton = $(ReactDOM.findDOMNode(this.refs.plotsButton));
	            $plotsButton.tooltip({
	                hide: false,
	                show: false,
	                tooltipClass: "gxaHelpTooltip"
	            }).button();
	            $plotsButton.toolbar({
	                content: ReactDOM.findDOMNode(this.refs.plotsToolBarContent),
	                position: "right",
	                style: "white",
	                event: "click",
	                hideOnClick: true
	            });
	            $plotsButton.addClass("gxaNoTextButton");
	        }
	    },
	
	    renderToolBarContent: function renderToolBarContent(contentNode) {
	
	        var $contentNode = $(contentNode);
	
	        var maPlotURL = this.props.atlasBaseURL + "/external-resources/" + this.props.experimentAccession + '/' + (this.props.arrayDesignAccession ? this.props.arrayDesignAccession + "/" : "") + this.props.contrastId + "/ma-plot.png";
	        var maPlotImgSrcURL = this.props.atlasBaseURL + "/resources/images/maplot-button.png";
	
	        var gseaGoPlotURL = this.props.atlasBaseURL + "/external-resources/" + this.props.experimentAccession + '/' + this.props.contrastId + "/gsea_go.png";
	        var gseaGoPlotImgSrcURL = this.props.atlasBaseURL + "/resources/images/gsea-go-button.png";
	
	        var gseaInterproPlotURL = this.props.atlasBaseURL + "/external-resources/" + this.props.experimentAccession + '/' + this.props.contrastId + "/gsea_interpro.png";
	        var gseaInterproImgSrcURL = this.props.atlasBaseURL + '/resources/images/gsea-interpro-button.png';
	
	        var gseaReactomePlotURL = this.props.atlasBaseURL + "/external-resources/" + this.props.experimentAccession + '/' + this.props.contrastId + "/gsea_reactome.png";
	        var gseaReactomePlotImgSrcURL = this.props.atlasBaseURL + "/resources/images/gsea-reactome-button.png";
	
	        var content = React.createElement(
	            'div',
	            null,
	            this.props.showMaPlotButton ? React.createElement(
	                'a',
	                { href: maPlotURL, id: 'maButtonID', title: 'Click to view MA plot for the contrast across all genes', onClick: this.clickButton },
	                React.createElement('img', { src: maPlotImgSrcURL })
	            ) : null,
	            this.props.showGseaGoPlot ? React.createElement(
	                'a',
	                { href: gseaGoPlotURL, id: 'goButtonID', title: 'Click to view GO terms enrichment analysis plot', onClick: this.clickButton },
	                React.createElement('img', { src: gseaGoPlotImgSrcURL })
	            ) : null,
	            this.props.showGseaInterproPlot ? React.createElement(
	                'a',
	                { href: gseaInterproPlotURL, id: 'interproButtonID', title: 'Click to view Interpro domains enrichment analysis plot', onClick: this.clickButton },
	                React.createElement('img', { src: gseaInterproImgSrcURL })
	            ) : null,
	            this.props.showGseaReactomePlot ? React.createElement(
	                'a',
	                { href: gseaReactomePlotURL, id: 'reactomeButtonID', title: 'Click to view Reactome pathways enrichment analysis plot', onClick: this.clickButton },
	                React.createElement('img', { src: gseaReactomePlotImgSrcURL })
	            ) : null
	        );
	
	        // the tool bar content will be copied around the DOM by the toolbar plugin
	        // so we render using static markup because otherwise when copied, we'll end up with
	        // duplicate data-reactids
	        $contentNode.html(ReactDOMServer.renderToStaticMarkup(content));
	
	        $contentNode.find('a').tooltip({
	            tooltipClass: "gxaHelpTooltip"
	        });
	
	        //need to use each here otherwise we get a fancybox error
	        $contentNode.find('a').each(function (index, button) {
	            $(button).fancybox({
	                padding: 0,
	                openEffect: 'elastic',
	                closeEffect: 'elastic'
	            });
	        });
	    },
	
	    clickButton: function clickButton(event) {
	        // prevent contrast from being selected
	        event.stopPropagation();
	    },
	
	    showPlotsButton: function showPlotsButton() {
	        return this.props.showMaPlotButton || this.props.showGseaGoPlot || this.props.showGseaInterproPlot || this.props.showGseaReactomePlot;
	    },
	
	    render: function render() {
	        var thStyle = this.showPlotsButton() ? { minWidth: "80px" } : {};
	        var textStyle = this.showPlotsButton() ? { top: "57px" } : {};
	
	        var plotsImgSrcURL = this.props.atlasBaseURL + "/resources/images/yellow-chart-icon.png";
	
	        var plotsButton = React.createElement(
	            'div',
	            { style: { textAlign: "right", paddingRight: "3px" } },
	            React.createElement(
	                'a',
	                { href: '#', ref: 'plotsButton', onClick: this.clickButton, title: 'Click to view plots' },
	                React.createElement('img', { src: plotsImgSrcURL })
	            )
	        );
	
	        var showSelectTextOnHover = this.state.hover && !this.props.selected ? React.createElement(
	            'span',
	            { style: { position: "absolute", width: "10px", right: "0px", left: "95px", bottom: "-35px", color: "green" } },
	            '  select'
	        ) : null;
	        var showTickWhenSelected = this.props.selected ? React.createElement(
	            'span',
	            { className: 'rotate_tick', style: { position: "absolute", width: "5px", right: "0px", left: "125px", bottom: "-35px", color: "green" } },
	            ' \u2714 '
	        ) : null;
	        var thClass = "rotated_cell gxaHoverableHeader" + (this.props.selected ? " gxaVerticalHeaderCell-selected" : " gxaVerticalHeaderCell") + (this.props.heatmapConfig.enableEnsemblLauncher ? " gxaSelectableHeader " : "");
	        var divClass = "rotate_text factor-header";
	        var contrastName = Modernizr.csstransforms ? restrictLabelSize(this.props.contrastName, 17) : this.props.contrastName;
	
	        return React.createElement(
	            'th',
	            { className: thClass, rowSpan: '2', style: thStyle, onMouseEnter: this.props.heatmapConfig.enableEnsemblLauncher ? this.onMouseEnter : undefined, onMouseLeave: this.props.heatmapConfig.enableEnsemblLauncher ? this.onMouseLeave : this._closeTooltip, onClick: this.props.heatmapConfig.enableEnsemblLauncher ? this.onClick : undefined },
	            React.createElement(
	                'div',
	                { 'data-contrast-id': this.props.contrastId, 'data-experiment-accession': this.props.experimentAccession, className: divClass, style: textStyle },
	                contrastName,
	                showSelectTextOnHover,
	                showTickWhenSelected
	            ),
	            this.showPlotsButton() ? plotsButton : null,
	            this.showPlotsButton() ? React.createElement(
	                'div',
	                { ref: 'plotsToolBarContent', style: { display: "none" } },
	                'placeholder'
	            ) : null
	        );
	    }
	
	});
	
	var TopLeftCorner = React.createClass({
	    displayName: 'TopLeftCorner',
	
	
	    displayLevelsBaseline: function displayLevelsBaseline() {
	        if (this.props.hasQuartiles && this.props.isSingleGeneResult) {
	            var LRG = this.props.currentlyShowingCoexpressions ? LevelsRadioGroup("gradients", "levels") : LevelsRadioGroup("gradients", "levels", "variance");
	            return React.createElement(LRG, { radioId: this.props.radioId,
	                selectedRadioButton: this.props.selectedRadioButton,
	                toggleRadioButton: this.props.toggleRadioButton });
	        } else if (this.props.type.isBaseline || this.props.type.isMultiExperiment) {
	            return React.createElement(DisplayLevelsButton, { hideText: 'Hide levels',
	                showText: 'Display levels',
	                onClickCallback: this.props.toggleDisplayLevels,
	                displayLevels: this.props.displayLevels,
	                width: '150px', fontSize: '14px' });
	        } else {
	            return React.createElement(DisplayLevelsButton, { hideText: 'Hide log<sub>2</sub>-fold change',
	                showText: 'Display log<sub>2</sub>-fold change',
	                onClickCallback: this.props.toggleDisplayLevels,
	                displayLevels: this.props.displayLevels,
	                width: '200px', fontSize: '14px' });
	        }
	    },
	
	    render: function render() {
	        return React.createElement(
	            'div',
	            { className: 'gxaHeatmapMatrixTopLeftCorner' },
	            React.createElement('span', { 'data-help-loc': this.props.type.heatmapTooltip, ref: 'tooltipSpan' }),
	            React.createElement(
	                'div',
	                { style: { display: "table-cell", verticalAlign: "middle", textAlign: "center" } },
	                this.displayLevelsBaseline()
	            )
	        );
	    },
	
	    componentDidMount: function componentDidMount() {
	        HelpTooltips(this.props.atlasBaseURL, 'experiment', ReactDOM.findDOMNode(this.refs.tooltipSpan));
	    }
	
	});
	
	var LevelsRadioGroup = function LevelsRadioGroup(__args__) {
	    var args = [].slice.call(arguments);
	    var inputElements = [].concat.apply([], args.map(function (el, ix) {
	        return [React.createElement(RadioGroup.Radio, { key: 3 * ix, type: 'radio', value: el }), React.createElement(
	            'span',
	            { key: 3 * ix + 1 },
	            "Display " + el
	        ), React.createElement('br', { key: 3 * ix + 2 })];
	    })).slice(0, -1);
	    return React.createClass({
	        displayName: "levelsRadioGroup for " + args,
	
	        getDefaultProps: function getDefaultProps() {
	            return {
	                allValues: args
	            };
	        },
	
	        getInitialState: function getInitialState() {
	            return {
	                value: this.props.allValues.indexOf(this.props.selectedRadioButton) > -1 ? this.props.selectedRadioButton : this.props.allValues[0]
	            };
	        },
	        componentDidMount: function componentDidMount() {
	            if (this.props.allValues.indexOf(this.props.selectedRadioButton) == -1) {
	                this.handleChange(this.state.value);
	            }
	        },
	
	        render: function render() {
	            return React.createElement(
	                RadioGroup.RadioGroup,
	                { name: "displayLevelsGroup_" + this.props.radioId, selectedValue: this.state.value, onChange: this.handleChange },
	                React.createElement(
	                    'div',
	                    { style: { "marginLeft": "10px", "marginTop": "8px" } },
	                    inputElements
	                )
	            );
	        },
	
	        handleChange: function handleChange(selectedRadio) {
	            this.props.toggleRadioButton(selectedRadio);
	            this.setState({ value: selectedRadio });
	
	            // To resize the sticky column/header in case the row height or column width changes
	            $(window).resize();
	        }
	    });
	};
	
	var HeatmapTableRows = React.createClass({
	    displayName: 'HeatmapTableRows',
	
	    propTypes: {
	        profiles: React.PropTypes.arrayOf(React.PropTypes.object).isRequired
	    },
	
	    profileRowType: function profileRowType(profile) {
	        var geneProfileKey = this.props.heatmapConfig.species + "-" + (this.props.type.isDifferential ? profile.name + "-" + profile.designElement : profile.name);
	        return this.props.type.isMultiExperiment ? React.createElement(GeneProfileRow, { key: geneProfileKey,
	            id: profile.id,
	            name: profile.name,
	            type: this.props.type,
	            experimentType: profile.experimentType,
	            expressions: profile.expressions,
	            serializedFilterFactors: profile.serializedFilterFactors,
	            heatmapConfig: this.props.heatmapConfig,
	            atlasBaseURL: this.props.atlasBaseURL,
	            linksAtlasBaseURL: this.props.linksAtlasBaseURL,
	            displayLevels: this.props.displayLevels,
	            renderExpressionCells: this.props.renderExpressionCells,
	            hoverColumnCallback: this.props.hoverColumnCallback,
	            hoverRowCallback: this.props.hoverRowCallback }) : React.createElement(GeneProfileRow, { key: geneProfileKey,
	            selected: profile.id === this.props.selectedGeneId,
	            selectGene: this.props.selectGene,
	            designElement: profile.designElement,
	            id: profile.id,
	            name: profile.name,
	            type: this.props.type,
	            expressions: profile.expressions,
	            heatmapConfig: this.props.heatmapConfig,
	            atlasBaseURL: this.props.atlasBaseURL,
	            linksAtlasBaseURL: this.props.linksAtlasBaseURL,
	            displayLevels: this.props.displayLevels,
	            showGeneSetProfiles: this.props.showGeneSetProfiles,
	            selectedRadioButton: this.props.selectedRadioButton,
	            hasQuartiles: this.props.hasQuartiles,
	            isSingleGeneResult: this.props.isSingleGeneResult,
	            renderExpressionCells: this.props.renderExpressionCells,
	            hoverColumnCallback: this.props.hoverColumnCallback,
	            hoverRowCallback: this.props.hoverRowCallback });
	    },
	
	    render: function render() {
	        var geneProfilesRows = this.props.profiles.map(function (profile) {
	
	            return this.profileRowType(profile);
	        }.bind(this));
	
	        return React.createElement(
	            'tbody',
	            null,
	            geneProfilesRows
	        );
	    }
	});
	
	var GeneProfileRow = React.createClass({
	    displayName: 'GeneProfileRow',
	
	    propTypes: {
	        atlasBaseURL: React.PropTypes.string.isRequired,
	        linksAtlasBaseURL: React.PropTypes.string.isRequired
	    },
	
	    getInitialState: function getInitialState() {
	        return { hover: false, selected: false, levels: this.props.displayLevels };
	    },
	
	    onMouseEnter: function onMouseEnter() {
	        if (this.props.heatmapConfig.enableEnsemblLauncher) {
	            this.setState({ hover: true });
	        }
	        // We use name instead of id because in multiexperiment the same id can appear under different name (same experiment, different conditions)
	        this.props.hoverRowCallback(this.props.name);
	    },
	
	    onMouseLeave: function onMouseLeave() {
	        if (this.props.heatmapConfig.enableEnsemblLauncher) {
	            this.setState({ hover: false });
	        }
	        this._closeTooltip();
	        this.props.hoverRowCallback(null);
	    },
	
	    onClick: function onClick() {
	        if (this.props.heatmapConfig.enableEnsemblLauncher) {
	            this.props.selectGene(this.props.id);
	        }
	    },
	
	    _geneNameLinked: function _geneNameLinked() {
	        var experimentURL = '/experiments/' + this.props.id + '?geneQuery=' + this.props.heatmapConfig.geneQuery + (this.props.serializedFilterFactors ? "&serializedFilterFactors=" + encodeURIComponent(this.props.serializedFilterFactors) : "");
	        var geneURL = this.props.showGeneSetProfiles ? '/query?geneQuery=' + this.props.name : '/genes/' + this.props.id;
	
	        var titleTooltip = this.props.type.isMultiExperiment ? this.props.experimentType == "PROTEOMICS_BASELINE" ? "Protein Expression" : "RNA Expression" : "";
	
	        var experimentOrGeneURL = this.props.linksAtlasBaseURL + (this.props.type.isMultiExperiment ? experimentURL : geneURL);
	
	        // don't render id for gene sets to prevent tooltips
	        // The vertical align in the <a> element is needed because the kerning in the font used in icon-conceptual is vertically off
	        return React.createElement(
	            'span',
	            { title: titleTooltip, style: { "display": "table-cell" } },
	            React.createElement('span', { className: 'icon icon-conceptual icon-c2', 'data-icon': this.props.type.isMultiExperiment ? this.props.experimentType == "PROTEOMICS_BASELINE" ? 'P' : 'd' : '' }),
	            React.createElement(
	                'a',
	                { ref: 'geneName', id: this.props.showGeneSetProfiles ? '' : this.props.id, href: experimentOrGeneURL, onClick: this.geneNameLinkClicked, style: { "verticalAlign": "15%" } },
	                this.props.name
	            )
	        );
	    },
	
	    geneNameLinkClicked: function geneNameLinkClicked(event) {
	        // prevent row from being selected
	        event.stopPropagation();
	    },
	
	    displayLevelsRadio: function displayLevelsRadio() {
	        if (this.props.hasQuartiles && this.props.isSingleGeneResult) {
	            return this.props.selectedRadioButton === "levels";
	        } else return this.props.displayLevels;
	    },
	
	    cellType: function cellType(expression) {
	        if (this.props.type.isBaseline) {
	            if (this.props.selectedRadioButton === "variance" && expression.quartiles) {
	                return React.createElement(HeatmapBaselineCellVariance, { key: this.props.id + expression.factorName,
	                    quartiles: expression.quartiles,
	                    hoverColumnCallback: this.props.hoverColumnCallback });
	            } else {
	                return React.createElement(CellBaseline, { key: this.props.id + expression.factorName,
	                    factorName: expression.factorName,
	                    color: expression.color,
	                    value: expression.value,
	                    heatmapConfig: this.props.heatmapConfig,
	                    displayLevels: this.displayLevelsRadio(),
	                    svgPathId: expression.svgPathId,
	                    geneSetProfiles: this.props.showGeneSetProfiles,
	                    id: this.props.id,
	                    name: this.props.name,
	                    hoverColumnCallback: this.props.hoverColumnCallback });
	            }
	        } else if (this.props.type.isDifferential) {
	            return React.createElement(CellDifferential, { key: this.props.designElement + this.props.name + expression.contrastName,
	                colour: expression.color,
	                foldChange: parseFloat(expression.foldChange),
	                pValue: parseFloat(expression.pValue),
	                tStat: parseFloat(expression.tStat),
	                displayLevels: this.props.displayLevels });
	        } else if (this.props.type.isMultiExperiment) {
	            return React.createElement(CellMultiExperiment, { key: this.props.id + expression.factorName,
	                factorName: expression.factorName,
	                serializedFilterFactors: this.props.serializedFilterFactors,
	                color: expression.color,
	                value: expression.value,
	                displayLevels: this.props.displayLevels,
	                svgPathId: expression.svgPathId,
	                id: this.props.id,
	                name: this.props.name,
	                hoverColumnCallback: this.props.hoverColumnCallback });
	        }
	    },
	
	    cells: function cells(expressions) {
	
	        return expressions.map(function (expression) {
	            return this.cellType(expression);
	        }.bind(this));
	    },
	
	    render: function render() {
	        var showSelectTextOnHover = this.state.hover && !this.props.selected ? React.createElement(
	            'span',
	            { style: { "display": "table-cell", "textAlign": "right", "paddingLeft": "10px", "color": "green", "visibility": "visible" } },
	            'select'
	        ) : React.createElement(
	            'span',
	            { style: { "display": "table-cell", "textAlign": "right", "paddingLeft": "10px", "color": "green", "visibility": "hidden" } },
	            'select'
	        );
	        var showTickWhenSelected = this.props.selected ? React.createElement(
	            'span',
	            { style: { "float": "right", "color": "green" } },
	            ' \u2714 '
	        ) : null;
	        var className = (this.props.selected ? "gxaHorizontalHeaderCell-selected gxaHoverableHeader" : "gxaHorizontalHeaderCell gxaHoverableHeader") + (this.props.heatmapConfig.enableEnsemblLauncher ? " gxaSelectableHeader" : "");
	        var rowClassName = this.props.type.isMultiExperiment ? this.props.experimentType == "PROTEOMICS_BASELINE" ? "gxaProteomicsExperiment" : "gxaTranscriptomicsExperiment" : "";
	
	        return React.createElement(
	            'tr',
	            { className: rowClassName },
	            React.createElement(
	                'th',
	                { className: className, onMouseEnter: this.onMouseEnter, onMouseLeave: this.onMouseLeave, onClick: this.onClick },
	                React.createElement(
	                    'div',
	                    { style: { display: "table", width: "100%" } },
	                    React.createElement(
	                        'div',
	                        { style: { display: "table-row" } },
	                        this._geneNameLinked(),
	                        this.props.heatmapConfig.enableEnsemblLauncher ? showSelectTextOnHover : null,
	                        this.props.heatmapConfig.enableEnsemblLauncher ? showTickWhenSelected : null
	                    )
	                )
	            ),
	            this.props.designElement ? React.createElement(
	                'th',
	                { className: 'gxaHeatmapTableDesignElement' },
	                this.props.designElement
	            ) : null,
	            this.props.renderExpressionCells ? this.cells(this.props.expressions) : null
	        );
	    },
	
	    componentDidMount: function componentDidMount() {
	        if (!this.props.type.isMultiExperiment) {
	            GenePropertiesTooltipModule.init(this.props.atlasBaseURL, ReactDOM.findDOMNode(this.refs.geneName), this.props.id, this.props.name);
	        }
	    },
	
	    _closeTooltip: function _closeTooltip() {
	        if (!this.props.type.isMultiExperiment) {
	            $(ReactDOM.findDOMNode(this.refs.geneName)).tooltip("close");
	        }
	    }
	
	});
	
	var CellBaseline = React.createClass({
	    displayName: 'CellBaseline',
	
	    render: function render() {
	        if (this._noExpression()) {
	            return React.createElement('td', null);
	        }
	
	        var style = { "backgroundColor": this._isUnknownExpression() ? "white" : this.props.color };
	
	        return React.createElement(
	            'td',
	            { style: style, onMouseEnter: this._onMouseEnter, onMouseLeave: this._onMouseLeave },
	            React.createElement(
	                'div',
	                {
	                    className: 'gxaHeatmapCell',
	                    style: { visibility: this._isUnknownExpression() || this.props.displayLevels ? "visible" : "hidden" } },
	                this._isUnknownExpression() ? this._unknownCell() : NumberFormat.baselineExpression(this.props.value)
	            )
	        );
	    },
	
	    componentDidMount: function componentDidMount() {
	        this.addQuestionMarkTooltip();
	    },
	
	    // need this so that we re-add question mark tooltip, if it doesn't exist, when switching between
	    // individual genes and gene sets
	    componentDidUpdate: function componentDidUpdate() {
	        this.addQuestionMarkTooltip();
	    },
	
	    addQuestionMarkTooltip: function addQuestionMarkTooltip() {
	        function hasQuestionMark(unknownElement) {
	            return unknownElement.children.length;
	        }
	
	        if (this._isUnknownExpression() && !hasQuestionMark(ReactDOM.findDOMNode(this.refs.unknownCell))) {
	            HelpTooltips(this.props.atlasBaseURL, 'experiment', ReactDOM.findDOMNode(this.refs.unknownCell));
	        }
	    },
	
	    _hasKnownExpression: function _hasKnownExpression() {
	        // true if not blank or UNKNOWN, ie: has a expression with a known value
	        return this.props.value && !this._isUnknownExpression();
	    },
	
	    _isUnknownExpression: function _isUnknownExpression() {
	        return this.propsvalue === "UNKNOWN";
	    },
	
	    _noExpression: function _noExpression() {
	        return !this.props.value;
	    },
	
	    _unknownCell: function _unknownCell() {
	        return React.createElement('span', { ref: 'unknownCell', 'data-help-loc': this.props.geneSetProfiles ? '#heatMapTableGeneSetUnknownCell' : '#heatMapTableUnknownCell' });
	    },
	
	    _onMouseEnter: function _onMouseEnter() {
	        if (this._hasKnownExpression()) {
	            this.props.hoverColumnCallback(this.props.svgPathId);
	        }
	    },
	
	    _onMouseLeave: function _onMouseLeave() {
	        if (this._hasKnownExpression()) {
	            this.props.hoverColumnCallback(null);
	        }
	    }
	});
	
	var CellMultiExperiment = React.createClass({
	    displayName: 'CellMultiExperiment',
	
	    _isNAExpression: function _isNAExpression() {
	        return this.props.value === "NT";
	    },
	
	    _noExpression: function _noExpression() {
	        return !this.props.value;
	    },
	
	    _tissueNotStudiedInExperiment: function _tissueNotStudiedInExperiment() {
	        return React.createElement(
	            'span',
	            null,
	            'NA'
	        );
	    },
	
	    _onMouseEnter: function _onMouseEnter() {
	        if (!this._noExpression() && !this._isNAExpression()) {
	            this.props.hoverColumnCallback(this.props.svgPathId);
	        }
	    },
	
	    _onMouseLeave: function _onMouseLeave() {
	        if (!this._noExpression() && !this._isNAExpression()) {
	            this.props.hoverColumnCallback(null);
	        }
	    },
	
	    render: function render() {
	
	        if (this._noExpression()) {
	            return React.createElement('td', null);
	        }
	
	        var style = { "backgroundColor": this.props.color };
	
	        return React.createElement(
	            'td',
	            { style: style, onMouseEnter: this._onMouseEnter, onMouseLeave: this._onMouseLeave },
	            React.createElement(
	                'div',
	                { className: 'gxaHeatmapCell', style: { visibility: this._isNAExpression() || this.props.displayLevels ? "visible" : "hidden" } },
	                this._isNAExpression(this.props.value) ? this._tissueNotStudiedInExperiment() : NumberFormat.baselineExpression(this.props.value)
	            )
	        );
	    }
	});
	
	var HeatmapBottomOptions = React.createClass({
	    displayName: 'HeatmapBottomOptions',
	
	    propTypes: {
	        coexpressionsAvailable: React.PropTypes.arrayOf(React.PropTypes.shape({
	            name: React.PropTypes.string.isRequired,
	            id: React.PropTypes.string.isRequired,
	            amount: React.PropTypes.number.isRequired
	        })).isRequired,
	        showCoexpressionsFor: React.PropTypes.func.isRequired,
	        googleAnalyticsCallback: React.PropTypes.func.isRequired
	    },
	
	    render: function render() {
	        var options = [];
	        for (var i = 0; i < this.props.coexpressionsAvailable.length; i++) {
	            var el = this.props.coexpressionsAvailable[i];
	            options.push(React.createElement(CoexpressionOption, {
	                key: i,
	                geneName: el.name,
	                numCoexpressionsAvailable: el.amount,
	                showCoexpressionsCallback: function (amount) {
	                    this.props.googleAnalyticsCallback('send', 'event', 'HeatmapReact', 'coexpressions-use');
	                    this.props.showCoexpressionsFor(el.id, amount);
	                }.bind(this)
	            }));
	        }
	        ;
	        return React.createElement(
	            'div',
	            null,
	            options
	        );
	    },
	
	    componentDidMount: function componentDidMount() {
	        if (this.props.coexpressionsAvailable.length > 0) {
	            this.props.googleAnalyticsCallback('send', 'event', 'HeatmapReact', 'coexpressions-display');
	        }
	    }
	
	});
	
	var CoexpressionOption = React.createClass({
	    displayName: 'CoexpressionOption',
	
	    propTypes: {
	        geneName: React.PropTypes.string.isRequired,
	        numCoexpressionsAvailable: React.PropTypes.number.isRequired,
	        showCoexpressionsCallback: React.PropTypes.func.isRequired
	    },
	    getInitialState: function getInitialState() {
	        return { visible: 0 };
	    },
	    _chooseValue: function _chooseValue(amount) {
	        this.setState({ visible: amount });
	        this.props.showCoexpressionsCallback(amount);
	    },
	
	    _turnOnWithDefaultValue: function _turnOnWithDefaultValue() {
	        this._chooseValue(10);
	    },
	
	    _showOfferToDisplay: function _showOfferToDisplay() {
	        return React.createElement(DisplayLevelsButton, { hideText: '',
	            showText: 'Add similarly expressed genes',
	            onClickCallback: this._turnOnWithDefaultValue,
	            displayLevels: false,
	            width: '250px',
	            fontSize: '14px' });
	    },
	
	    _showSlider: function _showSlider() {
	        var marks = {
	            0: "off",
	            10: "10"
	        };
	        marks[this.props.numCoexpressionsAvailable] = this.props.numCoexpressionsAvailable;
	        return React.createElement(
	            'div',
	            null,
	            React.createElement(
	                'p',
	                null,
	                "Display genes with similar expressions to " + this.props.geneName + ":"
	            ),
	            React.createElement(
	                'div',
	                { className: 'gxaSlider' },
	                React.createElement(Slider, { min: 0, max: this.props.numCoexpressionsAvailable, onAfterChange: this._chooseValue,
	                    marks: marks, included: false, defaultValue: 10 })
	            )
	        );
	    },
	
	    render: function render() {
	        return React.createElement(
	            'div',
	            { className: 'gxaDisplayCoexpressionOffer' },
	            this.props.numCoexpressionsAvailable ? this.state.visible ? this._showSlider() : this._showOfferToDisplay() : React.createElement(
	                'span',
	                null,
	                "No genes with similar expressions to " + this.props.geneName + " available for display"
	            )
	        );
	    },
	
	    componentDidUpdate: function componentDidUpdate() {
	        $(window).trigger("gxaResizeHeatmapAnatomogramHeader");
	    }
	});
	
	//*------------------------------------------------------------------*
	
	module.exports = Heatmap;

/***/ },

/***/ 3445:
/*!*****************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react-dom/server.js ***!
  \*****************************************************/
[7705, 3446],

/***/ 3446:
/*!*************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/ReactDOMServer.js ***!
  \*************************************************************/
[7706, 2956, 3447, 2949],

/***/ 3447:
/*!*******************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/ReactServerRendering.js ***!
  \*******************************************************************/
[7707, 2924, 3080, 3053, 2926, 2979, 3082, 2976, 3448, 3046, 2973, 2936, 3038, 2925],

/***/ 3448:
/*!**************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/ReactServerBatchingStrategy.js ***!
  \**************************************************************************/
1129,

/***/ 3449:
/*!****************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react-radio-group/lib/index.js ***!
  \****************************************************************/
[7708, 2919],

/***/ 3450:
/*!********************************************************!*\
  !*** ./atlas_bundles/heatmap/~/rc-slider/lib/index.js ***!
  \********************************************************/
[7525, 3451],

/***/ 3451:
/*!*********************************************************!*\
  !*** ./atlas_bundles/heatmap/~/rc-slider/lib/Slider.js ***!
  \*********************************************************/
[7526, 3452, 3456, 3207, 3214, 3215, 3251, 2919, 3466, 3259, 3470, 3471, 3506, 3507],

/***/ 3452:
/*!*************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/helpers/defineProperty.js ***!
  \*************************************************************************/
[7527, 3453],

/***/ 3453:
/*!*********************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/core-js/object/define-property.js ***!
  \*********************************************************************************/
[7528, 3454],

/***/ 3454:
/*!**********************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/fn/object/define-property.js ***!
  \**********************************************************************************************/
[7529, 3455, 3176],

/***/ 3455:
/*!*******************************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/es6.object.define-property.js ***!
  \*******************************************************************************************************/
[7509, 3174, 3184, 3180],

/***/ 3456:
/*!****************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/helpers/toConsumableArray.js ***!
  \****************************************************************************/
[7530, 3457],

/***/ 3457:
/*!*********************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/core-js/array/from.js ***!
  \*********************************************************************/
[7531, 3458],

/***/ 3458:
/*!**********************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/fn/array/from.js ***!
  \**********************************************************************************/
[7532, 3219, 3459, 3176],

/***/ 3459:
/*!*******************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/es6.array.from.js ***!
  \*******************************************************************************************/
[7511, 3177, 3174, 3213, 3460, 3461, 3198, 3462, 3463, 3465],

/***/ 3460:
/*!***************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/_iter-call.js ***!
  \***************************************************************************************/
[7512, 3181],

/***/ 3461:
/*!*******************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/_is-array-iter.js ***!
  \*******************************************************************************************/
[7513, 3224, 3230],

/***/ 3462:
/*!*********************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/_create-property.js ***!
  \*********************************************************************************************/
[7514, 3180, 3188],

/***/ 3463:
/*!*****************************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/core.get-iterator-method.js ***!
  \*****************************************************************************************************/
[7515, 3464, 3230, 3224, 3176],

/***/ 3464:
/*!*************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/_classof.js ***!
  \*************************************************************************************/
[7510, 3195, 3230],

/***/ 3465:
/*!*****************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/babel-runtime/~/core-js/library/modules/_iter-detect.js ***!
  \*****************************************************************************************/
[7516, 3230],

/***/ 3466:
/*!*********************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/rc-util/lib/Dom/addEventListener.js ***!
  \*********************************************************************/
[7533, 3467, 2951],

/***/ 3467:
/*!*********************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/add-dom-event-listener/lib/index.js ***!
  \*********************************************************************/
[7534, 3468],

/***/ 3468:
/*!***************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/add-dom-event-listener/lib/EventObject.js ***!
  \***************************************************************************/
[7535, 3469, 2921],

/***/ 3469:
/*!*******************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/add-dom-event-listener/lib/EventBaseObject.js ***!
  \*******************************************************************************/
913,

/***/ 3470:
/*!********************************************************!*\
  !*** ./atlas_bundles/heatmap/~/rc-slider/lib/Track.js ***!
  \********************************************************/
[7536, 2919],

/***/ 3471:
/*!*********************************************************!*\
  !*** ./atlas_bundles/heatmap/~/rc-slider/lib/Handle.js ***!
  \*********************************************************/
[7537, 3214, 3215, 3251, 2919, 3472],

/***/ 3472:
/*!*********************************************************!*\
  !*** ./atlas_bundles/heatmap/~/rc-tooltip/lib/index.js ***!
  \*********************************************************/
[7538, 3473],

/***/ 3473:
/*!***********************************************************!*\
  !*** ./atlas_bundles/heatmap/~/rc-tooltip/lib/Tooltip.js ***!
  \***********************************************************/
[7539, 2919, 3474, 3475],

/***/ 3474:
/*!**************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/rc-tooltip/lib/placements.js ***!
  \**************************************************************/
918,

/***/ 3475:
/*!*********************************************************!*\
  !*** ./atlas_bundles/heatmap/~/rc-trigger/lib/index.js ***!
  \*********************************************************/
[7540, 3476],

/***/ 3476:
/*!***********************************************************!*\
  !*** ./atlas_bundles/heatmap/~/rc-trigger/lib/Trigger.js ***!
  \***********************************************************/
[7541, 3207, 2919, 2951, 3477, 3478, 3479, 3504, 3505],

/***/ 3477:
/*!**************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/rc-trigger/~/rc-util/lib/Dom/contains.js ***!
  \**************************************************************************/
921,

/***/ 3478:
/*!**********************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/rc-trigger/~/rc-util/lib/Dom/addEventListener.js ***!
  \**********************************************************************************/
[7533, 3467, 2951],

/***/ 3479:
/*!*********************************************************!*\
  !*** ./atlas_bundles/heatmap/~/rc-trigger/lib/Popup.js ***!
  \*********************************************************/
[7542, 3207, 2919, 2951, 3480, 3493, 3502, 3503],

/***/ 3480:
/*!*******************************************************!*\
  !*** ./atlas_bundles/heatmap/~/rc-align/lib/index.js ***!
  \*******************************************************/
[7543, 3481],

/***/ 3481:
/*!*******************************************************!*\
  !*** ./atlas_bundles/heatmap/~/rc-align/lib/Align.js ***!
  \*******************************************************/
[7544, 2919, 2951, 3482, 3491, 3492],

/***/ 3482:
/*!********************************************************!*\
  !*** ./atlas_bundles/heatmap/~/dom-align/lib/index.js ***!
  \********************************************************/
[7545, 3483, 3485, 3486, 3487, 3488, 3489],

/***/ 3483:
/*!********************************************************!*\
  !*** ./atlas_bundles/heatmap/~/dom-align/lib/utils.js ***!
  \********************************************************/
[7546, 3484],

/***/ 3484:
/*!****************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/dom-align/lib/propertyUtils.js ***!
  \****************************************************************/
928,

/***/ 3485:
/*!******************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/dom-align/lib/getOffsetParent.js ***!
  \******************************************************************/
[7547, 3483],

/***/ 3486:
/*!***************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/dom-align/lib/getVisibleRectForElement.js ***!
  \***************************************************************************/
[7548, 3483, 3485],

/***/ 3487:
/*!********************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/dom-align/lib/adjustForViewport.js ***!
  \********************************************************************/
[7549, 3483],

/***/ 3488:
/*!************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/dom-align/lib/getRegion.js ***!
  \************************************************************/
[7550, 3483],

/***/ 3489:
/*!*****************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/dom-align/lib/getElFuturePos.js ***!
  \*****************************************************************/
[7551, 3490],

/***/ 3490:
/*!*****************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/dom-align/lib/getAlignOffset.js ***!
  \*****************************************************************/
934,

/***/ 3491:
/*!********************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/rc-align/~/rc-util/lib/Dom/addEventListener.js ***!
  \********************************************************************************/
[7533, 3467, 2951],

/***/ 3492:
/*!**********************************************************!*\
  !*** ./atlas_bundles/heatmap/~/rc-align/lib/isWindow.js ***!
  \**********************************************************/
936,

/***/ 3493:
/*!*********************************************************!*\
  !*** ./atlas_bundles/heatmap/~/rc-animate/lib/index.js ***!
  \*********************************************************/
[7552, 3494],

/***/ 3494:
/*!***********************************************************!*\
  !*** ./atlas_bundles/heatmap/~/rc-animate/lib/Animate.js ***!
  \***********************************************************/
[7553, 2919, 3495, 3496, 3501],

/***/ 3495:
/*!*****************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/rc-animate/lib/ChildrenUtils.js ***!
  \*****************************************************************/
[7554, 2919],

/***/ 3496:
/*!****************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/rc-animate/lib/AnimateChild.js ***!
  \****************************************************************/
[7555, 2919, 2951, 3497, 3501],

/***/ 3497:
/*!************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/css-animation/lib/index.js ***!
  \************************************************************/
[7556, 3498, 3499],

/***/ 3498:
/*!************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/css-animation/lib/Event.js ***!
  \************************************************************/
942,

/***/ 3499:
/*!************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/component-classes/index.js ***!
  \************************************************************/
[7557, 3500, 3500],

/***/ 3500:
/*!************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/component-indexof/index.js ***!
  \************************************************************/
944,

/***/ 3501:
/*!********************************************************!*\
  !*** ./atlas_bundles/heatmap/~/rc-animate/lib/util.js ***!
  \********************************************************/
945,

/***/ 3502:
/*!**************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/rc-trigger/lib/PopupInner.js ***!
  \**************************************************************/
[7558, 2919, 3503],

/***/ 3503:
/*!*****************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/rc-trigger/lib/LazyRenderBox.js ***!
  \*****************************************************************/
[7559, 3206, 2919],

/***/ 3504:
/*!*********************************************************!*\
  !*** ./atlas_bundles/heatmap/~/rc-trigger/lib/utils.js ***!
  \*********************************************************/
[7560, 3207],

/***/ 3505:
/*!*************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/rc-trigger/~/rc-util/lib/getContainerRenderMixin.js ***!
  \*************************************************************************************/
[7561, 2951],

/***/ 3506:
/*!********************************************************!*\
  !*** ./atlas_bundles/heatmap/~/rc-slider/lib/Steps.js ***!
  \********************************************************/
[7562, 3452, 2919, 3259, 3272],

/***/ 3507:
/*!********************************************************!*\
  !*** ./atlas_bundles/heatmap/~/rc-slider/lib/Marks.js ***!
  \********************************************************/
[7563, 3207, 3216, 3452, 2919, 3259],

/***/ 3508:
/*!************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/rc-slider/assets/index.css ***!
  \************************************************************/
[8018, 3509, 3155],

/***/ 3509:
/*!*************************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/css-loader!./atlas_bundles/heatmap/~/rc-slider/assets/index.css ***!
  \*************************************************************************************************/
[8019, 3154],

/***/ 3510:
/*!************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/expression-atlas-download-profiles-button/index.js ***!
  \************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	module.exports = __webpack_require__(/*! ./src/DownloadProfilesButton.jsx */ 3511);

/***/ },

/***/ 3511:
/*!**********************************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/expression-atlas-download-profiles-button/src/DownloadProfilesButton.jsx ***!
  \**********************************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var React = __webpack_require__(/*! react */ 2919);
	var Modal = __webpack_require__(/*! react-bootstrap/lib/Modal */ 3512);
	var Button = __webpack_require__(/*! react-bootstrap/lib/Button */ 3170);
	var Glyphicon = __webpack_require__(/*! react-bootstrap/lib/Glyphicon */ 3274);
	var Disclaimers = __webpack_require__(/*! ./Disclaimers.jsx */ 3562);
	
	var DownloadProfilesButton = React.createClass({
	    displayName: "DownloadProfilesButton",
	
	    propTypes: {
	        atlasBaseURL: React.PropTypes.string.isRequired,
	        downloadProfilesURL: React.PropTypes.string.isRequired,
	        disclaimer: React.PropTypes.string.isRequired,
	        onDownloadCallbackForAnalytics: React.PropTypes.func.isRequired
	    },
	
	    getInitialState: function getInitialState() {
	        return { showModal: false };
	    },
	    _closeModal: function _closeModal() {
	        this.setState({ showModal: false });
	    },
	    _disclaimer: function _disclaimer() {
	        return this.props.disclaimer && Disclaimers[this.props.disclaimer] || { title: null, content: null };
	    },
	    _afterDownloadButtonClicked: function _afterDownloadButtonClicked() {
	        if (!this._disclaimer().title && !this._disclaimer().content) {
	            this._commenceDownload();
	        } else {
	            this.setState({ showModal: true });
	        }
	    },
	    _commenceDownload: function _commenceDownload() {
	        this.props.onDownloadCallbackForAnalytics();
	        window.location.href = this.props.atlasBaseURL + this.props.downloadProfilesURL;
	    },
	    _commenceDownloadAndCloseModal: function _commenceDownloadAndCloseModal() {
	        this._commenceDownload();
	        this._closeModal();
	    },
	    render: function render() {
	        return React.createElement(
	            "a",
	            { onClick: this._afterDownloadButtonClicked },
	            React.createElement(
	                Button,
	                { bsSize: "small" },
	                React.createElement(Glyphicon, { glyph: "download-alt" }),
	                " Download all results"
	            ),
	            React.createElement(
	                Modal,
	                { show: this.state.showModal, onHide: this._closeModal },
	                React.createElement(
	                    Modal.Header,
	                    { closeButton: true },
	                    React.createElement(
	                        Modal.Title,
	                        null,
	                        this._disclaimer().title
	                    )
	                ),
	                React.createElement(
	                    Modal.Body,
	                    null,
	                    this._disclaimer().content
	                ),
	                React.createElement(
	                    Modal.Footer,
	                    null,
	                    React.createElement(
	                        Button,
	                        { onClick: this._closeModal },
	                        "Close"
	                    ),
	                    React.createElement(
	                        Button,
	                        { bsStyle: "primary", onClick: this._commenceDownloadAndCloseModal },
	                        "Continue downloading"
	                    )
	                )
	            )
	        );
	    }
	});
	
	module.exports = DownloadProfilesButton;

/***/ },

/***/ 3512:
/*!**************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react-bootstrap/lib/Modal.js ***!
  \**************************************************************/
[7625, 3206, 3214, 3215, 3251, 3207, 3259, 3513, 3520, 3515, 3521, 2919, 2951, 3522, 3544, 3260, 3553, 3555, 3556, 3557, 3558, 3560, 3262, 3559, 3561, 3267],

/***/ 3513:
/*!*************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/dom-helpers/events/index.js ***!
  \*************************************************************/
[7626, 3514, 3516, 3517],

/***/ 3514:
/*!**********************************************************!*\
  !*** ./atlas_bundles/heatmap/~/dom-helpers/events/on.js ***!
  \**********************************************************/
[7627, 3515],

/***/ 3515:
/*!***********************************************************!*\
  !*** ./atlas_bundles/heatmap/~/dom-helpers/util/inDOM.js ***!
  \***********************************************************/
989,

/***/ 3516:
/*!***********************************************************!*\
  !*** ./atlas_bundles/heatmap/~/dom-helpers/events/off.js ***!
  \***********************************************************/
[7628, 3515],

/***/ 3517:
/*!**************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/dom-helpers/events/filter.js ***!
  \**************************************************************/
[7629, 3518, 3519],

/***/ 3518:
/*!***************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/dom-helpers/query/contains.js ***!
  \***************************************************************/
[7591, 3515],

/***/ 3519:
/*!***********************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/dom-helpers/query/querySelectorAll.js ***!
  \***********************************************************************/
1031,

/***/ 3520:
/*!**************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/dom-helpers/ownerDocument.js ***!
  \**************************************************************/
987,

/***/ 3521:
/*!*******************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/dom-helpers/util/scrollbarSize.js ***!
  \*******************************************************************/
[7630, 3515],

/***/ 3522:
/*!*************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react-overlays/lib/Modal.js ***!
  \*************************************************************/
[7631, 2919, 3272, 3523, 3260, 3524, 3528, 3525, 3547, 3550, 3537, 3551, 3552, 3527],

/***/ 3523:
/*!****************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react-prop-types/lib/componentOrElement.js ***!
  \****************************************************************************/
[7632, 2919, 3261],

/***/ 3524:
/*!**************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react-overlays/lib/Portal.js ***!
  \**************************************************************/
[7633, 2919, 2951, 3523, 3525, 3527],

/***/ 3525:
/*!***************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react-overlays/lib/utils/ownerDocument.js ***!
  \***************************************************************************/
[7600, 2951, 3526],

/***/ 3526:
/*!*******************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react-overlays/~/dom-helpers/ownerDocument.js ***!
  \*******************************************************************************/
1001,

/***/ 3527:
/*!**************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react-overlays/lib/utils/getContainer.js ***!
  \**************************************************************************/
[7634, 2951],

/***/ 3528:
/*!********************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react-overlays/lib/ModalManager.js ***!
  \********************************************************************/
[7635, 3529, 3539, 3543, 3544, 3546],

/***/ 3529:
/*!*****************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react-overlays/~/dom-helpers/style/index.js ***!
  \*****************************************************************************/
[7636, 3530, 3532, 3534, 3535, 3536, 3538],

/***/ 3530:
/*!************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react-overlays/~/dom-helpers/util/camelizeStyle.js ***!
  \************************************************************************************/
[7637, 3531],

/***/ 3531:
/*!*******************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react-overlays/~/dom-helpers/util/camelize.js ***!
  \*******************************************************************************/
1040,

/***/ 3532:
/*!*************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react-overlays/~/dom-helpers/util/hyphenateStyle.js ***!
  \*************************************************************************************/
[7638, 3533],

/***/ 3533:
/*!********************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react-overlays/~/dom-helpers/util/hyphenate.js ***!
  \********************************************************************************/
1042,

/***/ 3534:
/*!****************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react-overlays/~/dom-helpers/style/getComputedStyle.js ***!
  \****************************************************************************************/
[7639, 3530],

/***/ 3535:
/*!***********************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react-overlays/~/dom-helpers/style/removeStyle.js ***!
  \***********************************************************************************/
1044,

/***/ 3536:
/*!***************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react-overlays/~/dom-helpers/transition/properties.js ***!
  \***************************************************************************************/
[7588, 3537],

/***/ 3537:
/*!****************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react-overlays/~/dom-helpers/util/inDOM.js ***!
  \****************************************************************************/
983,

/***/ 3538:
/*!****************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react-overlays/~/dom-helpers/transition/isTransform.js ***!
  \****************************************************************************************/
1045,

/***/ 3539:
/*!*****************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react-overlays/~/dom-helpers/class/index.js ***!
  \*****************************************************************************/
[7640, 3540, 3542, 3541],

/***/ 3540:
/*!********************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react-overlays/~/dom-helpers/class/addClass.js ***!
  \********************************************************************************/
[7641, 3541],

/***/ 3541:
/*!********************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react-overlays/~/dom-helpers/class/hasClass.js ***!
  \********************************************************************************/
1048,

/***/ 3542:
/*!***********************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react-overlays/~/dom-helpers/class/removeClass.js ***!
  \***********************************************************************************/
1049,

/***/ 3543:
/*!************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react-overlays/~/dom-helpers/util/scrollbarSize.js ***!
  \************************************************************************************/
[7642, 3537],

/***/ 3544:
/*!***************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react-overlays/lib/utils/isOverflowing.js ***!
  \***************************************************************************/
[7643, 3545, 3526],

/***/ 3545:
/*!********************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react-overlays/~/dom-helpers/query/isWindow.js ***!
  \********************************************************************************/
1052,

/***/ 3546:
/*!******************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react-overlays/lib/utils/manageAriaHidden.js ***!
  \******************************************************************************/
1053,

/***/ 3547:
/*!******************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react-overlays/lib/utils/addEventListener.js ***!
  \******************************************************************************/
[7598, 3548, 3549],

/***/ 3548:
/*!***************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react-overlays/~/dom-helpers/events/on.js ***!
  \***************************************************************************/
[7587, 3537],

/***/ 3549:
/*!****************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react-overlays/~/dom-helpers/events/off.js ***!
  \****************************************************************************/
[7599, 3537],

/***/ 3550:
/*!******************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react-overlays/lib/utils/addFocusListener.js ***!
  \******************************************************************************/
1054,

/***/ 3551:
/*!*******************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react-overlays/~/dom-helpers/activeElement.js ***!
  \*******************************************************************************/
[7644, 3526],

/***/ 3552:
/*!********************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react-overlays/~/dom-helpers/query/contains.js ***!
  \********************************************************************************/
[7597, 3537],

/***/ 3553:
/*!*************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react-bootstrap/lib/Fade.js ***!
  \*************************************************************/
[7605, 3207, 3214, 3215, 3251, 3259, 2919, 3554],

/***/ 3554:
/*!******************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react-overlays/lib/Transition.js ***!
  \******************************************************************/
[7586, 3259, 3548, 3536, 2919, 2951],

/***/ 3555:
/*!******************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react-bootstrap/lib/ModalBody.js ***!
  \******************************************************************/
[7645, 3207, 3206, 3214, 3215, 3251, 3259, 2919, 3260, 3262],

/***/ 3556:
/*!********************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react-bootstrap/lib/ModalDialog.js ***!
  \********************************************************************/
[7646, 3207, 3206, 3214, 3215, 3251, 3259, 2919, 3262, 3267],

/***/ 3557:
/*!********************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react-bootstrap/lib/ModalFooter.js ***!
  \********************************************************************/
[7647, 3207, 3206, 3214, 3215, 3251, 3259, 2919, 3260, 3262],

/***/ 3558:
/*!********************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react-bootstrap/lib/ModalHeader.js ***!
  \********************************************************************/
[7648, 3207, 3206, 3214, 3215, 3251, 3259, 2919, 3262, 3559],

/***/ 3559:
/*!************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react-bootstrap/lib/utils/createChainedFunction.js ***!
  \************************************************************************************/
955,

/***/ 3560:
/*!*******************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react-bootstrap/lib/ModalTitle.js ***!
  \*******************************************************************/
[7649, 3207, 3206, 3214, 3215, 3251, 3259, 2919, 3260, 3262],

/***/ 3561:
/*!**********************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react-bootstrap/lib/utils/splitComponentProps.js ***!
  \**********************************************************************************/
[7604, 3263],

/***/ 3562:
/*!***********************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/expression-atlas-download-profiles-button/src/Disclaimers.jsx ***!
  \***********************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var React = __webpack_require__(/*! react */ 2919);
	
	var BlueprintText = {
	    title: "The Blueprint project Data Reuse statement",
	    content: React.createElement(
	        "div",
	        null,
	        React.createElement(
	            "p",
	            null,
	            "This document refers to the reuse of data generated by the EC funded FP7 High Impact Project, Blueprint."
	        ),
	        React.createElement(
	            "p",
	            null,
	            "Blueprint regularly released analysis results via its ftp site and makes the raw sequence data available through the sequence archives at the EMBL-EBI. Much Blueprint data is generated from samples whose data must be released through a managed access process. For these data sets external users must apply for permission to access the data from the European Genome-phenome Archive (EGA) through the Blueprint Data Access Committee."
	        ),
	        React.createElement(
	            "p",
	            null,
	            "The Blueprint consortium expects this data to be valuable to other researchers and in keeping with Fort Lauderdale principles data users may use the data for many studies, but are expected to allow the data producers to make the first presentations and to publish the first paper with global analyses of the data."
	        ),
	        React.createElement(
	            "h4",
	            null,
	            "Global analyses of Project data"
	        ),
	        React.createElement(
	            "p",
	            null,
	            "Blueprint plans to publish global analyses of the sequencing data, epigenetic marks, expression levels and variation both in the context of normal hematopoietic cells and of those neoplastic and non-neoplastic diseases studied within th econsortium. Talks, posters, and papers on all such analyses are to be published first by the Blueprint project, by approved presenters on behalf of the Project, with the Project as author. When the first major Project paper on these analyses is published, then researchers inside and outside the Project are free to present and publish using the Project data for these and other analyses."
	        ),
	        React.createElement(
	            "h4",
	            null,
	            "Large-scale analyses of Project data"
	        ),
	        React.createElement(
	            "p",
	            null,
	            "Groups within the Project may make presentations and publish papers on more extensive analyses of topics to be included in the main analysis presentations and papers, coincident with the main project analysis presentations and papers. The major points would be included in the main Project presentations and papers, but these additional presentations and papers allow more focused discussion of methods and results. The author list would include the Consortium."
	        ),
	        React.createElement(
	            "h4",
	            null,
	            "Methods development using Project data"
	        ),
	        React.createElement(
	            "p",
	            null,
	            "Researchers who have used small amounts of Project data (<= one chromosome) may present methods development posters, talks, and papers that include these data prior to the first major Project paper, without needing Project approval or authorship, although the Project should be acknowledged. Methods presentations or papers on global analyses or analyses using large amounts of Project data, on topics that the Consortium plans to examine, would be similar to large-scale analyses of Project data: researchers within the Project may make presentations or submit papers at the same time as the main Project presentations and papers, and others could do so after the Project publishes the first major analysis paper."
	        ),
	        React.createElement(
	            "h4",
	            null,
	            "Disease studies using Project data"
	        ),
	        React.createElement(
	            "p",
	            null,
	            "Researchers may present and publish on use of Project data in specific chromosome regions (that are not of general interest) or as summaries (such as number of differentially expressed genes in cell types assayed by Blueprint) for studies on diseases not studied by BLUEPRINT without Project approval, prior to the first major Project paper being published. The Project should not be listed as an author."
	        ),
	        React.createElement(
	            "h4",
	            null,
	            "Authors who use data from the project must acknowledge Blueprint using the following wording"
	        ),
	        React.createElement(
	            "p",
	            null,
	            "This study makes use of data generated by the Blueprint Consortium. A full list of the investigators who contributed to the generation of the data is available from",
	            React.createElement(
	                "a",
	                { href: "http://www.blueprint-epigenome.eu" },
	                "www.blueprint-epigenome.eu"
	            ),
	            ". Funding for the project was provided by the European Union's Seventh Framework Programme (FP7/2007-2013) under grant agreement no 282510 \u2013 BLUEPRINT."
	        )
	    )
	};
	
	var ZebrafishText = {
	    title: "Data Reuse statement",
	    content: React.createElement(
	        "div",
	        null,
	        React.createElement(
	            "p",
	            null,
	            "This is a pre-publication release in accordance with ",
	            React.createElement(
	                "a",
	                { href: "http://www.sanger.ac.uk/datasharing/" },
	                "the Fort Lauderdale Agreement "
	            ),
	            ". Feel free to search and download data on your genes of interest."
	        ),
	        React.createElement(
	            "p",
	            null,
	            "Equally, you can use the dataset to show developmental expression profiles for specific genes in your publications."
	        ),
	        React.createElement(
	            "p",
	            null,
	            "However, we ask that you refrain from publishing larger scale or genome-wide analyses of this dataset for 12 months from the time of deposition in Expression Atlas or until we have published our transcriptional time-course paper, whichever comes first."
	        ),
	        React.createElement(
	            "p",
	            null,
	            "For citations in publications before the paper is out please use this link to the Expression Atlas site (",
	            React.createElement(
	                "a",
	                { href: "https://www.ebi.ac.uk/gxa/experiments/E-ERAD-475" },
	                "http://www.ebi.ac.uk/gxa/experiments/E-ERAD-475"
	            ),
	            ") and acknowledge us: \u201CWe would like to thank the Busch-Nentwich lab for providing RNA-seq data.\u201D"
	        )
	    )
	};
	
	module.exports = { "fortLauderdale": BlueprintText, "zebrafish": ZebrafishText };

/***/ },

/***/ 3563:
/*!***********************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react-addons-shallow-compare/index.js ***!
  \***********************************************************************/
[7703, 3564],

/***/ 3564:
/*!*************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react/lib/shallowCompare.js ***!
  \*************************************************************/
[7704, 3041],

/***/ 3565:
/*!***************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/jquery-ui-bundle/jquery-ui.js ***!
  \***************************************************************/
[7701, 3090],

/***/ 3566:
/*!********************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/atlas-modernizr/modernizr-csstransforms.min.js ***!
  \********************************************************************************/
/***/ function(module, exports) {

	/*! modernizr 3.3.1 (Custom Build) | MIT *
	 * https://modernizr.com/download/?-csstransforms-setclasses !*/
	!function(e,n,t){function r(e,n){return typeof e===n}function o(){var e,n,t,o,s,i,a;for(var l in C)if(C.hasOwnProperty(l)){if(e=[],n=C[l],n.name&&(e.push(n.name.toLowerCase()),n.options&&n.options.aliases&&n.options.aliases.length))for(t=0;t<n.options.aliases.length;t++)e.push(n.options.aliases[t].toLowerCase());for(o=r(n.fn,"function")?n.fn():n.fn,s=0;s<e.length;s++)i=e[s],a=i.split("."),1===a.length?Modernizr[a[0]]=o:(!Modernizr[a[0]]||Modernizr[a[0]]instanceof Boolean||(Modernizr[a[0]]=new Boolean(Modernizr[a[0]])),Modernizr[a[0]][a[1]]=o),g.push((o?"":"no-")+a.join("-"))}}function s(e){var n=_.className,t=Modernizr._config.classPrefix||"";if(S&&(n=n.baseVal),Modernizr._config.enableJSClass){var r=new RegExp("(^|\\s)"+t+"no-js(\\s|$)");n=n.replace(r,"$1"+t+"js$2")}Modernizr._config.enableClasses&&(n+=" "+t+e.join(" "+t),S?_.className.baseVal=n:_.className=n)}function i(e,n){return!!~(""+e).indexOf(n)}function a(){return"function"!=typeof n.createElement?n.createElement(arguments[0]):S?n.createElementNS.call(n,"http://www.w3.org/2000/svg",arguments[0]):n.createElement.apply(n,arguments)}function l(e){return e.replace(/([a-z])-([a-z])/g,function(e,n,t){return n+t.toUpperCase()}).replace(/^-/,"")}function f(e,n){return function(){return e.apply(n,arguments)}}function u(e,n,t){var o;for(var s in e)if(e[s]in n)return t===!1?e[s]:(o=n[e[s]],r(o,"function")?f(o,t||n):o);return!1}function d(e){return e.replace(/([A-Z])/g,function(e,n){return"-"+n.toLowerCase()}).replace(/^ms-/,"-ms-")}function c(){var e=n.body;return e||(e=a(S?"svg":"body"),e.fake=!0),e}function p(e,t,r,o){var s,i,l,f,u="modernizr",d=a("div"),p=c();if(parseInt(r,10))for(;r--;)l=a("div"),l.id=o?o[r]:u+(r+1),d.appendChild(l);return s=a("style"),s.type="text/css",s.id="s"+u,(p.fake?p:d).appendChild(s),p.appendChild(d),s.styleSheet?s.styleSheet.cssText=e:s.appendChild(n.createTextNode(e)),d.id=u,p.fake&&(p.style.background="",p.style.overflow="hidden",f=_.style.overflow,_.style.overflow="hidden",_.appendChild(p)),i=t(d,e),p.fake?(p.parentNode.removeChild(p),_.style.overflow=f,_.offsetHeight):d.parentNode.removeChild(d),!!i}function m(n,r){var o=n.length;if("CSS"in e&&"supports"in e.CSS){for(;o--;)if(e.CSS.supports(d(n[o]),r))return!0;return!1}if("CSSSupportsRule"in e){for(var s=[];o--;)s.push("("+d(n[o])+":"+r+")");return s=s.join(" or "),p("@supports ("+s+") { #modernizr { position: absolute; } }",function(e){return"absolute"==getComputedStyle(e,null).position})}return t}function h(e,n,o,s){function f(){d&&(delete z.style,delete z.modElem)}if(s=r(s,"undefined")?!1:s,!r(o,"undefined")){var u=m(e,o);if(!r(u,"undefined"))return u}for(var d,c,p,h,v,y=["modernizr","tspan","samp"];!z.style&&y.length;)d=!0,z.modElem=a(y.shift()),z.style=z.modElem.style;for(p=e.length,c=0;p>c;c++)if(h=e[c],v=z.style[h],i(h,"-")&&(h=l(h)),z.style[h]!==t){if(s||r(o,"undefined"))return f(),"pfx"==n?h:!0;try{z.style[h]=o}catch(g){}if(z.style[h]!=v)return f(),"pfx"==n?h:!0}return f(),!1}function v(e,n,t,o,s){var i=e.charAt(0).toUpperCase()+e.slice(1),a=(e+" "+b.join(i+" ")+i).split(" ");return r(n,"string")||r(n,"undefined")?h(a,n,o,s):(a=(e+" "+E.join(i+" ")+i).split(" "),u(a,n,t))}function y(e,n,r){return v(e,t,t,n,r)}var g=[],C=[],w={_version:"3.3.1",_config:{classPrefix:"",enableClasses:!0,enableJSClass:!0,usePrefixes:!0},_q:[],on:function(e,n){var t=this;setTimeout(function(){n(t[e])},0)},addTest:function(e,n,t){C.push({name:e,fn:n,options:t})},addAsyncTest:function(e){C.push({name:null,fn:e})}},Modernizr=function(){};Modernizr.prototype=w,Modernizr=new Modernizr;var _=n.documentElement,S="svg"===_.nodeName.toLowerCase(),x="Moz O ms Webkit",b=w._config.usePrefixes?x.split(" "):[];w._cssomPrefixes=b;var E=w._config.usePrefixes?x.toLowerCase().split(" "):[];w._domPrefixes=E;var P={elem:a("modernizr")};Modernizr._q.push(function(){delete P.elem});var z={style:P.elem.style};Modernizr._q.unshift(function(){delete z.style}),w.testAllProps=v,w.testAllProps=y,Modernizr.addTest("csstransforms",function(){return-1===navigator.userAgent.indexOf("Android 2.")&&y("transform","scale(1)",!0)}),o(),s(g),delete w.addTest,delete w.addAsyncTest;for(var N=0;N<Modernizr._q.length;N++)Modernizr._q[N]();e.Modernizr=Modernizr}(window,document);

/***/ },

/***/ 3567:
/*!*************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/fancybox/dist/js/jquery.fancybox.cjs.js ***!
  \*************************************************************************/
1119,

/***/ 3568:
/*!***********************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/fancybox/dist/css/jquery.fancybox.css ***!
  \***********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(/*! !../../../css-loader!./jquery.fancybox.css */ 3569);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(/*! ../../../style-loader/addStyles.js */ 3155)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!../../../css-loader/index.js!./jquery.fancybox.css", function() {
				var newContent = require("!!../../../css-loader/index.js!./jquery.fancybox.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },

/***/ 3569:
/*!************************************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/css-loader!./atlas_bundles/heatmap/~/fancybox/dist/css/jquery.fancybox.css ***!
  \************************************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(/*! ../../../css-loader/lib/css-base.js */ 3154)();
	// imports
	
	
	// module
	exports.push([module.id, "/*! fancyBox v2.1.5 fancyapps.com | fancyapps.com/fancybox/#license */\n.fancybox-wrap, .fancybox-skin, .fancybox-outer, .fancybox-inner, .fancybox-image, .fancybox-wrap iframe, .fancybox-wrap object, .fancybox-nav, .fancybox-nav span, .fancybox-tmp {\n  padding: 0;\n  margin: 0;\n  border: 0;\n  outline: none;\n  vertical-align: top; }\n\n.fancybox-wrap {\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: 8020; }\n\n.fancybox-skin {\n  position: relative;\n  background: #f9f9f9;\n  color: #444;\n  text-shadow: none;\n  -webkit-border-radius: 4px;\n  -moz-border-radius: 4px;\n  border-radius: 4px; }\n\n.fancybox-opened {\n  z-index: 8030; }\n\n.fancybox-opened .fancybox-skin {\n  -webkit-box-shadow: 0 10px 25px rgba(0, 0, 0, 0.5);\n  -moz-box-shadow: 0 10px 25px rgba(0, 0, 0, 0.5);\n  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.5); }\n\n.fancybox-outer, .fancybox-inner {\n  position: relative; }\n\n.fancybox-inner {\n  overflow: hidden; }\n\n.fancybox-type-iframe .fancybox-inner {\n  -webkit-overflow-scrolling: touch; }\n\n.fancybox-error {\n  color: #444;\n  font: 14px/20px \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n  margin: 0;\n  padding: 15px;\n  white-space: nowrap; }\n\n.fancybox-image, .fancybox-iframe {\n  display: block;\n  width: 100%;\n  height: 100%; }\n\n.fancybox-image {\n  max-width: 100%;\n  max-height: 100%; }\n\n#fancybox-loading, .fancybox-close, .fancybox-prev span, .fancybox-next span {\n  background-image: url(" + __webpack_require__(/*! ../img/fancybox_sprite.png */ 3570) + "); }\n\n#fancybox-loading {\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  margin-top: -22px;\n  margin-left: -22px;\n  background-position: 0 -108px;\n  opacity: 0.8;\n  cursor: pointer;\n  z-index: 8060; }\n\n#fancybox-loading div {\n  width: 44px;\n  height: 44px;\n  background: url(" + __webpack_require__(/*! ../img/fancybox_loading.gif */ 3571) + ") center center no-repeat; }\n\n.fancybox-close {\n  position: absolute;\n  top: -18px;\n  right: -18px;\n  width: 36px;\n  height: 36px;\n  cursor: pointer;\n  z-index: 8040; }\n\n.fancybox-nav {\n  position: absolute;\n  top: 0;\n  width: 40%;\n  height: 100%;\n  cursor: pointer;\n  text-decoration: none;\n  background: transparent url(" + __webpack_require__(/*! ../img/blank.gif */ 3572) + ");\n  /* helps IE */\n  -webkit-tap-highlight-color: transparent;\n  z-index: 8040; }\n\n.fancybox-prev {\n  left: 0; }\n\n.fancybox-next {\n  right: 0; }\n\n.fancybox-nav span {\n  position: absolute;\n  top: 50%;\n  width: 36px;\n  height: 34px;\n  margin-top: -18px;\n  cursor: pointer;\n  z-index: 8040;\n  visibility: hidden; }\n\n.fancybox-prev span {\n  left: 10px;\n  background-position: 0 -36px; }\n\n.fancybox-next span {\n  right: 10px;\n  background-position: 0 -72px; }\n\n.fancybox-nav:hover span {\n  visibility: visible; }\n\n.fancybox-tmp {\n  position: absolute;\n  top: -99999px;\n  left: -99999px;\n  max-width: 99999px;\n  max-height: 99999px;\n  overflow: visible !important; }\n\n/* Overlay helper */\n.fancybox-lock {\n  overflow: visible !important;\n  width: auto; }\n\n.fancybox-lock body {\n  overflow: hidden !important; }\n\n.fancybox-lock-test {\n  overflow-y: hidden !important; }\n\n.fancybox-overlay {\n  position: absolute;\n  top: 0;\n  left: 0;\n  overflow: hidden;\n  display: none;\n  z-index: 8010;\n  background: url(" + __webpack_require__(/*! ../img/fancybox_overlay.png */ 3573) + "); }\n\n.fancybox-overlay-fixed {\n  position: fixed;\n  bottom: 0;\n  right: 0; }\n\n.fancybox-lock .fancybox-overlay {\n  overflow: auto;\n  overflow-y: scroll; }\n\n/* Title helper */\n.fancybox-title {\n  visibility: hidden;\n  font: normal 13px/20px \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n  position: relative;\n  text-shadow: none;\n  z-index: 8050; }\n\n.fancybox-opened .fancybox-title {\n  visibility: visible; }\n\n.fancybox-title-float-wrap {\n  position: absolute;\n  bottom: 0;\n  right: 50%;\n  margin-bottom: -35px;\n  z-index: 8050;\n  text-align: center; }\n\n.fancybox-title-float-wrap .child {\n  display: inline-block;\n  margin-right: -100%;\n  padding: 2px 20px;\n  background: transparent;\n  /* Fallback for web browsers that doesn't support RGBa */\n  background: rgba(0, 0, 0, 0.8);\n  -webkit-border-radius: 15px;\n  -moz-border-radius: 15px;\n  border-radius: 15px;\n  text-shadow: 0 1px 2px #222;\n  color: #FFF;\n  font-weight: bold;\n  line-height: 24px;\n  white-space: nowrap; }\n\n.fancybox-title-outside-wrap {\n  position: relative;\n  margin-top: 10px;\n  color: #fff; }\n\n.fancybox-title-inside-wrap {\n  padding-top: 10px; }\n\n.fancybox-title-over-wrap {\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  color: #fff;\n  padding: 10px;\n  background: #000;\n  background: rgba(0, 0, 0, 0.8); }\n\n/*Retina graphics!*/\n@media only screen and (-webkit-min-device-pixel-ratio: 1.5), only screen and (min--moz-device-pixel-ratio: 1.5), only screen and (min-device-pixel-ratio: 1.5) {\n  #fancybox-loading, .fancybox-close, .fancybox-prev span, .fancybox-next span {\n    background-image: url(" + __webpack_require__(/*! ../img/fancybox_sprite@2x.png */ 3574) + ");\n    background-size: 44px 152px;\n    /*The size of the normal image, half the size of the hi-res image*/ }\n  #fancybox-loading div {\n    background-image: url(" + __webpack_require__(/*! ../img/fancybox_loading@2x.gif */ 3575) + ");\n    background-size: 24px 24px;\n    /*The size of the normal image, half the size of the hi-res image*/ } }\n", ""]);
	
	// exports


/***/ },

/***/ 3570:
/*!***********************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/fancybox/dist/img/fancybox_sprite.png ***!
  \***********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "783d4031fe50c3d83c960911e1fbc705.png";

/***/ },

/***/ 3571:
/*!************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/fancybox/dist/img/fancybox_loading.gif ***!
  \************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "328cc0f6c78211485058d460e80f4fa8.gif";

/***/ },

/***/ 3572:
/*!*************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/fancybox/dist/img/blank.gif ***!
  \*************************************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "325472601571f31e1bf00674c368d335.gif";

/***/ },

/***/ 3573:
/*!************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/fancybox/dist/img/fancybox_overlay.png ***!
  \************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "77aeaa52715b898b73c74d68c630330e.png";

/***/ },

/***/ 3574:
/*!**************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/fancybox/dist/img/fancybox_sprite@2x.png ***!
  \**************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "ed9970ce22242421e66ff150aa97fe5f.png";

/***/ },

/***/ 3575:
/*!***************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/fancybox/dist/img/fancybox_loading@2x.gif ***!
  \***************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "f92938639fa894a0e8ded1c3368abe98.gif";

/***/ },

/***/ 3576:
/*!******************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/jquery-toolbar/jquery.toolbar.js ***!
  \******************************************************************/
[7700, 3090],

/***/ 3577:
/*!*******************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/jquery-toolbar/jquery.toolbar.css ***!
  \*******************************************************************/
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(/*! !../css-loader!./jquery.toolbar.css */ 3578);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(/*! ../style-loader/addStyles.js */ 3155)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!../css-loader/index.js!./jquery.toolbar.css", function() {
				var newContent = require("!!../css-loader/index.js!./jquery.toolbar.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },

/***/ 3578:
/*!********************************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/css-loader!./atlas_bundles/heatmap/~/jquery-toolbar/jquery.toolbar.css ***!
  \********************************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(/*! ../css-loader/lib/css-base.js */ 3154)();
	// imports
	
	
	// module
	exports.push([module.id, ".btn-toolbar {\n  background: #364347;\n  width: 20px;\n  height: 20px;\n  text-align: center;\n  padding: 10px;\n  border-radius: 6px;\n  display: block;\n  transition: none;\n}\n.btn-toolbar > i {\n  color: #02baf2;\n  font-size: 16px;\n}\n.btn-toolbar:hover {\n  background: #02baf2;\n  cursor: pointer;\n}\n.btn-toolbar:hover > i {\n  color: white;\n}\n.btn-toolbar-primary {\n  background-color: #009dcd;\n}\n.btn-toolbar-primary.pressed {\n  background-color: #02baf2;\n}\n.btn-toolbar-primary:hover {\n  background-color: #02baf2;\n}\n.btn-toolbar-primary > i {\n  color: white;\n}\n.btn-toolbar-danger {\n  background-color: #cc0000;\n}\n.btn-toolbar-danger.pressed {\n  background-color: #f84545;\n}\n.btn-toolbar-danger:hover {\n  background-color: #f84545;\n}\n.btn-toolbar-danger > i {\n  color: white;\n}\n.btn-toolbar-warning {\n  background-color: #f3bc65;\n}\n.btn-toolbar-warning.pressed {\n  background-color: #fad46b;\n}\n.btn-toolbar-warning:hover {\n  background-color: #fad46b;\n}\n.btn-toolbar-warning > i {\n  color: white;\n}\n.btn-toolbar-info {\n  background-color: #e96300;\n}\n.btn-toolbar-info.pressed {\n  background-color: #f58410;\n}\n.btn-toolbar-info:hover {\n  background-color: #f58410;\n}\n.btn-toolbar-info > i {\n  color: white;\n}\n.btn-toolbar-success {\n  background-color: #28948c;\n}\n.btn-toolbar-success.pressed {\n  background-color: #3eb5ac;\n}\n.btn-toolbar-success:hover {\n  background-color: #3eb5ac;\n}\n.btn-toolbar-success > i {\n  color: white;\n}\n.btn-toolbar-info-o {\n  background-color: #9175bd;\n}\n.btn-toolbar-info-o.pressed {\n  background-color: #a88cd5;\n}\n.btn-toolbar-info-o:hover {\n  background-color: #a88cd5;\n}\n.btn-toolbar-info-o > i {\n  color: white;\n}\n.btn-toolbar-light {\n  background-color: #b2c6cd;\n}\n.btn-toolbar-light.pressed {\n  background-color: #d6e1e5;\n}\n.btn-toolbar-light:hover {\n  background-color: #d6e1e5;\n}\n.btn-toolbar-light > i {\n  color: white;\n}\n.btn-toolbar-dark {\n  background-color: #364347;\n}\n.btn-toolbar-dark.pressed {\n  background-color: #5e696d;\n}\n.btn-toolbar-dark:hover {\n  background-color: #5e696d;\n}\n.btn-toolbar-dark > i {\n  color: white;\n}\n.tool-container {\n  background-color: #5e696d;\n  background-size: 100% 100%;\n  border-radius: 6px;\n  position: absolute;\n  box-shadow: 0 0 2px grey;\n}\n.tool-container.tool-top,\n.tool-container.tool-bottom {\n  height: 40px;\n  border-bottom: 0px solid #beb8b8;\n}\n.tool-container.tool-top .tool-item,\n.tool-container.tool-bottom .tool-item {\n  float: left;\n  border-right: 0;\n  border-left: 0;\n}\n.tool-item {\n  box-sizing: initial;\n  height: 100%;\n  display: block;\n  width: 20px;\n  height: 20px;\n  text-align: center;\n  padding: 10px;\n  transition: none;\n}\n.tool-item > .fa {\n  color: #b2c6cd;\n}\n.tool-item.selected,\n.tool-item:hover {\n  background: #02baf2;\n}\n.tool-item.selected > .fa,\n.tool-item:hover > .fa {\n  color: white;\n}\n.tool-top .tool-item:first-child:hover,\n.tool-bottom .tool-item:first-child:hover {\n  border-top-left-radius: 6px;\n  border-bottom-left-radius: 6px;\n}\n.tool-top .tool-item:last-child:hover,\n.tool-bottom .tool-item:last-child:hover {\n  border-top-right-radius: 6px;\n  border-bottom-right-radius: 6px;\n}\n.tool-vertical-top .tool-item:first-child:hover,\n.tool-vertical-bottom .tool-item:first-child:hover,\n.tool-right .tool-item:first-child:hover,\n.tool-left .tool-item:first-child:hover {\n  border-top-left-radius: 6px;\n  border-top-right-radius: 6px;\n}\n.tool-vertical-top .tool-item:last-child:hover,\n.tool-vertical-bottom .tool-item:last-child:hover,\n.tool-right .tool-item:last-child:hover,\n.tool-left .tool-item:last-child:hover {\n  border-bottom-left-radius: 6px;\n  border-bottom-right-radius: 6px;\n}\n.tool-container .arrow {\n  width: 0;\n  height: 0;\n  position: absolute;\n  border-width: 7px;\n  border-style: solid;\n}\n.tool-container.tool-top .arrow {\n  border-color: #5e696d transparent transparent;\n  left: 50%;\n  bottom: -14px;\n  margin-left: -7px;\n}\n.tool-container.tool-bottom .arrow {\n  border-color: transparent transparent #5e696d;\n  left: 50%;\n  top: -14px;\n  margin-left: -7px;\n}\n.tool-container.tool-left .arrow {\n  border-color: transparent transparent transparent #5e696d;\n  top: 50%;\n  right: -14px;\n  margin-top: -7px;\n}\n.tool-container.tool-right .arrow {\n  border-color: transparent #5e696d transparent transparent;\n  top: 50%;\n  left: -14px;\n  margin-top: -7px;\n}\n.toolbar-primary {\n  background-color: #02baf2;\n}\n.toolbar-primary.tool-top .arrow {\n  border-color: #02baf2 transparent transparent;\n}\n.toolbar-primary.tool-bottom .arrow {\n  border-color: transparent transparent #02baf2;\n}\n.toolbar-primary.tool-left .arrow {\n  border-color: transparent transparent transparent #02baf2;\n}\n.toolbar-primary.tool-right .arrow {\n  border-color: transparent #02baf2 transparent transparent;\n}\n.toolbar-primary .tool-item > .fa {\n  color: white;\n}\n.toolbar-primary .tool-item.selected,\n.toolbar-primary .tool-item:hover {\n  background: #009dcd;\n  color: white;\n}\n.toolbar-danger {\n  background-color: #f84545;\n}\n.toolbar-danger.tool-top .arrow {\n  border-color: #f84545 transparent transparent;\n}\n.toolbar-danger.tool-bottom .arrow {\n  border-color: transparent transparent #f84545;\n}\n.toolbar-danger.tool-left .arrow {\n  border-color: transparent transparent transparent #f84545;\n}\n.toolbar-danger.tool-right .arrow {\n  border-color: transparent #f84545 transparent transparent;\n}\n.toolbar-danger .tool-item > .fa {\n  color: white;\n}\n.toolbar-danger .tool-item.selected,\n.toolbar-danger .tool-item:hover {\n  background: #cc0000;\n  color: white;\n}\n.toolbar-warning {\n  background-color: #f3bc65;\n}\n.toolbar-warning.tool-top .arrow {\n  border-color: #f3bc65 transparent transparent;\n}\n.toolbar-warning.tool-bottom .arrow {\n  border-color: transparent transparent #f3bc65;\n}\n.toolbar-warning.tool-left .arrow {\n  border-color: transparent transparent transparent #f3bc65;\n}\n.toolbar-warning.tool-right .arrow {\n  border-color: transparent #f3bc65 transparent transparent;\n}\n.toolbar-warning .tool-item > .fa {\n  color: white;\n}\n.toolbar-warning .tool-item.selected,\n.toolbar-warning .tool-item:hover {\n  background: #fad46b;\n  color: white;\n}\n.toolbar-info {\n  background-color: #e96300;\n}\n.toolbar-info.tool-top .arrow {\n  border-color: #e96300 transparent transparent;\n}\n.toolbar-info.tool-bottom .arrow {\n  border-color: transparent transparent #e96300;\n}\n.toolbar-info.tool-left .arrow {\n  border-color: transparent transparent transparent #e96300;\n}\n.toolbar-info.tool-right .arrow {\n  border-color: transparent #e96300 transparent transparent;\n}\n.toolbar-info .tool-item > .fa {\n  color: white;\n}\n.toolbar-info .tool-item.selected,\n.toolbar-info .tool-item:hover {\n  background: #f58410;\n  color: white;\n}\n.toolbar-success {\n  background-color: #28948c;\n}\n.toolbar-success.tool-top .arrow {\n  border-color: #28948c transparent transparent;\n}\n.toolbar-success.tool-bottom .arrow {\n  border-color: transparent transparent #28948c;\n}\n.toolbar-success.tool-left .arrow {\n  border-color: transparent transparent transparent #28948c;\n}\n.toolbar-success.tool-right .arrow {\n  border-color: transparent #28948c transparent transparent;\n}\n.toolbar-success .tool-item > .fa {\n  color: white;\n}\n.toolbar-success .tool-item.selected,\n.toolbar-success .tool-item:hover {\n  background: #3eb5ac;\n  color: white;\n}\n.toolbar-info-o {\n  background-color: #9175bd;\n}\n.toolbar-info-o.tool-top .arrow {\n  border-color: #9175bd transparent transparent;\n}\n.toolbar-info-o.tool-bottom .arrow {\n  border-color: transparent transparent #9175bd;\n}\n.toolbar-info-o.tool-left .arrow {\n  border-color: transparent transparent transparent #9175bd;\n}\n.toolbar-info-o.tool-right .arrow {\n  border-color: transparent #9175bd transparent transparent;\n}\n.toolbar-info-o .tool-item > .fa {\n  color: white;\n}\n.toolbar-info-o .tool-item.selected,\n.toolbar-info-o .tool-item:hover {\n  background: #a88cd5;\n  color: white;\n}\n.toolbar-light {\n  background-color: #b2c6cd;\n}\n.toolbar-light.tool-top .arrow {\n  border-color: #b2c6cd transparent transparent;\n}\n.toolbar-light.tool-bottom .arrow {\n  border-color: transparent transparent #b2c6cd;\n}\n.toolbar-light.tool-left .arrow {\n  border-color: transparent transparent transparent #b2c6cd;\n}\n.toolbar-light.tool-right .arrow {\n  border-color: transparent #b2c6cd transparent transparent;\n}\n.toolbar-light .tool-item > .fa {\n  color: white;\n}\n.toolbar-light .tool-item.selected,\n.toolbar-light .tool-item:hover {\n  background: #d6e1e5;\n  color: white;\n}\n.toolbar-dark {\n  background-color: #364347;\n}\n.toolbar-dark.tool-top .arrow {\n  border-color: #364347 transparent transparent;\n}\n.toolbar-dark.tool-bottom .arrow {\n  border-color: transparent transparent #364347;\n}\n.toolbar-dark.tool-left .arrow {\n  border-color: transparent transparent transparent #364347;\n}\n.toolbar-dark.tool-right .arrow {\n  border-color: transparent #364347 transparent transparent;\n}\n.toolbar-dark .tool-item > .fa {\n  color: white;\n}\n.toolbar-dark .tool-item.selected,\n.toolbar-dark .tool-item:hover {\n  background: #5e696d;\n  color: white;\n}\n.animate-standard {\n  -webkit-animation: standardAnimate 0.3s 1 ease;\n}\n.animate-flyin {\n  -webkit-animation: rotateAnimate 0.5s 1 ease;\n}\n.animate-grow {\n  -webkit-animation: growAnimate 0.4s 1 ease;\n}\n.animate-flip {\n  -webkit-animation: flipAnimate 0.4s 1 ease;\n}\n.animate-bounce {\n  -webkit-animation: bounceAnimate 0.4s 1 ease-out;\n}\n@-webkit-keyframes rotateAnimate {\n  from {\n    transform: rotate(180deg) translate(-120px);\n    opacity: 0;\n  }\n  to {\n    transform: rotate(0deg) translate(0px);\n    opacity: 1;\n  }\n}\n@-webkit-keyframes standardAnimate {\n  from {\n    transform: translateY(20px);\n    opacity: 0;\n  }\n  to {\n    transform: translateY(0px);\n    opacity: 1;\n  }\n}\n@-webkit-keyframes growAnimate {\n  0% {\n    transform: scale(0) translateY(40px);\n    opacity: 0;\n  }\n  70% {\n    transform: scale(1.5) translate(0px);\n  }\n  100% {\n    transform: scale(1) translate(0px);\n    opacity: 1;\n  }\n}\n@-webkit-keyframes rotate2Animate {\n  from {\n    transform: rotate(-90deg);\n    transform-origin: 0% 100%;\n    opacity: 0;\n  }\n  to {\n    transform: rotate(0deg);\n    opacity: 1;\n  }\n}\n@-webkit-keyframes flipAnimate {\n  from {\n    transform: rotate3d(2, 2, 2, 180deg);\n    opacity: 0;\n  }\n  to {\n    transform: rotate3d(0, 0, 0, 0deg);\n    opacity: 1;\n  }\n}\n@-webkit-keyframes bounceAnimate {\n  0% {\n    transform: translateY(40px);\n    opacity: 0;\n  }\n  30% {\n    transform: translateY(-40px);\n  }\n  70% {\n    transform: translateY(20px);\n  }\n  100% {\n    transform: translateY(0px);\n    opacity: 1;\n  }\n}\n.hidden {\n  display: none;\n}\n\n/* Custom white theme */\n\n.btn-toolbar-white {\n    background-color: #b2c6cd;\n}\n.btn-toolbar-white.pressed {\n    background-color: #d6e1e5;\n}\n.btn-toolbar-white:hover {\n    background-color: #d6e1e5;\n}\n.btn-toolbar-white > i {\n    color: white;\n}\n\n.toolbar-white {\n    background-color: whitesmoke;\n}\n.toolbar-white.tool-top .arrow {\n    border-color: #b2c6cd transparent transparent;\n}\n.toolbar-white.tool-bottom .arrow {\n    border-color: transparent transparent #b2c6cd;\n}\n.toolbar-white.tool-left .arrow {\n    border-color: transparent transparent transparent #b2c6cd;\n}\n.toolbar-white.tool-right .arrow {\n    border-color: transparent lightgrey transparent transparent;\n}\n.toolbar-white .tool-item > .fa {\n    color: white;\n}\n.toolbar-white .tool-item.selected,\n.toolbar-white .tool-item:hover {\n    background: lightgoldenrodyellow;\n    color: white;\n}\n", ""]);
	
	// exports


/***/ },

/***/ 3579:
/*!******************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/expression-atlas-heatmap-baseline-cell-variance/index.js ***!
  \******************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	//*------------------------------------------------------------------*
	
	module.exports = __webpack_require__(/*! ./src/HeatmapBaselineCellVariance.jsx */ 3580);

/***/ },

/***/ 3580:
/*!*********************************************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/expression-atlas-heatmap-baseline-cell-variance/src/HeatmapBaselineCellVariance.jsx ***!
  \*********************************************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var React = __webpack_require__(/*! react */ 2919);
	var Highcharts = __webpack_require__(/*! react-highcharts */ 3581);
	__webpack_require__(/*! highcharts-more */ 3583)(Highcharts.Highcharts);
	
	var HeatmapBaselineCellVariance = React.createClass({
	    displayName: 'HeatmapBaselineCellVariance',
	
	
	    propTypes: {
	        quartiles: React.PropTypes.shape({
	            min: React.PropTypes.number,
	            lower: React.PropTypes.number,
	            median: React.PropTypes.number,
	            upper: React.PropTypes.number,
	            max: React.PropTypes.number
	        }).isRequired
	    },
	
	    render: function render() {
	
	        var chartWidth = 115;
	        var chartHeight = 105;
	        var chartMargin = 0;
	
	        var highchartsOptions = {
	            credits: { enabled: false },
	            chart: { type: "boxplot", width: chartWidth, height: chartHeight, margin: chartMargin },
	            title: { text: "" },
	            legend: { enabled: false },
	            xAxis: { title: { text: "Variance" } },
	            yAxis: {
	                title: { text: "Expression level" },
	                labels: {
	                    align: "left",
	                    x: 0,
	                    y: -2
	                }
	            },
	            plotOptions: {
	                boxplot: {
	                    fillColor: "#F0F0E0",
	                    lineWidth: 2,
	                    medianColor: "#0C5DA5",
	                    medianWidth: 3,
	                    stemColor: "#A63400",
	                    stemDashStyle: "dot",
	                    stemWidth: 1,
	                    whiskerColor: "#3D9200",
	                    whiskerLength: "20%",
	                    whiskerWidth: 3
	                }
	            },
	            series: [{
	                name: "Expression",
	                data: [[this.props.quartiles.min, this.props.quartiles.lower, this.props.quartiles.median, this.props.quartiles.upper, this.props.quartiles.max]]
	            }],
	            tooltip: {
	                headerFormat: "",
	                style: {
	                    fontSize: "10px",
	                    padding: 5
	                }
	            }
	        };
	
	        var boxPlotStyle = { width: chartWidth, height: chartHeight, margin: chartMargin };
	        return React.createElement(
	            'td',
	            null,
	            React.createElement(
	                'div',
	                { id: 'container', style: boxPlotStyle },
	                React.createElement(Highcharts, { config: highchartsOptions })
	            )
	        );
	    }
	
	});
	
	module.exports = HeatmapBaselineCellVariance;

/***/ },

/***/ 3581:
/*!**************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/react-highcharts/dist/ReactHighcharts.js ***!
  \**************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	!function(t,r){ true?module.exports=r(__webpack_require__(/*! react */ 2919),__webpack_require__(/*! highcharts */ 3582)):"function"==typeof define&&define.amd?define(["react","highcharts"],r):"object"==typeof exports?exports.ReactHighcharts=r(require("react"),require("highcharts")):t.ReactHighcharts=r(t.React,t.Highcharts)}(this,function(t,r){return function(t){function r(o){if(e[o])return e[o].exports;var n=e[o]={exports:{},id:o,loaded:!1};return t[o].call(n.exports,n,n.exports,r),n.loaded=!0,n.exports}var e={};return r.m=t,r.c=e,r.p="",r(0)}([function(t,r,e){t.exports=e(3)},function(r,e){r.exports=t},function(t,r,e){(function(r){"use strict";var o=Object.assign||function(t){for(var r=1;r<arguments.length;r++){var e=arguments[r];for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o])}return t},n=e(1);t.exports=function(t,e){var i="Highcharts"+t,c=n.createClass({displayName:i,propTypes:{config:n.PropTypes.object.isRequired,isPureConfig:n.PropTypes.bool,neverReflow:n.PropTypes.bool,callback:n.PropTypes.func},defaultProps:{callback:function(){}},renderChart:function(n){var c=this;if(!n)throw new Error("Config must be specified for the "+i+" component");var s=n.chart;this.chart=new e[t](o({},n,{chart:o({},s,{renderTo:this.refs.chart})}),this.props.callback),r.requestAnimationFrame&&requestAnimationFrame(function(){c.chart&&c.chart.options&&c.chart.reflow()})},shouldComponentUpdate:function(t){return t.neverReflow||t.isPureConfig&&this.props.config===t.config?!0:(this.renderChart(t.config),!1)},getChart:function(){if(!this.chart)throw new Error("getChart() should not be called before the component is mounted");return this.chart},componentDidMount:function(){this.renderChart(this.props.config)},componentWillUnmount:function(){this.chart.destroy()},render:function(){var t=this.props;return t=o({},t,{ref:"chart"}),n.createElement("div",t)}});return c.Highcharts=e,c}}).call(r,function(){return this}())},function(t,r,e){"use strict";t.exports=e(2)("Chart",e(4))},function(t,e){t.exports=r}])});

/***/ },

/***/ 3582:
/*!**********************************************************!*\
  !*** ./atlas_bundles/heatmap/~/highcharts/highcharts.js ***!
  \**********************************************************/
/***/ function(module, exports) {

	// ==ClosureCompiler==
	// @compilation_level SIMPLE_OPTIMIZATIONS
	
	/**
	 * @license Highcharts JS v4.2.7 (2016-09-21)
	 *
	 * (c) 2009-2016 Torstein Honsi
	 *
	 * License: www.highcharts.com/license
	 */
	
	(function (root, factory) {
	    if (typeof module === 'object' && module.exports) {
	        module.exports = root.document ?
	            factory(root) : 
	            factory;
	    } else {
	        root.Highcharts = factory(root);
	    }
	}(typeof window !== 'undefined' ? window : this, function (win) { // eslint-disable-line no-undef
	// encapsulated variables
	    var UNDEFINED,
	        doc = win.document,
	        math = Math,
	        mathRound = math.round,
	        mathFloor = math.floor,
	        mathCeil = math.ceil,
	        mathMax = math.max,
	        mathMin = math.min,
	        mathAbs = math.abs,
	        mathCos = math.cos,
	        mathSin = math.sin,
	        mathPI = math.PI,
	        deg2rad = mathPI * 2 / 360,
	
	
	        // some variables
	        userAgent = (win.navigator && win.navigator.userAgent) || '',
	        isOpera = win.opera,
	        isMS = /(msie|trident|edge)/i.test(userAgent) && !isOpera,
	        docMode8 = doc && doc.documentMode === 8,
	        isWebKit = !isMS && /AppleWebKit/.test(userAgent),
	        isFirefox = /Firefox/.test(userAgent),
	        isTouchDevice = /(Mobile|Android|Windows Phone)/.test(userAgent),
	        SVG_NS = 'http://www.w3.org/2000/svg',
	        hasSVG = doc && doc.createElementNS && !!doc.createElementNS(SVG_NS, 'svg').createSVGRect,
	        hasBidiBug = isFirefox && parseInt(userAgent.split('Firefox/')[1], 10) < 4, // issue #38
	        useCanVG = doc && !hasSVG && !isMS && !!doc.createElement('canvas').getContext,
	        Renderer,
	        hasTouch,
	        symbolSizes = {},
	        idCounter = 0,
	        garbageBin,
	        defaultOptions,
	        dateFormat, // function
	        pathAnim,
	        timeUnits,
	        noop = function () {},
	        charts = [],
	        chartCount = 0,
	        PRODUCT = 'Highcharts',
	        VERSION = '4.2.7',
	
	        // some constants for frequently used strings
	        DIV = 'div',
	        ABSOLUTE = 'absolute',
	        RELATIVE = 'relative',
	        HIDDEN = 'hidden',
	        PREFIX = 'highcharts-',
	        VISIBLE = 'visible',
	        PX = 'px',
	        NONE = 'none',
	        M = 'M',
	        L = 'L',
	        numRegex = /[0-9]/g,
	        NORMAL_STATE = '',
	        HOVER_STATE = 'hover',
	        SELECT_STATE = 'select',
	        marginNames = ['plotTop', 'marginRight', 'marginBottom', 'plotLeft'],
	
	        // Object for extending Axis
	        AxisPlotLineOrBandExtension,
	
	        // constants for attributes
	        STROKE_WIDTH = 'stroke-width',
	
	        // time methods, changed based on whether or not UTC is used
	        Date,  // Allow using a different Date class
	        makeTime,
	        timezoneOffset,
	        getTimezoneOffset,
	        getMinutes,
	        getHours,
	        getDay,
	        getDate,
	        getMonth,
	        getFullYear,
	        setMilliseconds,
	        setSeconds,
	        setMinutes,
	        setHours,
	        setDate,
	        setMonth,
	        setFullYear,
	
	
	        // lookup over the types and the associated classes
	        seriesTypes = {},
	        Highcharts;
	
	    /**
	     * Provide error messages for debugging, with links to online explanation
	     */
	    function error(code, stop) {
	        var msg = 'Highcharts error #' + code + ': www.highcharts.com/errors/' + code;
	        if (stop) {
	            throw new Error(msg);
	        }
	        // else ...
	        if (win.console) {
	            console.log(msg); // eslint-disable-line no-console
	        }
	    }
	
	    // The Highcharts namespace
	    Highcharts = win.Highcharts ? error(16, true) : { win: win };
	
	    Highcharts.seriesTypes = seriesTypes;
	    var timers = [],
	        getStyle,
	
	        // Previous adapter functions
	        inArray,
	        each,
	        grep,
	        offset,
	        map,
	        addEvent,
	        removeEvent,
	        fireEvent,
	        animate,
	        stop;
	
	    /**
	     * An animator object. One instance applies to one property (attribute or style prop) 
	     * on one element.
	     * 
	     * @param {object} elem    The element to animate. May be a DOM element or a Highcharts SVGElement wrapper.
	     * @param {object} options Animation options, including duration, easing, step and complete.
	     * @param {object} prop    The property to animate.
	     */
	    function Fx(elem, options, prop) {
	        this.options = options;
	        this.elem = elem;
	        this.prop = prop;
	    }
	    Fx.prototype = {
	    
	        /**
	         * Animating a path definition on SVGElement
	         * @returns {undefined} 
	         */
	        dSetter: function () {
	            var start = this.paths[0],
	                end = this.paths[1],
	                ret = [],
	                now = this.now,
	                i = start.length,
	                startVal;
	
	            if (now === 1) { // land on the final path without adjustment points appended in the ends
	                ret = this.toD;
	
	            } else if (i === end.length && now < 1) {
	                while (i--) {
	                    startVal = parseFloat(start[i]);
	                    ret[i] =
	                        isNaN(startVal) ? // a letter instruction like M or L
	                                start[i] :
	                                now * (parseFloat(end[i] - startVal)) + startVal;
	
	                }
	            } else { // if animation is finished or length not matching, land on right value
	                ret = end;
	            }
	            this.elem.attr('d', ret);
	        },
	
	        /**
	         * Update the element with the current animation step
	         * @returns {undefined}
	         */
	        update: function () {
	            var elem = this.elem,
	                prop = this.prop, // if destroyed, it is null
	                now = this.now,
	                step = this.options.step;
	
	            // Animation setter defined from outside
	            if (this[prop + 'Setter']) {
	                this[prop + 'Setter']();
	
	            // Other animations on SVGElement
	            } else if (elem.attr) {
	                if (elem.element) {
	                    elem.attr(prop, now);
	                }
	
	            // HTML styles, raw HTML content like container size
	            } else {
	                elem.style[prop] = now + this.unit;
	            }
	        
	            if (step) {
	                step.call(elem, now, this);
	            }
	
	        },
	
	        /**
	         * Run an animation
	         */
	        run: function (from, to, unit) {
	            var self = this,
	                timer = function (gotoEnd) {
	                    return timer.stopped ? false : self.step(gotoEnd);
	                },
	                i;
	
	            this.startTime = +new Date();
	            this.start = from;
	            this.end = to;
	            this.unit = unit;
	            this.now = this.start;
	            this.pos = 0;
	
	            timer.elem = this.elem;
	
	            if (timer() && timers.push(timer) === 1) {
	                timer.timerId = setInterval(function () {
	                
	                    for (i = 0; i < timers.length; i++) {
	                        if (!timers[i]()) {
	                            timers.splice(i--, 1);
	                        }
	                    }
	
	                    if (!timers.length) {
	                        clearInterval(timer.timerId);
	                    }
	                }, 13);
	            }
	        },
	    
	        /**
	         * Run a single step in the animation
	         * @param   {Boolean} gotoEnd Whether to go to then endpoint of the animation after abort
	         * @returns {Boolean} True if animation continues
	         */
	        step: function (gotoEnd) {
	            var t = +new Date(),
	                ret,
	                done,
	                options = this.options,
	                elem = this.elem,
	                complete = options.complete,
	                duration = options.duration,
	                curAnim = options.curAnim,
	                i;
	        
	            if (elem.attr && !elem.element) { // #2616, element including flag is destroyed
	                ret = false;
	
	            } else if (gotoEnd || t >= duration + this.startTime) {
	                this.now = this.end;
	                this.pos = 1;
	                this.update();
	
	                curAnim[this.prop] = true;
	
	                done = true;
	                for (i in curAnim) {
	                    if (curAnim[i] !== true) {
	                        done = false;
	                    }
	                }
	
	                if (done && complete) {
	                    complete.call(elem);
	                }
	                ret = false;
	
	            } else {
	                this.pos = options.easing((t - this.startTime) / duration);
	                this.now = this.start + ((this.end - this.start) * this.pos);
	                this.update();
	                ret = true;
	            }
	            return ret;
	        },
	
	        /**
	         * Prepare start and end values so that the path can be animated one to one
	         */
	        initPath: function (elem, fromD, toD) {
	            fromD = fromD || '';
	            var shift,
	                startX = elem.startX,
	                endX = elem.endX,
	                bezier = fromD.indexOf('C') > -1,
	                numParams = bezier ? 7 : 3,
	                fullLength,
	                slice,
	                i,
	                start = fromD.split(' '),
	                end = toD.slice(), // copy
	                isArea = elem.isArea,
	                positionFactor = isArea ? 2 : 1,
	                reverse;
	        
	            /**
	             * In splines make move points have six parameters like bezier curves
	             */
	            function sixify(arr) {
	                i = arr.length;
	                while (i--) {
	                    if (arr[i] === M || arr[i] === L) {
	                        arr.splice(i + 1, 0, arr[i + 1], arr[i + 2], arr[i + 1], arr[i + 2]);
	                    }
	                }
	            }
	
	            /**
	             * Insert an array at the given position of another array
	             */
	            function insertSlice(arr, subArr, index) {
	                [].splice.apply(
	                    arr,
	                    [index, 0].concat(subArr)
	                );
	            }
	
	            /**
	             * If shifting points, prepend a dummy point to the end path. 
	             */
	            function prepend(arr, other) {
	                while (arr.length < fullLength) {
	                
	                    // Move to, line to or curve to?
	                    arr[0] = other[fullLength - arr.length];
	
	                    // Prepend a copy of the first point
	                    insertSlice(arr, arr.slice(0, numParams), 0);
	
	                    // For areas, the bottom path goes back again to the left, so we need
	                    // to append a copy of the last point.
	                    if (isArea) {
	                        insertSlice(arr, arr.slice(arr.length - numParams), arr.length);
	                        i--;
	                    }
	                }
	                arr[0] = 'M';
	            }
	
	            /**
	             * Copy and append last point until the length matches the end length
	             */
	            function append(arr, other) {
	                var i = (fullLength - arr.length) / numParams;
	                while (i > 0 && i--) {
	
	                    // Pull out the slice that is going to be appended or inserted. In a line graph,
	                    // the positionFactor is 1, and the last point is sliced out. In an area graph,
	                    // the positionFactor is 2, causing the middle two points to be sliced out, since
	                    // an area path starts at left, follows the upper path then turns and follows the
	                    // bottom back. 
	                    slice = arr.slice().splice(
	                        (arr.length / positionFactor) - numParams, 
	                        numParams * positionFactor
	                    );
	
	                    // Move to, line to or curve to?
	                    slice[0] = other[fullLength - numParams - (i * numParams)];
	                
	                    // Disable first control point
	                    if (bezier) {
	                        slice[numParams - 6] = slice[numParams - 2];
	                        slice[numParams - 5] = slice[numParams - 1];
	                    }
	                
	                    // Now insert the slice, either in the middle (for areas) or at the end (for lines)
	                    insertSlice(arr, slice, arr.length / positionFactor);
	
	                    if (isArea) {
	                        i--;
	                    }
	                }
	            }
	
	            if (bezier) {
	                sixify(start);
	                sixify(end);
	            }
	
	            // For sideways animation, find out how much we need to shift to get the start path Xs
	            // to match the end path Xs.
	            if (startX && endX) {
	                for (i = 0; i < startX.length; i++) {
	                    if (startX[i] === endX[0]) { // Moving left, new points coming in on right
	                        shift = i;
	                        break;
	                    } else if (startX[0] === endX[endX.length - startX.length + i]) { // Moving right
	                        shift = i;
	                        reverse = true;
	                        break;
	                    }
	                }
	                if (shift === undefined) {
	                    start = [];
	                }
	            }
	
	            if (start.length && Highcharts.isNumber(shift)) {
	
	                // The common target length for the start and end array, where both 
	                // arrays are padded in opposite ends
	                fullLength = end.length + shift * positionFactor * numParams;
	            
	                if (!reverse) {
	                    prepend(end, start);
	                    append(start, end);
	                } else {
	                    prepend(start, end);
	                    append(end, start);
	                }
	            }
	
	            return [start, end];
	        }
	    }; // End of Fx prototype
	
	
	    /**
	     * Extend an object with the members of another
	     * @param {Object} a The object to be extended
	     * @param {Object} b The object to add to the first one
	     */
	    var extend = Highcharts.extend = function (a, b) {
	        var n;
	        if (!a) {
	            a = {};
	        }
	        for (n in b) {
	            a[n] = b[n];
	        }
	        return a;
	    };
	
	    /**
	     * Deep merge two or more objects and return a third object. If the first argument is
	     * true, the contents of the second object is copied into the first object.
	     * Previously this function redirected to jQuery.extend(true), but this had two limitations.
	     * First, it deep merged arrays, which lead to workarounds in Highcharts. Second,
	     * it copied properties from extended prototypes.
	     */
	    function merge() {
	        var i,
	            args = arguments,
	            len,
	            ret = {},
	            doCopy = function (copy, original) {
	                var value, key;
	
	                // An object is replacing a primitive
	                if (typeof copy !== 'object') {
	                    copy = {};
	                }
	
	                for (key in original) {
	                    if (original.hasOwnProperty(key)) {
	                        value = original[key];
	
	                        // Copy the contents of objects, but not arrays or DOM nodes
	                        if (Highcharts.isObject(value, true) &&
	                                key !== 'renderTo' && typeof value.nodeType !== 'number') {
	                            copy[key] = doCopy(copy[key] || {}, value);
	
	                        // Primitives and arrays are copied over directly
	                        } else {
	                            copy[key] = original[key];
	                        }
	                    }
	                }
	                return copy;
	            };
	
	        // If first argument is true, copy into the existing object. Used in setOptions.
	        if (args[0] === true) {
	            ret = args[1];
	            args = Array.prototype.slice.call(args, 2);
	        }
	
	        // For each argument, extend the return
	        len = args.length;
	        for (i = 0; i < len; i++) {
	            ret = doCopy(ret, args[i]);
	        }
	
	        return ret;
	    }
	
	    /**
	     * Shortcut for parseInt
	     * @param {Object} s
	     * @param {Number} mag Magnitude
	     */
	    function pInt(s, mag) {
	        return parseInt(s, mag || 10);
	    }
	
	    /**
	     * Check for string
	     * @param {Object} s
	     */
	    function isString(s) {
	        return typeof s === 'string';
	    }
	
	    /**
	     * Check for array
	     * @param {Object} obj
	     */
	    function isArray(obj) {
	        var str = Object.prototype.toString.call(obj);
	        return str === '[object Array]' || str === '[object Array Iterator]';
	    }
	
	    /**
	     * Check for object
	     * @param {Object} obj
	     * @param {Boolean} strict Also checks that the object is not an array
	     */
	    var isObject = Highcharts.isObject = function (obj, strict) {
	        //debugger;
	        return obj && typeof obj === 'object' && (!strict || !isArray(obj));
	    };
	
	    /**
	     * Check for number
	     * @param {Object} n
	     */
	    var isNumber = Highcharts.isNumber = function isNumber(n) {
	        return typeof n === 'number' && !isNaN(n);
	    };
	
	    /**
	     * Remove last occurence of an item from an array
	     * @param {Array} arr
	     * @param {Mixed} item
	     */
	    function erase(arr, item) {
	        var i = arr.length;
	        while (i--) {
	            if (arr[i] === item) {
	                arr.splice(i, 1);
	                break;
	            }
	        }
	        //return arr;
	    }
	
	    /**
	     * Returns true if the object is not null or undefined.
	     * @param {Object} obj
	     */
	    function defined(obj) {
	        return obj !== UNDEFINED && obj !== null;
	    }
	
	    /**
	     * Set or get an attribute or an object of attributes. Can't use jQuery attr because
	     * it attempts to set expando properties on the SVG element, which is not allowed.
	     *
	     * @param {Object} elem The DOM element to receive the attribute(s)
	     * @param {String|Object} prop The property or an abject of key-value pairs
	     * @param {String} value The value if a single property is set
	     */
	    function attr(elem, prop, value) {
	        var key,
	            ret;
	
	        // if the prop is a string
	        if (isString(prop)) {
	            // set the value
	            if (defined(value)) {
	                elem.setAttribute(prop, value);
	
	            // get the value
	            } else if (elem && elem.getAttribute) { // elem not defined when printing pie demo...
	                ret = elem.getAttribute(prop);
	            }
	
	        // else if prop is defined, it is a hash of key/value pairs
	        } else if (defined(prop) && isObject(prop)) {
	            for (key in prop) {
	                elem.setAttribute(key, prop[key]);
	            }
	        }
	        return ret;
	    }
	    /**
	     * Check if an element is an array, and if not, make it into an array.
	     */
	    function splat(obj) {
	        return isArray(obj) ? obj : [obj];
	    }
	
	    /**
	     * Set a timeout if the delay is given, otherwise perform the function synchronously
	     * @param   {Function} fn      The function to perform
	     * @param   {Number}   delay   Delay in milliseconds
	     * @param   {Ojbect}   context The context
	     * @returns {Nubmer}           An identifier for the timeout
	     */
	    function syncTimeout(fn, delay, context) {
	        if (delay) {
	            return setTimeout(fn, delay, context);
	        }
	        fn.call(0, context);
	    }
	
	
	    /**
	     * Return the first value that is defined.
	     */
	    var pick = Highcharts.pick = function () {
	        var args = arguments,
	            i,
	            arg,
	            length = args.length;
	        for (i = 0; i < length; i++) {
	            arg = args[i];
	            if (arg !== UNDEFINED && arg !== null) {
	                return arg;
	            }
	        }
	    };
	
	    /**
	     * Set CSS on a given element
	     * @param {Object} el
	     * @param {Object} styles Style object with camel case property names
	     */
	    function css(el, styles) {
	        if (isMS && !hasSVG) { // #2686
	            if (styles && styles.opacity !== UNDEFINED) {
	                styles.filter = 'alpha(opacity=' + (styles.opacity * 100) + ')';
	            }
	        }
	        extend(el.style, styles);
	    }
	
	    /**
	     * Utility function to create element with attributes and styles
	     * @param {Object} tag
	     * @param {Object} attribs
	     * @param {Object} styles
	     * @param {Object} parent
	     * @param {Object} nopad
	     */
	    function createElement(tag, attribs, styles, parent, nopad) {
	        var el = doc.createElement(tag);
	        if (attribs) {
	            extend(el, attribs);
	        }
	        if (nopad) {
	            css(el, { padding: 0, border: 'none', margin: 0 });
	        }
	        if (styles) {
	            css(el, styles);
	        }
	        if (parent) {
	            parent.appendChild(el);
	        }
	        return el;
	    }
	
	    /**
	     * Extend a prototyped class by new members
	     * @param {Object} parent
	     * @param {Object} members
	     */
	    function extendClass(Parent, members) {
	        var object = function () {
	        };
	        object.prototype = new Parent();
	        extend(object.prototype, members);
	        return object;
	    }
	
	    /**
	     * Pad a string to a given length by adding 0 to the beginning
	     * @param {Number} number
	     * @param {Number} length
	     */
	    function pad(number, length, padder) {
	        return new Array((length || 2) + 1 - String(number).length).join(padder || 0) + number;
	    }
	
	    /**
	     * Return a length based on either the integer value, or a percentage of a base.
	     */
	    function relativeLength(value, base) {
	        return (/%$/).test(value) ? base * parseFloat(value) / 100 : parseFloat(value);
	    }
	
	    /**
	     * Wrap a method with extended functionality, preserving the original function
	     * @param {Object} obj The context object that the method belongs to
	     * @param {String} method The name of the method to extend
	     * @param {Function} func A wrapper function callback. This function is called with the same arguments
	     * as the original function, except that the original function is unshifted and passed as the first
	     * argument.
	     */
	    var wrap = Highcharts.wrap = function (obj, method, func) {
	        var proceed = obj[method];
	        obj[method] = function () {
	            var args = Array.prototype.slice.call(arguments);
	            args.unshift(proceed);
	            return func.apply(this, args);
	        };
	    };
	
	
	    function getTZOffset(timestamp) {
	        return ((getTimezoneOffset && getTimezoneOffset(timestamp)) || timezoneOffset || 0) * 60000;
	    }
	
	    /**
	     * Based on http://www.php.net/manual/en/function.strftime.php
	     * @param {String} format
	     * @param {Number} timestamp
	     * @param {Boolean} capitalize
	     */
	    dateFormat = function (format, timestamp, capitalize) {
	        if (!defined(timestamp) || isNaN(timestamp)) {
	            return defaultOptions.lang.invalidDate || '';
	        }
	        format = pick(format, '%Y-%m-%d %H:%M:%S');
	
	        var date = new Date(timestamp - getTZOffset(timestamp)),
	            key, // used in for constuct below
	            // get the basic time values
	            hours = date[getHours](),
	            day = date[getDay](),
	            dayOfMonth = date[getDate](),
	            month = date[getMonth](),
	            fullYear = date[getFullYear](),
	            lang = defaultOptions.lang,
	            langWeekdays = lang.weekdays,
	            shortWeekdays = lang.shortWeekdays,
	
	            // List all format keys. Custom formats can be added from the outside.
	            replacements = extend({
	
	                // Day
	                'a': shortWeekdays ? shortWeekdays[day] : langWeekdays[day].substr(0, 3), // Short weekday, like 'Mon'
	                'A': langWeekdays[day], // Long weekday, like 'Monday'
	                'd': pad(dayOfMonth), // Two digit day of the month, 01 to 31
	                'e': pad(dayOfMonth, 2, ' '), // Day of the month, 1 through 31
	                'w': day,
	
	                // Week (none implemented)
	                //'W': weekNumber(),
	
	                // Month
	                'b': lang.shortMonths[month], // Short month, like 'Jan'
	                'B': lang.months[month], // Long month, like 'January'
	                'm': pad(month + 1), // Two digit month number, 01 through 12
	
	                // Year
	                'y': fullYear.toString().substr(2, 2), // Two digits year, like 09 for 2009
	                'Y': fullYear, // Four digits year, like 2009
	
	                // Time
	                'H': pad(hours), // Two digits hours in 24h format, 00 through 23
	                'k': hours, // Hours in 24h format, 0 through 23
	                'I': pad((hours % 12) || 12), // Two digits hours in 12h format, 00 through 11
	                'l': (hours % 12) || 12, // Hours in 12h format, 1 through 12
	                'M': pad(date[getMinutes]()), // Two digits minutes, 00 through 59
	                'p': hours < 12 ? 'AM' : 'PM', // Upper case AM or PM
	                'P': hours < 12 ? 'am' : 'pm', // Lower case AM or PM
	                'S': pad(date.getSeconds()), // Two digits seconds, 00 through  59
	                'L': pad(mathRound(timestamp % 1000), 3) // Milliseconds (naming from Ruby)
	            }, Highcharts.dateFormats);
	
	
	        // do the replaces
	        for (key in replacements) {
	            while (format.indexOf('%' + key) !== -1) { // regex would do it in one line, but this is faster
	                format = format.replace('%' + key, typeof replacements[key] === 'function' ? replacements[key](timestamp) : replacements[key]);
	            }
	        }
	
	        // Optionally capitalize the string and return
	        return capitalize ? format.substr(0, 1).toUpperCase() + format.substr(1) : format;
	    };
	
	    /**
	     * Format a single variable. Similar to sprintf, without the % prefix.
	     */
	    function formatSingle(format, val) {
	        var floatRegex = /f$/,
	            decRegex = /\.([0-9])/,
	            lang = defaultOptions.lang,
	            decimals;
	
	        if (floatRegex.test(format)) { // float
	            decimals = format.match(decRegex);
	            decimals = decimals ? decimals[1] : -1;
	            if (val !== null) {
	                val = Highcharts.numberFormat(
	                    val,
	                    decimals,
	                    lang.decimalPoint,
	                    format.indexOf(',') > -1 ? lang.thousandsSep : ''
	                );
	            }
	        } else {
	            val = dateFormat(format, val);
	        }
	        return val;
	    }
	
	    /**
	     * Format a string according to a subset of the rules of Python's String.format method.
	     */
	    function format(str, ctx) {
	        var splitter = '{',
	            isInside = false,
	            segment,
	            valueAndFormat,
	            path,
	            i,
	            len,
	            ret = [],
	            val,
	            index;
	
	        while ((index = str.indexOf(splitter)) !== -1) {
	
	            segment = str.slice(0, index);
	            if (isInside) { // we're on the closing bracket looking back
	
	                valueAndFormat = segment.split(':');
	                path = valueAndFormat.shift().split('.'); // get first and leave format
	                len = path.length;
	                val = ctx;
	
	                // Assign deeper paths
	                for (i = 0; i < len; i++) {
	                    val = val[path[i]];
	                }
	
	                // Format the replacement
	                if (valueAndFormat.length) {
	                    val = formatSingle(valueAndFormat.join(':'), val);
	                }
	
	                // Push the result and advance the cursor
	                ret.push(val);
	
	            } else {
	                ret.push(segment);
	
	            }
	            str = str.slice(index + 1); // the rest
	            isInside = !isInside; // toggle
	            splitter = isInside ? '}' : '{'; // now look for next matching bracket
	        }
	        ret.push(str);
	        return ret.join('');
	    }
	
	    /**
	     * Get the magnitude of a number
	     */
	    function getMagnitude(num) {
	        return math.pow(10, mathFloor(math.log(num) / math.LN10));
	    }
	
	    /**
	     * Take an interval and normalize it to multiples of 1, 2, 2.5 and 5
	     * @param {Number} interval
	     * @param {Array} multiples
	     * @param {Number} magnitude
	     * @param {Object} options
	     */
	    function normalizeTickInterval(interval, multiples, magnitude, allowDecimals, preventExceed) {
	        var normalized,
	            i,
	            retInterval = interval;
	
	        // round to a tenfold of 1, 2, 2.5 or 5
	        magnitude = pick(magnitude, 1);
	        normalized = interval / magnitude;
	
	        // multiples for a linear scale
	        if (!multiples) {
	            multiples = [1, 2, 2.5, 5, 10];
	
	            // the allowDecimals option
	            if (allowDecimals === false) {
	                if (magnitude === 1) {
	                    multiples = [1, 2, 5, 10];
	                } else if (magnitude <= 0.1) {
	                    multiples = [1 / magnitude];
	                }
	            }
	        }
	
	        // normalize the interval to the nearest multiple
	        for (i = 0; i < multiples.length; i++) {
	            retInterval = multiples[i];
	            if ((preventExceed && retInterval * magnitude >= interval) || // only allow tick amounts smaller than natural
	                    (!preventExceed && (normalized <= (multiples[i] + (multiples[i + 1] || multiples[i])) / 2))) {
	                break;
	            }
	        }
	
	        // multiply back to the correct magnitude
	        retInterval *= magnitude;
	
	        return retInterval;
	    }
	
	
	    /**
	     * Utility method that sorts an object array and keeping the order of equal items.
	     * ECMA script standard does not specify the behaviour when items are equal.
	     */
	    function stableSort(arr, sortFunction) {
	        var length = arr.length,
	            sortValue,
	            i;
	
	        // Add index to each item
	        for (i = 0; i < length; i++) {
	            arr[i].safeI = i; // stable sort index
	        }
	
	        arr.sort(function (a, b) {
	            sortValue = sortFunction(a, b);
	            return sortValue === 0 ? a.safeI - b.safeI : sortValue;
	        });
	
	        // Remove index from items
	        for (i = 0; i < length; i++) {
	            delete arr[i].safeI; // stable sort index
	        }
	    }
	
	    /**
	     * Non-recursive method to find the lowest member of an array. Math.min raises a maximum
	     * call stack size exceeded error in Chrome when trying to apply more than 150.000 points. This
	     * method is slightly slower, but safe.
	     */
	    function arrayMin(data) {
	        var i = data.length,
	            min = data[0];
	
	        while (i--) {
	            if (data[i] < min) {
	                min = data[i];
	            }
	        }
	        return min;
	    }
	
	    /**
	     * Non-recursive method to find the lowest member of an array. Math.min raises a maximum
	     * call stack size exceeded error in Chrome when trying to apply more than 150.000 points. This
	     * method is slightly slower, but safe.
	     */
	    function arrayMax(data) {
	        var i = data.length,
	            max = data[0];
	
	        while (i--) {
	            if (data[i] > max) {
	                max = data[i];
	            }
	        }
	        return max;
	    }
	
	    /**
	     * Utility method that destroys any SVGElement or VMLElement that are properties on the given object.
	     * It loops all properties and invokes destroy if there is a destroy method. The property is
	     * then delete'ed.
	     * @param {Object} The object to destroy properties on
	     * @param {Object} Exception, do not destroy this property, only delete it.
	     */
	    function destroyObjectProperties(obj, except) {
	        var n;
	        for (n in obj) {
	            // If the object is non-null and destroy is defined
	            if (obj[n] && obj[n] !== except && obj[n].destroy) {
	                // Invoke the destroy
	                obj[n].destroy();
	            }
	
	            // Delete the property from the object.
	            delete obj[n];
	        }
	    }
	
	
	    /**
	     * Discard an element by moving it to the bin and delete
	     * @param {Object} The HTML node to discard
	     */
	    function discardElement(element) {
	        // create a garbage bin element, not part of the DOM
	        if (!garbageBin) {
	            garbageBin = createElement(DIV);
	        }
	
	        // move the node and empty bin
	        if (element) {
	            garbageBin.appendChild(element);
	        }
	        garbageBin.innerHTML = '';
	    }
	
	    /**
	     * Fix JS round off float errors
	     * @param {Number} num
	     */
	    function correctFloat(num, prec) {
	        return parseFloat(
	            num.toPrecision(prec || 14)
	        );
	    }
	
	    /**
	     * Set the global animation to either a given value, or fall back to the
	     * given chart's animation option
	     * @param {Object} animation
	     * @param {Object} chart
	     */
	    function setAnimation(animation, chart) {
	        chart.renderer.globalAnimation = pick(animation, chart.animation);
	    }
	
	    /**
	     * Get the animation in object form, where a disabled animation is always
	     * returned with duration: 0
	     */
	    function animObject(animation) {
	        return isObject(animation) ? merge(animation) : { duration: animation ? 500 : 0 };
	    }
	
	    /**
	     * The time unit lookup
	     */
	    timeUnits = {
	        millisecond: 1,
	        second: 1000,
	        minute: 60000,
	        hour: 3600000,
	        day: 24 * 3600000,
	        week: 7 * 24 * 3600000,
	        month: 28 * 24 * 3600000,
	        year: 364 * 24 * 3600000
	    };
	
	
	    /**
	     * Format a number and return a string based on input settings
	     * @param {Number} number The input number to format
	     * @param {Number} decimals The amount of decimals
	     * @param {String} decimalPoint The decimal point, defaults to the one given in the lang options
	     * @param {String} thousandsSep The thousands separator, defaults to the one given in the lang options
	     */
	    Highcharts.numberFormat = function (number, decimals, decimalPoint, thousandsSep) {
	
	        number = +number || 0;
	        decimals = +decimals;
	
	        var lang = defaultOptions.lang,
	            origDec = (number.toString().split('.')[1] || '').length,
	            decimalComponent,
	            strinteger,
	            thousands,
	            absNumber = Math.abs(number),
	            ret;
	
	        if (decimals === -1) {
	            decimals = Math.min(origDec, 20); // Preserve decimals. Not huge numbers (#3793).
	        } else if (!isNumber(decimals)) {
	            decimals = 2;
	        }
	
	        // A string containing the positive integer component of the number
	        strinteger = String(pInt(absNumber.toFixed(decimals)));
	
	        // Leftover after grouping into thousands. Can be 0, 1 or 3.
	        thousands = strinteger.length > 3 ? strinteger.length % 3 : 0;
	
	        // Language
	        decimalPoint = pick(decimalPoint, lang.decimalPoint);
	        thousandsSep = pick(thousandsSep, lang.thousandsSep);
	
	        // Start building the return
	        ret = number < 0 ? '-' : '';
	
	        // Add the leftover after grouping into thousands. For example, in the number 42 000 000,
	        // this line adds 42.
	        ret += thousands ? strinteger.substr(0, thousands) + thousandsSep : '';
	
	        // Add the remaining thousands groups, joined by the thousands separator
	        ret += strinteger.substr(thousands).replace(/(\d{3})(?=\d)/g, '$1' + thousandsSep);
	
	        // Add the decimal point and the decimal component
	        if (decimals) {
	            // Get the decimal component, and add power to avoid rounding errors with float numbers (#4573)
	            decimalComponent = Math.abs(absNumber - strinteger + Math.pow(10, -Math.max(decimals, origDec) - 1));
	            ret += decimalPoint + decimalComponent.toFixed(decimals).slice(2);
	        }
	
	        return ret;
	    };
	
	    /**
	     * Easing definition
	     * @param   {Number} pos Current position, ranging from 0 to 1
	     */
	    Math.easeInOutSine = function (pos) {
	        return -0.5 * (Math.cos(Math.PI * pos) - 1);
	    };
	
	    /**
	     * Internal method to return CSS value for given element and property
	     */
	    getStyle = function (el, prop) {
	
	        var style;
	
	        // For width and height, return the actual inner pixel size (#4913)
	        if (prop === 'width') {
	            return Math.min(el.offsetWidth, el.scrollWidth) - getStyle(el, 'padding-left') - getStyle(el, 'padding-right');
	        } else if (prop === 'height') {
	            return Math.min(el.offsetHeight, el.scrollHeight) - getStyle(el, 'padding-top') - getStyle(el, 'padding-bottom');
	        }
	
	        // Otherwise, get the computed style
	        style = win.getComputedStyle(el, undefined);
	        return style && pInt(style.getPropertyValue(prop));
	    };
	
	    /**
	     * Return the index of an item in an array, or -1 if not found
	     */
	    inArray = function (item, arr) {
	        return arr.indexOf ? arr.indexOf(item) : [].indexOf.call(arr, item);
	    };
	
	    /**
	     * Filter an array
	     */
	    grep = function (elements, callback) {
	        return [].filter.call(elements, callback);
	    };
	
	    /**
	     * Map an array
	     */
	    map = function (arr, fn) {
	        var results = [],
	            i = 0,
	            len = arr.length;
	
	        for (; i < len; i++) {
	            results[i] = fn.call(arr[i], arr[i], i, arr);
	        }
	
	        return results;
	    };
	
	    /**
	     * Get the element's offset position, corrected by overflow:auto.
	     */
	    offset = function (el) {
	        var docElem = doc.documentElement,
	            box = el.getBoundingClientRect();
	
	        return {
	            top: box.top  + (win.pageYOffset || docElem.scrollTop)  - (docElem.clientTop  || 0),
	            left: box.left + (win.pageXOffset || docElem.scrollLeft) - (docElem.clientLeft || 0)
	        };
	    };
	
	    /**
	     * Stop running animation.
	     * A possible extension to this would be to stop a single property, when
	     * we want to continue animating others. Then assign the prop to the timer
	     * in the Fx.run method, and check for the prop here. This would be an improvement
	     * in all cases where we stop the animation from .attr. Instead of stopping
	     * everything, we can just stop the actual attributes we're setting.
	     */
	    stop = function (el) {
	
	        var i = timers.length;
	
	        // Remove timers related to this element (#4519)
	        while (i--) {
	            if (timers[i].elem === el) {
	                timers[i].stopped = true; // #4667
	            }
	        }
	    };
	
	    /**
	     * Utility for iterating over an array.
	     * @param {Array} arr
	     * @param {Function} fn
	     */
	    each = function (arr, fn) { // modern browsers
	        return Array.prototype.forEach.call(arr, fn);
	    };
	
	    /**
	     * Add an event listener
	     */
	    addEvent = function (el, type, fn) {
	    
	        var events = el.hcEvents = el.hcEvents || {};
	
	        function wrappedFn(e) {
	            e.target = e.srcElement || win; // #2820
	            fn.call(el, e);
	        }
	
	        // Handle DOM events in modern browsers
	        if (el.addEventListener) {
	            el.addEventListener(type, fn, false);
	
	        // Handle old IE implementation
	        } else if (el.attachEvent) {
	
	            if (!el.hcEventsIE) {
	                el.hcEventsIE = {};
	            }
	
	            // Link wrapped fn with original fn, so we can get this in removeEvent
	            el.hcEventsIE[fn.toString()] = wrappedFn;
	
	            el.attachEvent('on' + type, wrappedFn);
	        }
	
	        if (!events[type]) {
	            events[type] = [];
	        }
	
	        events[type].push(fn);
	    };
	
	    /**
	     * Remove event added with addEvent
	     */
	    removeEvent = function (el, type, fn) {
	    
	        var events,
	            hcEvents = el.hcEvents,
	            index;
	
	        function removeOneEvent(type, fn) {
	            if (el.removeEventListener) {
	                el.removeEventListener(type, fn, false);
	            } else if (el.attachEvent) {
	                fn = el.hcEventsIE[fn.toString()];
	                el.detachEvent('on' + type, fn);
	            }
	        }
	
	        function removeAllEvents() {
	            var types,
	                len,
	                n;
	
	            if (!el.nodeName) {
	                return; // break on non-DOM events
	            }
	
	            if (type) {
	                types = {};
	                types[type] = true;
	            } else {
	                types = hcEvents;
	            }
	
	            for (n in types) {
	                if (hcEvents[n]) {
	                    len = hcEvents[n].length;
	                    while (len--) {
	                        removeOneEvent(n, hcEvents[n][len]);
	                    }
	                }
	            }
	        }
	
	        if (hcEvents) {
	            if (type) {
	                events = hcEvents[type] || [];
	                if (fn) {
	                    index = inArray(fn, events);
	                    if (index > -1) {
	                        events.splice(index, 1);
	                        hcEvents[type] = events;
	                    }
	                    removeOneEvent(type, fn);
	
	                } else {
	                    removeAllEvents();
	                    hcEvents[type] = [];
	                }
	            } else {
	                removeAllEvents();
	                el.hcEvents = {};
	            }
	        }
	    };
	
	    /**
	     * Fire an event on a custom object
	     */
	    fireEvent = function (el, type, eventArguments, defaultFunction) {
	        var e,
	            hcEvents = el.hcEvents,
	            events,
	            len,
	            i,
	            fn;
	
	        eventArguments = eventArguments || {};
	
	        if (doc.createEvent && (el.dispatchEvent || el.fireEvent)) {
	            e = doc.createEvent('Events');
	            e.initEvent(type, true, true);
	            e.target = el;
	
	            extend(e, eventArguments);
	
	            if (el.dispatchEvent) {
	                el.dispatchEvent(e);
	            } else {
	                el.fireEvent(type, e);
	            }
	
	        } else if (hcEvents) {
	        
	            events = hcEvents[type] || [];
	            len = events.length;
	
	            // Attach a simple preventDefault function to skip default handler if called. 
	            // The built-in defaultPrevented property is not overwritable (#5112)
	            if (!eventArguments.preventDefault) {
	                eventArguments.preventDefault = function () {
	                    eventArguments.defaultPrevented = true;
	                };
	            }
	
	            eventArguments.target = el;
	
	            // If the type is not set, we're running a custom event (#2297). If it is set,
	            // we're running a browser event, and setting it will cause en error in
	            // IE8 (#2465).
	            if (!eventArguments.type) {
	                eventArguments.type = type;
	            }
	        
	            for (i = 0; i < len; i++) {
	                fn = events[i];
	
	                // If the event handler return false, prevent the default handler from executing
	                if (fn && fn.call(el, eventArguments) === false) {
	                    eventArguments.preventDefault();
	                }
	            }
	        }
	            
	        // Run the default if not prevented
	        if (defaultFunction && !eventArguments.defaultPrevented) {
	            defaultFunction(eventArguments);
	        }
	    };
	
	    /**
	     * The global animate method, which uses Fx to create individual animators.
	     */
	    animate = function (el, params, opt) {
	        var start,
	            unit = '',
	            end,
	            fx,
	            args,
	            prop;
	
	        if (!isObject(opt)) { // Number or undefined/null
	            args = arguments;
	            opt = {
	                duration: args[2],
	                easing: args[3],
	                complete: args[4]
	            };
	        }
	        if (!isNumber(opt.duration)) {
	            opt.duration = 400;
	        }
	        opt.easing = typeof opt.easing === 'function' ? opt.easing : (Math[opt.easing] || Math.easeInOutSine);
	        opt.curAnim = merge(params);
	
	        for (prop in params) {
	            fx = new Fx(el, opt, prop);
	            end = null;
	
	            if (prop === 'd') {
	                fx.paths = fx.initPath(
	                    el,
	                    el.d,
	                    params.d
	                );
	                fx.toD = params.d;
	                start = 0;
	                end = 1;
	            } else if (el.attr) {
	                start = el.attr(prop);
	            } else {
	                start = parseFloat(getStyle(el, prop)) || 0;
	                if (prop !== 'opacity') {
	                    unit = 'px';
	                }
	            }
	
	            if (!end) {
	                end = params[prop];
	            }
	            if (end.match && end.match('px')) {
	                end = end.replace(/px/g, ''); // #4351
	            }
	            fx.run(start, end, unit);
	        }
	    };
	
	    /**
	     * Register Highcharts as a plugin in jQuery
	     */
	    if (win.jQuery) {
	        win.jQuery.fn.highcharts = function () {
	            var args = [].slice.call(arguments);
	
	            if (this[0]) { // this[0] is the renderTo div
	
	                // Create the chart
	                if (args[0]) {
	                    new Highcharts[ // eslint-disable-line no-new
	                        isString(args[0]) ? args.shift() : 'Chart' // Constructor defaults to Chart
	                    ](this[0], args[0], args[1]);
	                    return this;
	                }
	
	                // When called without parameters or with the return argument, return an existing chart
	                return charts[attr(this[0], 'data-highcharts-chart')];
	            }
	        };
	    }
	
	
	    /**
	     * Compatibility section to add support for legacy IE. This can be removed if old IE 
	     * support is not needed.
	     */
	    if (doc && !doc.defaultView) {
	        getStyle = function (el, prop) {
	            var val,
	                alias = { width: 'clientWidth', height: 'clientHeight' }[prop];
	            
	            if (el.style[prop]) {
	                return pInt(el.style[prop]);
	            }
	            if (prop === 'opacity') {
	                prop = 'filter';
	            }
	
	            // Getting the rendered width and height
	            if (alias) {
	                el.style.zoom = 1;
	                return Math.max(el[alias] - 2 * getStyle(el, 'padding'), 0);
	            }
	        
	            val = el.currentStyle[prop.replace(/\-(\w)/g, function (a, b) {
	                return b.toUpperCase();
	            })];
	            if (prop === 'filter') {
	                val = val.replace(
	                    /alpha\(opacity=([0-9]+)\)/, 
	                    function (a, b) { 
	                        return b / 100; 
	                    }
	                );
	            }
	        
	            return val === '' ? 1 : pInt(val);
	        };
	    }
	
	    if (!Array.prototype.forEach) {
	        each = function (arr, fn) { // legacy
	            var i = 0, 
	                len = arr.length;
	            for (; i < len; i++) {
	                if (fn.call(arr[i], arr[i], i, arr) === false) {
	                    return i;
	                }
	            }
	        };
	    }
	
	    if (!Array.prototype.indexOf) {
	        inArray = function (item, arr) {
	            var len, 
	                i = 0;
	
	            if (arr) {
	                len = arr.length;
	            
	                for (; i < len; i++) {
	                    if (arr[i] === item) {
	                        return i;
	                    }
	                }
	            }
	
	            return -1;
	        };
	    }
	
	    if (!Array.prototype.filter) {
	        grep = function (elements, fn) {
	            var ret = [],
	                i = 0,
	                length = elements.length;
	
	            for (; i < length; i++) {
	                if (fn(elements[i], i)) {
	                    ret.push(elements[i]);
	                }
	            }
	
	            return ret;
	        };
	    }
	
	    //--- End compatibility section ---
	
	    // Expose utilities
	    Highcharts.Fx = Fx;
	    Highcharts.inArray = inArray;
	    Highcharts.each = each;
	    Highcharts.grep = grep;
	    Highcharts.offset = offset;
	    Highcharts.map = map;
	    Highcharts.addEvent = addEvent;
	    Highcharts.removeEvent = removeEvent;
	    Highcharts.fireEvent = fireEvent;
	    Highcharts.animate = animate;
	    Highcharts.animObject = animObject;
	    Highcharts.stop = stop;
	
	    /* ****************************************************************************
	     * Handle the options                                                         *
	     *****************************************************************************/
	    defaultOptions = {
	        colors: ['#7cb5ec', '#434348', '#90ed7d', '#f7a35c',
	                '#8085e9', '#f15c80', '#e4d354', '#2b908f', '#f45b5b', '#91e8e1'],
	        symbols: ['circle', 'diamond', 'square', 'triangle', 'triangle-down'],
	        lang: {
	            loading: 'Loading...',
	            months: ['January', 'February', 'March', 'April', 'May', 'June', 'July',
	                    'August', 'September', 'October', 'November', 'December'],
	            shortMonths: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
	            weekdays: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
	            // invalidDate: '',
	            decimalPoint: '.',
	            numericSymbols: ['k', 'M', 'G', 'T', 'P', 'E'], // SI prefixes used in axis labels
	            resetZoom: 'Reset zoom',
	            resetZoomTitle: 'Reset zoom level 1:1',
	            thousandsSep: ' '
	        },
	        global: {
	            useUTC: true,
	            //timezoneOffset: 0,
	            canvasToolsURL: 'http://code.highcharts.com/modules/canvas-tools.js',
	            VMLRadialGradientURL: 'http://code.highcharts.com/4.2.7/gfx/vml-radial-gradient.png'
	        },
	        chart: {
	            //animation: true,
	            //alignTicks: false,
	            //reflow: true,
	            //className: null,
	            //events: { load, selection },
	            //margin: [null],
	            //marginTop: null,
	            //marginRight: null,
	            //marginBottom: null,
	            //marginLeft: null,
	            borderColor: '#4572A7',
	            //borderWidth: 0,
	            borderRadius: 0,
	            defaultSeriesType: 'line',
	            ignoreHiddenSeries: true,
	            //inverted: false,
	            //shadow: false,
	            spacing: [10, 10, 15, 10],
	            //spacingTop: 10,
	            //spacingRight: 10,
	            //spacingBottom: 15,
	            //spacingLeft: 10,
	            //style: {
	            //    fontFamily: '"Lucida Grande", "Lucida Sans Unicode", Verdana, Arial, Helvetica, sans-serif', // default font
	            //    fontSize: '12px'
	            //},
	            backgroundColor: '#FFFFFF',
	            //plotBackgroundColor: null,
	            plotBorderColor: '#C0C0C0',
	            //plotBorderWidth: 0,
	            //plotShadow: false,
	            //zoomType: ''
	            resetZoomButton: {
	                theme: {
	                    zIndex: 20
	                },
	                position: {
	                    align: 'right',
	                    x: -10,
	                    //verticalAlign: 'top',
	                    y: 10
	                }
	                // relativeTo: 'plot'
	            },
	            width: null,
	            height: null
	        },
	        title: {
	            text: 'Chart title',
	            align: 'center',
	            // floating: false,
	            margin: 15,
	            // x: 0,
	            // verticalAlign: 'top',
	            // y: null,
	            style: {
	                color: '#333333',
	                fontSize: '18px'
	            },
	            widthAdjust: -44
	
	        },
	        subtitle: {
	            text: '',
	            align: 'center',
	            // floating: false
	            // x: 0,
	            // verticalAlign: 'top',
	            // y: null,
	            style: {
	                color: '#555555'
	            },
	            widthAdjust: -44
	        },
	
	        plotOptions: {
	            line: { // base series options
	                allowPointSelect: false,
	                showCheckbox: false,
	                animation: {
	                    duration: 1000
	                },
	                //connectNulls: false,
	                //cursor: 'default',
	                //clip: true,
	                //dashStyle: null,
	                //enableMouseTracking: true,
	                events: {},
	                //legendIndex: 0,
	                //linecap: 'round',
	                lineWidth: 2,
	                //shadow: false,
	                // stacking: null,
	                marker: {
	                    //enabled: true,
	                    //symbol: null,
	                    lineWidth: 0,
	                    radius: 4,
	                    lineColor: '#FFFFFF',
	                    //fillColor: null,
	                    states: { // states for a single point
	                        hover: {
	                            enabled: true,
	                            lineWidthPlus: 1,
	                            radiusPlus: 2
	                        },
	                        select: {
	                            fillColor: '#FFFFFF',
	                            lineColor: '#000000',
	                            lineWidth: 2
	                        }
	                    }
	                },
	                point: {
	                    events: {}
	                },
	                dataLabels: {
	                    align: 'center',
	                    // defer: true,
	                    // enabled: false,
	                    formatter: function () {
	                        return this.y === null ? '' : Highcharts.numberFormat(this.y, -1);
	                    },
	                    style: {
	                        color: 'contrast',
	                        fontSize: '11px',
	                        fontWeight: 'bold',
	                        textShadow: '0 0 6px contrast, 0 0 3px contrast'
	                    },
	                    verticalAlign: 'bottom', // above singular point
	                    x: 0,
	                    y: 0,
	                    // backgroundColor: undefined,
	                    // borderColor: undefined,
	                    // borderRadius: undefined,
	                    // borderWidth: undefined,
	                    padding: 5
	                    // shadow: false
	                },
	                cropThreshold: 300, // draw points outside the plot area when the number of points is less than this
	                pointRange: 0,
	                //pointStart: 0,
	                //pointInterval: 1,
	                //showInLegend: null, // auto: true for standalone series, false for linked series
	                softThreshold: true,
	                states: { // states for the entire series
	                    hover: {
	                        //enabled: false,
	                        lineWidthPlus: 1,
	                        marker: {
	                            // lineWidth: base + 1,
	                            // radius: base + 1
	                        },
	                        halo: {
	                            size: 10,
	                            opacity: 0.25
	                        }
	                    },
	                    select: {
	                        marker: {}
	                    }
	                },
	                stickyTracking: true,
	                //tooltip: {
	                    //pointFormat: '<span style="color:{point.color}">\u25CF</span> {series.name}: <b>{point.y}</b>'
	                    //valueDecimals: null,
	                    //xDateFormat: '%A, %b %e, %Y',
	                    //valuePrefix: '',
	                    //ySuffix: ''
	                //}
	                turboThreshold: 1000
	                // zIndex: null
	            }
	        },
	        labels: {
	            //items: [],
	            style: {
	                //font: defaultFont,
	                position: ABSOLUTE,
	                color: '#3E576F'
	            }
	        },
	        legend: {
	            enabled: true,
	            align: 'center',
	            //floating: false,
	            layout: 'horizontal',
	            labelFormatter: function () {
	                return this.name;
	            },
	            //borderWidth: 0,
	            borderColor: '#909090',
	            borderRadius: 0,
	            navigation: {
	                // animation: true,
	                activeColor: '#274b6d',
	                // arrowSize: 12
	                inactiveColor: '#CCC'
	                // style: {} // text styles
	            },
	            // margin: 20,
	            // reversed: false,
	            shadow: false,
	            // backgroundColor: null,
	            /*style: {
	                padding: '5px'
	            },*/
	            itemStyle: {
	                color: '#333333',
	                fontSize: '12px',
	                fontWeight: 'bold'
	            },
	            itemHoverStyle: {
	                //cursor: 'pointer', removed as of #601
	                color: '#000'
	            },
	            itemHiddenStyle: {
	                color: '#CCC'
	            },
	            itemCheckboxStyle: {
	                position: ABSOLUTE,
	                width: '13px', // for IE precision
	                height: '13px'
	            },
	            // itemWidth: undefined,
	            // symbolRadius: 0,
	            // symbolWidth: 16,
	            symbolPadding: 5,
	            verticalAlign: 'bottom',
	            // width: undefined,
	            x: 0,
	            y: 0,
	            title: {
	                //text: null,
	                style: {
	                    fontWeight: 'bold'
	                }
	            }
	        },
	
	        loading: {
	            // hideDuration: 100,
	            labelStyle: {
	                fontWeight: 'bold',
	                position: RELATIVE,
	                top: '45%'
	            },
	            // showDuration: 0,
	            style: {
	                position: ABSOLUTE,
	                backgroundColor: 'white',
	                opacity: 0.5,
	                textAlign: 'center'
	            }
	        },
	
	        tooltip: {
	            enabled: true,
	            animation: hasSVG,
	            //crosshairs: null,
	            backgroundColor: 'rgba(249, 249, 249, .85)',
	            borderWidth: 1,
	            borderRadius: 3,
	            dateTimeLabelFormats: {
	                millisecond: '%A, %b %e, %H:%M:%S.%L',
	                second: '%A, %b %e, %H:%M:%S',
	                minute: '%A, %b %e, %H:%M',
	                hour: '%A, %b %e, %H:%M',
	                day: '%A, %b %e, %Y',
	                week: 'Week from %A, %b %e, %Y',
	                month: '%B %Y',
	                year: '%Y'
	            },
	            footerFormat: '',
	            //formatter: defaultFormatter,
	            headerFormat: '<span style="font-size: 10px">{point.key}</span><br/>',
	            pointFormat: '<span style="color:{point.color}">\u25CF</span> {series.name}: <b>{point.y}</b><br/>',
	            shadow: true,
	            //shape: 'callout',
	            //shared: false,
	            snap: isTouchDevice ? 25 : 10,
	            style: {
	                color: '#333333',
	                cursor: 'default',
	                fontSize: '12px',
	                padding: '8px',
	                pointerEvents: 'none', // #1686 http://caniuse.com/#feat=pointer-events
	                whiteSpace: 'nowrap'
	            }
	            //xDateFormat: '%A, %b %e, %Y',
	            //valueDecimals: null,
	            //valuePrefix: '',
	            //valueSuffix: ''
	        },
	
	        credits: {
	            enabled: true,
	            text: 'Highcharts.com',
	            href: 'http://www.highcharts.com',
	            position: {
	                align: 'right',
	                x: -10,
	                verticalAlign: 'bottom',
	                y: -5
	            },
	            style: {
	                cursor: 'pointer',
	                color: '#909090',
	                fontSize: '9px'
	            }
	        }
	    };
	
	
	
	    /**
	     * Set the time methods globally based on the useUTC option. Time method can be either
	     * local time or UTC (default).
	     */
	    function setTimeMethods() {
	        var globalOptions = defaultOptions.global,
	            useUTC = globalOptions.useUTC,
	            GET = useUTC ? 'getUTC' : 'get',
	            SET = useUTC ? 'setUTC' : 'set';
	
	
	        Date = globalOptions.Date || win.Date;
	        timezoneOffset = useUTC && globalOptions.timezoneOffset;
	        getTimezoneOffset = useUTC && globalOptions.getTimezoneOffset;
	        makeTime = function (year, month, date, hours, minutes, seconds) {
	            var d;
	            if (useUTC) {
	                d = Date.UTC.apply(0, arguments);
	                d += getTZOffset(d);
	            } else {
	                d = new Date(
	                    year,
	                    month,
	                    pick(date, 1),
	                    pick(hours, 0),
	                    pick(minutes, 0),
	                    pick(seconds, 0)
	                ).getTime();
	            }
	            return d;
	        };
	        getMinutes =      GET + 'Minutes';
	        getHours =        GET + 'Hours';
	        getDay =          GET + 'Day';
	        getDate =         GET + 'Date';
	        getMonth =        GET + 'Month';
	        getFullYear =     GET + 'FullYear';
	        setMilliseconds = SET + 'Milliseconds';
	        setSeconds =      SET + 'Seconds';
	        setMinutes =      SET + 'Minutes';
	        setHours =        SET + 'Hours';
	        setDate =         SET + 'Date';
	        setMonth =        SET + 'Month';
	        setFullYear =     SET + 'FullYear';
	
	    }
	
	    /**
	     * Merge the default options with custom options and return the new options structure
	     * @param {Object} options The new custom options
	     */
	    function setOptions(options) {
	
	        // Copy in the default options
	        defaultOptions = merge(true, defaultOptions, options);
	
	        // Apply UTC
	        setTimeMethods();
	
	        return defaultOptions;
	    }
	
	    /**
	     * Get the updated default options. Until 3.0.7, merely exposing defaultOptions for outside modules
	     * wasn't enough because the setOptions method created a new object.
	     */
	    function getOptions() {
	        return defaultOptions;
	    }
	
	
	
	
	
	
	    // Series defaults
	    var defaultPlotOptions = defaultOptions.plotOptions,
	        defaultSeriesOptions = defaultPlotOptions.line;
	
	    // set the default time methods
	    setTimeMethods();
	
	
	    /**
	     * Handle color operations. The object methods are chainable.
	     * @param {String} input The input color in either rbga or hex format
	     */
	    function Color(input) {
	        // Backwards compatibility, allow instanciation without new
	        if (!(this instanceof Color)) {
	            return new Color(input);
	        }
	        // Initialize
	        this.init(input);
	    }
	    Color.prototype = {
	
	        // Collection of parsers. This can be extended from the outside by pushing parsers
	        // to Highcharts.Colors.prototype.parsers.
	        parsers: [{
	            // RGBA color
	            regex: /rgba\(\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]?(?:\.[0-9]+)?)\s*\)/,
	            parse: function (result) {
	                return [pInt(result[1]), pInt(result[2]), pInt(result[3]), parseFloat(result[4], 10)];
	            }
	        }, {
	            // HEX color
	            regex: /#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})/,
	            parse: function (result) {
	                return [pInt(result[1], 16), pInt(result[2], 16), pInt(result[3], 16), 1];
	            }
	        }, {
	            // RGB color
	            regex: /rgb\(\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*\)/,
	            parse: function (result) {
	                return [pInt(result[1]), pInt(result[2]), pInt(result[3]), 1];
	            }
	        }],
	
	        /**
	         * Parse the input color to rgba array
	         * @param {String} input
	         */
	        init: function (input) {
	            var result,
	                rgba,
	                i,
	                parser;
	
	            this.input = input;
	
	            // Gradients
	            if (input && input.stops) {
	                this.stops = map(input.stops, function (stop) {
	                    return new Color(stop[1]);
	                });
	
	            // Solid colors
	            } else {
	                i = this.parsers.length;
	                while (i-- && !rgba) {
	                    parser = this.parsers[i];
	                    result = parser.regex.exec(input);
	                    if (result) {
	                        rgba = parser.parse(result);
	                    }
	                }
	            }
	            this.rgba = rgba || [];
	        },
	
	        /**
	         * Return the color a specified format
	         * @param {String} format
	         */
	        get: function (format) {
	            var input = this.input,
	                rgba = this.rgba,
	                ret;
	
	            if (this.stops) {
	                ret = merge(input);
	                ret.stops = [].concat(ret.stops);
	                each(this.stops, function (stop, i) {
	                    ret.stops[i] = [ret.stops[i][0], stop.get(format)];
	                });
	
	            // it's NaN if gradient colors on a column chart
	            } else if (rgba && isNumber(rgba[0])) {
	                if (format === 'rgb' || (!format && rgba[3] === 1)) {
	                    ret = 'rgb(' + rgba[0] + ',' + rgba[1] + ',' + rgba[2] + ')';
	                } else if (format === 'a') {
	                    ret = rgba[3];
	                } else {
	                    ret = 'rgba(' + rgba.join(',') + ')';
	                }
	            } else {
	                ret = input;
	            }
	            return ret;
	        },
	
	        /**
	         * Brighten the color
	         * @param {Number} alpha
	         */
	        brighten: function (alpha) {
	            var i, 
	                rgba = this.rgba;
	
	            if (this.stops) {
	                each(this.stops, function (stop) {
	                    stop.brighten(alpha);
	                });
	
	            } else if (isNumber(alpha) && alpha !== 0) {
	                for (i = 0; i < 3; i++) {
	                    rgba[i] += pInt(alpha * 255);
	
	                    if (rgba[i] < 0) {
	                        rgba[i] = 0;
	                    }
	                    if (rgba[i] > 255) {
	                        rgba[i] = 255;
	                    }
	                }
	            }
	            return this;
	        },
	
	        /**
	         * Set the color's opacity to a given alpha value
	         * @param {Number} alpha
	         */
	        setOpacity: function (alpha) {
	            this.rgba[3] = alpha;
	            return this;
	        }
	    };
	
	
	    /**
	     * A wrapper object for SVG elements
	     */
	    function SVGElement() {}
	
	    SVGElement.prototype = {
	
	        // Default base for animation
	        opacity: 1,
	        // For labels, these CSS properties are applied to the <text> node directly
	        textProps: ['direction', 'fontSize', 'fontWeight', 'fontFamily', 'fontStyle', 'color',
	            'lineHeight', 'width', 'textDecoration', 'textOverflow', 'textShadow'],
	
	        /**
	         * Initialize the SVG renderer
	         * @param {Object} renderer
	         * @param {String} nodeName
	         */
	        init: function (renderer, nodeName) {
	            var wrapper = this;
	            wrapper.element = nodeName === 'span' ?
	                    createElement(nodeName) :
	                    doc.createElementNS(SVG_NS, nodeName);
	            wrapper.renderer = renderer;
	        },
	
	        /**
	         * Animate a given attribute
	         * @param {Object} params
	         * @param {Number} options Options include duration, easing, step and complete
	         * @param {Function} complete Function to perform at the end of animation
	         */
	        animate: function (params, options, complete) {
	            var animOptions = pick(options, this.renderer.globalAnimation, true);
	            stop(this); // stop regardless of animation actually running, or reverting to .attr (#607)
	            if (animOptions) {
	                if (complete) { // allows using a callback with the global animation without overwriting it
	                    animOptions.complete = complete;
	                }
	                animate(this, params, animOptions);
	            } else {
	                this.attr(params, null, complete);
	            }
	            return this;
	        },
	
	        /**
	         * Build an SVG gradient out of a common JavaScript configuration object
	         */
	        colorGradient: function (color, prop, elem) {
	            var renderer = this.renderer,
	                colorObject,
	                gradName,
	                gradAttr,
	                radAttr,
	                gradients,
	                gradientObject,
	                stops,
	                stopColor,
	                stopOpacity,
	                radialReference,
	                n,
	                id,
	                key = [],
	                value;
	
	            // Apply linear or radial gradients
	            if (color.linearGradient) {
	                gradName = 'linearGradient';
	            } else if (color.radialGradient) {
	                gradName = 'radialGradient';
	            }
	
	            if (gradName) {
	                gradAttr = color[gradName];
	                gradients = renderer.gradients;
	                stops = color.stops;
	                radialReference = elem.radialReference;
	
	                // Keep < 2.2 kompatibility
	                if (isArray(gradAttr)) {
	                    color[gradName] = gradAttr = {
	                        x1: gradAttr[0],
	                        y1: gradAttr[1],
	                        x2: gradAttr[2],
	                        y2: gradAttr[3],
	                        gradientUnits: 'userSpaceOnUse'
	                    };
	                }
	
	                // Correct the radial gradient for the radial reference system
	                if (gradName === 'radialGradient' && radialReference && !defined(gradAttr.gradientUnits)) {
	                    radAttr = gradAttr; // Save the radial attributes for updating
	                    gradAttr = merge(gradAttr,
	                        renderer.getRadialAttr(radialReference, radAttr),
	                        { gradientUnits: 'userSpaceOnUse' }
	                        );
	                }
	
	                // Build the unique key to detect whether we need to create a new element (#1282)
	                for (n in gradAttr) {
	                    if (n !== 'id') {
	                        key.push(n, gradAttr[n]);
	                    }
	                }
	                for (n in stops) {
	                    key.push(stops[n]);
	                }
	                key = key.join(',');
	
	                // Check if a gradient object with the same config object is created within this renderer
	                if (gradients[key]) {
	                    id = gradients[key].attr('id');
	
	                } else {
	
	                    // Set the id and create the element
	                    gradAttr.id = id = PREFIX + idCounter++;
	                    gradients[key] = gradientObject = renderer.createElement(gradName)
	                        .attr(gradAttr)
	                        .add(renderer.defs);
	
	                    gradientObject.radAttr = radAttr;
	
	                    // The gradient needs to keep a list of stops to be able to destroy them
	                    gradientObject.stops = [];
	                    each(stops, function (stop) {
	                        var stopObject;
	                        if (stop[1].indexOf('rgba') === 0) {
	                            colorObject = Color(stop[1]);
	                            stopColor = colorObject.get('rgb');
	                            stopOpacity = colorObject.get('a');
	                        } else {
	                            stopColor = stop[1];
	                            stopOpacity = 1;
	                        }
	                        stopObject = renderer.createElement('stop').attr({
	                            offset: stop[0],
	                            'stop-color': stopColor,
	                            'stop-opacity': stopOpacity
	                        }).add(gradientObject);
	
	                        // Add the stop element to the gradient
	                        gradientObject.stops.push(stopObject);
	                    });
	                }
	
	                // Set the reference to the gradient object
	                value = 'url(' + renderer.url + '#' + id + ')';
	                elem.setAttribute(prop, value);
	                elem.gradient = key;
	
	                // Allow the color to be concatenated into tooltips formatters etc. (#2995)
	                color.toString = function () {
	                    return value;
	                };
	            }
	        },
	
	        /**
	         * Apply a polyfill to the text-stroke CSS property, by copying the text element
	         * and apply strokes to the copy.
	         *
	         * Contrast checks at http://jsfiddle.net/highcharts/43soe9m1/2/
	         */
	        applyTextShadow: function (textShadow) {
	            var elem = this.element,
	                tspans,
	                hasContrast = textShadow.indexOf('contrast') !== -1,
	                styles = {},
	                forExport = this.renderer.forExport,
	                // IE10 and IE11 report textShadow in elem.style even though it doesn't work. Check
	                // this again with new IE release. In exports, the rendering is passed to PhantomJS.
	                supports = forExport || (elem.style.textShadow !== UNDEFINED && !isMS);
	
	            // When the text shadow is set to contrast, use dark stroke for light text and vice versa
	            if (hasContrast) {
	                styles.textShadow = textShadow = textShadow.replace(/contrast/g, this.renderer.getContrast(elem.style.fill));
	            }
	
	            // Safari with retina displays as well as PhantomJS bug (#3974). Firefox does not tolerate this,
	            // it removes the text shadows.
	            if (isWebKit || forExport) {
	                styles.textRendering = 'geometricPrecision';
	            }
	
	            /* Selective side-by-side testing in supported browser (http://jsfiddle.net/highcharts/73L1ptrh/)
	            if (elem.textContent.indexOf('2.') === 0) {
	                elem.style['text-shadow'] = 'none';
	                supports = false;
	            }
	            // */
	
	            // No reason to polyfill, we've got native support
	            if (supports) {
	                this.css(styles); // Apply altered textShadow or textRendering workaround
	            } else {
	
	                this.fakeTS = true; // Fake text shadow
	
	                // In order to get the right y position of the clones,
	                // copy over the y setter
	                this.ySetter = this.xSetter;
	
	                tspans = [].slice.call(elem.getElementsByTagName('tspan'));
	                each(textShadow.split(/\s?,\s?/g), function (textShadow) {
	                    var firstChild = elem.firstChild,
	                        color,
	                        strokeWidth;
	
	                    textShadow = textShadow.split(' ');
	                    color = textShadow[textShadow.length - 1];
	
	                    // Approximately tune the settings to the text-shadow behaviour
	                    strokeWidth = textShadow[textShadow.length - 2];
	
	                    if (strokeWidth) {
	                        each(tspans, function (tspan, y) {
	                            var clone;
	
	                            // Let the first line start at the correct X position
	                            if (y === 0) {
	                                tspan.setAttribute('x', elem.getAttribute('x'));
	                                y = elem.getAttribute('y');
	                                tspan.setAttribute('y', y || 0);
	                                if (y === null) {
	                                    elem.setAttribute('y', 0);
	                                }
	                            }
	
	                            // Create the clone and apply shadow properties
	                            clone = tspan.cloneNode(1);
	                            attr(clone, {
	                                'class': PREFIX + 'text-shadow',
	                                'fill': color,
	                                'stroke': color,
	                                'stroke-opacity': 1 / mathMax(pInt(strokeWidth), 3),
	                                'stroke-width': strokeWidth,
	                                'stroke-linejoin': 'round'
	                            });
	                            elem.insertBefore(clone, firstChild);
	                        });
	                    }
	                });
	            }
	        },
	
	        /**
	         * Set or get a given attribute
	         * @param {Object|String} hash
	         * @param {Mixed|Undefined} val
	         */
	        attr: function (hash, val, complete) {
	            var key,
	                value,
	                element = this.element,
	                hasSetSymbolSize,
	                ret = this,
	                skipAttr,
	                setter;
	
	            // single key-value pair
	            if (typeof hash === 'string' && val !== UNDEFINED) {
	                key = hash;
	                hash = {};
	                hash[key] = val;
	            }
	
	            // used as a getter: first argument is a string, second is undefined
	            if (typeof hash === 'string') {
	                ret = (this[hash + 'Getter'] || this._defaultGetter).call(this, hash, element);
	
	            // setter
	            } else {
	
	                for (key in hash) {
	                    value = hash[key];
	                    skipAttr = false;
	
	
	
	                    if (this.symbolName && /^(x|y|width|height|r|start|end|innerR|anchorX|anchorY)/.test(key)) {
	                        if (!hasSetSymbolSize) {
	                            this.symbolAttr(hash);
	                            hasSetSymbolSize = true;
	                        }
	                        skipAttr = true;
	                    }
	
	                    if (this.rotation && (key === 'x' || key === 'y')) {
	                        this.doTransform = true;
	                    }
	
	                    if (!skipAttr) {
	                        setter = this[key + 'Setter'] || this._defaultSetter;
	                        setter.call(this, value, key, element);
	
	                        // Let the shadow follow the main element
	                        if (this.shadows && /^(width|height|visibility|x|y|d|transform|cx|cy|r)$/.test(key)) {
	                            this.updateShadows(key, value, setter);
	                        }
	                    }
	                }
	
	                // Update transform. Do this outside the loop to prevent redundant updating for batch setting
	                // of attributes.
	                if (this.doTransform) {
	                    this.updateTransform();
	                    this.doTransform = false;
	                }
	
	            }
	
	            // In accordance with animate, run a complete callback
	            if (complete) {
	                complete();
	            }
	
	            return ret;
	        },
	
	        /**
	         * Update the shadow elements with new attributes
	         * @param   {String}        key    The attribute name
	         * @param   {String|Number} value  The value of the attribute
	         * @param   {Function}      setter The setter function, inherited from the parent wrapper
	         * @returns {undefined}
	         */
	        updateShadows: function (key, value, setter) {
	            var shadows = this.shadows,
	                i = shadows.length;
	
	            while (i--) {
	                setter.call(
	                    shadows[i], 
	                    key === 'height' ?
	                        Math.max(value - (shadows[i].cutHeight || 0), 0) :
	                        key === 'd' ? this.d : value, 
	                    key, 
	                    shadows[i]
	                );
	            }
	        },
	
	        /**
	         * Add a class name to an element
	         */
	        addClass: function (className) {
	            var element = this.element,
	                currentClassName = attr(element, 'class') || '';
	
	            if (currentClassName.indexOf(className) === -1) {
	                attr(element, 'class', currentClassName + ' ' + className);
	            }
	            return this;
	        },
	        /* hasClass and removeClass are not (yet) needed
	        hasClass: function (className) {
	            return attr(this.element, 'class').indexOf(className) !== -1;
	        },
	        removeClass: function (className) {
	            attr(this.element, 'class', attr(this.element, 'class').replace(className, ''));
	            return this;
	        },
	        */
	
	        /**
	         * If one of the symbol size affecting parameters are changed,
	         * check all the others only once for each call to an element's
	         * .attr() method
	         * @param {Object} hash
	         */
	        symbolAttr: function (hash) {
	            var wrapper = this;
	
	            each(['x', 'y', 'r', 'start', 'end', 'width', 'height', 'innerR', 'anchorX', 'anchorY'], function (key) {
	                wrapper[key] = pick(hash[key], wrapper[key]);
	            });
	
	            wrapper.attr({
	                d: wrapper.renderer.symbols[wrapper.symbolName](
	                    wrapper.x,
	                    wrapper.y,
	                    wrapper.width,
	                    wrapper.height,
	                    wrapper
	                )
	            });
	        },
	
	        /**
	         * Apply a clipping path to this object
	         * @param {String} id
	         */
	        clip: function (clipRect) {
	            return this.attr('clip-path', clipRect ? 'url(' + this.renderer.url + '#' + clipRect.id + ')' : NONE);
	        },
	
	        /**
	         * Calculate the coordinates needed for drawing a rectangle crisply and return the
	         * calculated attributes
	         * @param {Number} strokeWidth
	         * @param {Number} x
	         * @param {Number} y
	         * @param {Number} width
	         * @param {Number} height
	         */
	        crisp: function (rect) {
	
	            var wrapper = this,
	                key,
	                attribs = {},
	                normalizer,
	                strokeWidth = wrapper.strokeWidth || 0;
	
	            normalizer = mathRound(strokeWidth) % 2 / 2; // mathRound because strokeWidth can sometimes have roundoff errors
	
	            // normalize for crisp edges
	            rect.x = mathFloor(rect.x || wrapper.x || 0) + normalizer;
	            rect.y = mathFloor(rect.y || wrapper.y || 0) + normalizer;
	            rect.width = mathFloor((rect.width || wrapper.width || 0) - 2 * normalizer);
	            rect.height = mathFloor((rect.height || wrapper.height || 0) - 2 * normalizer);
	            rect.strokeWidth = strokeWidth;
	
	            for (key in rect) {
	                if (wrapper[key] !== rect[key]) { // only set attribute if changed
	                    wrapper[key] = attribs[key] = rect[key];
	                }
	            }
	
	            return attribs;
	        },
	
	        /**
	         * Set styles for the element
	         * @param {Object} styles
	         */
	        css: function (styles) {
	            var elemWrapper = this,
	                oldStyles = elemWrapper.styles,
	                newStyles = {},
	                elem = elemWrapper.element,
	                textWidth,
	                n,
	                serializedCss = '',
	                hyphenate,
	                hasNew = !oldStyles;
	
	            // convert legacy
	            if (styles && styles.color) {
	                styles.fill = styles.color;
	            }
	
	            // Filter out existing styles to increase performance (#2640)
	            if (oldStyles) {
	                for (n in styles) {
	                    if (styles[n] !== oldStyles[n]) {
	                        newStyles[n] = styles[n];
	                        hasNew = true;
	                    }
	                }
	            }
	            if (hasNew) {
	                textWidth = elemWrapper.textWidth =
	                    (styles && styles.width && elem.nodeName.toLowerCase() === 'text' && pInt(styles.width)) ||
	                    elemWrapper.textWidth; // #3501
	
	                // Merge the new styles with the old ones
	                if (oldStyles) {
	                    styles = extend(
	                        oldStyles,
	                        newStyles
	                    );
	                }
	
	                // store object
	                elemWrapper.styles = styles;
	
	                if (textWidth && (useCanVG || (!hasSVG && elemWrapper.renderer.forExport))) {
	                    delete styles.width;
	                }
	
	                // serialize and set style attribute
	                if (isMS && !hasSVG) {
	                    css(elemWrapper.element, styles);
	                } else {
	                    hyphenate = function (a, b) {
	                        return '-' + b.toLowerCase();
	                    };
	                    for (n in styles) {
	                        serializedCss += n.replace(/([A-Z])/g, hyphenate) + ':' + styles[n] + ';';
	                    }
	                    attr(elem, 'style', serializedCss); // #1881
	                }
	
	
	                // re-build text
	                if (textWidth && elemWrapper.added) {
	                    elemWrapper.renderer.buildText(elemWrapper);
	                }
	            }
	
	            return elemWrapper;
	        },
	
	        /**
	         * Add an event listener
	         * @param {String} eventType
	         * @param {Function} handler
	         */
	        on: function (eventType, handler) {
	            var svgElement = this,
	                element = svgElement.element;
	
	            // touch
	            if (hasTouch && eventType === 'click') {
	                element.ontouchstart = function (e) {
	                    svgElement.touchEventFired = Date.now();
	                    e.preventDefault();
	                    handler.call(element, e);
	                };
	                element.onclick = function (e) {
	                    if (userAgent.indexOf('Android') === -1 || Date.now() - (svgElement.touchEventFired || 0) > 1100) { // #2269
	                        handler.call(element, e);
	                    }
	                };
	            } else {
	                // simplest possible event model for internal use
	                element['on' + eventType] = handler;
	            }
	            return this;
	        },
	
	        /**
	         * Set the coordinates needed to draw a consistent radial gradient across
	         * pie slices regardless of positioning inside the chart. The format is
	         * [centerX, centerY, diameter] in pixels.
	         */
	        setRadialReference: function (coordinates) {
	            var existingGradient = this.renderer.gradients[this.element.gradient];
	
	            this.element.radialReference = coordinates;
	
	            // On redrawing objects with an existing gradient, the gradient needs
	            // to be repositioned (#3801)
	            if (existingGradient && existingGradient.radAttr) {
	                existingGradient.animate(
	                    this.renderer.getRadialAttr(
	                        coordinates,
	                        existingGradient.radAttr
	                    )
	                );
	            }
	
	            return this;
	        },
	
	        /**
	         * Move an object and its children by x and y values
	         * @param {Number} x
	         * @param {Number} y
	         */
	        translate: function (x, y) {
	            return this.attr({
	                translateX: x,
	                translateY: y
	            });
	        },
	
	        /**
	         * Invert a group, rotate and flip
	         */
	        invert: function () {
	            var wrapper = this;
	            wrapper.inverted = true;
	            wrapper.updateTransform();
	            return wrapper;
	        },
	
	        /**
	         * Private method to update the transform attribute based on internal
	         * properties
	         */
	        updateTransform: function () {
	            var wrapper = this,
	                translateX = wrapper.translateX || 0,
	                translateY = wrapper.translateY || 0,
	                scaleX = wrapper.scaleX,
	                scaleY = wrapper.scaleY,
	                inverted = wrapper.inverted,
	                rotation = wrapper.rotation,
	                element = wrapper.element,
	                transform;
	
	            // flipping affects translate as adjustment for flipping around the group's axis
	            if (inverted) {
	                translateX += wrapper.attr('width');
	                translateY += wrapper.attr('height');
	            }
	
	            // Apply translate. Nearly all transformed elements have translation, so instead
	            // of checking for translate = 0, do it always (#1767, #1846).
	            transform = ['translate(' + translateX + ',' + translateY + ')'];
	
	            // apply rotation
	            if (inverted) {
	                transform.push('rotate(90) scale(-1,1)');
	            } else if (rotation) { // text rotation
	                transform.push('rotate(' + rotation + ' ' + (element.getAttribute('x') || 0) + ' ' + (element.getAttribute('y') || 0) + ')');
	
	                // Delete bBox memo when the rotation changes
	                //delete wrapper.bBox;
	            }
	
	            // apply scale
	            if (defined(scaleX) || defined(scaleY)) {
	                transform.push('scale(' + pick(scaleX, 1) + ' ' + pick(scaleY, 1) + ')');
	            }
	
	            if (transform.length) {
	                element.setAttribute('transform', transform.join(' '));
	            }
	        },
	        /**
	         * Bring the element to the front
	         */
	        toFront: function () {
	            var element = this.element;
	            element.parentNode.appendChild(element);
	            return this;
	        },
	
	
	        /**
	         * Break down alignment options like align, verticalAlign, x and y
	         * to x and y relative to the chart.
	         *
	         * @param {Object} alignOptions
	         * @param {Boolean} alignByTranslate
	         * @param {String[Object} box The box to align to, needs a width and height. When the
	         *        box is a string, it refers to an object in the Renderer. For example, when
	         *        box is 'spacingBox', it refers to Renderer.spacingBox which holds width, height
	         *        x and y properties.
	         *
	         */
	        align: function (alignOptions, alignByTranslate, box) {
	            var align,
	                vAlign,
	                x,
	                y,
	                attribs = {},
	                alignTo,
	                renderer = this.renderer,
	                alignedObjects = renderer.alignedObjects;
	
	            // First call on instanciate
	            if (alignOptions) {
	                this.alignOptions = alignOptions;
	                this.alignByTranslate = alignByTranslate;
	                if (!box || isString(box)) { // boxes other than renderer handle this internally
	                    this.alignTo = alignTo = box || 'renderer';
	                    erase(alignedObjects, this); // prevent duplicates, like legendGroup after resize
	                    alignedObjects.push(this);
	                    box = null; // reassign it below
	                }
	
	            // When called on resize, no arguments are supplied
	            } else {
	                alignOptions = this.alignOptions;
	                alignByTranslate = this.alignByTranslate;
	                alignTo = this.alignTo;
	            }
	
	            box = pick(box, renderer[alignTo], renderer);
	
	            // Assign variables
	            align = alignOptions.align;
	            vAlign = alignOptions.verticalAlign;
	            x = (box.x || 0) + (alignOptions.x || 0); // default: left align
	            y = (box.y || 0) + (alignOptions.y || 0); // default: top align
	
	            // Align
	            if (align === 'right' || align === 'center') {
	                x += (box.width - (alignOptions.width || 0)) /
	                        { right: 1, center: 2 }[align];
	            }
	            attribs[alignByTranslate ? 'translateX' : 'x'] = mathRound(x);
	
	
	            // Vertical align
	            if (vAlign === 'bottom' || vAlign === 'middle') {
	                y += (box.height - (alignOptions.height || 0)) /
	                        ({ bottom: 1, middle: 2 }[vAlign] || 1);
	
	            }
	            attribs[alignByTranslate ? 'translateY' : 'y'] = mathRound(y);
	
	            // Animate only if already placed
	            this[this.placed ? 'animate' : 'attr'](attribs);
	            this.placed = true;
	            this.alignAttr = attribs;
	
	            return this;
	        },
	
	        /**
	         * Get the bounding box (width, height, x and y) for the element
	         */
	        getBBox: function (reload, rot) {
	            var wrapper = this,
	                bBox, // = wrapper.bBox,
	                renderer = wrapper.renderer,
	                width,
	                height,
	                rotation,
	                rad,
	                element = wrapper.element,
	                styles = wrapper.styles,
	                textStr = wrapper.textStr,
	                textShadow,
	                elemStyle = element.style,
	                toggleTextShadowShim,
	                cache = renderer.cache,
	                cacheKeys = renderer.cacheKeys,
	                cacheKey;
	
	            rotation = pick(rot, wrapper.rotation);
	            rad = rotation * deg2rad;
	
	            if (textStr !== UNDEFINED) {
	
	                cacheKey = 
	
	                    // Since numbers are monospaced, and numerical labels appear a lot in a chart,
	                    // we assume that a label of n characters has the same bounding box as others
	                    // of the same length.
	                    textStr.toString().replace(numRegex, '0') + 
	
	                    // Properties that affect bounding box
	                    ['', rotation || 0, styles && styles.fontSize, element.style.width].join(',');
	
	            }
	
	            if (cacheKey && !reload) {
	                bBox = cache[cacheKey];
	            }
	
	            // No cache found
	            if (!bBox) {
	
	                // SVG elements
	                if (element.namespaceURI === SVG_NS || renderer.forExport) {
	                    try { // Fails in Firefox if the container has display: none.
	
	                        // When the text shadow shim is used, we need to hide the fake shadows
	                        // to get the correct bounding box (#3872)
	                        toggleTextShadowShim = this.fakeTS && function (display) {
	                            each(element.querySelectorAll('.' + PREFIX + 'text-shadow'), function (tspan) {
	                                tspan.style.display = display;
	                            });
	                        };
	
	                        // Workaround for #3842, Firefox reporting wrong bounding box for shadows
	                        if (isFirefox && elemStyle.textShadow) {
	                            textShadow = elemStyle.textShadow;
	                            elemStyle.textShadow = '';
	                        } else if (toggleTextShadowShim) {
	                            toggleTextShadowShim(NONE);
	                        }
	
	                        bBox = element.getBBox ?
	                            // SVG: use extend because IE9 is not allowed to change width and height in case
	                            // of rotation (below)
	                            extend({}, element.getBBox()) :
	                            // Canvas renderer and legacy IE in export mode
	                            {
	                                width: element.offsetWidth,
	                                height: element.offsetHeight
	                            };
	
	                        // #3842
	                        if (textShadow) {
	                            elemStyle.textShadow = textShadow;
	                        } else if (toggleTextShadowShim) {
	                            toggleTextShadowShim('');
	                        }
	                    } catch (e) {}
	
	                    // If the bBox is not set, the try-catch block above failed. The other condition
	                    // is for Opera that returns a width of -Infinity on hidden elements.
	                    if (!bBox || bBox.width < 0) {
	                        bBox = { width: 0, height: 0 };
	                    }
	
	
	                // VML Renderer or useHTML within SVG
	                } else {
	
	                    bBox = wrapper.htmlGetBBox();
	
	                }
	
	                // True SVG elements as well as HTML elements in modern browsers using the .useHTML option
	                // need to compensated for rotation
	                if (renderer.isSVG) {
	                    width = bBox.width;
	                    height = bBox.height;
	
	                    // Workaround for wrong bounding box in IE9 and IE10 (#1101, #1505, #1669, #2568)
	                    if (isMS && styles && styles.fontSize === '11px' && height.toPrecision(3) === '16.9') {
	                        bBox.height = height = 14;
	                    }
	
	                    // Adjust for rotated text
	                    if (rotation) {
	                        bBox.width = mathAbs(height * mathSin(rad)) + mathAbs(width * mathCos(rad));
	                        bBox.height = mathAbs(height * mathCos(rad)) + mathAbs(width * mathSin(rad));
	                    }
	                }
	
	                // Cache it. When loading a chart in a hidden iframe in Firefox and IE/Edge, the
	                // bounding box height is 0, so don't cache it (#5620).
	                if (cacheKey && bBox.height > 0) {
	
	                    // Rotate (#4681)
	                    while (cacheKeys.length > 250) {
	                        delete cache[cacheKeys.shift()];
	                    }
	
	                    if (!cache[cacheKey]) {
	                        cacheKeys.push(cacheKey);
	                    }
	                    cache[cacheKey] = bBox;
	                }
	            }
	            return bBox;
	        },
	
	        /**
	         * Show the element
	         */
	        show: function (inherit) {
	            return this.attr({ visibility: inherit ? 'inherit' : VISIBLE });
	        },
	
	        /**
	         * Hide the element
	         */
	        hide: function () {
	            return this.attr({ visibility: HIDDEN });
	        },
	
	        fadeOut: function (duration) {
	            var elemWrapper = this;
	            elemWrapper.animate({
	                opacity: 0
	            }, {
	                duration: duration || 150,
	                complete: function () {
	                    elemWrapper.attr({ y: -9999 }); // #3088, assuming we're only using this for tooltips
	                }
	            });
	        },
	
	        /**
	         * Add the element
	         * @param {Object|Undefined} parent Can be an element, an element wrapper or undefined
	         *    to append the element to the renderer.box.
	         */
	        add: function (parent) {
	
	            var renderer = this.renderer,
	                element = this.element,
	                inserted;
	
	            if (parent) {
	                this.parentGroup = parent;
	            }
	
	            // mark as inverted
	            this.parentInverted = parent && parent.inverted;
	
	            // build formatted text
	            if (this.textStr !== undefined) {
	                renderer.buildText(this);
	            }
	
	            // Mark as added
	            this.added = true;
	
	            // If we're adding to renderer root, or other elements in the group
	            // have a z index, we need to handle it
	            if (!parent || parent.handleZ || this.zIndex) {
	                inserted = this.zIndexSetter();
	            }
	
	            // If zIndex is not handled, append at the end
	            if (!inserted) {
	                (parent ? parent.element : renderer.box).appendChild(element);
	            }
	
	            // fire an event for internal hooks
	            if (this.onAdd) {
	                this.onAdd();
	            }
	
	            return this;
	        },
	
	        /**
	         * Removes a child either by removeChild or move to garbageBin.
	         * Issue 490; in VML removeChild results in Orphaned nodes according to sIEve, discardElement does not.
	         */
	        safeRemoveChild: function (element) {
	            var parentNode = element.parentNode;
	            if (parentNode) {
	                parentNode.removeChild(element);
	            }
	        },
	
	        /**
	         * Destroy the element and element wrapper
	         */
	        destroy: function () {
	            var wrapper = this,
	                element = wrapper.element || {},
	                shadows = wrapper.shadows,
	                parentToClean = wrapper.renderer.isSVG && element.nodeName === 'SPAN' && wrapper.parentGroup,
	                grandParent,
	                key,
	                i;
	
	            // remove events
	            element.onclick = element.onmouseout = element.onmouseover = element.onmousemove = element.point = null;
	            stop(wrapper); // stop running animations
	
	            if (wrapper.clipPath) {
	                wrapper.clipPath = wrapper.clipPath.destroy();
	            }
	
	            // Destroy stops in case this is a gradient object
	            if (wrapper.stops) {
	                for (i = 0; i < wrapper.stops.length; i++) {
	                    wrapper.stops[i] = wrapper.stops[i].destroy();
	                }
	                wrapper.stops = null;
	            }
	
	            // remove element
	            wrapper.safeRemoveChild(element);
	
	            // destroy shadows
	            if (shadows) {
	                each(shadows, function (shadow) {
	                    wrapper.safeRemoveChild(shadow);
	                });
	            }
	
	            // In case of useHTML, clean up empty containers emulating SVG groups (#1960, #2393, #2697).
	            while (parentToClean && parentToClean.div && parentToClean.div.childNodes.length === 0) {
	                grandParent = parentToClean.parentGroup;
	                wrapper.safeRemoveChild(parentToClean.div);
	                delete parentToClean.div;
	                parentToClean = grandParent;
	            }
	
	            // remove from alignObjects
	            if (wrapper.alignTo) {
	                erase(wrapper.renderer.alignedObjects, wrapper);
	            }
	
	            for (key in wrapper) {
	                delete wrapper[key];
	            }
	
	            return null;
	        },
	
	        /**
	         * Add a shadow to the element. Must be done after the element is added to the DOM
	         * @param {Boolean|Object} shadowOptions
	         */
	        shadow: function (shadowOptions, group, cutOff) {
	            var shadows = [],
	                i,
	                shadow,
	                element = this.element,
	                strokeWidth,
	                shadowWidth,
	                shadowElementOpacity,
	
	                // compensate for inverted plot area
	                transform;
	
	
	            if (shadowOptions) {
	                shadowWidth = pick(shadowOptions.width, 3);
	                shadowElementOpacity = (shadowOptions.opacity || 0.15) / shadowWidth;
	                transform = this.parentInverted ?
	                        '(-1,-1)' :
	                        '(' + pick(shadowOptions.offsetX, 1) + ', ' + pick(shadowOptions.offsetY, 1) + ')';
	                for (i = 1; i <= shadowWidth; i++) {
	                    shadow = element.cloneNode(0);
	                    strokeWidth = (shadowWidth * 2) + 1 - (2 * i);
	                    attr(shadow, {
	                        'isShadow': 'true',
	                        'stroke': shadowOptions.color || 'black',
	                        'stroke-opacity': shadowElementOpacity * i,
	                        'stroke-width': strokeWidth,
	                        'transform': 'translate' + transform,
	                        'fill': NONE
	                    });
	                    if (cutOff) {
	                        attr(shadow, 'height', mathMax(attr(shadow, 'height') - strokeWidth, 0));
	                        shadow.cutHeight = strokeWidth;
	                    }
	
	                    if (group) {
	                        group.element.appendChild(shadow);
	                    } else {
	                        element.parentNode.insertBefore(shadow, element);
	                    }
	
	                    shadows.push(shadow);
	                }
	
	                this.shadows = shadows;
	            }
	            return this;
	
	        },
	
	        xGetter: function (key) {
	            if (this.element.nodeName === 'circle') {
	                key = { x: 'cx', y: 'cy' }[key] || key;
	            }
	            return this._defaultGetter(key);
	        },
	
	        /**
	         * Get the current value of an attribute or pseudo attribute, used mainly
	         * for animation.
	         */
	        _defaultGetter: function (key) {
	            var ret = pick(this[key], this.element ? this.element.getAttribute(key) : null, 0);
	
	            if (/^[\-0-9\.]+$/.test(ret)) { // is numerical
	                ret = parseFloat(ret);
	            }
	            return ret;
	        },
	
	
	        dSetter: function (value, key, element) {
	            if (value && value.join) { // join path
	                value = value.join(' ');
	            }
	            if (/(NaN| {2}|^$)/.test(value)) {
	                value = 'M 0 0';
	            }
	            element.setAttribute(key, value);
	
	            this[key] = value;
	        },
	        dashstyleSetter: function (value) {
	            var i,
	                strokeWidth = this['stroke-width'];
	        
	            // If "inherit", like maps in IE, assume 1 (#4981). With HC5 and the new strokeWidth 
	            // function, we should be able to use that instead.
	            if (strokeWidth === 'inherit') {
	                strokeWidth = 1;
	            }
	            value = value && value.toLowerCase();
	            if (value) {
	                value = value
	                    .replace('shortdashdotdot', '3,1,1,1,1,1,')
	                    .replace('shortdashdot', '3,1,1,1')
	                    .replace('shortdot', '1,1,')
	                    .replace('shortdash', '3,1,')
	                    .replace('longdash', '8,3,')
	                    .replace(/dot/g, '1,3,')
	                    .replace('dash', '4,3,')
	                    .replace(/,$/, '')
	                    .split(','); // ending comma
	
	                i = value.length;
	                while (i--) {
	                    value[i] = pInt(value[i]) * strokeWidth;
	                }
	                value = value.join(',')
	                    .replace(/NaN/g, 'none'); // #3226
	                this.element.setAttribute('stroke-dasharray', value);
	            }
	        },
	        alignSetter: function (value) {
	            this.element.setAttribute('text-anchor', { left: 'start', center: 'middle', right: 'end' }[value]);
	        },
	        titleSetter: function (value) {
	            var titleNode = this.element.getElementsByTagName('title')[0];
	            if (!titleNode) {
	                titleNode = doc.createElementNS(SVG_NS, 'title');
	                this.element.appendChild(titleNode);
	            }
	
	            // Remove text content if it exists
	            if (titleNode.firstChild) {
	                titleNode.removeChild(titleNode.firstChild);
	            }
	
	            titleNode.appendChild(
	                doc.createTextNode(
	                    (String(pick(value), '')).replace(/<[^>]*>/g, '') // #3276, #3895
	                )
	            );
	        },
	        textSetter: function (value) {
	            if (value !== this.textStr) {
	                // Delete bBox memo when the text changes
	                delete this.bBox;
	
	                this.textStr = value;
	                if (this.added) {
	                    this.renderer.buildText(this);
	                }
	            }
	        },
	        fillSetter: function (value, key, element) {
	            if (typeof value === 'string') {
	                element.setAttribute(key, value);
	            } else if (value) {
	                this.colorGradient(value, key, element);
	            }
	        },
	        visibilitySetter: function (value, key, element) {
	            // IE9-11 doesn't handle visibilty:inherit well, so we remove the attribute instead (#2881, #3909)
	            if (value === 'inherit') {
	                element.removeAttribute(key);
	            } else {
	                element.setAttribute(key, value);
	            }
	        },
	        zIndexSetter: function (value, key) {
	            var renderer = this.renderer,
	                parentGroup = this.parentGroup,
	                parentWrapper = parentGroup || renderer,
	                parentNode = parentWrapper.element || renderer.box,
	                childNodes,
	                otherElement,
	                otherZIndex,
	                element = this.element,
	                inserted,
	                run = this.added,
	                i;
	
	            if (defined(value)) {
	                element.zIndex = value; // So we can read it for other elements in the group
	                value = +value;
	                if (this[key] === value) { // Only update when needed (#3865)
	                    run = false;
	                }
	                this[key] = value;
	            }
	
	            // Insert according to this and other elements' zIndex. Before .add() is called,
	            // nothing is done. Then on add, or by later calls to zIndexSetter, the node
	            // is placed on the right place in the DOM.
	            if (run) {
	                value = this.zIndex;
	
	                if (value && parentGroup) {
	                    parentGroup.handleZ = true;
	                }
	
	                childNodes = parentNode.childNodes;
	                for (i = 0; i < childNodes.length && !inserted; i++) {
	                    otherElement = childNodes[i];
	                    otherZIndex = otherElement.zIndex;
	                    if (otherElement !== element && (
	                            // Insert before the first element with a higher zIndex
	                            pInt(otherZIndex) > value ||
	                            // If no zIndex given, insert before the first element with a zIndex
	                            (!defined(value) && defined(otherZIndex))
	
	                        )) {
	                        parentNode.insertBefore(element, otherElement);
	                        inserted = true;
	                    }
	                }
	                if (!inserted) {
	                    parentNode.appendChild(element);
	                }
	            }
	            return inserted;
	        },
	        _defaultSetter: function (value, key, element) {
	            element.setAttribute(key, value);
	        }
	    };
	
	    // Some shared setters and getters
	    SVGElement.prototype.yGetter = SVGElement.prototype.xGetter;
	    SVGElement.prototype.translateXSetter = SVGElement.prototype.translateYSetter =
	            SVGElement.prototype.rotationSetter = SVGElement.prototype.verticalAlignSetter =
	            SVGElement.prototype.scaleXSetter = SVGElement.prototype.scaleYSetter = function (value, key) {
	                this[key] = value;
	                this.doTransform = true;
	            };
	
	    // These setters both set the key on the instance itself plus as an attribute
	    SVGElement.prototype.opacitySetter = SVGElement.prototype.displaySetter = function (value, key, element) {
	        this[key] = value;
	        element.setAttribute(key, value);
	    };
	    
	
	    // WebKit and Batik have problems with a stroke-width of zero, so in this case we remove the
	    // stroke attribute altogether. #1270, #1369, #3065, #3072.
	    SVGElement.prototype['stroke-widthSetter'] = SVGElement.prototype.strokeSetter = function (value, key, element) {
	        this[key] = value;
	        // Only apply the stroke attribute if the stroke width is defined and larger than 0
	        if (this.stroke && this['stroke-width']) {
	            this.strokeWidth = this['stroke-width'];
	            SVGElement.prototype.fillSetter.call(this, this.stroke, 'stroke', element); // use prototype as instance may be overridden
	            element.setAttribute('stroke-width', this['stroke-width']);
	            this.hasStroke = true;
	        } else if (key === 'stroke-width' && value === 0 && this.hasStroke) {
	            element.removeAttribute('stroke');
	            this.hasStroke = false;
	        }
	    };
	
	
	    /**
	     * The default SVG renderer
	     */
	    var SVGRenderer = function () {
	        this.init.apply(this, arguments);
	    };
	    SVGRenderer.prototype = {
	        Element: SVGElement,
	        /**
	         * Initialize the SVGRenderer
	         * @param {Object} container
	         * @param {Number} width
	         * @param {Number} height
	         * @param {Boolean} forExport
	         */
	        init: function (container, width, height, style, forExport, allowHTML) {
	            var renderer = this,
	                boxWrapper,
	                element,
	                desc;
	
	            boxWrapper = renderer.createElement('svg')
	                .attr({
	                    version: '1.1'
	                })
	                .css(this.getStyle(style));
	            element = boxWrapper.element;
	            container.appendChild(element);
	
	            // For browsers other than IE, add the namespace attribute (#1978)
	            if (container.innerHTML.indexOf('xmlns') === -1) {
	                attr(element, 'xmlns', SVG_NS);
	            }
	
	            // object properties
	            renderer.isSVG = true;
	            renderer.box = element;
	            renderer.boxWrapper = boxWrapper;
	            renderer.alignedObjects = [];
	
	            // Page url used for internal references. #24, #672, #1070
	            renderer.url = (isFirefox || isWebKit) && doc.getElementsByTagName('base').length ?
	                    win.location.href
	                        .replace(/#.*?$/, '') // remove the hash
	                        .replace(/([\('\)])/g, '\\$1') // escape parantheses and quotes
	                        .replace(/ /g, '%20') : // replace spaces (needed for Safari only)
	                    '';
	
	            // Add description
	            desc = this.createElement('desc').add();
	            desc.element.appendChild(doc.createTextNode('Created with ' + PRODUCT + ' ' + VERSION));
	
	
	            renderer.defs = this.createElement('defs').add();
	            renderer.allowHTML = allowHTML;
	            renderer.forExport = forExport;
	            renderer.gradients = {}; // Object where gradient SvgElements are stored
	            renderer.cache = {}; // Cache for numerical bounding boxes
	            renderer.cacheKeys = [];
	            renderer.imgCount = 0;
	
	            renderer.setSize(width, height, false);
	
	
	
	            // Issue 110 workaround:
	            // In Firefox, if a div is positioned by percentage, its pixel position may land
	            // between pixels. The container itself doesn't display this, but an SVG element
	            // inside this container will be drawn at subpixel precision. In order to draw
	            // sharp lines, this must be compensated for. This doesn't seem to work inside
	            // iframes though (like in jsFiddle).
	            var subPixelFix, rect;
	            if (isFirefox && container.getBoundingClientRect) {
	                renderer.subPixelFix = subPixelFix = function () {
	                    css(container, { left: 0, top: 0 });
	                    rect = container.getBoundingClientRect();
	                    css(container, {
	                        left: (mathCeil(rect.left) - rect.left) + PX,
	                        top: (mathCeil(rect.top) - rect.top) + PX
	                    });
	                };
	
	                // run the fix now
	                subPixelFix();
	
	                // run it on resize
	                addEvent(win, 'resize', subPixelFix);
	            }
	        },
	
	        getStyle: function (style) {
	            this.style = extend({
	                fontFamily: '"Lucida Grande", "Lucida Sans Unicode", Arial, Helvetica, sans-serif', // default font
	                fontSize: '12px'
	            }, style);
	            return this.style;
	        },
	
	        /**
	         * Detect whether the renderer is hidden. This happens when one of the parent elements
	         * has display: none. #608.
	         */
	        isHidden: function () {
	            return !this.boxWrapper.getBBox().width;
	        },
	
	        /**
	         * Destroys the renderer and its allocated members.
	         */
	        destroy: function () {
	            var renderer = this,
	                rendererDefs = renderer.defs;
	            renderer.box = null;
	            renderer.boxWrapper = renderer.boxWrapper.destroy();
	
	            // Call destroy on all gradient elements
	            destroyObjectProperties(renderer.gradients || {});
	            renderer.gradients = null;
	
	            // Defs are null in VMLRenderer
	            // Otherwise, destroy them here.
	            if (rendererDefs) {
	                renderer.defs = rendererDefs.destroy();
	            }
	
	            // Remove sub pixel fix handler
	            // We need to check that there is a handler, otherwise all functions that are registered for event 'resize' are removed
	            // See issue #982
	            if (renderer.subPixelFix) {
	                removeEvent(win, 'resize', renderer.subPixelFix);
	            }
	
	            renderer.alignedObjects = null;
	
	            return null;
	        },
	
	        /**
	         * Create a wrapper for an SVG element
	         * @param {Object} nodeName
	         */
	        createElement: function (nodeName) {
	            var wrapper = new this.Element();
	            wrapper.init(this, nodeName);
	            return wrapper;
	        },
	
	        /**
	         * Dummy function for use in canvas renderer
	         */
	        draw: function () {},
	
	        /**
	         * Get converted radial gradient attributes
	         */
	        getRadialAttr: function (radialReference, gradAttr) {
	            return {
	                cx: (radialReference[0] - radialReference[2] / 2) + gradAttr.cx * radialReference[2],
	                cy: (radialReference[1] - radialReference[2] / 2) + gradAttr.cy * radialReference[2],
	                r: gradAttr.r * radialReference[2]
	            };
	        },
	
	        /**
	         * Parse a simple HTML string into SVG tspans
	         *
	         * @param {Object} textNode The parent text SVG node
	         */
	        buildText: function (wrapper) {
	            var textNode = wrapper.element,
	                renderer = this,
	                forExport = renderer.forExport,
	                textStr = pick(wrapper.textStr, '').toString(),
	                hasMarkup = textStr.indexOf('<') !== -1,
	                lines,
	                childNodes = textNode.childNodes,
	                styleRegex,
	                hrefRegex,
	                wasTooLong,
	                parentX = attr(textNode, 'x'),
	                textStyles = wrapper.styles,
	                width = wrapper.textWidth,
	                textLineHeight = textStyles && textStyles.lineHeight,
	                textShadow = textStyles && textStyles.textShadow,
	                ellipsis = textStyles && textStyles.textOverflow === 'ellipsis',
	                i = childNodes.length,
	                tempParent = width && !wrapper.added && this.box,
	                getLineHeight = function (tspan) {
	                    return textLineHeight ?
	                            pInt(textLineHeight) :
	                            renderer.fontMetrics(
	                                /(px|em)$/.test(tspan && tspan.style.fontSize) ?
	                                        tspan.style.fontSize :
	                                        ((textStyles && textStyles.fontSize) || renderer.style.fontSize || 12),
	                                tspan
	                            ).h;
	                },
	                unescapeAngleBrackets = function (inputStr) {
	                    return inputStr.replace(/&lt;/g, '<').replace(/&gt;/g, '>');
	                };
	
	            /// remove old text
	            while (i--) {
	                textNode.removeChild(childNodes[i]);
	            }
	
	            // Skip tspans, add text directly to text node. The forceTSpan is a hook
	            // used in text outline hack.
	            if (!hasMarkup && !textShadow && !ellipsis && !width && textStr.indexOf(' ') === -1) {
	                textNode.appendChild(doc.createTextNode(unescapeAngleBrackets(textStr)));
	
	            // Complex strings, add more logic
	            } else {
	
	                styleRegex = /<.*style="([^"]+)".*>/;
	                hrefRegex = /<.*href="(http[^"]+)".*>/;
	
	                if (tempParent) {
	                    tempParent.appendChild(textNode); // attach it to the DOM to read offset width
	                }
	
	                if (hasMarkup) {
	                    lines = textStr
	                        .replace(/<(b|strong)>/g, '<span style="font-weight:bold">')
	                        .replace(/<(i|em)>/g, '<span style="font-style:italic">')
	                        .replace(/<a/g, '<span')
	                        .replace(/<\/(b|strong|i|em|a)>/g, '</span>')
	                        .split(/<br.*?>/g);
	
	                } else {
	                    lines = [textStr];
	                }
	
	
	                // Trim empty lines (#5261)
	                lines = grep(lines, function (line) {
	                    return line !== '';
	                });
	
	
	                // build the lines
	                each(lines, function buildTextLines(line, lineNo) {
	                    var spans,
	                        spanNo = 0;
	                    line = line
	                        .replace(/^\s+|\s+$/g, '') // Trim to prevent useless/costly process on the spaces (#5258)
	                        .replace(/<span/g, '|||<span')
	                        .replace(/<\/span>/g, '</span>|||');
	                    spans = line.split('|||');
	
	                    each(spans, function buildTextSpans(span) {
	                        if (span !== '' || spans.length === 1) {
	                            var attributes = {},
	                                tspan = doc.createElementNS(SVG_NS, 'tspan'),
	                                spanStyle; // #390
	                            if (styleRegex.test(span)) {
	                                spanStyle = span.match(styleRegex)[1].replace(/(;| |^)color([ :])/, '$1fill$2');
	                                attr(tspan, 'style', spanStyle);
	                            }
	                            if (hrefRegex.test(span) && !forExport) { // Not for export - #1529
	                                attr(tspan, 'onclick', 'onclick=window.open(\"'+ span.match(hrefRegex)[1] +'\",\"_blank\")');
	                                css(tspan, { cursor: 'pointer' });
	                            }
	
	                            span = unescapeAngleBrackets(span.replace(/<(.|\n)*?>/g, '') || ' ');
	
	                            // Nested tags aren't supported, and cause crash in Safari (#1596)
	                            if (span !== ' ') {
	
	                                // add the text node
	                                tspan.appendChild(doc.createTextNode(span));
	
	                                if (!spanNo) { // first span in a line, align it to the left
	                                    if (lineNo && parentX !== null) {
	                                        attributes.x = parentX;
	                                    }
	                                } else {
	                                    attributes.dx = 0; // #16
	                                }
	
	                                // add attributes
	                                attr(tspan, attributes);
	
	                                // Append it
	                                textNode.appendChild(tspan);
	
	                                // first span on subsequent line, add the line height
	                                if (!spanNo && lineNo) {
	
	                                    // allow getting the right offset height in exporting in IE
	                                    if (!hasSVG && forExport) {
	                                        css(tspan, { display: 'block' });
	                                    }
	
	                                    // Set the line height based on the font size of either
	                                    // the text element or the tspan element
	                                    attr(
	                                        tspan,
	                                        'dy',
	                                        getLineHeight(tspan)
	                                    );
	                                }
	
	                                /*if (width) {
	                                    renderer.breakText(wrapper, width);
	                                }*/
	
	                                // Check width and apply soft breaks or ellipsis
	                                if (width) {
	                                    var words = span.replace(/([^\^])-/g, '$1- ').split(' '), // #1273
	                                        noWrap = textStyles.whiteSpace === 'nowrap',
	                                        hasWhiteSpace = spans.length > 1 || lineNo || (words.length > 1 && !noWrap),
	                                        tooLong,
	                                        actualWidth,
	                                        rest = [],
	                                        dy = getLineHeight(tspan),
	                                        softLineNo = 1,
	                                        rotation = wrapper.rotation,
	                                        wordStr = span, // for ellipsis
	                                        cursor = wordStr.length, // binary search cursor
	                                        bBox;
	
	                                    while ((hasWhiteSpace || ellipsis) && (words.length || rest.length)) {
	                                        wrapper.rotation = 0; // discard rotation when computing box
	                                        bBox = wrapper.getBBox(true);
	                                        actualWidth = bBox.width;
	
	                                        // Old IE cannot measure the actualWidth for SVG elements (#2314)
	                                        if (!hasSVG && renderer.forExport) {
	                                            actualWidth = renderer.measureSpanWidth(tspan.firstChild.data, wrapper.styles);
	                                        }
	
	                                        tooLong = actualWidth > width;
	
	                                        // For ellipsis, do a binary search for the correct string length
	                                        if (wasTooLong === undefined) {
	                                            wasTooLong = tooLong; // First time
	                                        }
	                                        if (ellipsis && wasTooLong) {
	                                            cursor /= 2;
	
	                                            if (wordStr === '' || (!tooLong && cursor < 0.5)) {
	                                                words = []; // All ok, break out
	                                            } else {
	                                                wordStr = span.substring(0, wordStr.length + (tooLong ? -1 : 1) * mathCeil(cursor));
	                                                words = [wordStr + (width > 3 ? '\u2026' : '')];
	                                                tspan.removeChild(tspan.firstChild);
	                                            }
	
	                                        // Looping down, this is the first word sequence that is not too long,
	                                        // so we can move on to build the next line.
	                                        } else if (!tooLong || words.length === 1) {
	                                            words = rest;
	                                            rest = [];
	
	                                            if (words.length && !noWrap) {
	                                                softLineNo++;
	
	                                                tspan = doc.createElementNS(SVG_NS, 'tspan');
	                                                attr(tspan, {
	                                                    dy: dy,
	                                                    x: parentX
	                                                });
	                                                if (spanStyle) { // #390
	                                                    attr(tspan, 'style', spanStyle);
	                                                }
	                                                textNode.appendChild(tspan);
	                                            }
	                                            if (actualWidth > width) { // a single word is pressing it out
	                                                width = actualWidth;
	                                            }
	                                        } else { // append to existing line tspan
	                                            tspan.removeChild(tspan.firstChild);
	                                            rest.unshift(words.pop());
	                                        }
	                                        if (words.length) {
	                                            tspan.appendChild(doc.createTextNode(words.join(' ').replace(/- /g, '-')));
	                                        }
	                                    }
	                                    wrapper.rotation = rotation;
	                                }
	
	                                spanNo++;
	                            }
	                        }
	                    });
	                });
	
	                if (wasTooLong) {
	                    wrapper.attr('title', wrapper.textStr);
	                }
	                if (tempParent) {
	                    tempParent.removeChild(textNode); // attach it to the DOM to read offset width
	                }
	
	                // Apply the text shadow
	                if (textShadow && wrapper.applyTextShadow) {
	                    wrapper.applyTextShadow(textShadow);
	                }
	            }
	        },
	
	
	
	        /*
	        breakText: function (wrapper, width) {
	            var bBox = wrapper.getBBox(),
	                node = wrapper.element,
	                textLength = node.textContent.length,
	                pos = mathRound(width * textLength / bBox.width), // try this position first, based on average character width
	                increment = 0,
	                finalPos;
	
	            if (bBox.width > width) {
	                while (finalPos === undefined) {
	                    textLength = node.getSubStringLength(0, pos);
	
	                    if (textLength <= width) {
	                        if (increment === -1) {
	                            finalPos = pos;
	                        } else {
	                            increment = 1;
	                        }
	                    } else {
	                        if (increment === 1) {
	                            finalPos = pos - 1;
	                        } else {
	                            increment = -1;
	                        }
	                    }
	                    pos += increment;
	                }
	            }
	            console.log('width', width, 'stringWidth', node.getSubStringLength(0, finalPos))
	        },
	        */
	
	        /**
	         * Returns white for dark colors and black for bright colors
	         */
	        getContrast: function (color) {
	            color = Color(color).rgba;
	            return color[0] + color[1] + color[2] > 384 ? '#000000' : '#FFFFFF';
	        },
	
	        /**
	         * Create a button with preset states
	         * @param {String} text
	         * @param {Number} x
	         * @param {Number} y
	         * @param {Function} callback
	         * @param {Object} normalState
	         * @param {Object} hoverState
	         * @param {Object} pressedState
	         */
	        button: function (text, x, y, callback, normalState, hoverState, pressedState, disabledState, shape) {
	            var label = this.label(text, x, y, shape, null, null, null, null, 'button'),
	                curState = 0,
	                stateOptions,
	                stateStyle,
	                normalStyle,
	                hoverStyle,
	                pressedStyle,
	                disabledStyle,
	                verticalGradient = { x1: 0, y1: 0, x2: 0, y2: 1 };
	
	            // Normal state - prepare the attributes
	            normalState = merge({
	                'stroke-width': 1,
	                stroke: '#CCCCCC',
	                fill: {
	                    linearGradient: verticalGradient,
	                    stops: [
	                        [0, '#FEFEFE'],
	                        [1, '#F6F6F6']
	                    ]
	                },
	                r: 2,
	                padding: 5,
	                style: {
	                    color: 'black'
	                }
	            }, normalState);
	            normalStyle = normalState.style;
	            delete normalState.style;
	
	            // Hover state
	            hoverState = merge(normalState, {
	                stroke: '#68A',
	                fill: {
	                    linearGradient: verticalGradient,
	                    stops: [
	                        [0, '#FFF'],
	                        [1, '#ACF']
	                    ]
	                }
	            }, hoverState);
	            hoverStyle = hoverState.style;
	            delete hoverState.style;
	
	            // Pressed state
	            pressedState = merge(normalState, {
	                stroke: '#68A',
	                fill: {
	                    linearGradient: verticalGradient,
	                    stops: [
	                        [0, '#9BD'],
	                        [1, '#CDF']
	                    ]
	                }
	            }, pressedState);
	            pressedStyle = pressedState.style;
	            delete pressedState.style;
	
	            // Disabled state
	            disabledState = merge(normalState, {
	                style: {
	                    color: '#CCC'
	                }
	            }, disabledState);
	            disabledStyle = disabledState.style;
	            delete disabledState.style;
	
	            // Add the events. IE9 and IE10 need mouseover and mouseout to funciton (#667).
	            addEvent(label.element, isMS ? 'mouseover' : 'mouseenter', function () {
	                if (curState !== 3) {
	                    label.attr(hoverState)
	                        .css(hoverStyle);
	                }
	            });
	            addEvent(label.element, isMS ? 'mouseout' : 'mouseleave', function () {
	                if (curState !== 3) {
	                    stateOptions = [normalState, hoverState, pressedState][curState];
	                    stateStyle = [normalStyle, hoverStyle, pressedStyle][curState];
	                    label.attr(stateOptions)
	                        .css(stateStyle);
	                }
	            });
	
	            label.setState = function (state) {
	                label.state = curState = state;
	                if (!state) {
	                    label.attr(normalState)
	                        .css(normalStyle);
	                } else if (state === 2) {
	                    label.attr(pressedState)
	                        .css(pressedStyle);
	                } else if (state === 3) {
	                    label.attr(disabledState)
	                        .css(disabledStyle);
	                }
	            };
	
	            return label
	                .on('click', function (e) {
	                    if (curState !== 3) {
	                        callback.call(label, e);
	                    }
	                })
	                .attr(normalState)
	                .css(extend({ cursor: 'default' }, normalStyle));
	        },
	
	        /**
	         * Make a straight line crisper by not spilling out to neighbour pixels
	         * @param {Array} points
	         * @param {Number} width
	         */
	        crispLine: function (points, width) {
	            // points format: [M, 0, 0, L, 100, 0]
	            // normalize to a crisp line
	            if (points[1] === points[4]) {
	                // Substract due to #1129. Now bottom and left axis gridlines behave the same.
	                points[1] = points[4] = mathRound(points[1]) - (width % 2 / 2);
	            }
	            if (points[2] === points[5]) {
	                points[2] = points[5] = mathRound(points[2]) + (width % 2 / 2);
	            }
	            return points;
	        },
	
	
	        /**
	         * Draw a path
	         * @param {Array} path An SVG path in array form
	         */
	        path: function (path) {
	            var attr = {
	                fill: NONE
	            };
	            if (isArray(path)) {
	                attr.d = path;
	            } else if (isObject(path)) { // attributes
	                extend(attr, path);
	            }
	            return this.createElement('path').attr(attr);
	        },
	
	        /**
	         * Draw and return an SVG circle
	         * @param {Number} x The x position
	         * @param {Number} y The y position
	         * @param {Number} r The radius
	         */
	        circle: function (x, y, r) {
	            var attr = isObject(x) ? x : { x: x, y: y, r: r },
	                wrapper = this.createElement('circle');
	
	            // Setting x or y translates to cx and cy
	            wrapper.xSetter = wrapper.ySetter = function (value, key, element) {
	                element.setAttribute('c' + key, value);
	            };
	
	            return wrapper.attr(attr);
	        },
	
	        /**
	         * Draw and return an arc
	         * @param {Number} x X position
	         * @param {Number} y Y position
	         * @param {Number} r Radius
	         * @param {Number} innerR Inner radius like used in donut charts
	         * @param {Number} start Starting angle
	         * @param {Number} end Ending angle
	         */
	        arc: function (x, y, r, innerR, start, end) {
	            var arc;
	
	            if (isObject(x)) {
	                y = x.y;
	                r = x.r;
	                innerR = x.innerR;
	                start = x.start;
	                end = x.end;
	                x = x.x;
	            }
	
	            // Arcs are defined as symbols for the ability to set
	            // attributes in attr and animate
	            arc = this.symbol('arc', x || 0, y || 0, r || 0, r || 0, {
	                innerR: innerR || 0,
	                start: start || 0,
	                end: end || 0
	            });
	            arc.r = r; // #959
	            return arc;
	        },
	
	        /**
	         * Draw and return a rectangle
	         * @param {Number} x Left position
	         * @param {Number} y Top position
	         * @param {Number} width
	         * @param {Number} height
	         * @param {Number} r Border corner radius
	         * @param {Number} strokeWidth A stroke width can be supplied to allow crisp drawing
	         */
	        rect: function (x, y, width, height, r, strokeWidth) {
	
	            r = isObject(x) ? x.r : r;
	
	            var wrapper = this.createElement('rect'),
	                attribs = isObject(x) ? x : x === UNDEFINED ? {} : {
	                    x: x,
	                    y: y,
	                    width: mathMax(width, 0),
	                    height: mathMax(height, 0)
	                };
	
	            if (strokeWidth !== UNDEFINED) {
	                wrapper.strokeWidth = strokeWidth;
	                attribs = wrapper.crisp(attribs);
	            }
	
	            if (r) {
	                attribs.r = r;
	            }
	
	            wrapper.rSetter = function (value, key, element) {
	                attr(element, {
	                    rx: value,
	                    ry: value
	                });
	            };
	
	            return wrapper.attr(attribs);
	        },
	
	        /**
	         * Resize the box and re-align all aligned elements
	         * @param {Object} width
	         * @param {Object} height
	         * @param {Boolean} animate
	         *
	         */
	        setSize: function (width, height, animate) {
	            var renderer = this,
	                alignedObjects = renderer.alignedObjects,
	                i = alignedObjects.length;
	
	            renderer.width = width;
	            renderer.height = height;
	
	            renderer.boxWrapper[pick(animate, true) ? 'animate' : 'attr']({
	                width: width,
	                height: height
	            });
	
	            while (i--) {
	                alignedObjects[i].align();
	            }
	        },
	
	        /**
	         * Create a group
	         * @param {String} name The group will be given a class name of 'highcharts-{name}'.
	         *     This can be used for styling and scripting.
	         */
	        g: function (name) {
	            var elem = this.createElement('g');
	            return defined(name) ? elem.attr({ 'class': PREFIX + name }) : elem;
	        },
	
	        /**
	         * Display an image
	         * @param {String} src
	         * @param {Number} x
	         * @param {Number} y
	         * @param {Number} width
	         * @param {Number} height
	         */
	        image: function (src, x, y, width, height) {
	            var attribs = {
	                    preserveAspectRatio: NONE
	                },
	                elemWrapper;
	
	            // optional properties
	            if (arguments.length > 1) {
	                extend(attribs, {
	                    x: x,
	                    y: y,
	                    width: width,
	                    height: height
	                });
	            }
	
	            elemWrapper = this.createElement('image').attr(attribs);
	
	            // set the href in the xlink namespace
	            if (elemWrapper.element.setAttributeNS) {
	                elemWrapper.element.setAttributeNS('http://www.w3.org/1999/xlink',
	                    'href', src);
	            } else {
	                // could be exporting in IE
	                // using href throws "not supported" in ie7 and under, requries regex shim to fix later
	                elemWrapper.element.setAttribute('hc-svg-href', src);
	            }
	            return elemWrapper;
	        },
	
	        /**
	         * Draw a symbol out of pre-defined shape paths from the namespace 'symbol' object.
	         *
	         * @param {Object} symbol
	         * @param {Object} x
	         * @param {Object} y
	         * @param {Object} radius
	         * @param {Object} options
	         */
	        symbol: function (symbol, x, y, width, height, options) {
	
	            var ren = this,
	                obj,
	
	                // get the symbol definition function
	                symbolFn = this.symbols[symbol],
	
	                // check if there's a path defined for this symbol
	                path = symbolFn && symbolFn(
	                    mathRound(x),
	                    mathRound(y),
	                    width,
	                    height,
	                    options
	                ),
	                imageRegex = /^url\((.*?)\)$/,
	                imageSrc,
	                imageSize,
	                centerImage;
	
	            if (path) {
	
	                obj = this.path(path);
	                // expando properties for use in animate and attr
	                extend(obj, {
	                    symbolName: symbol,
	                    x: x,
	                    y: y,
	                    width: width,
	                    height: height
	                });
	                if (options) {
	                    extend(obj, options);
	                }
	
	
	            // image symbols
	            } else if (imageRegex.test(symbol)) {
	
	                // On image load, set the size and position
	                centerImage = function (img, size) {
	                    if (img.element) { // it may be destroyed in the meantime (#1390)
	                        img.attr({
	                            width: size[0],
	                            height: size[1]
	                        });
	
	                        if (!img.alignByTranslate) { // #185
	                            img.translate(
	                                mathRound((width - size[0]) / 2), // #1378
	                                mathRound((height - size[1]) / 2)
	                            );
	                        }
	                    }
	                };
	
	                imageSrc = symbol.match(imageRegex)[1];
	                imageSize = symbolSizes[imageSrc] || (options && options.width && options.height && [options.width, options.height]);
	
	                // Ireate the image synchronously, add attribs async
	                obj = this.image(imageSrc)
	                    .attr({
	                        x: x,
	                        y: y
	                    });
	                obj.isImg = true;
	
	                if (imageSize) {
	                    centerImage(obj, imageSize);
	                } else {
	                    // Initialize image to be 0 size so export will still function if there's no cached sizes.
	                    obj.attr({ width: 0, height: 0 });
	
	                    // Create a dummy JavaScript image to get the width and height. Due to a bug in IE < 8,
	                    // the created element must be assigned to a variable in order to load (#292).
	                    createElement('img', {
	                        onload: function () {
	
	                            var chart = charts[ren.chartIndex];
	
	                            // Special case for SVGs on IE11, the width is not accessible until the image is
	                            // part of the DOM (#2854).
	                            if (this.width === 0) {
	                                css(this, {
	                                    position: ABSOLUTE,
	                                    top: '-999em'
	                                });
	                                doc.body.appendChild(this);
	                            }
	
	                            // Center the image
	                            centerImage(obj, symbolSizes[imageSrc] = [this.width, this.height]);
	
	                            // Clean up after #2854 workaround.
	                            if (this.parentNode) {
	                                this.parentNode.removeChild(this);
	                            }
	
	                            // Fire the load event when all external images are loaded
	                            ren.imgCount--;
	                            if (!ren.imgCount && chart && chart.onload) {
	                                chart.onload();
	                            }
	                        },
	                        src: imageSrc
	                    });
	                    this.imgCount++;
	                }
	            }
	
	            return obj;
	        },
	
	        /**
	         * An extendable collection of functions for defining symbol paths.
	         */
	        symbols: {
	            'circle': function (x, y, w, h) {
	                var cpw = 0.166 * w;
	                return [
	                    M, x + w / 2, y,
	                    'C', x + w + cpw, y, x + w + cpw, y + h, x + w / 2, y + h,
	                    'C', x - cpw, y + h, x - cpw, y, x + w / 2, y,
	                    'Z'
	                ];
	            },
	
	            'square': function (x, y, w, h) {
	                return [
	                    M, x, y,
	                    L, x + w, y,
	                    x + w, y + h,
	                    x, y + h,
	                    'Z'
	                ];
	            },
	
	            'triangle': function (x, y, w, h) {
	                return [
	                    M, x + w / 2, y,
	                    L, x + w, y + h,
	                    x, y + h,
	                    'Z'
	                ];
	            },
	
	            'triangle-down': function (x, y, w, h) {
	                return [
	                    M, x, y,
	                    L, x + w, y,
	                    x + w / 2, y + h,
	                    'Z'
	                ];
	            },
	            'diamond': function (x, y, w, h) {
	                return [
	                    M, x + w / 2, y,
	                    L, x + w, y + h / 2,
	                    x + w / 2, y + h,
	                    x, y + h / 2,
	                    'Z'
	                ];
	            },
	            'arc': function (x, y, w, h, options) {
	                var start = options.start,
	                    radius = options.r || w || h,
	                    end = options.end - 0.001, // to prevent cos and sin of start and end from becoming equal on 360 arcs (related: #1561)
	                    innerRadius = options.innerR,
	                    open = options.open,
	                    cosStart = mathCos(start),
	                    sinStart = mathSin(start),
	                    cosEnd = mathCos(end),
	                    sinEnd = mathSin(end),
	                    longArc = options.end - start < mathPI ? 0 : 1;
	
	                return [
	                    M,
	                    x + radius * cosStart,
	                    y + radius * sinStart,
	                    'A', // arcTo
	                    radius, // x radius
	                    radius, // y radius
	                    0, // slanting
	                    longArc, // long or short arc
	                    1, // clockwise
	                    x + radius * cosEnd,
	                    y + radius * sinEnd,
	                    open ? M : L,
	                    x + innerRadius * cosEnd,
	                    y + innerRadius * sinEnd,
	                    'A', // arcTo
	                    innerRadius, // x radius
	                    innerRadius, // y radius
	                    0, // slanting
	                    longArc, // long or short arc
	                    0, // clockwise
	                    x + innerRadius * cosStart,
	                    y + innerRadius * sinStart,
	
	                    open ? '' : 'Z' // close
	                ];
	            },
	
	            /**
	             * Callout shape used for default tooltips, also used for rounded rectangles in VML
	             */
	            callout: function (x, y, w, h, options) {
	                var arrowLength = 6,
	                    halfDistance = 6,
	                    r = mathMin((options && options.r) || 0, w, h),
	                    safeDistance = r + halfDistance,
	                    anchorX = options && options.anchorX,
	                    anchorY = options && options.anchorY,
	                    path;
	
	                path = [
	                    'M', x + r, y,
	                    'L', x + w - r, y, // top side
	                    'C', x + w, y, x + w, y, x + w, y + r, // top-right corner
	                    'L', x + w, y + h - r, // right side
	                    'C', x + w, y + h, x + w, y + h, x + w - r, y + h, // bottom-right corner
	                    'L', x + r, y + h, // bottom side
	                    'C', x, y + h, x, y + h, x, y + h - r, // bottom-left corner
	                    'L', x, y + r, // left side
	                    'C', x, y, x, y, x + r, y // top-right corner
	                ];
	
	                if (anchorX && anchorX > w && anchorY > y + safeDistance && anchorY < y + h - safeDistance) { // replace right side
	                    path.splice(13, 3,
	                        'L', x + w, anchorY - halfDistance,
	                        x + w + arrowLength, anchorY,
	                        x + w, anchorY + halfDistance,
	                        x + w, y + h - r
	                        );
	                } else if (anchorX && anchorX < 0 && anchorY > y + safeDistance && anchorY < y + h - safeDistance) { // replace left side
	                    path.splice(33, 3,
	                        'L', x, anchorY + halfDistance,
	                        x - arrowLength, anchorY,
	                        x, anchorY - halfDistance,
	                        x, y + r
	                        );
	                } else if (anchorY && anchorY > h && anchorX > x + safeDistance && anchorX < x + w - safeDistance) { // replace bottom
	                    path.splice(23, 3,
	                        'L', anchorX + halfDistance, y + h,
	                        anchorX, y + h + arrowLength,
	                        anchorX - halfDistance, y + h,
	                        x + r, y + h
	                        );
	                } else if (anchorY && anchorY < 0 && anchorX > x + safeDistance && anchorX < x + w - safeDistance) { // replace top
	                    path.splice(3, 3,
	                        'L', anchorX - halfDistance, y,
	                        anchorX, y - arrowLength,
	                        anchorX + halfDistance, y,
	                        w - r, y
	                        );
	                }
	                return path;
	            }
	        },
	
	        /**
	         * Define a clipping rectangle
	         * @param {String} id
	         * @param {Number} x
	         * @param {Number} y
	         * @param {Number} width
	         * @param {Number} height
	         */
	        clipRect: function (x, y, width, height) {
	            var wrapper,
	                id = PREFIX + idCounter++,
	
	                clipPath = this.createElement('clipPath').attr({
	                    id: id
	                }).add(this.defs);
	
	            wrapper = this.rect(x, y, width, height, 0).add(clipPath);
	            wrapper.id = id;
	            wrapper.clipPath = clipPath;
	            wrapper.count = 0;
	
	            return wrapper;
	        },
	
	
	
	
	
	        /**
	         * Add text to the SVG object
	         * @param {String} str
	         * @param {Number} x Left position
	         * @param {Number} y Top position
	         * @param {Boolean} useHTML Use HTML to render the text
	         */
	        text: function (str, x, y, useHTML) {
	
	            // declare variables
	            var renderer = this,
	                fakeSVG = useCanVG || (!hasSVG && renderer.forExport),
	                wrapper,
	                attr = {};
	
	            if (useHTML && (renderer.allowHTML || !renderer.forExport)) {
	                return renderer.html(str, x, y);
	            }
	
	            attr.x = Math.round(x || 0); // X is always needed for line-wrap logic
	            if (y) {
	                attr.y = Math.round(y);
	            }
	            if (str || str === 0) {
	                attr.text = str;
	            }
	
	            wrapper = renderer.createElement('text')
	                .attr(attr);
	
	            // Prevent wrapping from creating false offsetWidths in export in legacy IE (#1079, #1063)
	            if (fakeSVG) {
	                wrapper.css({
	                    position: ABSOLUTE
	                });
	            }
	
	            if (!useHTML) {
	                wrapper.xSetter = function (value, key, element) {
	                    var tspans = element.getElementsByTagName('tspan'),
	                        tspan,
	                        parentVal = element.getAttribute(key),
	                        i;
	                    for (i = 0; i < tspans.length; i++) {
	                        tspan = tspans[i];
	                        // If the x values are equal, the tspan represents a linebreak
	                        if (tspan.getAttribute(key) === parentVal) {
	                            tspan.setAttribute(key, value);
	                        }
	                    }
	                    element.setAttribute(key, value);
	                };
	            }
	
	            return wrapper;
	        },
	
	        /**
	         * Utility to return the baseline offset and total line height from the font size
	         */
	        fontMetrics: function (fontSize, elem) {
	            var lineHeight,
	                baseline,
	                style;
	
	            fontSize = fontSize || this.style.fontSize;
	            if (!fontSize && elem && win.getComputedStyle) {
	                elem = elem.element || elem; // SVGElement
	                style = win.getComputedStyle(elem, '');
	                fontSize = style && style.fontSize; // #4309, the style doesn't exist inside a hidden iframe in Firefox
	            }
	            fontSize = /px/.test(fontSize) ? pInt(fontSize) : /em/.test(fontSize) ? parseFloat(fontSize) * 12 : 12;
	
	            // Empirical values found by comparing font size and bounding box height.
	            // Applies to the default font family. http://jsfiddle.net/highcharts/7xvn7/
	            lineHeight = fontSize < 24 ? fontSize + 3 : mathRound(fontSize * 1.2);
	            baseline = mathRound(lineHeight * 0.8);
	
	            return {
	                h: lineHeight,
	                b: baseline,
	                f: fontSize
	            };
	        },
	
	        /**
	         * Correct X and Y positioning of a label for rotation (#1764)
	         */
	        rotCorr: function (baseline, rotation, alterY) {
	            var y = baseline;
	            if (rotation && alterY) {
	                y = mathMax(y * mathCos(rotation * deg2rad), 4);
	            }
	            return {
	                x: (-baseline / 3) * mathSin(rotation * deg2rad),
	                y: y
	            };
	        },
	
	        /**
	         * Add a label, a text item that can hold a colored or gradient background
	         * as well as a border and shadow.
	         * @param {string} str
	         * @param {Number} x
	         * @param {Number} y
	         * @param {String} shape
	         * @param {Number} anchorX In case the shape has a pointer, like a flag, this is the
	         *    coordinates it should be pinned to
	         * @param {Number} anchorY
	         * @param {Boolean} baseline Whether to position the label relative to the text baseline,
	         *    like renderer.text, or to the upper border of the rectangle.
	         * @param {String} className Class name for the group
	         */
	        label: function (str, x, y, shape, anchorX, anchorY, useHTML, baseline, className) {
	
	            var renderer = this,
	                wrapper = renderer.g(className),
	                text = renderer.text('', 0, 0, useHTML)
	                    .attr({
	                        zIndex: 1
	                    }),
	                    //.add(wrapper),
	                box,
	                bBox,
	                alignFactor = 0,
	                padding = 3,
	                paddingLeft = 0,
	                width,
	                height,
	                wrapperX,
	                wrapperY,
	                crispAdjust = 0,
	                deferredAttr = {},
	                baselineOffset,
	                hasBGImage = /^url\((.*?)\)$/.test(shape),
	                needsBox = hasBGImage,
	                updateBoxSize,
	                updateTextPadding,
	                boxAttr;
	
	            /**
	             * This function runs after the label is added to the DOM (when the bounding box is
	             * available), and after the text of the label is updated to detect the new bounding
	             * box and reflect it in the border box.
	             */
	            updateBoxSize = function () {
	                var boxX,
	                    boxY,
	                    style = text.element.style;
	
	                bBox = (width === undefined || height === undefined || wrapper.styles.textAlign) && defined(text.textStr) &&
	                    text.getBBox(); //#3295 && 3514 box failure when string equals 0
	                wrapper.width = (width || bBox.width || 0) + 2 * padding + paddingLeft;
	                wrapper.height = (height || bBox.height || 0) + 2 * padding;
	
	                // update the label-scoped y offset
	                baselineOffset = padding + renderer.fontMetrics(style && style.fontSize, text).b;
	
	
	                if (needsBox) {
	
	                    if (!box) {
	                        // create the border box if it is not already present
	                        boxX = crispAdjust;
	                        boxY = (baseline ? -baselineOffset : 0) + crispAdjust;
	                        wrapper.box = box = renderer.symbols[shape] || hasBGImage ? // Symbol definition exists (#5324)
	                                renderer.symbol(shape, boxX, boxY, wrapper.width, wrapper.height, deferredAttr) :
	                                renderer.rect(boxX, boxY, wrapper.width, wrapper.height, 0, deferredAttr[STROKE_WIDTH]);
	
	                        if (!box.isImg) { // #4324, fill "none" causes it to be ignored by mouse events in IE
	                            box.attr('fill', NONE);
	                        }
	                        box.add(wrapper);
	                    }
	
	                    // apply the box attributes
	                    if (!box.isImg) { // #1630
	                        box.attr(extend({
	                            width: mathRound(wrapper.width),
	                            height: mathRound(wrapper.height)
	                        }, deferredAttr));
	                    }
	                    deferredAttr = null;
	                }
	            };
	
	            /**
	             * This function runs after setting text or padding, but only if padding is changed
	             */
	            updateTextPadding = function () {
	                var styles = wrapper.styles,
	                    textAlign = styles && styles.textAlign,
	                    x = paddingLeft + padding,
	                    y;
	
	                // determin y based on the baseline
	                y = baseline ? 0 : baselineOffset;
	
	                // compensate for alignment
	                if (defined(width) && bBox && (textAlign === 'center' || textAlign === 'right')) {
	                    x += { center: 0.5, right: 1 }[textAlign] * (width - bBox.width);
	                }
	
	                // update if anything changed
	                if (x !== text.x || y !== text.y) {
	                    text.attr('x', x);
	                    if (y !== UNDEFINED) {
	                        text.attr('y', y);
	                    }
	                }
	
	                // record current values
	                text.x = x;
	                text.y = y;
	            };
	
	            /**
	             * Set a box attribute, or defer it if the box is not yet created
	             * @param {Object} key
	             * @param {Object} value
	             */
	            boxAttr = function (key, value) {
	                if (box) {
	                    box.attr(key, value);
	                } else {
	                    deferredAttr[key] = value;
	                }
	            };
	
	            /**
	             * After the text element is added, get the desired size of the border box
	             * and add it before the text in the DOM.
	             */
	            wrapper.onAdd = function () {
	                text.add(wrapper);
	                wrapper.attr({
	                    text: (str || str === 0) ? str : '', // alignment is available now // #3295: 0 not rendered if given as a value
	                    x: x,
	                    y: y
	                });
	
	                if (box && defined(anchorX)) {
	                    wrapper.attr({
	                        anchorX: anchorX,
	                        anchorY: anchorY
	                    });
	                }
	            };
	
	            /*
	             * Add specific attribute setters.
	             */
	
	            // only change local variables
	            wrapper.widthSetter = function (value) {
	                width = value;
	            };
	            wrapper.heightSetter = function (value) {
	                height = value;
	            };
	            wrapper.paddingSetter =  function (value) {
	                if (defined(value) && value !== padding) {
	                    padding = wrapper.padding = value;
	                    updateTextPadding();
	                }
	            };
	            wrapper.paddingLeftSetter =  function (value) {
	                if (defined(value) && value !== paddingLeft) {
	                    paddingLeft = value;
	                    updateTextPadding();
	                }
	            };
	
	
	            // change local variable and prevent setting attribute on the group
	            wrapper.alignSetter = function (value) {
	                value = { left: 0, center: 0.5, right: 1 }[value];
	                if (value !== alignFactor) {
	                    alignFactor = value;
	                    if (bBox) { // Bounding box exists, means we're dynamically changing
	                        wrapper.attr({ x: wrapperX }); // #5134
	                    }
	                }
	            };
	
	            // apply these to the box and the text alike
	            wrapper.textSetter = function (value) {
	                if (value !== UNDEFINED) {
	                    text.textSetter(value);
	                }
	                updateBoxSize();
	                updateTextPadding();
	            };
	
	            // apply these to the box but not to the text
	            wrapper['stroke-widthSetter'] = function (value, key) {
	                if (value) {
	                    needsBox = true;
	                }
	                crispAdjust = value % 2 / 2;
	                boxAttr(key, value);
	            };
	            wrapper.strokeSetter = wrapper.fillSetter = wrapper.rSetter = function (value, key) {
	                if (key === 'fill' && value) {
	                    needsBox = true;
	                }
	                boxAttr(key, value);
	            };
	            wrapper.anchorXSetter = function (value, key) {
	                anchorX = value;
	                boxAttr(key, mathRound(value) - crispAdjust - wrapperX);
	            };
	            wrapper.anchorYSetter = function (value, key) {
	                anchorY = value;
	                boxAttr(key, value - wrapperY);
	            };
	
	            // rename attributes
	            wrapper.xSetter = function (value) {
	                wrapper.x = value; // for animation getter
	                if (alignFactor) {
	                    value -= alignFactor * ((width || bBox.width) + 2 * padding);
	                }
	                wrapperX = mathRound(value);
	                wrapper.attr('translateX', wrapperX);
	            };
	            wrapper.ySetter = function (value) {
	                wrapperY = wrapper.y = mathRound(value);
	                wrapper.attr('translateY', wrapperY);
	            };
	
	            // Redirect certain methods to either the box or the text
	            var baseCss = wrapper.css;
	            return extend(wrapper, {
	                /**
	                 * Pick up some properties and apply them to the text instead of the wrapper
	                 */
	                css: function (styles) {
	                    if (styles) {
	                        var textStyles = {};
	                        styles = merge(styles); // create a copy to avoid altering the original object (#537)
	                        each(wrapper.textProps, function (prop) {
	                            if (styles[prop] !== UNDEFINED) {
	                                textStyles[prop] = styles[prop];
	                                delete styles[prop];
	                            }
	                        });
	                        text.css(textStyles);
	                    }
	                    return baseCss.call(wrapper, styles);
	                },
	                /**
	                 * Return the bounding box of the box, not the group
	                 */
	                getBBox: function () {
	                    return {
	                        width: bBox.width + 2 * padding,
	                        height: bBox.height + 2 * padding,
	                        x: bBox.x - padding,
	                        y: bBox.y - padding
	                    };
	                },
	                /**
	                 * Apply the shadow to the box
	                 */
	                shadow: function (b) {
	                    if (box) {
	                        box.shadow(b);
	                    }
	                    return wrapper;
	                },
	                /**
	                 * Destroy and release memory.
	                 */
	                destroy: function () {
	
	                    // Added by button implementation
	                    removeEvent(wrapper.element, 'mouseenter');
	                    removeEvent(wrapper.element, 'mouseleave');
	
	                    if (text) {
	                        text = text.destroy();
	                    }
	                    if (box) {
	                        box = box.destroy();
	                    }
	                    // Call base implementation to destroy the rest
	                    SVGElement.prototype.destroy.call(wrapper);
	
	                    // Release local pointers (#1298)
	                    wrapper = renderer = updateBoxSize = updateTextPadding = boxAttr = null;
	                }
	            });
	        }
	    }; // end SVGRenderer
	
	
	    // general renderer
	    Renderer = SVGRenderer;
	    // extend SvgElement for useHTML option
	    extend(SVGElement.prototype, {
	        /**
	         * Apply CSS to HTML elements. This is used in text within SVG rendering and
	         * by the VML renderer
	         */
	        htmlCss: function (styles) {
	            var wrapper = this,
	                element = wrapper.element,
	                textWidth = styles && element.tagName === 'SPAN' && styles.width;
	
	            if (textWidth) {
	                delete styles.width;
	                wrapper.textWidth = textWidth;
	                wrapper.updateTransform();
	            }
	            if (styles && styles.textOverflow === 'ellipsis') {
	                styles.whiteSpace = 'nowrap';
	                styles.overflow = 'hidden';
	            }
	            wrapper.styles = extend(wrapper.styles, styles);
	            css(wrapper.element, styles);
	
	            return wrapper;
	        },
	
	        /**
	         * VML and useHTML method for calculating the bounding box based on offsets
	         * @param {Boolean} refresh Whether to force a fresh value from the DOM or to
	         * use the cached value
	         *
	         * @return {Object} A hash containing values for x, y, width and height
	         */
	
	        htmlGetBBox: function () {
	            var wrapper = this,
	                element = wrapper.element;
	
	            // faking getBBox in exported SVG in legacy IE
	            // faking getBBox in exported SVG in legacy IE (is this a duplicate of the fix for #1079?)
	            if (element.nodeName === 'text') {
	                element.style.position = ABSOLUTE;
	            }
	
	            return {
	                x: element.offsetLeft,
	                y: element.offsetTop,
	                width: element.offsetWidth,
	                height: element.offsetHeight
	            };
	        },
	
	        /**
	         * VML override private method to update elements based on internal
	         * properties based on SVG transform
	         */
	        htmlUpdateTransform: function () {
	            // aligning non added elements is expensive
	            if (!this.added) {
	                this.alignOnAdd = true;
	                return;
	            }
	
	            var wrapper = this,
	                renderer = wrapper.renderer,
	                elem = wrapper.element,
	                translateX = wrapper.translateX || 0,
	                translateY = wrapper.translateY || 0,
	                x = wrapper.x || 0,
	                y = wrapper.y || 0,
	                align = wrapper.textAlign || 'left',
	                alignCorrection = { left: 0, center: 0.5, right: 1 }[align],
	                shadows = wrapper.shadows,
	                styles = wrapper.styles;
	
	            // apply translate
	            css(elem, {
	                marginLeft: translateX,
	                marginTop: translateY
	            });
	            if (shadows) { // used in labels/tooltip
	                each(shadows, function (shadow) {
	                    css(shadow, {
	                        marginLeft: translateX + 1,
	                        marginTop: translateY + 1
	                    });
	                });
	            }
	
	            // apply inversion
	            if (wrapper.inverted) { // wrapper is a group
	                each(elem.childNodes, function (child) {
	                    renderer.invertChild(child, elem);
	                });
	            }
	
	            if (elem.tagName === 'SPAN') {
	
	                var rotation = wrapper.rotation,
	                    baseline,
	                    textWidth = pInt(wrapper.textWidth),
	                    whiteSpace = styles && styles.whiteSpace,
	                    currentTextTransform = [rotation, align, elem.innerHTML, wrapper.textWidth, wrapper.textAlign].join(',');
	
	                if (currentTextTransform !== wrapper.cTT) { // do the calculations and DOM access only if properties changed
	
	
	                    baseline = renderer.fontMetrics(elem.style.fontSize).b;
	
	                    // Renderer specific handling of span rotation
	                    if (defined(rotation)) {
	                        wrapper.setSpanRotation(rotation, alignCorrection, baseline);
	                    }
	
	                    // Reset multiline/ellipsis in order to read width (#4928, #5417)
	                    css(elem, {
	                        width: '',
	                        whiteSpace: whiteSpace || 'nowrap'
	                    });
	
	                    // Update textWidth
	                    if (elem.offsetWidth > textWidth && /[ \-]/.test(elem.textContent || elem.innerText)) { // #983, #1254
	                        css(elem, {
	                            width: textWidth + PX,
	                            display: 'block',
	                            whiteSpace: whiteSpace || 'normal' // #3331
	                        });
	                    }
	
	
	                    wrapper.getSpanCorrection(elem.offsetWidth, baseline, alignCorrection, rotation, align);
	                }
	
	                // apply position with correction
	                css(elem, {
	                    left: (x + (wrapper.xCorr || 0)) + PX,
	                    top: (y + (wrapper.yCorr || 0)) + PX
	                });
	
	                // force reflow in webkit to apply the left and top on useHTML element (#1249)
	                if (isWebKit) {
	                    baseline = elem.offsetHeight; // assigned to baseline for lint purpose
	                }
	
	                // record current text transform
	                wrapper.cTT = currentTextTransform;
	            }
	        },
	
	        /**
	         * Set the rotation of an individual HTML span
	         */
	        setSpanRotation: function (rotation, alignCorrection, baseline) {
	            var rotationStyle = {},
	                cssTransformKey = isMS ? '-ms-transform' : isWebKit ? '-webkit-transform' : isFirefox ? 'MozTransform' : isOpera ? '-o-transform' : '';
	
	            rotationStyle[cssTransformKey] = rotationStyle.transform = 'rotate(' + rotation + 'deg)';
	            rotationStyle[cssTransformKey + (isFirefox ? 'Origin' : '-origin')] = rotationStyle.transformOrigin = (alignCorrection * 100) + '% ' + baseline + 'px';
	            css(this.element, rotationStyle);
	        },
	
	        /**
	         * Get the correction in X and Y positioning as the element is rotated.
	         */
	        getSpanCorrection: function (width, baseline, alignCorrection) {
	            this.xCorr = -width * alignCorrection;
	            this.yCorr = -baseline;
	        }
	    });
	
	    // Extend SvgRenderer for useHTML option.
	    extend(SVGRenderer.prototype, {
	        /**
	         * Create HTML text node. This is used by the VML renderer as well as the SVG
	         * renderer through the useHTML option.
	         *
	         * @param {String} str
	         * @param {Number} x
	         * @param {Number} y
	         */
	        html: function (str, x, y) {
	            var wrapper = this.createElement('span'),
	                element = wrapper.element,
	                renderer = wrapper.renderer,
	                isSVG = renderer.isSVG,
	                addSetters = function (element, style) {
	                    // These properties are set as attributes on the SVG group, and as
	                    // identical CSS properties on the div. (#3542)
	                    each(['display', 'opacity', 'visibility'], function (prop) {
	                        wrap(element, prop + 'Setter', function (proceed, value, key, elem) {
	                            proceed.call(this, value, key, elem);
	                            style[key] = value;
	                        });
	                    });            
	                };
	
	            // Text setter
	            wrapper.textSetter = function (value) {
	                if (value !== element.innerHTML) {
	                    delete this.bBox;
	                }
	                element.innerHTML = this.textStr = value;
	                wrapper.htmlUpdateTransform();
	            };
	
	            // Add setters for the element itself (#4938)
	            if (isSVG) { // #4938, only for HTML within SVG
	                addSetters(wrapper, wrapper.element.style);
	            }
	
	            // Various setters which rely on update transform
	            wrapper.xSetter = wrapper.ySetter = wrapper.alignSetter = wrapper.rotationSetter = function (value, key) {
	                if (key === 'align') {
	                    key = 'textAlign'; // Do not overwrite the SVGElement.align method. Same as VML.
	                }
	                wrapper[key] = value;
	                wrapper.htmlUpdateTransform();
	            };
	
	            // Set the default attributes
	            wrapper
	                .attr({
	                    text: str,
	                    x: mathRound(x),
	                    y: mathRound(y)
	                })
	                .css({
	                    position: ABSOLUTE,
	                    fontFamily: this.style.fontFamily,
	                    fontSize: this.style.fontSize
	                });
	
	            // Keep the whiteSpace style outside the wrapper.styles collection
	            element.style.whiteSpace = 'nowrap';
	
	            // Use the HTML specific .css method
	            wrapper.css = wrapper.htmlCss;
	
	            // This is specific for HTML within SVG
	            if (isSVG) {
	                wrapper.add = function (svgGroupWrapper) {
	
	                    var htmlGroup,
	                        container = renderer.box.parentNode,
	                        parentGroup,
	                        parents = [];
	
	                    this.parentGroup = svgGroupWrapper;
	
	                    // Create a mock group to hold the HTML elements
	                    if (svgGroupWrapper) {
	                        htmlGroup = svgGroupWrapper.div;
	                        if (!htmlGroup) {
	
	                            // Read the parent chain into an array and read from top down
	                            parentGroup = svgGroupWrapper;
	                            while (parentGroup) {
	
	                                parents.push(parentGroup);
	
	                                // Move up to the next parent group
	                                parentGroup = parentGroup.parentGroup;
	                            }
	
	                            // Ensure dynamically updating position when any parent is translated
	                            each(parents.reverse(), function (parentGroup) {
	                                var htmlGroupStyle,
	                                    cls = attr(parentGroup.element, 'class');
	
	                                if (cls) {
	                                    cls = { className: cls };
	                                } // else null
	
	                                // Create a HTML div and append it to the parent div to emulate
	                                // the SVG group structure
	                                htmlGroup = parentGroup.div = parentGroup.div || createElement(DIV, cls, {
	                                    position: ABSOLUTE,
	                                    left: (parentGroup.translateX || 0) + PX,
	                                    top: (parentGroup.translateY || 0) + PX,
	                                    display: parentGroup.display,
	                                    opacity: parentGroup.opacity, // #5075
	                                    pointerEvents: parentGroup.styles && parentGroup.styles.pointerEvents // #5595
	                                }, htmlGroup || container); // the top group is appended to container
	
	                                // Shortcut
	                                htmlGroupStyle = htmlGroup.style;
	
	                                // Set listeners to update the HTML div's position whenever the SVG group
	                                // position is changed
	                                extend(parentGroup, {
	                                    translateXSetter: function (value, key) {
	                                        htmlGroupStyle.left = value + PX;
	                                        parentGroup[key] = value;
	                                        parentGroup.doTransform = true;
	                                    },
	                                    translateYSetter: function (value, key) {
	                                        htmlGroupStyle.top = value + PX;
	                                        parentGroup[key] = value;
	                                        parentGroup.doTransform = true;
	                                    }
	                                });
	                                addSetters(parentGroup, htmlGroupStyle);
	                            });
	
	                        }
	                    } else {
	                        htmlGroup = container;
	                    }
	
	                    htmlGroup.appendChild(element);
	
	                    // Shared with VML:
	                    wrapper.added = true;
	                    if (wrapper.alignOnAdd) {
	                        wrapper.htmlUpdateTransform();
	                    }
	
	                    return wrapper;
	                };
	            }
	            return wrapper;
	        }
	    });
	
	
	    /* ****************************************************************************
	     *                                                                            *
	     * START OF INTERNET EXPLORER <= 8 SPECIFIC CODE                              *
	     *                                                                            *
	     * For applications and websites that don't need IE support, like platform    *
	     * targeted mobile apps and web apps, this code can be removed.               *
	     *                                                                            *
	     *****************************************************************************/
	
	    /**
	     * @constructor
	     */
	    var VMLRenderer, VMLElement;
	    if (!hasSVG && !useCanVG) {
	
	    /**
	     * The VML element wrapper.
	     */
	    VMLElement = {
	
	        /**
	         * Initialize a new VML element wrapper. It builds the markup as a string
	         * to minimize DOM traffic.
	         * @param {Object} renderer
	         * @param {Object} nodeName
	         */
	        init: function (renderer, nodeName) {
	            var wrapper = this,
	                markup =  ['<', nodeName, ' filled="f" stroked="f"'],
	                style = ['position: ', ABSOLUTE, ';'],
	                isDiv = nodeName === DIV;
	
	            // divs and shapes need size
	            if (nodeName === 'shape' || isDiv) {
	                style.push('left:0;top:0;width:1px;height:1px;');
	            }
	            style.push('visibility: ', isDiv ? HIDDEN : VISIBLE);
	
	            markup.push(' style="', style.join(''), '"/>');
	
	            // create element with default attributes and style
	            if (nodeName) {
	                markup = isDiv || nodeName === 'span' || nodeName === 'img' ?
	                    markup.join('')    :
	                    renderer.prepVML(markup);
	                wrapper.element = createElement(markup);
	            }
	
	            wrapper.renderer = renderer;
	        },
	
	        /**
	         * Add the node to the given parent
	         * @param {Object} parent
	         */
	        add: function (parent) {
	            var wrapper = this,
	                renderer = wrapper.renderer,
	                element = wrapper.element,
	                box = renderer.box,
	                inverted = parent && parent.inverted,
	
	                // get the parent node
	                parentNode = parent ?
	                    parent.element || parent :
	                    box;
	
	            if (parent) {
	                this.parentGroup = parent;
	            }
	
	            // if the parent group is inverted, apply inversion on all children
	            if (inverted) { // only on groups
	                renderer.invertChild(element, parentNode);
	            }
	
	            // append it
	            parentNode.appendChild(element);
	
	            // align text after adding to be able to read offset
	            wrapper.added = true;
	            if (wrapper.alignOnAdd && !wrapper.deferUpdateTransform) {
	                wrapper.updateTransform();
	            }
	
	            // fire an event for internal hooks
	            if (wrapper.onAdd) {
	                wrapper.onAdd();
	            }
	
	            return wrapper;
	        },
	
	        /**
	         * VML always uses htmlUpdateTransform
	         */
	        updateTransform: SVGElement.prototype.htmlUpdateTransform,
	
	        /**
	         * Set the rotation of a span with oldIE's filter
	         */
	        setSpanRotation: function () {
	            // Adjust for alignment and rotation. Rotation of useHTML content is not yet implemented
	            // but it can probably be implemented for Firefox 3.5+ on user request. FF3.5+
	            // has support for CSS3 transform. The getBBox method also needs to be updated
	            // to compensate for the rotation, like it currently does for SVG.
	            // Test case: http://jsfiddle.net/highcharts/Ybt44/
	
	            var rotation = this.rotation,
	                costheta = mathCos(rotation * deg2rad),
	                sintheta = mathSin(rotation * deg2rad);
	
	            css(this.element, {
	                filter: rotation ? ['progid:DXImageTransform.Microsoft.Matrix(M11=', costheta,
	                    ', M12=', -sintheta, ', M21=', sintheta, ', M22=', costheta,
	                    ', sizingMethod=\'auto expand\')'].join('') : NONE
	            });
	        },
	
	        /**
	         * Get the positioning correction for the span after rotating.
	         */
	        getSpanCorrection: function (width, baseline, alignCorrection, rotation, align) {
	
	            var costheta = rotation ? mathCos(rotation * deg2rad) : 1,
	                sintheta = rotation ? mathSin(rotation * deg2rad) : 0,
	                height = pick(this.elemHeight, this.element.offsetHeight),
	                quad,
	                nonLeft = align && align !== 'left';
	
	            // correct x and y
	            this.xCorr = costheta < 0 && -width;
	            this.yCorr = sintheta < 0 && -height;
	
	            // correct for baseline and corners spilling out after rotation
	            quad = costheta * sintheta < 0;
	            this.xCorr += sintheta * baseline * (quad ? 1 - alignCorrection : alignCorrection);
	            this.yCorr -= costheta * baseline * (rotation ? (quad ? alignCorrection : 1 - alignCorrection) : 1);
	            // correct for the length/height of the text
	            if (nonLeft) {
	                this.xCorr -= width * alignCorrection * (costheta < 0 ? -1 : 1);
	                if (rotation) {
	                    this.yCorr -= height * alignCorrection * (sintheta < 0 ? -1 : 1);
	                }
	                css(this.element, {
	                    textAlign: align
	                });
	            }
	        },
	
	        /**
	         * Converts a subset of an SVG path definition to its VML counterpart. Takes an array
	         * as the parameter and returns a string.
	         */
	        pathToVML: function (value) {
	            // convert paths
	            var i = value.length,
	                path = [];
	
	            while (i--) {
	
	                // Multiply by 10 to allow subpixel precision.
	                // Substracting half a pixel seems to make the coordinates
	                // align with SVG, but this hasn't been tested thoroughly
	                if (isNumber(value[i])) {
	                    path[i] = mathRound(value[i] * 10) - 5;
	                } else if (value[i] === 'Z') { // close the path
	                    path[i] = 'x';
	                } else {
	                    path[i] = value[i];
	
	                    // When the start X and end X coordinates of an arc are too close,
	                    // they are rounded to the same value above. In this case, substract or
	                    // add 1 from the end X and Y positions. #186, #760, #1371, #1410.
	                    if (value.isArc && (value[i] === 'wa' || value[i] === 'at')) {
	                        // Start and end X
	                        if (path[i + 5] === path[i + 7]) {
	                            path[i + 7] += value[i + 7] > value[i + 5] ? 1 : -1;
	                        }
	                        // Start and end Y
	                        if (path[i + 6] === path[i + 8]) {
	                            path[i + 8] += value[i + 8] > value[i + 6] ? 1 : -1;
	                        }
	                    }
	                }
	            }
	
	
	            // Loop up again to handle path shortcuts (#2132)
	            /*while (i++ < path.length) {
	                if (path[i] === 'H') { // horizontal line to
	                    path[i] = 'L';
	                    path.splice(i + 2, 0, path[i - 1]);
	                } else if (path[i] === 'V') { // vertical line to
	                    path[i] = 'L';
	                    path.splice(i + 1, 0, path[i - 2]);
	                }
	            }*/
	            return path.join(' ') || 'x';
	        },
	
	        /**
	         * Set the element's clipping to a predefined rectangle
	         *
	         * @param {String} id The id of the clip rectangle
	         */
	        clip: function (clipRect) {
	            var wrapper = this,
	                clipMembers,
	                cssRet;
	
	            if (clipRect) {
	                clipMembers = clipRect.members;
	                erase(clipMembers, wrapper); // Ensure unique list of elements (#1258)
	                clipMembers.push(wrapper);
	                wrapper.destroyClip = function () {
	                    erase(clipMembers, wrapper);
	                };
	                cssRet = clipRect.getCSS(wrapper);
	
	            } else {
	                if (wrapper.destroyClip) {
	                    wrapper.destroyClip();
	                }
	                cssRet = { clip: docMode8 ? 'inherit' : 'rect(auto)' }; // #1214
	            }
	
	            return wrapper.css(cssRet);
	
	        },
	
	        /**
	         * Set styles for the element
	         * @param {Object} styles
	         */
	        css: SVGElement.prototype.htmlCss,
	
	        /**
	         * Removes a child either by removeChild or move to garbageBin.
	         * Issue 490; in VML removeChild results in Orphaned nodes according to sIEve, discardElement does not.
	         */
	        safeRemoveChild: function (element) {
	            // discardElement will detach the node from its parent before attaching it
	            // to the garbage bin. Therefore it is important that the node is attached and have parent.
	            if (element.parentNode) {
	                discardElement(element);
	            }
	        },
	
	        /**
	         * Extend element.destroy by removing it from the clip members array
	         */
	        destroy: function () {
	            if (this.destroyClip) {
	                this.destroyClip();
	            }
	
	            return SVGElement.prototype.destroy.apply(this);
	        },
	
	        /**
	         * Add an event listener. VML override for normalizing event parameters.
	         * @param {String} eventType
	         * @param {Function} handler
	         */
	        on: function (eventType, handler) {
	            // simplest possible event model for internal use
	            this.element['on' + eventType] = function () {
	                var evt = win.event;
	                evt.target = evt.srcElement;
	                handler(evt);
	            };
	            return this;
	        },
	
	        /**
	         * In stacked columns, cut off the shadows so that they don't overlap
	         */
	        cutOffPath: function (path, length) {
	
	            var len;
	
	            path = path.split(/[ ,]/);
	            len = path.length;
	
	            if (len === 9 || len === 11) {
	                path[len - 4] = path[len - 2] = pInt(path[len - 2]) - 10 * length;
	            }
	            return path.join(' ');
	        },
	
	        /**
	         * Apply a drop shadow by copying elements and giving them different strokes
	         * @param {Boolean|Object} shadowOptions
	         */
	        shadow: function (shadowOptions, group, cutOff) {
	            var shadows = [],
	                i,
	                element = this.element,
	                renderer = this.renderer,
	                shadow,
	                elemStyle = element.style,
	                markup,
	                path = element.path,
	                strokeWidth,
	                modifiedPath,
	                shadowWidth,
	                shadowElementOpacity;
	
	            // some times empty paths are not strings
	            if (path && typeof path.value !== 'string') {
	                path = 'x';
	            }
	            modifiedPath = path;
	
	            if (shadowOptions) {
	                shadowWidth = pick(shadowOptions.width, 3);
	                shadowElementOpacity = (shadowOptions.opacity || 0.15) / shadowWidth;
	                for (i = 1; i <= 3; i++) {
	
	                    strokeWidth = (shadowWidth * 2) + 1 - (2 * i);
	
	                    // Cut off shadows for stacked column items
	                    if (cutOff) {
	                        modifiedPath = this.cutOffPath(path.value, strokeWidth + 0.5);
	                    }
	
	                    markup = ['<shape isShadow="true" strokeweight="', strokeWidth,
	                        '" filled="false" path="', modifiedPath,
	                        '" coordsize="10 10" style="', element.style.cssText, '" />'];
	
	                    shadow = createElement(renderer.prepVML(markup),
	                        null, {
	                            left: pInt(elemStyle.left) + pick(shadowOptions.offsetX, 1),
	                            top: pInt(elemStyle.top) + pick(shadowOptions.offsetY, 1)
	                        }
	                    );
	                    if (cutOff) {
	                        shadow.cutOff = strokeWidth + 1;
	                    }
	
	                    // apply the opacity
	                    markup = ['<stroke color="', shadowOptions.color || 'black', '" opacity="', shadowElementOpacity * i, '"/>'];
	                    createElement(renderer.prepVML(markup), null, null, shadow);
	
	
	                    // insert it
	                    if (group) {
	                        group.element.appendChild(shadow);
	                    } else {
	                        element.parentNode.insertBefore(shadow, element);
	                    }
	
	                    // record it
	                    shadows.push(shadow);
	
	                }
	
	                this.shadows = shadows;
	            }
	            return this;
	        },
	        updateShadows: noop, // Used in SVG only
	
	        setAttr: function (key, value) {
	            if (docMode8) { // IE8 setAttribute bug
	                this.element[key] = value;
	            } else {
	                this.element.setAttribute(key, value);
	            }
	        },
	        classSetter: function (value) {
	            // IE8 Standards mode has problems retrieving the className unless set like this
	            this.element.className = value;
	        },
	        dashstyleSetter: function (value, key, element) {
	            var strokeElem = element.getElementsByTagName('stroke')[0] ||
	                createElement(this.renderer.prepVML(['<stroke/>']), null, null, element);
	            strokeElem[key] = value || 'solid';
	            this[key] = value; /* because changing stroke-width will change the dash length
	                and cause an epileptic effect */
	        },
	        dSetter: function (value, key, element) {
	            var i,
	                shadows = this.shadows;
	            value = value || [];
	            this.d = value.join && value.join(' '); // used in getter for animation
	
	            element.path = value = this.pathToVML(value);
	
	            // update shadows
	            if (shadows) {
	                i = shadows.length;
	                while (i--) {
	                    shadows[i].path = shadows[i].cutOff ? this.cutOffPath(value, shadows[i].cutOff) : value;
	                }
	            }
	            this.setAttr(key, value);
	        },
	        fillSetter: function (value, key, element) {
	            var nodeName = element.nodeName;
	            if (nodeName === 'SPAN') { // text color
	                element.style.color = value;
	            } else if (nodeName !== 'IMG') { // #1336
	                element.filled = value !== NONE;
	                this.setAttr('fillcolor', this.renderer.color(value, element, key, this));
	            }
	        },
	        'fill-opacitySetter': function (value, key, element) {
	            createElement(
	                this.renderer.prepVML(['<', key.split('-')[0], ' opacity="', value, '"/>']),
	                null,
	                null,
	                element
	            );
	        },
	        opacitySetter: noop, // Don't bother - animation is too slow and filters introduce artifacts
	        rotationSetter: function (value, key, element) {
	            var style = element.style;
	            this[key] = style[key] = value; // style is for #1873
	
	            // Correction for the 1x1 size of the shape container. Used in gauge needles.
	            style.left = -mathRound(mathSin(value * deg2rad) + 1) + PX;
	            style.top = mathRound(mathCos(value * deg2rad)) + PX;
	        },
	        strokeSetter: function (value, key, element) {
	            this.setAttr('strokecolor', this.renderer.color(value, element, key, this));
	        },
	        'stroke-widthSetter': function (value, key, element) {
	            element.stroked = !!value; // VML "stroked" attribute
	            this[key] = value; // used in getter, issue #113
	            if (isNumber(value)) {
	                value += PX;
	            }
	            this.setAttr('strokeweight', value);
	        },
	        titleSetter: function (value, key) {
	            this.setAttr(key, value);
	        },
	        visibilitySetter: function (value, key, element) {
	
	            // Handle inherited visibility
	            if (value === 'inherit') {
	                value = VISIBLE;
	            }
	
	            // Let the shadow follow the main element
	            if (this.shadows) {
	                each(this.shadows, function (shadow) {
	                    shadow.style[key] = value;
	                });
	            }
	
	            // Instead of toggling the visibility CSS property, move the div out of the viewport.
	            // This works around #61 and #586
	            if (element.nodeName === 'DIV') {
	                value = value === HIDDEN ? '-999em' : 0;
	
	                // In order to redraw, IE7 needs the div to be visible when tucked away
	                // outside the viewport. So the visibility is actually opposite of
	                // the expected value. This applies to the tooltip only.
	                if (!docMode8) {
	                    element.style[key] = value ? VISIBLE : HIDDEN;
	                }
	                key = 'top';
	            }
	            element.style[key] = value;
	        },
	        displaySetter: function (value, key, element) {
	            element.style[key] = value;
	        },
	        xSetter: function (value, key, element) {
	            this[key] = value; // used in getter
	
	            if (key === 'x') {
	                key = 'left';
	            } else if (key === 'y') {
	                key = 'top';
	            }/* else {
	                value = mathMax(0, value); // don't set width or height below zero (#311)
	            }*/
	
	            // clipping rectangle special
	            if (this.updateClipping) {
	                this[key] = value; // the key is now 'left' or 'top' for 'x' and 'y'
	                this.updateClipping();
	            } else {
	                // normal
	                element.style[key] = value;
	            }
	        },
	        zIndexSetter: function (value, key, element) {
	            element.style[key] = value;
	        }
	    };
	    VMLElement['stroke-opacitySetter'] = VMLElement['fill-opacitySetter'];
	
	    Highcharts.VMLElement = VMLElement = extendClass(SVGElement, VMLElement);
	
	    // Some shared setters
	    VMLElement.prototype.ySetter =
	        VMLElement.prototype.widthSetter =
	        VMLElement.prototype.heightSetter =
	        VMLElement.prototype.xSetter;
	
	
	    /**
	     * The VML renderer
	     */
	    var VMLRendererExtension = { // inherit SVGRenderer
	
	        Element: VMLElement,
	        isIE8: userAgent.indexOf('MSIE 8.0') > -1,
	
	
	        /**
	         * Initialize the VMLRenderer
	         * @param {Object} container
	         * @param {Number} width
	         * @param {Number} height
	         */
	        init: function (container, width, height, style) {
	            var renderer = this,
	                boxWrapper,
	                box,
	                css;
	
	            renderer.alignedObjects = [];
	
	            boxWrapper = renderer.createElement(DIV)
	                .css(extend(this.getStyle(style), { position: 'relative' }));
	            box = boxWrapper.element;
	            container.appendChild(boxWrapper.element);
	
	
	            // generate the containing box
	            renderer.isVML = true;
	            renderer.box = box;
	            renderer.boxWrapper = boxWrapper;
	            renderer.gradients = {};
	            renderer.cache = {}; // Cache for numerical bounding boxes
	            renderer.cacheKeys = [];
	            renderer.imgCount = 0;
	
	
	            renderer.setSize(width, height, false);
	
	            // The only way to make IE6 and IE7 print is to use a global namespace. However,
	            // with IE8 the only way to make the dynamic shapes visible in screen and print mode
	            // seems to be to add the xmlns attribute and the behaviour style inline.
	            if (!doc.namespaces.hcv) {
	
	                doc.namespaces.add('hcv', 'urn:schemas-microsoft-com:vml');
	
	                // Setup default CSS (#2153, #2368, #2384)
	                css = 'hcv\\:fill, hcv\\:path, hcv\\:shape, hcv\\:stroke' +
	                    '{ behavior:url(#default#VML); display: inline-block; } ';
	                try {
	                    doc.createStyleSheet().cssText = css;
	                } catch (e) {
	                    doc.styleSheets[0].cssText += css;
	                }
	
	            }
	        },
	
	
	        /**
	         * Detect whether the renderer is hidden. This happens when one of the parent elements
	         * has display: none
	         */
	        isHidden: function () {
	            return !this.box.offsetWidth;
	        },
	
	        /**
	         * Define a clipping rectangle. In VML it is accomplished by storing the values
	         * for setting the CSS style to all associated members.
	         *
	         * @param {Number} x
	         * @param {Number} y
	         * @param {Number} width
	         * @param {Number} height
	         */
	        clipRect: function (x, y, width, height) {
	
	            // create a dummy element
	            var clipRect = this.createElement(),
	                isObj = isObject(x);
	
	            // mimic a rectangle with its style object for automatic updating in attr
	            return extend(clipRect, {
	                members: [],
	                count: 0,
	                left: (isObj ? x.x : x) + 1,
	                top: (isObj ? x.y : y) + 1,
	                width: (isObj ? x.width : width) - 1,
	                height: (isObj ? x.height : height) - 1,
	                getCSS: function (wrapper) {
	                    var element = wrapper.element,
	                        nodeName = element.nodeName,
	                        isShape = nodeName === 'shape',
	                        inverted = wrapper.inverted,
	                        rect = this,
	                        top = rect.top - (isShape ? element.offsetTop : 0),
	                        left = rect.left,
	                        right = left + rect.width,
	                        bottom = top + rect.height,
	                        ret = {
	                            clip: 'rect(' +
	                                mathRound(inverted ? left : top) + 'px,' +
	                                mathRound(inverted ? bottom : right) + 'px,' +
	                                mathRound(inverted ? right : bottom) + 'px,' +
	                                mathRound(inverted ? top : left) + 'px)'
	                        };
	
	                    // issue 74 workaround
	                    if (!inverted && docMode8 && nodeName === 'DIV') {
	                        extend(ret, {
	                            width: right + PX,
	                            height: bottom + PX
	                        });
	                    }
	                    return ret;
	                },
	
	                // used in attr and animation to update the clipping of all members
	                updateClipping: function () {
	                    each(clipRect.members, function (member) {
	                        if (member.element) { // Deleted series, like in stock/members/series-remove demo. Should be removed from members, but this will do.
	                            member.css(clipRect.getCSS(member));
	                        }
	                    });
	                }
	            });
	
	        },
	
	
	        /**
	         * Take a color and return it if it's a string, make it a gradient if it's a
	         * gradient configuration object, and apply opacity.
	         *
	         * @param {Object} color The color or config object
	         */
	        color: function (color, elem, prop, wrapper) {
	            var renderer = this,
	                colorObject,
	                regexRgba = /^rgba/,
	                markup,
	                fillType,
	                ret = NONE;
	
	            // Check for linear or radial gradient
	            if (color && color.linearGradient) {
	                fillType = 'gradient';
	            } else if (color && color.radialGradient) {
	                fillType = 'pattern';
	            }
	
	
	            if (fillType) {
	
	                var stopColor,
	                    stopOpacity,
	                    gradient = color.linearGradient || color.radialGradient,
	                    x1,
	                    y1,
	                    x2,
	                    y2,
	                    opacity1,
	                    opacity2,
	                    color1,
	                    color2,
	                    fillAttr = '',
	                    stops = color.stops,
	                    firstStop,
	                    lastStop,
	                    colors = [],
	                    addFillNode = function () {
	                        // Add the fill subnode. When colors attribute is used, the meanings of opacity and o:opacity2
	                        // are reversed.
	                        markup = ['<fill colors="' + colors.join(',') + '" opacity="', opacity2, '" o:opacity2="', opacity1,
	                            '" type="', fillType, '" ', fillAttr, 'focus="100%" method="any" />'];
	                        createElement(renderer.prepVML(markup), null, null, elem);
	                    };
	
	                // Extend from 0 to 1
	                firstStop = stops[0];
	                lastStop = stops[stops.length - 1];
	                if (firstStop[0] > 0) {
	                    stops.unshift([
	                        0,
	                        firstStop[1]
	                    ]);
	                }
	                if (lastStop[0] < 1) {
	                    stops.push([
	                        1,
	                        lastStop[1]
	                    ]);
	                }
	
	                // Compute the stops
	                each(stops, function (stop, i) {
	                    if (regexRgba.test(stop[1])) {
	                        colorObject = Color(stop[1]);
	                        stopColor = colorObject.get('rgb');
	                        stopOpacity = colorObject.get('a');
	                    } else {
	                        stopColor = stop[1];
	                        stopOpacity = 1;
	                    }
	
	                    // Build the color attribute
	                    colors.push((stop[0] * 100) + '% ' + stopColor);
	
	                    // Only start and end opacities are allowed, so we use the first and the last
	                    if (!i) {
	                        opacity1 = stopOpacity;
	                        color2 = stopColor;
	                    } else {
	                        opacity2 = stopOpacity;
	                        color1 = stopColor;
	                    }
	                });
	
	                // Apply the gradient to fills only.
	                if (prop === 'fill') {
	
	                    // Handle linear gradient angle
	                    if (fillType === 'gradient') {
	                        x1 = gradient.x1 || gradient[0] || 0;
	                        y1 = gradient.y1 || gradient[1] || 0;
	                        x2 = gradient.x2 || gradient[2] || 0;
	                        y2 = gradient.y2 || gradient[3] || 0;
	                        fillAttr = 'angle="' + (90  - math.atan(
	                            (y2 - y1) / // y vector
	                            (x2 - x1) // x vector
	                            ) * 180 / mathPI) + '"';
	
	                        addFillNode();
	
	                    // Radial (circular) gradient
	                    } else {
	
	                        var r = gradient.r,
	                            sizex = r * 2,
	                            sizey = r * 2,
	                            cx = gradient.cx,
	                            cy = gradient.cy,
	                            radialReference = elem.radialReference,
	                            bBox,
	                            applyRadialGradient = function () {
	                                if (radialReference) {
	                                    bBox = wrapper.getBBox();
	                                    cx += (radialReference[0] - bBox.x) / bBox.width - 0.5;
	                                    cy += (radialReference[1] - bBox.y) / bBox.height - 0.5;
	                                    sizex *= radialReference[2] / bBox.width;
	                                    sizey *= radialReference[2] / bBox.height;
	                                }
	                                fillAttr = 'src="' + defaultOptions.global.VMLRadialGradientURL + '" ' +
	                                    'size="' + sizex + ',' + sizey + '" ' +
	                                    'origin="0.5,0.5" ' +
	                                    'position="' + cx + ',' + cy + '" ' +
	                                    'color2="' + color2 + '" ';
	
	                                addFillNode();
	                            };
	
	                        // Apply radial gradient
	                        if (wrapper.added) {
	                            applyRadialGradient();
	                        } else {
	                            // We need to know the bounding box to get the size and position right
	                            wrapper.onAdd = applyRadialGradient;
	                        }
	
	                        // The fill element's color attribute is broken in IE8 standards mode, so we
	                        // need to set the parent shape's fillcolor attribute instead.
	                        ret = color1;
	                    }
	
	                // Gradients are not supported for VML stroke, return the first color. #722.
	                } else {
	                    ret = stopColor;
	                }
	
	            // If the color is an rgba color, split it and add a fill node
	            // to hold the opacity component
	            } else if (regexRgba.test(color) && elem.tagName !== 'IMG') {
	
	                colorObject = Color(color);
	
	                wrapper[prop + '-opacitySetter'](colorObject.get('a'), prop, elem);
	
	                ret = colorObject.get('rgb');
	
	
	            } else {
	                var propNodes = elem.getElementsByTagName(prop); // 'stroke' or 'fill' node
	                if (propNodes.length) {
	                    propNodes[0].opacity = 1;
	                    propNodes[0].type = 'solid';
	                }
	                ret = color;
	            }
	
	            return ret;
	        },
	
	        /**
	         * Take a VML string and prepare it for either IE8 or IE6/IE7.
	         * @param {Array} markup A string array of the VML markup to prepare
	         */
	        prepVML: function (markup) {
	            var vmlStyle = 'display:inline-block;behavior:url(#default#VML);',
	                isIE8 = this.isIE8;
	
	            markup = markup.join('');
	
	            if (isIE8) { // add xmlns and style inline
	                markup = markup.replace('/>', ' xmlns="urn:schemas-microsoft-com:vml" />');
	                if (markup.indexOf('style="') === -1) {
	                    markup = markup.replace('/>', ' style="' + vmlStyle + '" />');
	                } else {
	                    markup = markup.replace('style="', 'style="' + vmlStyle);
	                }
	
	            } else { // add namespace
	                markup = markup.replace('<', '<hcv:');
	            }
	
	            return markup;
	        },
	
	        /**
	         * Create rotated and aligned text
	         * @param {String} str
	         * @param {Number} x
	         * @param {Number} y
	         */
	        text: SVGRenderer.prototype.html,
	
	        /**
	         * Create and return a path element
	         * @param {Array} path
	         */
	        path: function (path) {
	            var attr = {
	                // subpixel precision down to 0.1 (width and height = 1px)
	                coordsize: '10 10'
	            };
	            if (isArray(path)) {
	                attr.d = path;
	            } else if (isObject(path)) { // attributes
	                extend(attr, path);
	            }
	            // create the shape
	            return this.createElement('shape').attr(attr);
	        },
	
	        /**
	         * Create and return a circle element. In VML circles are implemented as
	         * shapes, which is faster than v:oval
	         * @param {Number} x
	         * @param {Number} y
	         * @param {Number} r
	         */
	        circle: function (x, y, r) {
	            var circle = this.symbol('circle');
	            if (isObject(x)) {
	                r = x.r;
	                y = x.y;
	                x = x.x;
	            }
	            circle.isCircle = true; // Causes x and y to mean center (#1682)
	            circle.r = r;
	            return circle.attr({ x: x, y: y });
	        },
	
	        /**
	         * Create a group using an outer div and an inner v:group to allow rotating
	         * and flipping. A simple v:group would have problems with positioning
	         * child HTML elements and CSS clip.
	         *
	         * @param {String} name The name of the group
	         */
	        g: function (name) {
	            var wrapper,
	                attribs;
	
	            // set the class name
	            if (name) {
	                attribs = { 'className': PREFIX + name, 'class': PREFIX + name };
	            }
	
	            // the div to hold HTML and clipping
	            wrapper = this.createElement(DIV).attr(attribs);
	
	            return wrapper;
	        },
	
	        /**
	         * VML override to create a regular HTML image
	         * @param {String} src
	         * @param {Number} x
	         * @param {Number} y
	         * @param {Number} width
	         * @param {Number} height
	         */
	        image: function (src, x, y, width, height) {
	            var obj = this.createElement('img')
	                .attr({ src: src });
	
	            if (arguments.length > 1) {
	                obj.attr({
	                    x: x,
	                    y: y,
	                    width: width,
	                    height: height
	                });
	            }
	            return obj;
	        },
	
	        /**
	         * For rectangles, VML uses a shape for rect to overcome bugs and rotation problems
	         */
	        createElement: function (nodeName) {
	            return nodeName === 'rect' ? this.symbol(nodeName) : SVGRenderer.prototype.createElement.call(this, nodeName);
	        },
	
	        /**
	         * In the VML renderer, each child of an inverted div (group) is inverted
	         * @param {Object} element
	         * @param {Object} parentNode
	         */
	        invertChild: function (element, parentNode) {
	            var ren = this,
	                parentStyle = parentNode.style,
	                imgStyle = element.tagName === 'IMG' && element.style; // #1111
	
	            css(element, {
	                flip: 'x',
	                left: pInt(parentStyle.width) - (imgStyle ? pInt(imgStyle.top) : 1),
	                top: pInt(parentStyle.height) - (imgStyle ? pInt(imgStyle.left) : 1),
	                rotation: -90
	            });
	
	            // Recursively invert child elements, needed for nested composite shapes like box plots and error bars. #1680, #1806.
	            each(element.childNodes, function (child) {
	                ren.invertChild(child, element);
	            });
	        },
	
	        /**
	         * Symbol definitions that override the parent SVG renderer's symbols
	         *
	         */
	        symbols: {
	            // VML specific arc function
	            arc: function (x, y, w, h, options) {
	                var start = options.start,
	                    end = options.end,
	                    radius = options.r || w || h,
	                    innerRadius = options.innerR,
	                    cosStart = mathCos(start),
	                    sinStart = mathSin(start),
	                    cosEnd = mathCos(end),
	                    sinEnd = mathSin(end),
	                    ret;
	
	                if (end - start === 0) { // no angle, don't show it.
	                    return ['x'];
	                }
	
	                ret = [
	                    'wa', // clockwise arc to
	                    x - radius, // left
	                    y - radius, // top
	                    x + radius, // right
	                    y + radius, // bottom
	                    x + radius * cosStart, // start x
	                    y + radius * sinStart, // start y
	                    x + radius * cosEnd, // end x
	                    y + radius * sinEnd  // end y
	                ];
	
	                if (options.open && !innerRadius) {
	                    ret.push(
	                        'e',
	                        M,
	                        x, // - innerRadius,
	                        y// - innerRadius
	                    );
	                }
	
	                ret.push(
	                    'at', // anti clockwise arc to
	                    x - innerRadius, // left
	                    y - innerRadius, // top
	                    x + innerRadius, // right
	                    y + innerRadius, // bottom
	                    x + innerRadius * cosEnd, // start x
	                    y + innerRadius * sinEnd, // start y
	                    x + innerRadius * cosStart, // end x
	                    y + innerRadius * sinStart, // end y
	                    'x', // finish path
	                    'e' // close
	                );
	
	                ret.isArc = true;
	                return ret;
	
	            },
	            // Add circle symbol path. This performs significantly faster than v:oval.
	            circle: function (x, y, w, h, wrapper) {
	
	                if (wrapper) {
	                    w = h = 2 * wrapper.r;
	                }
	
	                // Center correction, #1682
	                if (wrapper && wrapper.isCircle) {
	                    x -= w / 2;
	                    y -= h / 2;
	                }
	
	                // Return the path
	                return [
	                    'wa', // clockwisearcto
	                    x, // left
	                    y, // top
	                    x + w, // right
	                    y + h, // bottom
	                    x + w, // start x
	                    y + h / 2,     // start y
	                    x + w, // end x
	                    y + h / 2,     // end y
	                    //'x', // finish path
	                    'e' // close
	                ];
	            },
	            /**
	             * Add rectangle symbol path which eases rotation and omits arcsize problems
	             * compared to the built-in VML roundrect shape. When borders are not rounded,
	             * use the simpler square path, else use the callout path without the arrow.
	             */
	            rect: function (x, y, w, h, options) {
	                return SVGRenderer.prototype.symbols[
	                    !defined(options) || !options.r ? 'square' : 'callout'
	                ].call(0, x, y, w, h, options);
	            }
	        }
	    };
	    Highcharts.VMLRenderer = VMLRenderer = function () {
	        this.init.apply(this, arguments);
	    };
	    VMLRenderer.prototype = merge(SVGRenderer.prototype, VMLRendererExtension);
	
	        // general renderer
	        Renderer = VMLRenderer;
	    }
	
	    // This method is used with exporting in old IE, when emulating SVG (see #2314)
	    SVGRenderer.prototype.measureSpanWidth = function (text, styles) {
	        var measuringSpan = doc.createElement('span'),
	            offsetWidth,
	            textNode = doc.createTextNode(text);
	
	        measuringSpan.appendChild(textNode);
	        css(measuringSpan, styles);
	        this.box.appendChild(measuringSpan);
	        offsetWidth = measuringSpan.offsetWidth;
	        discardElement(measuringSpan); // #2463
	        return offsetWidth;
	    };
	
	
	    /* ****************************************************************************
	     *                                                                            *
	     * END OF INTERNET EXPLORER <= 8 SPECIFIC CODE                                *
	     *                                                                            *
	     *****************************************************************************/
	    /* ****************************************************************************
	     *                                                                            *
	     * START OF ANDROID < 3 SPECIFIC CODE. THIS CAN BE REMOVED IF YOU'RE NOT      *
	     * TARGETING THAT SYSTEM.                                                     *
	     *                                                                            *
	     *****************************************************************************/
	    var CanVGRenderer,
	        CanVGController;
	
	    /**
	     * Downloads a script and executes a callback when done.
	     * @param {String} scriptLocation
	     * @param {Function} callback
	     */
	    function getScript(scriptLocation, callback) {
	        var head = doc.getElementsByTagName('head')[0],
	            script = doc.createElement('script');
	
	        script.type = 'text/javascript';
	        script.src = scriptLocation;
	        script.onload = callback;
	
	        head.appendChild(script);
	    }
	
	    if (useCanVG) {
	        /**
	         * The CanVGRenderer is empty from start to keep the source footprint small.
	         * When requested, the CanVGController downloads the rest of the source packaged
	         * together with the canvg library.
	         */
	        Highcharts.CanVGRenderer = CanVGRenderer = function () {
	            // Override the global SVG namespace to fake SVG/HTML that accepts CSS
	            SVG_NS = 'http://www.w3.org/1999/xhtml';
	        };
	
	        /**
	         * Start with an empty symbols object. This is needed when exporting is used (exporting.src.js will add a few symbols), but
	         * the implementation from SvgRenderer will not be merged in until first render.
	         */
	        CanVGRenderer.prototype.symbols = {};
	
	        /**
	         * Handles on demand download of canvg rendering support.
	         */
	        CanVGController = (function () {
	            // List of renderering calls
	            var deferredRenderCalls = [];
	
	            /**
	             * When downloaded, we are ready to draw deferred charts.
	             */
	            function drawDeferred() {
	                var callLength = deferredRenderCalls.length,
	                    callIndex;
	
	                // Draw all pending render calls
	                for (callIndex = 0; callIndex < callLength; callIndex++) {
	                    deferredRenderCalls[callIndex]();
	                }
	                // Clear the list
	                deferredRenderCalls = [];
	            }
	
	            return {
	                push: function (func, scriptLocation) {
	                    // Only get the script once
	                    if (deferredRenderCalls.length === 0) {
	                        getScript(scriptLocation, drawDeferred);
	                    }
	                    // Register render call
	                    deferredRenderCalls.push(func);
	                }
	            };
	        }());
	
	        Renderer = CanVGRenderer;
	    } // end CanVGRenderer
	
	    /* ****************************************************************************
	     *                                                                            *
	     * END OF ANDROID < 3 SPECIFIC CODE                                           *
	     *                                                                            *
	     *****************************************************************************/
	
	    /**
	     * The Tick class
	     */
	    function Tick(axis, pos, type, noLabel) {
	        this.axis = axis;
	        this.pos = pos;
	        this.type = type || '';
	        this.isNew = true;
	
	        if (!type && !noLabel) {
	            this.addLabel();
	        }
	    }
	
	    Tick.prototype = {
	        /**
	         * Write the tick label
	         */
	        addLabel: function () {
	            var tick = this,
	                axis = tick.axis,
	                options = axis.options,
	                chart = axis.chart,
	                categories = axis.categories,
	                names = axis.names,
	                pos = tick.pos,
	                labelOptions = options.labels,
	                str,
	                tickPositions = axis.tickPositions,
	                isFirst = pos === tickPositions[0],
	                isLast = pos === tickPositions[tickPositions.length - 1],
	                value = categories ?
	                    pick(categories[pos], names[pos], pos) :
	                    pos,
	                label = tick.label,
	                tickPositionInfo = tickPositions.info,
	                dateTimeLabelFormat;
	
	            // Set the datetime label format. If a higher rank is set for this position, use that. If not,
	            // use the general format.
	            if (axis.isDatetimeAxis && tickPositionInfo) {
	                dateTimeLabelFormat = options.dateTimeLabelFormats[tickPositionInfo.higherRanks[pos] || tickPositionInfo.unitName];
	            }
	            // set properties for access in render method
	            tick.isFirst = isFirst;
	            tick.isLast = isLast;
	
	            // get the string
	            str = axis.labelFormatter.call({
	                axis: axis,
	                chart: chart,
	                isFirst: isFirst,
	                isLast: isLast,
	                dateTimeLabelFormat: dateTimeLabelFormat,
	                value: axis.isLog ? correctFloat(axis.lin2log(value)) : value
	            });
	
	            // prepare CSS
	            //css = width && { width: mathMax(1, mathRound(width - 2 * (labelOptions.padding || 10))) + PX };
	
	            // first call
	            if (!defined(label)) {
	
	                tick.label = label =
	                    defined(str) && labelOptions.enabled ?
	                        chart.renderer.text(
	                                str,
	                                0,
	                                0,
	                                labelOptions.useHTML
	                            )
	                            //.attr(attr)
	                            // without position absolute, IE export sometimes is wrong
	                            .css(merge(labelOptions.style))
	                            .add(axis.labelGroup) :
	                        null;
	                tick.labelLength = label && label.getBBox().width; // Un-rotated length
	                tick.rotation = 0; // Base value to detect change for new calls to getBBox
	
	            // update
	            } else if (label) {
	                label.attr({ text: str });
	            }
	        },
	
	        /**
	         * Get the offset height or width of the label
	         */
	        getLabelSize: function () {
	            return this.label ?
	                this.label.getBBox()[this.axis.horiz ? 'height' : 'width'] :
	                0;
	        },
	
	        /**
	         * Handle the label overflow by adjusting the labels to the left and right edge, or
	         * hide them if they collide into the neighbour label.
	         */
	        handleOverflow: function (xy) {
	            var axis = this.axis,
	                pxPos = xy.x,
	                chartWidth = axis.chart.chartWidth,
	                spacing = axis.chart.spacing,
	                leftBound = pick(axis.labelLeft, mathMin(axis.pos, spacing[3])),
	                rightBound = pick(axis.labelRight, mathMax(axis.pos + axis.len, chartWidth - spacing[1])),
	                label = this.label,
	                rotation = this.rotation,
	                factor = { left: 0, center: 0.5, right: 1 }[axis.labelAlign],
	                labelWidth = label.getBBox().width,
	                slotWidth = axis.getSlotWidth(),
	                modifiedSlotWidth = slotWidth,
	                xCorrection = factor,
	                goRight = 1,
	                leftPos,
	                rightPos,
	                textWidth,
	                css = {};
	
	            // Check if the label overshoots the chart spacing box. If it does, move it.
	            // If it now overshoots the slotWidth, add ellipsis.
	            if (!rotation) {
	                leftPos = pxPos - factor * labelWidth;
	                rightPos = pxPos + (1 - factor) * labelWidth;
	
	                if (leftPos < leftBound) {
	                    modifiedSlotWidth = xy.x + modifiedSlotWidth * (1 - factor) - leftBound;
	                } else if (rightPos > rightBound) {
	                    modifiedSlotWidth = rightBound - xy.x + modifiedSlotWidth * factor;
	                    goRight = -1;
	                }
	
	                modifiedSlotWidth = mathMin(slotWidth, modifiedSlotWidth); // #4177
	                if (modifiedSlotWidth < slotWidth && axis.labelAlign === 'center') {
	                    xy.x += goRight * (slotWidth - modifiedSlotWidth - xCorrection * (slotWidth - mathMin(labelWidth, modifiedSlotWidth)));
	                }
	                // If the label width exceeds the available space, set a text width to be
	                // picked up below. Also, if a width has been set before, we need to set a new
	                // one because the reported labelWidth will be limited by the box (#3938).
	                if (labelWidth > modifiedSlotWidth || (axis.autoRotation && label.styles.width)) {
	                    textWidth = modifiedSlotWidth;
	                }
	
	            // Add ellipsis to prevent rotated labels to be clipped against the edge of the chart
	            } else if (rotation < 0 && pxPos - factor * labelWidth < leftBound) {
	                textWidth = mathRound(pxPos / mathCos(rotation * deg2rad) - leftBound);
	            } else if (rotation > 0 && pxPos + factor * labelWidth > rightBound) {
	                textWidth = mathRound((chartWidth - pxPos) / mathCos(rotation * deg2rad));
	            }
	
	            if (textWidth) {
	                css.width = textWidth;
	                if (!axis.options.labels.style.textOverflow) {
	                    css.textOverflow = 'ellipsis';
	                }
	                label.css(css);
	            }
	        },
	
	        /**
	         * Get the x and y position for ticks and labels
	         */
	        getPosition: function (horiz, pos, tickmarkOffset, old) {
	            var axis = this.axis,
	                chart = axis.chart,
	                cHeight = (old && chart.oldChartHeight) || chart.chartHeight;
	
	            return {
	                x: horiz ?
	                    axis.translate(pos + tickmarkOffset, null, null, old) + axis.transB :
	                    axis.left + axis.offset + (axis.opposite ? ((old && chart.oldChartWidth) || chart.chartWidth) - axis.right - axis.left : 0),
	
	                y: horiz ?
	                    cHeight - axis.bottom + axis.offset - (axis.opposite ? axis.height : 0) :
	                    cHeight - axis.translate(pos + tickmarkOffset, null, null, old) - axis.transB
	            };
	
	        },
	
	        /**
	         * Get the x, y position of the tick label
	         */
	        getLabelPosition: function (x, y, label, horiz, labelOptions, tickmarkOffset, index, step) {
	            var axis = this.axis,
	                transA = axis.transA,
	                reversed = axis.reversed,
	                staggerLines = axis.staggerLines,
	                rotCorr = axis.tickRotCorr || { x: 0, y: 0 },
	                yOffset = labelOptions.y,
	                line;
	
	            if (!defined(yOffset)) {
	                if (axis.side === 0) {
	                    yOffset = label.rotation ? -8 : -label.getBBox().height;
	                } else if (axis.side === 2) {
	                    yOffset = rotCorr.y + 8;
	                } else {
	                    // #3140, #3140
	                    yOffset = mathCos(label.rotation * deg2rad) * (rotCorr.y - label.getBBox(false, 0).height / 2);
	                }
	            }
	
	            x = x + labelOptions.x + rotCorr.x - (tickmarkOffset && horiz ?
	                tickmarkOffset * transA * (reversed ? -1 : 1) : 0);
	            y = y + yOffset - (tickmarkOffset && !horiz ?
	                tickmarkOffset * transA * (reversed ? 1 : -1) : 0);
	
	            // Correct for staggered labels
	            if (staggerLines) {
	                line = (index / (step || 1) % staggerLines);
	                if (axis.opposite) {
	                    line = staggerLines - line - 1;
	                }
	                y += line * (axis.labelOffset / staggerLines);
	            }
	
	            return {
	                x: x,
	                y: mathRound(y)
	            };
	        },
	
	        /**
	         * Extendible method to return the path of the marker
	         */
	        getMarkPath: function (x, y, tickLength, tickWidth, horiz, renderer) {
	            return renderer.crispLine([
	                M,
	                x,
	                y,
	                L,
	                x + (horiz ? 0 : -tickLength),
	                y + (horiz ? tickLength : 0)
	            ], tickWidth);
	        },
	
	        /**
	         * Put everything in place
	         *
	         * @param index {Number}
	         * @param old {Boolean} Use old coordinates to prepare an animation into new position
	         */
	        render: function (index, old, opacity) {
	            var tick = this,
	                axis = tick.axis,
	                options = axis.options,
	                chart = axis.chart,
	                renderer = chart.renderer,
	                horiz = axis.horiz,
	                type = tick.type,
	                label = tick.label,
	                pos = tick.pos,
	                labelOptions = options.labels,
	                gridLine = tick.gridLine,
	                gridPrefix = type ? type + 'Grid' : 'grid',
	                tickPrefix = type ? type + 'Tick' : 'tick',
	                gridLineWidth = options[gridPrefix + 'LineWidth'],
	                gridLineColor = options[gridPrefix + 'LineColor'],
	                dashStyle = options[gridPrefix + 'LineDashStyle'],
	                tickSize = axis.tickSize(tickPrefix),
	                tickColor = options[tickPrefix + 'Color'],
	                gridLinePath,
	                mark = tick.mark,
	                markPath,
	                step = /*axis.labelStep || */labelOptions.step,
	                attribs,
	                show = true,
	                tickmarkOffset = axis.tickmarkOffset,
	                xy = tick.getPosition(horiz, pos, tickmarkOffset, old),
	                x = xy.x,
	                y = xy.y,
	                reverseCrisp = ((horiz && x === axis.pos + axis.len) || (!horiz && y === axis.pos)) ? -1 : 1; // #1480, #1687
	
	            opacity = pick(opacity, 1);
	            this.isActive = true;
	
	            // create the grid line
	            if (gridLineWidth) {
	                gridLinePath = axis.getPlotLinePath(pos + tickmarkOffset, gridLineWidth * reverseCrisp, old, true);
	
	                if (gridLine === UNDEFINED) {
	                    attribs = {
	                        stroke: gridLineColor,
	                        'stroke-width': gridLineWidth
	                    };
	                    if (dashStyle) {
	                        attribs.dashstyle = dashStyle;
	                    }
	                    if (!type) {
	                        attribs.zIndex = 1;
	                    }
	                    if (old) {
	                        attribs.opacity = 0;
	                    }
	                    tick.gridLine = gridLine =
	                        gridLineWidth ?
	                            renderer.path(gridLinePath)
	                                .attr(attribs).add(axis.gridGroup) :
	                            null;
	                }
	
	                // If the parameter 'old' is set, the current call will be followed
	                // by another call, therefore do not do any animations this time
	                if (!old && gridLine && gridLinePath) {
	                    gridLine[tick.isNew ? 'attr' : 'animate']({
	                        d: gridLinePath,
	                        opacity: opacity
	                    });
	                }
	            }
	
	            // create the tick mark
	            if (tickSize) {
	                if (axis.opposite) {
	                    tickSize[0] = -tickSize[0];
	                }
	                markPath = tick.getMarkPath(x, y, tickSize[0], tickSize[1] * reverseCrisp, horiz, renderer);
	                if (mark) { // updating
	                    mark.animate({
	                        d: markPath,
	                        opacity: opacity
	                    });
	                } else { // first time
	                    tick.mark = renderer.path(
	                        markPath
	                    ).attr({
	                        stroke: tickColor,
	                        'stroke-width': tickSize[1],
	                        opacity: opacity
	                    }).add(axis.axisGroup);
	                }
	            }
	
	            // the label is created on init - now move it into place
	            if (label && isNumber(x)) {
	                label.xy = xy = tick.getLabelPosition(x, y, label, horiz, labelOptions, tickmarkOffset, index, step);
	
	                // Apply show first and show last. If the tick is both first and last, it is
	                // a single centered tick, in which case we show the label anyway (#2100).
	                if ((tick.isFirst && !tick.isLast && !pick(options.showFirstLabel, 1)) ||
	                        (tick.isLast && !tick.isFirst && !pick(options.showLastLabel, 1))) {
	                    show = false;
	
	                // Handle label overflow and show or hide accordingly
	                } else if (horiz && !axis.isRadial && !labelOptions.step && !labelOptions.rotation && !old && opacity !== 0) {
	                    tick.handleOverflow(xy);
	                }
	
	                // apply step
	                if (step && index % step) {
	                    // show those indices dividable by step
	                    show = false;
	                }
	
	                // Set the new position, and show or hide
	                if (show && isNumber(xy.y)) {
	                    xy.opacity = opacity;
	                    label[tick.isNew ? 'attr' : 'animate'](xy);
	                } else {
	                    stop(label); // #5332
	                    label.attr('y', -9999); // #1338
	                }
	                tick.isNew = false;
	            }
	        },
	
	        /**
	         * Destructor for the tick prototype
	         */
	        destroy: function () {
	            destroyObjectProperties(this, this.axis);
	        }
	    };
	
	    /**
	     * The object wrapper for plot lines and plot bands
	     * @param {Object} options
	     */
	    Highcharts.PlotLineOrBand = function (axis, options) {
	        this.axis = axis;
	
	        if (options) {
	            this.options = options;
	            this.id = options.id;
	        }
	    };
	
	    Highcharts.PlotLineOrBand.prototype = {
	
	        /**
	         * Render the plot line or plot band. If it is already existing,
	         * move it.
	         */
	        render: function () {
	            var plotLine = this,
	                axis = plotLine.axis,
	                horiz = axis.horiz,
	                options = plotLine.options,
	                optionsLabel = options.label,
	                label = plotLine.label,
	                width = options.width,
	                to = options.to,
	                from = options.from,
	                isBand = defined(from) && defined(to),
	                value = options.value,
	                dashStyle = options.dashStyle,
	                svgElem = plotLine.svgElem,
	                path = [],
	                addEvent,
	                eventType,
	                color = options.color,
	                zIndex = pick(options.zIndex, 0),
	                events = options.events,
	                attribs = {},
	                renderer = axis.chart.renderer,
	                log2lin = axis.log2lin;
	
	            // logarithmic conversion
	            if (axis.isLog) {
	                from = log2lin(from);
	                to = log2lin(to);
	                value = log2lin(value);
	            }
	
	            // plot line
	            if (width) {
	                path = axis.getPlotLinePath(value, width);
	                attribs = {
	                    stroke: color,
	                    'stroke-width': width
	                };
	                if (dashStyle) {
	                    attribs.dashstyle = dashStyle;
	                }
	            } else if (isBand) { // plot band
	
	                path = axis.getPlotBandPath(from, to, options);
	                if (color) {
	                    attribs.fill = color;
	                }
	                if (options.borderWidth) {
	                    attribs.stroke = options.borderColor;
	                    attribs['stroke-width'] = options.borderWidth;
	                }
	            } else {
	                return;
	            }
	            // zIndex
	            attribs.zIndex = zIndex;
	
	            // common for lines and bands
	            if (svgElem) {
	                if (path) {
	                    svgElem.show();
	                    svgElem.animate({ d: path });
	                } else {
	                    svgElem.hide();
	                    if (label) {
	                        plotLine.label = label = label.destroy();
	                    }
	                }
	            } else if (path && path.length) {
	                plotLine.svgElem = svgElem = renderer.path(path)
	                    .attr(attribs).add();
	
	                // events
	                if (events) {
	                    addEvent = function (eventType) {
	                        svgElem.on(eventType, function (e) {
	                            events[eventType].apply(plotLine, [e]);
	                        });
	                    };
	                    for (eventType in events) {
	                        addEvent(eventType);
	                    }
	                }
	            }
	
	            // the plot band/line label
	            if (optionsLabel && defined(optionsLabel.text) && path && path.length && 
	                    axis.width > 0 && axis.height > 0 && !path.flat) {
	                // apply defaults
	                optionsLabel = merge({
	                    align: horiz && isBand && 'center',
	                    x: horiz ? !isBand && 4 : 10,
	                    verticalAlign: !horiz && isBand && 'middle',
	                    y: horiz ? isBand ? 16 : 10 : isBand ? 6 : -4,
	                    rotation: horiz && !isBand && 90
	                }, optionsLabel);
	
	                this.renderLabel(optionsLabel, path, isBand, zIndex);
	
	            } else if (label) { // move out of sight
	                label.hide();
	            }
	
	            // chainable
	            return plotLine;
	        },
	
	        /**
	         * Render and align label for plot line or band.
	         */
	        renderLabel: function (optionsLabel, path, isBand, zIndex) {
	            var plotLine = this,
	                label = plotLine.label,
	                renderer = plotLine.axis.chart.renderer,
	                attribs,
	                xs,
	                ys,
	                x,
	                y;
	
	            // add the SVG element
	            if (!label) {
	                attribs = {
	                    align: optionsLabel.textAlign || optionsLabel.align,
	                    rotation: optionsLabel.rotation
	                };
	            
	                attribs.zIndex = zIndex;
	            
	                plotLine.label = label = renderer.text(
	                        optionsLabel.text,
	                        0,
	                        0,
	                        optionsLabel.useHTML
	                    )
	                    .attr(attribs)
	                    .css(optionsLabel.style)
	                    .add();
	            }
	
	            // get the bounding box and align the label
	            // #3000 changed to better handle choice between plotband or plotline
	            xs = [path[1], path[4], (isBand ? path[6] : path[1])];
	            ys = [path[2], path[5], (isBand ? path[7] : path[2])];
	            x = arrayMin(xs);
	            y = arrayMin(ys);
	
	            label.align(optionsLabel, false, {
	                x: x,
	                y: y,
	                width: arrayMax(xs) - x,
	                height: arrayMax(ys) - y
	            });
	            label.show();
	        },
	
	        /**
	         * Remove the plot line or band
	         */
	        destroy: function () {
	            // remove it from the lookup
	            erase(this.axis.plotLinesAndBands, this);
	
	            delete this.axis;
	            destroyObjectProperties(this);
	        }
	    };
	
	    /**
	     * Object with members for extending the Axis prototype
	     */
	
	    AxisPlotLineOrBandExtension = {
	
	        /**
	         * Create the path for a plot band
	         */
	        getPlotBandPath: function (from, to) {
	            var toPath = this.getPlotLinePath(to, null, null, true),
	                path = this.getPlotLinePath(from, null, null, true);
	
	            if (path && toPath) {
	
	                // Flat paths don't need labels (#3836)
	                path.flat = path.toString() === toPath.toString();
	
	                path.push(
	                    toPath[4],
	                    toPath[5],
	                    toPath[1],
	                    toPath[2]
	                );
	            } else { // outside the axis area
	                path = null;
	            }
	
	            return path;
	        },
	
	        addPlotBand: function (options) {
	            return this.addPlotBandOrLine(options, 'plotBands');
	        },
	
	        addPlotLine: function (options) {
	            return this.addPlotBandOrLine(options, 'plotLines');
	        },
	
	        /**
	         * Add a plot band or plot line after render time
	         *
	         * @param options {Object} The plotBand or plotLine configuration object
	         */
	        addPlotBandOrLine: function (options, coll) {
	            var obj = new Highcharts.PlotLineOrBand(this, options).render(),
	                userOptions = this.userOptions;
	
	            if (obj) { // #2189
	                // Add it to the user options for exporting and Axis.update
	                if (coll) {
	                    userOptions[coll] = userOptions[coll] || [];
	                    userOptions[coll].push(options);
	                }
	                this.plotLinesAndBands.push(obj);
	            }
	
	            return obj;
	        },
	
	        /**
	         * Remove a plot band or plot line from the chart by id
	         * @param {Object} id
	         */
	        removePlotBandOrLine: function (id) {
	            var plotLinesAndBands = this.plotLinesAndBands,
	                options = this.options,
	                userOptions = this.userOptions,
	                i = plotLinesAndBands.length;
	            while (i--) {
	                if (plotLinesAndBands[i].id === id) {
	                    plotLinesAndBands[i].destroy();
	                }
	            }
	            each([options.plotLines || [], userOptions.plotLines || [], options.plotBands || [], userOptions.plotBands || []], function (arr) {
	                i = arr.length;
	                while (i--) {
	                    if (arr[i].id === id) {
	                        erase(arr, arr[i]);
	                    }
	                }
	            });
	        }
	    };
	
	    /**
	     * Create a new axis object
	     * @param {Object} chart
	     * @param {Object} options
	     */
	    var Axis = Highcharts.Axis = function () {
	        this.init.apply(this, arguments);
	    };
	
	    Axis.prototype = {
	
	        /**
	         * Default options for the X axis - the Y axis has extended defaults
	         */
	        defaultOptions: {
	            // allowDecimals: null,
	            // alternateGridColor: null,
	            // categories: [],
	            dateTimeLabelFormats: {
	                millisecond: '%H:%M:%S.%L',
	                second: '%H:%M:%S',
	                minute: '%H:%M',
	                hour: '%H:%M',
	                day: '%e. %b',
	                week: '%e. %b',
	                month: '%b \'%y',
	                year: '%Y'
	            },
	            endOnTick: false,
	            gridLineColor: '#D8D8D8',
	            // gridLineDashStyle: 'solid',
	            // gridLineWidth: 0,
	            // reversed: false,
	
	            labels: {
	                enabled: true,
	                // rotation: 0,
	                // align: 'center',
	                // step: null,
	                style: {
	                    color: '#606060',
	                    cursor: 'default',
	                    fontSize: '11px'
	                },
	                x: 0
	                //y: undefined
	                /*formatter: function () {
	                    return this.value;
	                },*/
	            },
	            lineColor: '#C0D0E0',
	            lineWidth: 1,
	            //linkedTo: null,
	            //max: undefined,
	            //min: undefined,
	            minPadding: 0.01,
	            maxPadding: 0.01,
	            //minRange: null,
	            minorGridLineColor: '#E0E0E0',
	            // minorGridLineDashStyle: null,
	            minorGridLineWidth: 1,
	            minorTickColor: '#A0A0A0',
	            //minorTickInterval: null,
	            minorTickLength: 2,
	            minorTickPosition: 'outside', // inside or outside
	            //minorTickWidth: 0,
	            //opposite: false,
	            //offset: 0,
	            //plotBands: [{
	            //    events: {},
	            //    zIndex: 1,
	            //    labels: { align, x, verticalAlign, y, style, rotation, textAlign }
	            //}],
	            //plotLines: [{
	            //    events: {}
	            //  dashStyle: {}
	            //    zIndex:
	            //    labels: { align, x, verticalAlign, y, style, rotation, textAlign }
	            //}],
	            //reversed: false,
	            // showFirstLabel: true,
	            // showLastLabel: true,
	            startOfWeek: 1,
	            startOnTick: false,
	            tickColor: '#C0D0E0',
	            //tickInterval: null,
	            tickLength: 10,
	            tickmarkPlacement: 'between', // on or between
	            tickPixelInterval: 100,
	            tickPosition: 'outside',
	            //tickWidth: 1,
	            title: {
	                //text: null,
	                align: 'middle', // low, middle or high
	                //margin: 0 for horizontal, 10 for vertical axes,
	                //rotation: 0,
	                //side: 'outside',
	                style: {
	                    color: '#707070'
	                }
	                //x: 0,
	                //y: 0
	            },
	            type: 'linear' // linear, logarithmic or datetime
	            //visible: true
	        },
	
	        /**
	         * This options set extends the defaultOptions for Y axes
	         */
	        defaultYAxisOptions: {
	            endOnTick: true,
	            gridLineWidth: 1,
	            tickPixelInterval: 72,
	            showLastLabel: true,
	            labels: {
	                x: -8
	            },
	            lineWidth: 0,
	            maxPadding: 0.05,
	            minPadding: 0.05,
	            startOnTick: true,
	            //tickWidth: 0,
	            title: {
	                rotation: 270,
	                text: 'Values'
	            },
	            stackLabels: {
	                enabled: false,
	                //align: dynamic,
	                //y: dynamic,
	                //x: dynamic,
	                //verticalAlign: dynamic,
	                //textAlign: dynamic,
	                //rotation: 0,
	                formatter: function () {
	                    return Highcharts.numberFormat(this.total, -1);
	                },
	                style: merge(defaultPlotOptions.line.dataLabels.style, { color: '#000000' })
	            }
	        },
	
	        /**
	         * These options extend the defaultOptions for left axes
	         */
	        defaultLeftAxisOptions: {
	            labels: {
	                x: -15
	            },
	            title: {
	                rotation: 270
	            }
	        },
	
	        /**
	         * These options extend the defaultOptions for right axes
	         */
	        defaultRightAxisOptions: {
	            labels: {
	                x: 15
	            },
	            title: {
	                rotation: 90
	            }
	        },
	
	        /**
	         * These options extend the defaultOptions for bottom axes
	         */
	        defaultBottomAxisOptions: {
	            labels: {
	                autoRotation: [-45],
	                x: 0
	                // overflow: undefined,
	                // staggerLines: null
	            },
	            title: {
	                rotation: 0
	            }
	        },
	        /**
	         * These options extend the defaultOptions for top axes
	         */
	        defaultTopAxisOptions: {
	            labels: {
	                autoRotation: [-45],
	                x: 0
	                // overflow: undefined
	                // staggerLines: null
	            },
	            title: {
	                rotation: 0
	            }
	        },
	
	        /**
	         * Initialize the axis
	         */
	        init: function (chart, userOptions) {
	
	
	            var isXAxis = userOptions.isX,
	                axis = this;
	
	            axis.chart = chart;
	
	            // Flag, is the axis horizontal
	            axis.horiz = chart.inverted ? !isXAxis : isXAxis;
	
	            // Flag, isXAxis
	            axis.isXAxis = isXAxis;
	            axis.coll = axis.coll || (isXAxis ? 'xAxis' : 'yAxis');
	
	            axis.opposite = userOptions.opposite; // needed in setOptions
	            axis.side = userOptions.side || (axis.horiz ?
	                    (axis.opposite ? 0 : 2) : // top : bottom
	                    (axis.opposite ? 1 : 3));  // right : left
	
	            axis.setOptions(userOptions);
	
	
	            var options = this.options,
	                type = options.type,
	                isDatetimeAxis = type === 'datetime';
	
	            axis.labelFormatter = options.labels.formatter || axis.defaultLabelFormatter; // can be overwritten by dynamic format
	
	
	            // Flag, stagger lines or not
	            axis.userOptions = userOptions;
	
	            //axis.axisTitleMargin = UNDEFINED,// = options.title.margin,
	            axis.minPixelPadding = 0;
	
	            axis.reversed = options.reversed;
	            axis.visible = options.visible !== false;
	            axis.zoomEnabled = options.zoomEnabled !== false;
	
	            // Initial categories
	            axis.hasNames = type === 'category' || options.categories === true;
	            axis.categories = options.categories || axis.hasNames;
	            axis.names = axis.names || []; // Preserve on update (#3830)
	
	            // Elements
	            //axis.axisGroup = UNDEFINED;
	            //axis.gridGroup = UNDEFINED;
	            //axis.axisTitle = UNDEFINED;
	            //axis.axisLine = UNDEFINED;
	
	            // Shorthand types
	            axis.isLog = type === 'logarithmic';
	            axis.isDatetimeAxis = isDatetimeAxis;
	
	            // Flag, if axis is linked to another axis
	            axis.isLinked = defined(options.linkedTo);
	            // Linked axis.
	            //axis.linkedParent = UNDEFINED;
	
	            // Tick positions
	            //axis.tickPositions = UNDEFINED; // array containing predefined positions
	            // Tick intervals
	            //axis.tickInterval = UNDEFINED;
	            //axis.minorTickInterval = UNDEFINED;
	
	
	            // Major ticks
	            axis.ticks = {};
	            axis.labelEdge = [];
	            // Minor ticks
	            axis.minorTicks = {};
	
	            // List of plotLines/Bands
	            axis.plotLinesAndBands = [];
	
	            // Alternate bands
	            axis.alternateBands = {};
	
	            // Axis metrics
	            //axis.left = UNDEFINED;
	            //axis.top = UNDEFINED;
	            //axis.width = UNDEFINED;
	            //axis.height = UNDEFINED;
	            //axis.bottom = UNDEFINED;
	            //axis.right = UNDEFINED;
	            //axis.transA = UNDEFINED;
	            //axis.transB = UNDEFINED;
	            //axis.oldTransA = UNDEFINED;
	            axis.len = 0;
	            //axis.oldMin = UNDEFINED;
	            //axis.oldMax = UNDEFINED;
	            //axis.oldUserMin = UNDEFINED;
	            //axis.oldUserMax = UNDEFINED;
	            //axis.oldAxisLength = UNDEFINED;
	            axis.minRange = axis.userMinRange = options.minRange || options.maxZoom;
	            axis.range = options.range;
	            axis.offset = options.offset || 0;
	
	
	            // Dictionary for stacks
	            axis.stacks = {};
	            axis.oldStacks = {};
	            axis.stacksTouched = 0;
	
	            // Min and max in the data
	            //axis.dataMin = UNDEFINED,
	            //axis.dataMax = UNDEFINED,
	
	            // The axis range
	            axis.max = null;
	            axis.min = null;
	
	            // User set min and max
	            //axis.userMin = UNDEFINED,
	            //axis.userMax = UNDEFINED,
	
	            // Crosshair options
	            axis.crosshair = pick(options.crosshair, splat(chart.options.tooltip.crosshairs)[isXAxis ? 0 : 1], false);
	            // Run Axis
	
	            var eventType,
	                events = axis.options.events;
	
	            // Register
	            if (inArray(axis, chart.axes) === -1) { // don't add it again on Axis.update()
	                if (isXAxis) { // #2713
	                    chart.axes.splice(chart.xAxis.length, 0, axis);
	                } else {
	                    chart.axes.push(axis);
	                }
	
	                chart[axis.coll].push(axis);
	            }
	
	            axis.series = axis.series || []; // populated by Series
	
	            // inverted charts have reversed xAxes as default
	            if (chart.inverted && isXAxis && axis.reversed === UNDEFINED) {
	                axis.reversed = true;
	            }
	
	            axis.removePlotBand = axis.removePlotBandOrLine;
	            axis.removePlotLine = axis.removePlotBandOrLine;
	
	
	            // register event listeners
	            for (eventType in events) {
	                addEvent(axis, eventType, events[eventType]);
	            }
	
	            // extend logarithmic axis
	            if (axis.isLog) {
	                axis.val2lin = axis.log2lin;
	                axis.lin2val = axis.lin2log;
	            }
	        },
	
	        /**
	         * Merge and set options
	         */
	        setOptions: function (userOptions) {
	            this.options = merge(
	                this.defaultOptions,
	                this.coll === 'yAxis' && this.defaultYAxisOptions,
	                [this.defaultTopAxisOptions, this.defaultRightAxisOptions,
	                    this.defaultBottomAxisOptions, this.defaultLeftAxisOptions][this.side],
	                merge(
	                    defaultOptions[this.coll], // if set in setOptions (#1053)
	                    userOptions
	                )
	            );
	        },
	
	        /**
	         * The default label formatter. The context is a special config object for the label.
	         */
	        defaultLabelFormatter: function () {
	            var axis = this.axis,
	                value = this.value,
	                categories = axis.categories,
	                dateTimeLabelFormat = this.dateTimeLabelFormat,
	                numericSymbols = defaultOptions.lang.numericSymbols,
	                i = numericSymbols && numericSymbols.length,
	                multi,
	                ret,
	                formatOption = axis.options.labels.format,
	
	                // make sure the same symbol is added for all labels on a linear axis
	                numericSymbolDetector = axis.isLog ? value : axis.tickInterval;
	
	            if (formatOption) {
	                ret = format(formatOption, this);
	
	            } else if (categories) {
	                ret = value;
	
	            } else if (dateTimeLabelFormat) { // datetime axis
	                ret = dateFormat(dateTimeLabelFormat, value);
	
	            } else if (i && numericSymbolDetector >= 1000) {
	                // Decide whether we should add a numeric symbol like k (thousands) or M (millions).
	                // If we are to enable this in tooltip or other places as well, we can move this
	                // logic to the numberFormatter and enable it by a parameter.
	                while (i-- && ret === UNDEFINED) {
	                    multi = Math.pow(1000, i + 1);
	                    if (numericSymbolDetector >= multi && (value * 10) % multi === 0 && numericSymbols[i] !== null && value !== 0) { // #5480
	                        ret = Highcharts.numberFormat(value / multi, -1) + numericSymbols[i];
	                    }
	                }
	            }
	
	            if (ret === UNDEFINED) {
	                if (mathAbs(value) >= 10000) { // add thousands separators
	                    ret = Highcharts.numberFormat(value, -1);
	
	                } else { // small numbers
	                    ret = Highcharts.numberFormat(value, -1, UNDEFINED, ''); // #2466
	                }
	            }
	
	            return ret;
	        },
	
	        /**
	         * Get the minimum and maximum for the series of each axis
	         */
	        getSeriesExtremes: function () {
	            var axis = this,
	                chart = axis.chart;
	
	            axis.hasVisibleSeries = false;
	
	            // Reset properties in case we're redrawing (#3353)
	            axis.dataMin = axis.dataMax = axis.threshold = null;
	            axis.softThreshold = !axis.isXAxis;
	
	            if (axis.buildStacks) {
	                axis.buildStacks();
	            }
	
	            // loop through this axis' series
	            each(axis.series, function (series) {
	
	                if (series.visible || !chart.options.chart.ignoreHiddenSeries) {
	
	                    var seriesOptions = series.options,
	                        xData,
	                        threshold = seriesOptions.threshold,
	                        seriesDataMin,
	                        seriesDataMax;
	
	                    axis.hasVisibleSeries = true;
	
	                    // Validate threshold in logarithmic axes
	                    if (axis.isLog && threshold <= 0) {
	                        threshold = null;
	                    }
	
	                    // Get dataMin and dataMax for X axes
	                    if (axis.isXAxis) {
	                        xData = series.xData;
	                        if (xData.length) {
	                            // If xData contains values which is not numbers, then filter them out.
	                            // To prevent performance hit, we only do this after we have already
	                            // found seriesDataMin because in most cases all data is valid. #5234.
	                            seriesDataMin = arrayMin(xData);
	                            if (!isNumber(seriesDataMin) && !(seriesDataMin instanceof Date)) { // Date for #5010
	                                xData = grep(xData, function (x) {
	                                    return isNumber(x);
	                                });
	                                seriesDataMin = arrayMin(xData); // Do it again with valid data
	                            }
	
	                            axis.dataMin = mathMin(pick(axis.dataMin, xData[0]), seriesDataMin);
	                            axis.dataMax = mathMax(pick(axis.dataMax, xData[0]), arrayMax(xData));
	                        
	                        }
	
	                    // Get dataMin and dataMax for Y axes, as well as handle stacking and processed data
	                    } else {
	
	                        // Get this particular series extremes
	                        series.getExtremes();
	                        seriesDataMax = series.dataMax;
	                        seriesDataMin = series.dataMin;
	
	                        // Get the dataMin and dataMax so far. If percentage is used, the min and max are
	                        // always 0 and 100. If seriesDataMin and seriesDataMax is null, then series
	                        // doesn't have active y data, we continue with nulls
	                        if (defined(seriesDataMin) && defined(seriesDataMax)) {
	                            axis.dataMin = mathMin(pick(axis.dataMin, seriesDataMin), seriesDataMin);
	                            axis.dataMax = mathMax(pick(axis.dataMax, seriesDataMax), seriesDataMax);
	                        }
	
	                        // Adjust to threshold
	                        if (defined(threshold)) {
	                            axis.threshold = threshold;
	                        }
	                        // If any series has a hard threshold, it takes precedence
	                        if (!seriesOptions.softThreshold || axis.isLog) {
	                            axis.softThreshold = false;
	                        }
	                    }
	                }
	            });
	        },
	
	        /**
	         * Translate from axis value to pixel position on the chart, or back
	         *
	         */
	        translate: function (val, backwards, cvsCoord, old, handleLog, pointPlacement) {
	            var axis = this.linkedParent || this, // #1417
	                sign = 1,
	                cvsOffset = 0,
	                localA = old ? axis.oldTransA : axis.transA,
	                localMin = old ? axis.oldMin : axis.min,
	                returnValue,
	                minPixelPadding = axis.minPixelPadding,
	                doPostTranslate = (axis.isOrdinal || axis.isBroken || (axis.isLog && handleLog)) && axis.lin2val;
	
	            if (!localA) {
	                localA = axis.transA;
	            }
	
	            // In vertical axes, the canvas coordinates start from 0 at the top like in
	            // SVG.
	            if (cvsCoord) {
	                sign *= -1; // canvas coordinates inverts the value
	                cvsOffset = axis.len;
	            }
	
	            // Handle reversed axis
	            if (axis.reversed) {
	                sign *= -1;
	                cvsOffset -= sign * (axis.sector || axis.len);
	            }
	
	            // From pixels to value
	            if (backwards) { // reverse translation
	
	                val = val * sign + cvsOffset;
	                val -= minPixelPadding;
	                returnValue = val / localA + localMin; // from chart pixel to value
	                if (doPostTranslate) { // log and ordinal axes
	                    returnValue = axis.lin2val(returnValue);
	                }
	
	            // From value to pixels
	            } else {
	                if (doPostTranslate) { // log and ordinal axes
	                    val = axis.val2lin(val);
	                }
	                if (pointPlacement === 'between') {
	                    pointPlacement = 0.5;
	                }
	                returnValue = sign * (val - localMin) * localA + cvsOffset + (sign * minPixelPadding) +
	                    (isNumber(pointPlacement) ? localA * pointPlacement * axis.pointRange : 0);
	            }
	
	            return returnValue;
	        },
	
	        /**
	         * Utility method to translate an axis value to pixel position.
	         * @param {Number} value A value in terms of axis units
	         * @param {Boolean} paneCoordinates Whether to return the pixel coordinate relative to the chart
	         *        or just the axis/pane itself.
	         */
	        toPixels: function (value, paneCoordinates) {
	            return this.translate(value, false, !this.horiz, null, true) + (paneCoordinates ? 0 : this.pos);
	        },
	
	        /*
	         * Utility method to translate a pixel position in to an axis value
	         * @param {Number} pixel The pixel value coordinate
	         * @param {Boolean} paneCoordiantes Whether the input pixel is relative to the chart or just the
	         *        axis/pane itself.
	         */
	        toValue: function (pixel, paneCoordinates) {
	            return this.translate(pixel - (paneCoordinates ? 0 : this.pos), true, !this.horiz, null, true);
	        },
	
	        /**
	         * Create the path for a plot line that goes from the given value on
	         * this axis, across the plot to the opposite side
	         * @param {Number} value
	         * @param {Number} lineWidth Used for calculation crisp line
	         * @param {Number] old Use old coordinates (for resizing and rescaling)
	         */
	        getPlotLinePath: function (value, lineWidth, old, force, translatedValue) {
	            var axis = this,
	                chart = axis.chart,
	                axisLeft = axis.left,
	                axisTop = axis.top,
	                x1,
	                y1,
	                x2,
	                y2,
	                cHeight = (old && chart.oldChartHeight) || chart.chartHeight,
	                cWidth = (old && chart.oldChartWidth) || chart.chartWidth,
	                skip,
	                transB = axis.transB,
	                /**
	                 * Check if x is between a and b. If not, either move to a/b or skip,
	                 * depending on the force parameter.
	                 */
	                between = function (x, a, b) {
	                    if (x < a || x > b) {
	                        if (force) {
	                            x = mathMin(mathMax(a, x), b);
	                        } else {
	                            skip = true;
	                        }
	                    }
	                    return x;
	                };
	
	            translatedValue = pick(translatedValue, axis.translate(value, null, null, old));
	            x1 = x2 = mathRound(translatedValue + transB);
	            y1 = y2 = mathRound(cHeight - translatedValue - transB);
	            if (!isNumber(translatedValue)) { // no min or max
	                skip = true;
	
	            } else if (axis.horiz) {
	                y1 = axisTop;
	                y2 = cHeight - axis.bottom;
	                x1 = x2 = between(x1, axisLeft, axisLeft + axis.width);
	            } else {
	                x1 = axisLeft;
	                x2 = cWidth - axis.right;
	                y1 = y2 = between(y1, axisTop, axisTop + axis.height);
	            }
	            return skip && !force ?
	                null :
	                chart.renderer.crispLine([M, x1, y1, L, x2, y2], lineWidth || 1);
	        },
	
	        /**
	         * Set the tick positions of a linear axis to round values like whole tens or every five.
	         */
	        getLinearTickPositions: function (tickInterval, min, max) {
	            var pos,
	                lastPos,
	                roundedMin = correctFloat(mathFloor(min / tickInterval) * tickInterval),
	                roundedMax = correctFloat(mathCeil(max / tickInterval) * tickInterval),
	                tickPositions = [];
	
	            // For single points, add a tick regardless of the relative position (#2662)
	            if (min === max && isNumber(min)) {
	                return [min];
	            }
	
	            // Populate the intermediate values
	            pos = roundedMin;
	            while (pos <= roundedMax) {
	
	                // Place the tick on the rounded value
	                tickPositions.push(pos);
	
	                // Always add the raw tickInterval, not the corrected one.
	                pos = correctFloat(pos + tickInterval);
	
	                // If the interval is not big enough in the current min - max range to actually increase
	                // the loop variable, we need to break out to prevent endless loop. Issue #619
	                if (pos === lastPos) {
	                    break;
	                }
	
	                // Record the last value
	                lastPos = pos;
	            }
	            return tickPositions;
	        },
	
	        /**
	         * Return the minor tick positions. For logarithmic axes, reuse the same logic
	         * as for major ticks.
	         */
	        getMinorTickPositions: function () {
	            var axis = this,
	                options = axis.options,
	                tickPositions = axis.tickPositions,
	                minorTickInterval = axis.minorTickInterval,
	                minorTickPositions = [],
	                pos,
	                i,
	                pointRangePadding = axis.pointRangePadding || 0,
	                min = axis.min - pointRangePadding, // #1498
	                max = axis.max + pointRangePadding, // #1498
	                range = max - min,
	                len;
	
	            // If minor ticks get too dense, they are hard to read, and may cause long running script. So we don't draw them.
	            if (range && range / minorTickInterval < axis.len / 3) { // #3875
	
	                if (axis.isLog) {
	                    len = tickPositions.length;
	                    for (i = 1; i < len; i++) {
	                        minorTickPositions = minorTickPositions.concat(
	                            axis.getLogTickPositions(minorTickInterval, tickPositions[i - 1], tickPositions[i], true)
	                        );
	                    }
	                } else if (axis.isDatetimeAxis && options.minorTickInterval === 'auto') { // #1314
	                    minorTickPositions = minorTickPositions.concat(
	                        axis.getTimeTicks(
	                            axis.normalizeTimeTickInterval(minorTickInterval),
	                            min,
	                            max,
	                            options.startOfWeek
	                        )
	                    );
	                } else {
	                    for (pos = min + (tickPositions[0] - min) % minorTickInterval; pos <= max; pos += minorTickInterval) {
	                        minorTickPositions.push(pos);
	                    }
	                }
	            }
	
	            if (minorTickPositions.length !== 0) { // don't change the extremes, when there is no minor ticks
	                axis.trimTicks(minorTickPositions, options.startOnTick, options.endOnTick); // #3652 #3743 #1498
	            }
	            return minorTickPositions;
	        },
	
	        /**
	         * Adjust the min and max for the minimum range. Keep in mind that the series data is
	         * not yet processed, so we don't have information on data cropping and grouping, or
	         * updated axis.pointRange or series.pointRange. The data can't be processed until
	         * we have finally established min and max.
	         */
	        adjustForMinRange: function () {
	            var axis = this,
	                options = axis.options,
	                min = axis.min,
	                max = axis.max,
	                zoomOffset,
	                spaceAvailable = axis.dataMax - axis.dataMin >= axis.minRange,
	                closestDataRange,
	                i,
	                distance,
	                xData,
	                loopLength,
	                minArgs,
	                maxArgs,
	                minRange;
	
	            // Set the automatic minimum range based on the closest point distance
	            if (axis.isXAxis && axis.minRange === UNDEFINED && !axis.isLog) {
	
	                if (defined(options.min) || defined(options.max)) {
	                    axis.minRange = null; // don't do this again
	
	                } else {
	
	                    // Find the closest distance between raw data points, as opposed to
	                    // closestPointRange that applies to processed points (cropped and grouped)
	                    each(axis.series, function (series) {
	                        xData = series.xData;
	                        loopLength = series.xIncrement ? 1 : xData.length - 1;
	                        for (i = loopLength; i > 0; i--) {
	                            distance = xData[i] - xData[i - 1];
	                            if (closestDataRange === UNDEFINED || distance < closestDataRange) {
	                                closestDataRange = distance;
	                            }
	                        }
	                    });
	                    axis.minRange = mathMin(closestDataRange * 5, axis.dataMax - axis.dataMin);
	                }
	            }
	
	            // if minRange is exceeded, adjust
	            if (max - min < axis.minRange) {
	                minRange = axis.minRange;
	                zoomOffset = (minRange - max + min) / 2;
	
	                // if min and max options have been set, don't go beyond it
	                minArgs = [min - zoomOffset, pick(options.min, min - zoomOffset)];
	                if (spaceAvailable) { // if space is available, stay within the data range
	                    minArgs[2] = axis.isLog ? axis.log2lin(axis.dataMin) : axis.dataMin;
	                }
	                min = arrayMax(minArgs);
	
	                maxArgs = [min + minRange, pick(options.max, min + minRange)];
	                if (spaceAvailable) { // if space is availabe, stay within the data range
	                    maxArgs[2] = axis.isLog ? axis.log2lin(axis.dataMax) : axis.dataMax;
	                }
	
	                max = arrayMin(maxArgs);
	
	                // now if the max is adjusted, adjust the min back
	                if (max - min < minRange) {
	                    minArgs[0] = max - minRange;
	                    minArgs[1] = pick(options.min, max - minRange);
	                    min = arrayMax(minArgs);
	                }
	            }
	
	            // Record modified extremes
	            axis.min = min;
	            axis.max = max;
	        },
	
	        /**
	         * Find the closestPointRange across all series
	         */
	        getClosest: function () {
	            var ret;
	
	            if (this.categories) {
	                ret = 1;
	            } else {
	                each(this.series, function (series) {
	                    var seriesClosest = series.closestPointRange;
	                    if (!series.noSharedTooltip && defined(seriesClosest)) {
	                        ret = defined(ret) ?
	                            mathMin(ret, seriesClosest) :
	                            seriesClosest;
	                    }
	                });
	            }
	            return ret;
	        },
	
	        /**
	         * When a point name is given and no x, search for the name in the existing categories,
	         * or if categories aren't provided, search names or create a new category (#2522).
	         */
	        nameToX: function (point) {
	            var explicitCategories = isArray(this.categories),
	                names = explicitCategories ? this.categories : this.names,
	                nameX = point.options.x,
	                x;
	
	            point.series.requireSorting = false;
	
	            if (!defined(nameX)) {
	                nameX = this.options.nameToX === false ?
	                    point.series.autoIncrement() : 
	                    inArray(point.name, names);
	            }
	            if (nameX === -1) { // The name is not found in currenct categories
	                if (!explicitCategories) {
	                    x = names.length;
	                }
	            } else {
	                x = nameX;
	            }
	
	            // Write the last point's name to the names array
	            this.names[x] = point.name;
	
	            return x;
	        },
	
	        /**
	         * When changes have been done to series data, update the axis.names.
	         */
	        updateNames: function () {
	            var axis = this;
	
	            if (this.names.length > 0) {
	                this.names.length = 0;
	                this.minRange = undefined;
	                each(this.series || [], function (series) {
	            
	                    // When adding a series, points are not yet generated
	                    if (!series.processedXData) {
	                        series.processData();
	                        series.generatePoints();
	                    }
	
	                    each(series.points, function (point, i) {
	                        var x;
	                        if (point.options && point.options.x === undefined) {
	                            x = axis.nameToX(point);
	                            if (x !== point.x) {
	                                point.x = x;
	                                series.xData[i] = x;
	                            }
	                        }
	                    });
	                });
	            }
	        },
	
	        /**
	         * Update translation information
	         */
	        setAxisTranslation: function (saveOld) {
	            var axis = this,
	                range = axis.max - axis.min,
	                pointRange = axis.axisPointRange || 0,
	                closestPointRange,
	                minPointOffset = 0,
	                pointRangePadding = 0,
	                linkedParent = axis.linkedParent,
	                ordinalCorrection,
	                hasCategories = !!axis.categories,
	                transA = axis.transA,
	                isXAxis = axis.isXAxis;
	
	            // Adjust translation for padding. Y axis with categories need to go through the same (#1784).
	            if (isXAxis || hasCategories || pointRange) {
	                if (linkedParent) {
	                    minPointOffset = linkedParent.minPointOffset;
	                    pointRangePadding = linkedParent.pointRangePadding;
	
	                } else {
	                
	                    // Get the closest points
	                    closestPointRange = axis.getClosest();
	
	                    each(axis.series, function (series) {
	                        var seriesPointRange = hasCategories ? 
	                            1 : 
	                            (isXAxis ? 
	                                pick(series.options.pointRange, closestPointRange, 0) : 
	                                (axis.axisPointRange || 0)), // #2806
	                            pointPlacement = series.options.pointPlacement;
	
	                        pointRange = mathMax(pointRange, seriesPointRange);
	
	                        if (!axis.single) {
	                            // minPointOffset is the value padding to the left of the axis in order to make
	                            // room for points with a pointRange, typically columns. When the pointPlacement option
	                            // is 'between' or 'on', this padding does not apply.
	                            minPointOffset = mathMax(
	                                minPointOffset,
	                                isString(pointPlacement) ? 0 : seriesPointRange / 2
	                            );
	
	                            // Determine the total padding needed to the length of the axis to make room for the
	                            // pointRange. If the series' pointPlacement is 'on', no padding is added.
	                            pointRangePadding = mathMax(
	                                pointRangePadding,
	                                pointPlacement === 'on' ? 0 : seriesPointRange
	                            );
	                        }
	                    });
	                }
	
	                // Record minPointOffset and pointRangePadding
	                ordinalCorrection = axis.ordinalSlope && closestPointRange ? axis.ordinalSlope / closestPointRange : 1; // #988, #1853
	                axis.minPointOffset = minPointOffset = minPointOffset * ordinalCorrection;
	                axis.pointRangePadding = pointRangePadding = pointRangePadding * ordinalCorrection;
	
	                // pointRange means the width reserved for each point, like in a column chart
	                axis.pointRange = mathMin(pointRange, range);
	
	                // closestPointRange means the closest distance between points. In columns
	                // it is mostly equal to pointRange, but in lines pointRange is 0 while closestPointRange
	                // is some other value
	                if (isXAxis) {
	                    axis.closestPointRange = closestPointRange;
	                }
	            }
	
	            // Secondary values
	            if (saveOld) {
	                axis.oldTransA = transA;
	            }
	            axis.translationSlope = axis.transA = transA = axis.len / ((range + pointRangePadding) || 1);
	            axis.transB = axis.horiz ? axis.left : axis.bottom; // translation addend
	            axis.minPixelPadding = transA * minPointOffset;
	        },
	
	        minFromRange: function () {
	            return this.max - this.range;
	        },
	
	        /**
	         * Set the tick positions to round values and optionally extend the extremes
	         * to the nearest tick
	         */
	        setTickInterval: function (secondPass) {
	            var axis = this,
	                chart = axis.chart,
	                options = axis.options,
	                isLog = axis.isLog,
	                log2lin = axis.log2lin,
	                isDatetimeAxis = axis.isDatetimeAxis,
	                isXAxis = axis.isXAxis,
	                isLinked = axis.isLinked,
	                maxPadding = options.maxPadding,
	                minPadding = options.minPadding,
	                length,
	                linkedParentExtremes,
	                tickIntervalOption = options.tickInterval,
	                minTickInterval,
	                tickPixelIntervalOption = options.tickPixelInterval,
	                categories = axis.categories,
	                threshold = axis.threshold,
	                softThreshold = axis.softThreshold,
	                thresholdMin,
	                thresholdMax,
	                hardMin,
	                hardMax;
	
	            if (!isDatetimeAxis && !categories && !isLinked) {
	                this.getTickAmount();
	            }
	
	            // Min or max set either by zooming/setExtremes or initial options
	            hardMin = pick(axis.userMin, options.min);
	            hardMax = pick(axis.userMax, options.max);
	
	            // Linked axis gets the extremes from the parent axis
	            if (isLinked) {
	                axis.linkedParent = chart[axis.coll][options.linkedTo];
	                linkedParentExtremes = axis.linkedParent.getExtremes();
	                axis.min = pick(linkedParentExtremes.min, linkedParentExtremes.dataMin);
	                axis.max = pick(linkedParentExtremes.max, linkedParentExtremes.dataMax);
	                if (options.type !== axis.linkedParent.options.type) {
	                    error(11, 1); // Can't link axes of different type
	                }
	
	            // Initial min and max from the extreme data values
	            } else {
	
	                // Adjust to hard threshold
	                if (!softThreshold && defined(threshold)) {
	                    if (axis.dataMin >= threshold) {
	                        thresholdMin = threshold;
	                        minPadding = 0;
	                    } else if (axis.dataMax <= threshold) {
	                        thresholdMax = threshold;
	                        maxPadding = 0;
	                    }
	                }
	
	                axis.min = pick(hardMin, thresholdMin, axis.dataMin);
	                axis.max = pick(hardMax, thresholdMax, axis.dataMax);
	
	            }
	
	            if (isLog) {
	                if (!secondPass && mathMin(axis.min, pick(axis.dataMin, axis.min)) <= 0) { // #978
	                    error(10, 1); // Can't plot negative values on log axis
	                }
	                // The correctFloat cures #934, float errors on full tens. But it
	                // was too aggressive for #4360 because of conversion back to lin,
	                // therefore use precision 15.
	                axis.min = correctFloat(log2lin(axis.min), 15);
	                axis.max = correctFloat(log2lin(axis.max), 15);
	            }
	
	            // handle zoomed range
	            if (axis.range && defined(axis.max)) {
	                axis.userMin = axis.min = hardMin = mathMax(axis.min, axis.minFromRange()); // #618
	                axis.userMax = hardMax = axis.max;
	
	                axis.range = null;  // don't use it when running setExtremes
	            }
	
	            // Hook for Highstock Scroller. Consider combining with beforePadding.
	            fireEvent(axis, 'foundExtremes');
	
	            // Hook for adjusting this.min and this.max. Used by bubble series.
	            if (axis.beforePadding) {
	                axis.beforePadding();
	            }
	
	            // adjust min and max for the minimum range
	            axis.adjustForMinRange();
	
	            // Pad the values to get clear of the chart's edges. To avoid tickInterval taking the padding
	            // into account, we do this after computing tick interval (#1337).
	            if (!categories && !axis.axisPointRange && !axis.usePercentage && !isLinked && defined(axis.min) && defined(axis.max)) {
	                length = axis.max - axis.min;
	                if (length) {
	                    if (!defined(hardMin) && minPadding) {
	                        axis.min -= length * minPadding;
	                    }
	                    if (!defined(hardMax)  && maxPadding) {
	                        axis.max += length * maxPadding;
	                    }
	                }
	            }
	
	            // Stay within floor and ceiling
	            if (isNumber(options.floor)) {
	                axis.min = mathMax(axis.min, options.floor);
	            }
	            if (isNumber(options.ceiling)) {
	                axis.max = mathMin(axis.max, options.ceiling);
	            }
	
	            // When the threshold is soft, adjust the extreme value only if
	            // the data extreme and the padded extreme land on either side of the threshold. For example,
	            // a series of [0, 1, 2, 3] would make the yAxis add a tick for -1 because of the
	            // default minPadding and startOnTick options. This is prevented by the softThreshold
	            // option.
	            if (softThreshold && defined(axis.dataMin)) {
	                threshold = threshold || 0;
	                if (!defined(hardMin) && axis.min < threshold && axis.dataMin >= threshold) {
	                    axis.min = threshold;
	                } else if (!defined(hardMax) && axis.max > threshold && axis.dataMax <= threshold) {
	                    axis.max = threshold;
	                }
	            }
	
	
	            // get tickInterval
	            if (axis.min === axis.max || axis.min === undefined || axis.max === undefined) {
	                axis.tickInterval = 1;
	            } else if (isLinked && !tickIntervalOption &&
	                    tickPixelIntervalOption === axis.linkedParent.options.tickPixelInterval) {
	                axis.tickInterval = tickIntervalOption = axis.linkedParent.tickInterval;
	            } else {
	                axis.tickInterval = pick(
	                    tickIntervalOption,
	                    this.tickAmount ? ((axis.max - axis.min) / mathMax(this.tickAmount - 1, 1)) : undefined,
	                    categories ? // for categoried axis, 1 is default, for linear axis use tickPix
	                        1 :
	                        // don't let it be more than the data range
	                        (axis.max - axis.min) * tickPixelIntervalOption / mathMax(axis.len, tickPixelIntervalOption)
	                );
	            }
	
	            // Now we're finished detecting min and max, crop and group series data. This
	            // is in turn needed in order to find tick positions in ordinal axes.
	            if (isXAxis && !secondPass) {
	                each(axis.series, function (series) {
	                    series.processData(axis.min !== axis.oldMin || axis.max !== axis.oldMax);
	                });
	            }
	
	            // set the translation factor used in translate function
	            axis.setAxisTranslation(true);
	
	            // hook for ordinal axes and radial axes
	            if (axis.beforeSetTickPositions) {
	                axis.beforeSetTickPositions();
	            }
	
	            // hook for extensions, used in Highstock ordinal axes
	            if (axis.postProcessTickInterval) {
	                axis.tickInterval = axis.postProcessTickInterval(axis.tickInterval);
	            }
	
	            // In column-like charts, don't cramp in more ticks than there are points (#1943, #4184)
	            if (axis.pointRange && !tickIntervalOption) {
	                axis.tickInterval = mathMax(axis.pointRange, axis.tickInterval);
	            }
	
	            // Before normalizing the tick interval, handle minimum tick interval. This applies only if tickInterval is not defined.
	            minTickInterval = pick(options.minTickInterval, axis.isDatetimeAxis && axis.closestPointRange);
	            if (!tickIntervalOption && axis.tickInterval < minTickInterval) {
	                axis.tickInterval = minTickInterval;
	            }
	
	            // for linear axes, get magnitude and normalize the interval
	            if (!isDatetimeAxis && !isLog && !tickIntervalOption) {
	                axis.tickInterval = normalizeTickInterval(
	                    axis.tickInterval,
	                    null,
	                    getMagnitude(axis.tickInterval),
	                    // If the tick interval is between 0.5 and 5 and the axis max is in the order of
	                    // thousands, chances are we are dealing with years. Don't allow decimals. #3363.
	                    pick(options.allowDecimals, !(axis.tickInterval > 0.5 && axis.tickInterval < 5 && axis.max > 1000 && axis.max < 9999)),
	                    !!this.tickAmount
	                );
	            }
	
	            // Prevent ticks from getting so close that we can't draw the labels
	            if (!this.tickAmount) {
	                axis.tickInterval = axis.unsquish();
	            }
	
	            this.setTickPositions();
	        },
	
	        /**
	         * Now we have computed the normalized tickInterval, get the tick positions
	         */
	        setTickPositions: function () {
	
	            var options = this.options,
	                tickPositions,
	                tickPositionsOption = options.tickPositions,
	                tickPositioner = options.tickPositioner,
	                startOnTick = options.startOnTick,
	                endOnTick = options.endOnTick,
	                single;
	
	            // Set the tickmarkOffset
	            this.tickmarkOffset = (this.categories && options.tickmarkPlacement === 'between' &&
	                this.tickInterval === 1) ? 0.5 : 0; // #3202
	
	
	            // get minorTickInterval
	            this.minorTickInterval = options.minorTickInterval === 'auto' && this.tickInterval ?
	                this.tickInterval / 5 : options.minorTickInterval;
	
	            // Find the tick positions
	            this.tickPositions = tickPositions = tickPositionsOption && tickPositionsOption.slice(); // Work on a copy (#1565)
	            if (!tickPositions) {
	
	                if (this.isDatetimeAxis) {
	                    tickPositions = this.getTimeTicks(
	                        this.normalizeTimeTickInterval(this.tickInterval, options.units),
	                        this.min,
	                        this.max,
	                        options.startOfWeek,
	                        this.ordinalPositions,
	                        this.closestPointRange,
	                        true
	                    );
	                } else if (this.isLog) {
	                    tickPositions = this.getLogTickPositions(this.tickInterval, this.min, this.max);
	                } else {
	                    tickPositions = this.getLinearTickPositions(this.tickInterval, this.min, this.max);
	                }
	
	                // Too dense ticks, keep only the first and last (#4477)
	                if (tickPositions.length > this.len) {
	                    tickPositions = [tickPositions[0], tickPositions.pop()];
	                }
	
	                this.tickPositions = tickPositions;
	
	                // Run the tick positioner callback, that allows modifying auto tick positions.
	                if (tickPositioner) {
	                    tickPositioner = tickPositioner.apply(this, [this.min, this.max]);
	                    if (tickPositioner) {
	                        this.tickPositions = tickPositions = tickPositioner;
	                    }
	                }
	
	            }
	
	            if (!this.isLinked) {
	
	                // reset min/max or remove extremes based on start/end on tick
	                this.trimTicks(tickPositions, startOnTick, endOnTick);
	
	                // When there is only one point, or all points have the same value on this axis, then min
	                // and max are equal and tickPositions.length is 0 or 1. In this case, add some padding
	                // in order to center the point, but leave it with one tick. #1337.
	                if (this.min === this.max && defined(this.min) && !this.tickAmount) {
	                    // Substract half a unit (#2619, #2846, #2515, #3390)
	                    single = true;
	                    this.min -= 0.5;
	                    this.max += 0.5;
	                }
	                this.single = single;
	
	                if (!tickPositionsOption && !tickPositioner) {
	                    this.adjustTickAmount();
	                }
	            }
	        },
	
	        /**
	         * Handle startOnTick and endOnTick by either adapting to padding min/max or rounded min/max
	         */
	        trimTicks: function (tickPositions, startOnTick, endOnTick) {
	            var roundedMin = tickPositions[0],
	                roundedMax = tickPositions[tickPositions.length - 1],
	                minPointOffset = this.minPointOffset || 0;
	
	            if (startOnTick) {
	                this.min = roundedMin;
	            } else {
	                while (this.min - minPointOffset > tickPositions[0]) {
	                    tickPositions.shift();
	                }
	            }
	
	            if (endOnTick) {
	                this.max = roundedMax;
	            } else {
	                while (this.max + minPointOffset < tickPositions[tickPositions.length - 1]) {
	                    tickPositions.pop();
	                }
	            }
	
	            // If no tick are left, set one tick in the middle (#3195)
	            if (tickPositions.length === 0 && defined(roundedMin)) {
	                tickPositions.push((roundedMax + roundedMin) / 2);
	            }
	        },
	
	        /**
	         * Check if there are multiple axes in the same pane
	         * @returns {Boolean} There are other axes
	         */
	        alignToOthers: function () {
	            var others = {}, // Whether there is another axis to pair with this one
	                hasOther,
	                options = this.options;
	
	            if (this.chart.options.chart.alignTicks !== false && options.alignTicks !== false) {
	                each(this.chart[this.coll], function (axis) {
	                    var otherOptions = axis.options,
	                        horiz = axis.horiz,
	                        key = [
	                            horiz ? otherOptions.left : otherOptions.top, 
	                            otherOptions.width,
	                            otherOptions.height, 
	                            otherOptions.pane
	                        ].join(',');
	
	
	                    if (axis.series.length) { // #4442
	                        if (others[key]) {
	                            hasOther = true; // #4201
	                        } else {
	                            others[key] = 1;
	                        }
	                    }
	                });
	            }
	            return hasOther;
	        },
	
	        /**
	         * Set the max ticks of either the x and y axis collection
	         */
	        getTickAmount: function () {
	            var options = this.options,
	                tickAmount = options.tickAmount,
	                tickPixelInterval = options.tickPixelInterval;
	
	            if (!defined(options.tickInterval) && this.len < tickPixelInterval && !this.isRadial &&
	                    !this.isLog && options.startOnTick && options.endOnTick) {
	                tickAmount = 2;
	            }
	
	            if (!tickAmount && this.alignToOthers()) {
	                // Add 1 because 4 tick intervals require 5 ticks (including first and last)
	                tickAmount = mathCeil(this.len / tickPixelInterval) + 1;
	            }
	
	            // For tick amounts of 2 and 3, compute five ticks and remove the intermediate ones. This
	            // prevents the axis from adding ticks that are too far away from the data extremes.
	            if (tickAmount < 4) {
	                this.finalTickAmt = tickAmount;
	                tickAmount = 5;
	            }
	
	            this.tickAmount = tickAmount;
	        },
	
	        /**
	         * When using multiple axes, adjust the number of ticks to match the highest
	         * number of ticks in that group
	         */
	        adjustTickAmount: function () {
	            var tickInterval = this.tickInterval,
	                tickPositions = this.tickPositions,
	                tickAmount = this.tickAmount,
	                finalTickAmt = this.finalTickAmt,
	                currentTickAmount = tickPositions && tickPositions.length,
	                i,
	                len;
	
	            if (currentTickAmount < tickAmount) {
	                while (tickPositions.length < tickAmount) {
	                    tickPositions.push(correctFloat(
	                        tickPositions[tickPositions.length - 1] + tickInterval
	                    ));
	                }
	                this.transA *= (currentTickAmount - 1) / (tickAmount - 1);
	                this.max = tickPositions[tickPositions.length - 1];
	
	            // We have too many ticks, run second pass to try to reduce ticks
	            } else if (currentTickAmount > tickAmount) {
	                this.tickInterval *= 2;
	                this.setTickPositions();
	            }
	
	            // The finalTickAmt property is set in getTickAmount
	            if (defined(finalTickAmt)) {
	                i = len = tickPositions.length;
	                while (i--) {
	                    if (
	                        (finalTickAmt === 3 && i % 2 === 1) || // Remove every other tick
	                        (finalTickAmt <= 2 && i > 0 && i < len - 1) // Remove all but first and last
	                    ) {
	                        tickPositions.splice(i, 1);
	                    }
	                }
	                this.finalTickAmt = UNDEFINED;
	            }
	        },
	
	        /**
	         * Set the scale based on data min and max, user set min and max or options
	         *
	         */
	        setScale: function () {
	            var axis = this,
	                isDirtyData,
	                isDirtyAxisLength;
	
	            axis.oldMin = axis.min;
	            axis.oldMax = axis.max;
	            axis.oldAxisLength = axis.len;
	
	            // set the new axisLength
	            axis.setAxisSize();
	            //axisLength = horiz ? axisWidth : axisHeight;
	            isDirtyAxisLength = axis.len !== axis.oldAxisLength;
	
	            // is there new data?
	            each(axis.series, function (series) {
	                if (series.isDirtyData || series.isDirty ||
	                        series.xAxis.isDirty) { // when x axis is dirty, we need new data extremes for y as well
	                    isDirtyData = true;
	                }
	            });
	
	            // do we really need to go through all this?
	            if (isDirtyAxisLength || isDirtyData || axis.isLinked || axis.forceRedraw ||
	                axis.userMin !== axis.oldUserMin || axis.userMax !== axis.oldUserMax || axis.alignToOthers()) {
	
	                if (axis.resetStacks) {
	                    axis.resetStacks();
	                }
	
	                axis.forceRedraw = false;
	
	                // get data extremes if needed
	                axis.getSeriesExtremes();
	
	                // get fixed positions based on tickInterval
	                axis.setTickInterval();
	
	                // record old values to decide whether a rescale is necessary later on (#540)
	                axis.oldUserMin = axis.userMin;
	                axis.oldUserMax = axis.userMax;
	
	                // Mark as dirty if it is not already set to dirty and extremes have changed. #595.
	                if (!axis.isDirty) {
	                    axis.isDirty = isDirtyAxisLength || axis.min !== axis.oldMin || axis.max !== axis.oldMax;
	                }
	            } else if (axis.cleanStacks) {
	                axis.cleanStacks();
	            }
	        },
	
	        /**
	         * Set the extremes and optionally redraw
	         * @param {Number} newMin
	         * @param {Number} newMax
	         * @param {Boolean} redraw
	         * @param {Boolean|Object} animation Whether to apply animation, and optionally animation
	         *    configuration
	         * @param {Object} eventArguments
	         *
	         */
	        setExtremes: function (newMin, newMax, redraw, animation, eventArguments) {
	            var axis = this,
	                chart = axis.chart;
	
	            redraw = pick(redraw, true); // defaults to true
	
	            each(axis.series, function (serie) {
	                delete serie.kdTree;
	            });
	
	            // Extend the arguments with min and max
	            eventArguments = extend(eventArguments, {
	                min: newMin,
	                max: newMax
	            });
	
	            // Fire the event
	            fireEvent(axis, 'setExtremes', eventArguments, function () { // the default event handler
	
	                axis.userMin = newMin;
	                axis.userMax = newMax;
	                axis.eventArgs = eventArguments;
	
	                if (redraw) {
	                    chart.redraw(animation);
	                }
	            });
	        },
	
	        /**
	         * Overridable method for zooming chart. Pulled out in a separate method to allow overriding
	         * in stock charts.
	         */
	        zoom: function (newMin, newMax) {
	            var dataMin = this.dataMin,
	                dataMax = this.dataMax,
	                options = this.options,
	                min = mathMin(dataMin, pick(options.min, dataMin)),
	                max = mathMax(dataMax, pick(options.max, dataMax));
	
	            // Prevent pinch zooming out of range. Check for defined is for #1946. #1734.
	            if (!this.allowZoomOutside) {
	                if (defined(dataMin) && newMin <= min) {
	                    newMin = min;
	                }
	                if (defined(dataMax) && newMax >= max) {
	                    newMax = max;
	                }
	            }
	
	            // In full view, displaying the reset zoom button is not required
	            this.displayBtn = newMin !== UNDEFINED || newMax !== UNDEFINED;
	
	            // Do it
	            this.setExtremes(
	                newMin,
	                newMax,
	                false,
	                UNDEFINED,
	                { trigger: 'zoom' }
	            );
	            return true;
	        },
	
	        /**
	         * Update the axis metrics
	         */
	        setAxisSize: function () {
	            var chart = this.chart,
	                options = this.options,
	                offsetLeft = options.offsetLeft || 0,
	                offsetRight = options.offsetRight || 0,
	                horiz = this.horiz,
	                width = pick(options.width, chart.plotWidth - offsetLeft + offsetRight),
	                height = pick(options.height, chart.plotHeight),
	                top = pick(options.top, chart.plotTop),
	                left = pick(options.left, chart.plotLeft + offsetLeft),
	                percentRegex = /%$/;
	
	            // Check for percentage based input values. Rounding fixes problems with
	            // column overflow and plot line filtering (#4898, #4899)
	            if (percentRegex.test(height)) {
	                height = Math.round(parseFloat(height) / 100 * chart.plotHeight);
	            }
	            if (percentRegex.test(top)) {
	                top = Math.round(parseFloat(top) / 100 * chart.plotHeight + chart.plotTop);
	            }
	
	            // Expose basic values to use in Series object and navigator
	            this.left = left;
	            this.top = top;
	            this.width = width;
	            this.height = height;
	            this.bottom = chart.chartHeight - height - top;
	            this.right = chart.chartWidth - width - left;
	
	            // Direction agnostic properties
	            this.len = mathMax(horiz ? width : height, 0); // mathMax fixes #905
	            this.pos = horiz ? left : top; // distance from SVG origin
	        },
	
	        /**
	         * Get the actual axis extremes
	         */
	        getExtremes: function () {
	            var axis = this,
	                isLog = axis.isLog,
	                lin2log = axis.lin2log;
	
	            return {
	                min: isLog ? correctFloat(lin2log(axis.min)) : axis.min,
	                max: isLog ? correctFloat(lin2log(axis.max)) : axis.max,
	                dataMin: axis.dataMin,
	                dataMax: axis.dataMax,
	                userMin: axis.userMin,
	                userMax: axis.userMax
	            };
	        },
	
	        /**
	         * Get the zero plane either based on zero or on the min or max value.
	         * Used in bar and area plots
	         */
	        getThreshold: function (threshold) {
	            var axis = this,
	                isLog = axis.isLog,
	                lin2log = axis.lin2log,
	                realMin = isLog ? lin2log(axis.min) : axis.min,
	                realMax = isLog ? lin2log(axis.max) : axis.max;
	
	            if (threshold === null) {
	                threshold = realMin;
	            } else if (realMin > threshold) {
	                threshold = realMin;
	            } else if (realMax < threshold) {
	                threshold = realMax;
	            }
	
	            return axis.translate(threshold, 0, 1, 0, 1);
	        },
	
	        /**
	         * Compute auto alignment for the axis label based on which side the axis is on
	         * and the given rotation for the label
	         */
	        autoLabelAlign: function (rotation) {
	            var ret,
	                angle = (pick(rotation, 0) - (this.side * 90) + 720) % 360;
	
	            if (angle > 15 && angle < 165) {
	                ret = 'right';
	            } else if (angle > 195 && angle < 345) {
	                ret = 'left';
	            } else {
	                ret = 'center';
	            }
	            return ret;
	        },
	
	        /**
	         * Get the tick length and width for the axis.
	         * @param   {String} prefix 'tick' or 'minorTick'
	         * @returns {Array}        An array of tickLength and tickWidth
	         */
	        tickSize: function (prefix) {
	            var options = this.options,
	                tickLength = options[prefix + 'Length'],
	                tickWidth = pick(options[prefix + 'Width'], prefix === 'tick' && this.isXAxis ? 1 : 0); // X axis defaults to 1
	
	            if (tickWidth && tickLength) {
	                // Negate the length
	                if (options[prefix + 'Position'] === 'inside') {
	                    tickLength = -tickLength;
	                }
	                return [tickLength, tickWidth];
	            }
	            
	        },
	
	        /**
	         * Return the size of the labels
	         */
	        labelMetrics: function () {
	            return this.chart.renderer.fontMetrics(
	                this.options.labels.style.fontSize, 
	                this.ticks[0] && this.ticks[0].label
	            );
	        },
	
	        /**
	         * Prevent the ticks from getting so close we can't draw the labels. On a horizontal
	         * axis, this is handled by rotating the labels, removing ticks and adding ellipsis.
	         * On a vertical axis remove ticks and add ellipsis.
	         */
	        unsquish: function () {
	            var labelOptions = this.options.labels,
	                horiz = this.horiz,
	                tickInterval = this.tickInterval,
	                newTickInterval = tickInterval,
	                slotSize = this.len / (((this.categories ? 1 : 0) + this.max - this.min) / tickInterval),
	                rotation,
	                rotationOption = labelOptions.rotation,
	                labelMetrics = this.labelMetrics(),
	                step,
	                bestScore = Number.MAX_VALUE,
	                autoRotation,
	                // Return the multiple of tickInterval that is needed to avoid collision
	                getStep = function (spaceNeeded) {
	                    var step = spaceNeeded / (slotSize || 1);
	                    step = step > 1 ? mathCeil(step) : 1;
	                    return step * tickInterval;
	                };
	
	            if (horiz) {
	                autoRotation = !labelOptions.staggerLines && !labelOptions.step && ( // #3971
	                    defined(rotationOption) ?
	                        [rotationOption] :
	                        slotSize < pick(labelOptions.autoRotationLimit, 80) && labelOptions.autoRotation
	                );
	
	                if (autoRotation) {
	
	                    // Loop over the given autoRotation options, and determine which gives the best score. The
	                    // best score is that with the lowest number of steps and a rotation closest to horizontal.
	                    each(autoRotation, function (rot) {
	                        var score;
	
	                        if (rot === rotationOption || (rot && rot >= -90 && rot <= 90)) { // #3891
	
	                            step = getStep(mathAbs(labelMetrics.h / mathSin(deg2rad * rot)));
	
	                            score = step + mathAbs(rot / 360);
	
	                            if (score < bestScore) {
	                                bestScore = score;
	                                rotation = rot;
	                                newTickInterval = step;
	                            }
	                        }
	                    });
	                }
	
	            } else if (!labelOptions.step) { // #4411
	                newTickInterval = getStep(labelMetrics.h);
	            }
	
	            this.autoRotation = autoRotation;
	            this.labelRotation = pick(rotation, rotationOption);
	
	            return newTickInterval;
	        },
	
	        /**
	         * Get the general slot width for this axis. This may change between the pre-render (from Axis.getOffset) 
	         * and the final tick rendering and placement (#5086).
	         */
	        getSlotWidth: function () {
	            var chart = this.chart,
	                horiz = this.horiz,
	                labelOptions = this.options.labels,
	                slotCount = Math.max(this.tickPositions.length - (this.categories ? 0 : 1), 1),
	                marginLeft = chart.margin[3];
	
	            return (horiz && (labelOptions.step || 0) < 2 && !labelOptions.rotation && // #4415
	                ((this.staggerLines || 1) * chart.plotWidth) / slotCount) ||
	                (!horiz && ((marginLeft && (marginLeft - chart.spacing[3])) || chart.chartWidth * 0.33)); // #1580, #1931
	
	        },
	
	        /**
	         * Render the axis labels and determine whether ellipsis or rotation need to be applied
	         */
	        renderUnsquish: function () {
	            var chart = this.chart,
	                renderer = chart.renderer,
	                tickPositions = this.tickPositions,
	                ticks = this.ticks,
	                labelOptions = this.options.labels,
	                horiz = this.horiz,
	                slotWidth = this.getSlotWidth(),
	                innerWidth = mathMax(1, mathRound(slotWidth - 2 * (labelOptions.padding || 5))),
	                attr = {},
	                labelMetrics = this.labelMetrics(),
	                textOverflowOption = labelOptions.style.textOverflow,
	                css,
	                maxLabelLength = 0,
	                label,
	                i,
	                pos;
	
	            // Set rotation option unless it is "auto", like in gauges
	            if (!isString(labelOptions.rotation)) {
	                attr.rotation = labelOptions.rotation || 0; // #4443
	            }
	
	            // Get the longest label length
	            each(tickPositions, function (tick) {
	                tick = ticks[tick];
	                if (tick && tick.labelLength > maxLabelLength) {
	                    maxLabelLength = tick.labelLength;
	                }
	            });
	            this.maxLabelLength = maxLabelLength;
	        
	
	            // Handle auto rotation on horizontal axis
	            if (this.autoRotation) {
	
	                // Apply rotation only if the label is too wide for the slot, and
	                // the label is wider than its height.
	                if (maxLabelLength > innerWidth && maxLabelLength > labelMetrics.h) {
	                    attr.rotation = this.labelRotation;
	                } else {
	                    this.labelRotation = 0;
	                }
	
	            // Handle word-wrap or ellipsis on vertical axis
	            } else if (slotWidth) {
	                // For word-wrap or ellipsis
	                css = { width: innerWidth + PX };
	
	                if (!textOverflowOption) {
	                    css.textOverflow = 'clip';
	
	                    // On vertical axis, only allow word wrap if there is room for more lines.
	                    i = tickPositions.length;
	                    while (!horiz && i--) {
	                        pos = tickPositions[i];
	                        label = ticks[pos].label;
	                        if (label) {
	                            // Reset ellipsis in order to get the correct bounding box (#4070)
	                            if (label.styles.textOverflow === 'ellipsis') {
	                                label.css({ textOverflow: 'clip' });
	
	                            // Set the correct width in order to read the bounding box height (#4678, #5034)
	                            } else if (ticks[pos].labelLength > slotWidth) {
	                                label.css({ width: slotWidth + 'px' });
	                            }
	
	                            if (label.getBBox().height > this.len / tickPositions.length - (labelMetrics.h - labelMetrics.f)) {
	                                label.specCss = { textOverflow: 'ellipsis' };
	                            }
	                        }
	                    }
	                }
	            }
	
	
	            // Add ellipsis if the label length is significantly longer than ideal
	            if (attr.rotation) {
	                css = {
	                    width: (maxLabelLength > chart.chartHeight * 0.5 ? chart.chartHeight * 0.33 : chart.chartHeight) + PX
	                };
	                if (!textOverflowOption) {
	                    css.textOverflow = 'ellipsis';
	                }
	            }
	
	            // Set the explicit or automatic label alignment
	            this.labelAlign = labelOptions.align || this.autoLabelAlign(this.labelRotation);
	            if (this.labelAlign) {
	                attr.align = this.labelAlign;
	            }
	
	            // Apply general and specific CSS
	            each(tickPositions, function (pos) {
	                var tick = ticks[pos],
	                    label = tick && tick.label;
	                if (label) {
	                    label.attr(attr); // This needs to go before the CSS in old IE (#4502)
	                    if (css) {
	                        label.css(merge(css, label.specCss));
	                    }
	                    delete label.specCss;
	                    tick.rotation = attr.rotation;
	                }
	            });
	
	            // Note: Why is this not part of getLabelPosition?
	            this.tickRotCorr = renderer.rotCorr(labelMetrics.b, this.labelRotation || 0, this.side !== 0);
	        },
	
	        /**
	         * Return true if the axis has associated data
	         */
	        hasData: function () {
	            return this.hasVisibleSeries || (defined(this.min) && defined(this.max) && !!this.tickPositions);
	        },
	
	        /**
	         * Render the tick labels to a preliminary position to get their sizes
	         */
	        getOffset: function () {
	            var axis = this,
	                chart = axis.chart,
	                renderer = chart.renderer,
	                options = axis.options,
	                tickPositions = axis.tickPositions,
	                ticks = axis.ticks,
	                horiz = axis.horiz,
	                side = axis.side,
	                invertedSide = chart.inverted ? [1, 0, 3, 2][side] : side,
	                hasData,
	                showAxis,
	                titleOffset = 0,
	                titleOffsetOption,
	                titleMargin = 0,
	                axisTitleOptions = options.title,
	                labelOptions = options.labels,
	                labelOffset = 0, // reset
	                labelOffsetPadded,
	                opposite = axis.opposite,
	                axisOffset = chart.axisOffset,
	                clipOffset = chart.clipOffset,
	                clip,
	                directionFactor = [-1, 1, 1, -1][side],
	                n,
	                textAlign,
	                axisParent = axis.axisParent, // Used in color axis
	                lineHeightCorrection,
	                tickSize = this.tickSize('tick');
	
	            // For reuse in Axis.render
	            hasData = axis.hasData();
	            axis.showAxis = showAxis = hasData || pick(options.showEmpty, true);
	
	            // Set/reset staggerLines
	            axis.staggerLines = axis.horiz && labelOptions.staggerLines;
	
	            // Create the axisGroup and gridGroup elements on first iteration
	            if (!axis.axisGroup) {
	                axis.gridGroup = renderer.g('grid')
	                    .attr({ zIndex: options.gridZIndex || 1 })
	                    .add(axisParent);
	                axis.axisGroup = renderer.g('axis')
	                    .attr({ zIndex: options.zIndex || 2 })
	                    .add(axisParent);
	                axis.labelGroup = renderer.g('axis-labels')
	                    .attr({ zIndex: labelOptions.zIndex || 7 })
	                    .addClass(PREFIX + axis.coll.toLowerCase() + '-labels')
	                    .add(axisParent);
	            }
	
	            if (hasData || axis.isLinked) {
	
	                // Generate ticks
	                each(tickPositions, function (pos) {
	                    if (!ticks[pos]) {
	                        ticks[pos] = new Tick(axis, pos);
	                    } else {
	                        ticks[pos].addLabel(); // update labels depending on tick interval
	                    }
	                });
	
	                axis.renderUnsquish();
	
	
	                // Left side must be align: right and right side must have align: left for labels
	                if (labelOptions.reserveSpace !== false && (side === 0 || side === 2 ||
	                        { 1: 'left', 3: 'right' }[side] === axis.labelAlign || axis.labelAlign === 'center')) {
	                    each(tickPositions, function (pos) {
	
	                        // get the highest offset
	                        labelOffset = mathMax(
	                            ticks[pos].getLabelSize(),
	                            labelOffset
	                        );
	                    });
	                }
	
	                if (axis.staggerLines) {
	                    labelOffset *= axis.staggerLines;
	                    axis.labelOffset = labelOffset * (axis.opposite ? -1 : 1);
	                }
	
	
	            } else { // doesn't have data
	                for (n in ticks) {
	                    ticks[n].destroy();
	                    delete ticks[n];
	                }
	            }
	
	            if (axisTitleOptions && axisTitleOptions.text && axisTitleOptions.enabled !== false) {
	                if (!axis.axisTitle) {
	                    textAlign = axisTitleOptions.textAlign;
	                    if (!textAlign) {
	                        textAlign = (horiz ? { 
	                            low: 'left',
	                            middle: 'center',
	                            high: 'right'
	                        } : { 
	                            low: opposite ? 'right' : 'left',
	                            middle: 'center',
	                            high: opposite ? 'left' : 'right'
	                        })[axisTitleOptions.align];
	                    }
	                    axis.axisTitle = renderer.text(
	                        axisTitleOptions.text,
	                        0,
	                        0,
	                        axisTitleOptions.useHTML
	                    )
	                    .attr({
	                        zIndex: 7,
	                        rotation: axisTitleOptions.rotation || 0,
	                        align: textAlign
	                    })
	                    .addClass(PREFIX + this.coll.toLowerCase() + '-title')
	                    .css(axisTitleOptions.style)
	                    .add(axis.axisGroup);
	                    axis.axisTitle.isNew = true;
	                }
	
	                if (showAxis) {
	                    titleOffset = axis.axisTitle.getBBox()[horiz ? 'height' : 'width'];
	                    titleOffsetOption = axisTitleOptions.offset;
	                    titleMargin = defined(titleOffsetOption) ? 0 : pick(axisTitleOptions.margin, horiz ? 5 : 10);
	                }
	
	                // hide or show the title depending on whether showEmpty is set
	                axis.axisTitle[showAxis ? 'show' : 'hide'](true);
	            }
	
	            // handle automatic or user set offset
	            axis.offset = directionFactor * pick(options.offset, axisOffset[side]);
	
	            axis.tickRotCorr = axis.tickRotCorr || { x: 0, y: 0 }; // polar
	            if (side === 0) {
	                lineHeightCorrection = -axis.labelMetrics().h;
	            } else if (side === 2) {
	                lineHeightCorrection = axis.tickRotCorr.y;
	            } else {
	                lineHeightCorrection = 0;
	            }
	
	            // Find the padded label offset
	            labelOffsetPadded = Math.abs(labelOffset) + titleMargin;
	            if (labelOffset) {
	                labelOffsetPadded -= lineHeightCorrection;
	                labelOffsetPadded += directionFactor * (horiz ? pick(labelOptions.y, axis.tickRotCorr.y + directionFactor * 8) : labelOptions.x);
	            }
	            axis.axisTitleMargin = pick(titleOffsetOption, labelOffsetPadded);
	
	            axisOffset[side] = mathMax(
	                axisOffset[side],
	                axis.axisTitleMargin + titleOffset + directionFactor * axis.offset,
	                labelOffsetPadded, // #3027
	                hasData && tickPositions.length && tickSize ? tickSize[0] : 0 // #4866
	            );
	
	            // Decide the clipping needed to keep the graph inside the plot area and axis lines
	            clip = options.offset ? 0 : mathFloor(options.lineWidth / 2) * 2; // #4308, #4371
	            clipOffset[invertedSide] = mathMax(clipOffset[invertedSide], clip);
	        },
	
	        /**
	         * Get the path for the axis line
	         */
	        getLinePath: function (lineWidth) {
	            var chart = this.chart,
	                opposite = this.opposite,
	                offset = this.offset,
	                horiz = this.horiz,
	                lineLeft = this.left + (opposite ? this.width : 0) + offset,
	                lineTop = chart.chartHeight - this.bottom - (opposite ? this.height : 0) + offset;
	
	            if (opposite) {
	                lineWidth *= -1; // crispify the other way - #1480, #1687
	            }
	
	            return chart.renderer
	                .crispLine([
	                    M,
	                    horiz ?
	                        this.left :
	                        lineLeft,
	                    horiz ?
	                        lineTop :
	                        this.top,
	                    L,
	                    horiz ?
	                        chart.chartWidth - this.right :
	                        lineLeft,
	                    horiz ?
	                        lineTop :
	                        chart.chartHeight - this.bottom
	                ], lineWidth);
	        },
	
	        /**
	         * Position the title
	         */
	        getTitlePosition: function () {
	            // compute anchor points for each of the title align options
	            var horiz = this.horiz,
	                axisLeft = this.left,
	                axisTop = this.top,
	                axisLength = this.len,
	                axisTitleOptions = this.options.title,
	                margin = horiz ? axisLeft : axisTop,
	                opposite = this.opposite,
	                offset = this.offset,
	                xOption = axisTitleOptions.x || 0,
	                yOption = axisTitleOptions.y || 0,
	                fontSize = this.chart.renderer.fontMetrics(axisTitleOptions.style.fontSize).f,
	
	                // the position in the length direction of the axis
	                alongAxis = {
	                    low: margin + (horiz ? 0 : axisLength),
	                    middle: margin + axisLength / 2,
	                    high: margin + (horiz ? axisLength : 0)
	                }[axisTitleOptions.align],
	
	                // the position in the perpendicular direction of the axis
	                offAxis = (horiz ? axisTop + this.height : axisLeft) +
	                    (horiz ? 1 : -1) * // horizontal axis reverses the margin
	                    (opposite ? -1 : 1) * // so does opposite axes
	                    this.axisTitleMargin +
	                    (this.side === 2 ? fontSize : 0);
	
	            return {
	                x: horiz ?
	                    alongAxis + xOption :
	                    offAxis + (opposite ? this.width : 0) + offset + xOption,
	                y: horiz ?
	                    offAxis + yOption - (opposite ? this.height : 0) + offset :
	                    alongAxis + yOption
	            };
	        },
	
	        /**
	         * Render the axis
	         */
	        render: function () {
	            var axis = this,
	                chart = axis.chart,
	                renderer = chart.renderer,
	                options = axis.options,
	                isLog = axis.isLog,
	                lin2log = axis.lin2log,
	                isLinked = axis.isLinked,
	                tickPositions = axis.tickPositions,
	                axisTitle = axis.axisTitle,
	                ticks = axis.ticks,
	                minorTicks = axis.minorTicks,
	                alternateBands = axis.alternateBands,
	                stackLabelOptions = options.stackLabels,
	                alternateGridColor = options.alternateGridColor,
	                tickmarkOffset = axis.tickmarkOffset,
	                lineWidth = options.lineWidth,
	                linePath,
	                hasRendered = chart.hasRendered,
	                slideInTicks = hasRendered && isNumber(axis.oldMin),
	                showAxis = axis.showAxis,
	                animation = animObject(renderer.globalAnimation),
	                from,
	                to;
	
	            // Reset
	            axis.labelEdge.length = 0;
	            //axis.justifyToPlot = overflow === 'justify';
	            axis.overlap = false;
	
	            // Mark all elements inActive before we go over and mark the active ones
	            each([ticks, minorTicks, alternateBands], function (coll) {
	                var pos;
	                for (pos in coll) {
	                    coll[pos].isActive = false;
	                }
	            });
	
	            // If the series has data draw the ticks. Else only the line and title
	            if (axis.hasData() || isLinked) {
	
	                // minor ticks
	                if (axis.minorTickInterval && !axis.categories) {
	                    each(axis.getMinorTickPositions(), function (pos) {
	                        if (!minorTicks[pos]) {
	                            minorTicks[pos] = new Tick(axis, pos, 'minor');
	                        }
	
	                        // render new ticks in old position
	                        if (slideInTicks && minorTicks[pos].isNew) {
	                            minorTicks[pos].render(null, true);
	                        }
	
	                        minorTicks[pos].render(null, false, 1);
	                    });
	                }
	
	                // Major ticks. Pull out the first item and render it last so that
	                // we can get the position of the neighbour label. #808.
	                if (tickPositions.length) { // #1300
	                    each(tickPositions, function (pos, i) {
	
	                        // linked axes need an extra check to find out if
	                        if (!isLinked || (pos >= axis.min && pos <= axis.max)) {
	
	                            if (!ticks[pos]) {
	                                ticks[pos] = new Tick(axis, pos);
	                            }
	
	                            // render new ticks in old position
	                            if (slideInTicks && ticks[pos].isNew) {
	                                ticks[pos].render(i, true, 0.1);
	                            }
	
	                            ticks[pos].render(i);
	                        }
	
	                    });
	                    // In a categorized axis, the tick marks are displayed between labels. So
	                    // we need to add a tick mark and grid line at the left edge of the X axis.
	                    if (tickmarkOffset && (axis.min === 0 || axis.single)) {
	                        if (!ticks[-1]) {
	                            ticks[-1] = new Tick(axis, -1, null, true);
	                        }
	                        ticks[-1].render(-1);
	                    }
	
	                }
	
	                // alternate grid color
	                if (alternateGridColor) {
	                    each(tickPositions, function (pos, i) {
	                        to = tickPositions[i + 1] !== UNDEFINED ? tickPositions[i + 1] + tickmarkOffset : axis.max - tickmarkOffset; 
	                        if (i % 2 === 0 && pos < axis.max && to <= axis.max + (chart.polar ? -tickmarkOffset : tickmarkOffset)) { // #2248, #4660
	                            if (!alternateBands[pos]) {
	                                alternateBands[pos] = new Highcharts.PlotLineOrBand(axis);
	                            }
	                            from = pos + tickmarkOffset; // #949
	                            alternateBands[pos].options = {
	                                from: isLog ? lin2log(from) : from,
	                                to: isLog ? lin2log(to) : to,
	                                color: alternateGridColor
	                            };
	                            alternateBands[pos].render();
	                            alternateBands[pos].isActive = true;
	                        }
	                    });
	                }
	
	                // custom plot lines and bands
	                if (!axis._addedPlotLB) { // only first time
	                    each((options.plotLines || []).concat(options.plotBands || []), function (plotLineOptions) {
	                        axis.addPlotBandOrLine(plotLineOptions);
	                    });
	                    axis._addedPlotLB = true;
	                }
	
	            } // end if hasData
	
	            // Remove inactive ticks
	            each([ticks, minorTicks, alternateBands], function (coll) {
	                var pos,
	                    i,
	                    forDestruction = [],
	                    delay = animation.duration,
	                    destroyInactiveItems = function () {
	                        i = forDestruction.length;
	                        while (i--) {
	                            // When resizing rapidly, the same items may be destroyed in different timeouts,
	                            // or the may be reactivated
	                            if (coll[forDestruction[i]] && !coll[forDestruction[i]].isActive) {
	                                coll[forDestruction[i]].destroy();
	                                delete coll[forDestruction[i]];
	                            }
	                        }
	
	                    };
	
	                for (pos in coll) {
	
	                    if (!coll[pos].isActive) {
	                        // Render to zero opacity
	                        coll[pos].render(pos, false, 0);
	                        coll[pos].isActive = false;
	                        forDestruction.push(pos);
	                    }
	                }
	
	                // When the objects are finished fading out, destroy them
	                syncTimeout(
	                    destroyInactiveItems, 
	                    coll === alternateBands || !chart.hasRendered || !delay ? 0 : delay
	                );
	            });
	
	            // Static items. As the axis group is cleared on subsequent calls
	            // to render, these items are added outside the group.
	            // axis line
	            if (lineWidth) {
	                linePath = axis.getLinePath(lineWidth);
	                if (!axis.axisLine) {
	                    axis.axisLine = renderer.path(linePath)
	                        .attr({
	                            stroke: options.lineColor,
	                            'stroke-width': lineWidth,
	                            zIndex: 7
	                        })
	                        .add(axis.axisGroup);
	                } else {
	                    axis.axisLine.animate({ d: linePath });
	                }
	
	                // show or hide the line depending on options.showEmpty
	                axis.axisLine[showAxis ? 'show' : 'hide'](true);
	            }
	
	            if (axisTitle && showAxis) {
	
	                axisTitle[axisTitle.isNew ? 'attr' : 'animate'](
	                    axis.getTitlePosition()
	                );
	                axisTitle.isNew = false;
	            }
	
	            // Stacked totals:
	            if (stackLabelOptions && stackLabelOptions.enabled) {
	                axis.renderStackTotals();
	            }
	            // End stacked totals
	
	            axis.isDirty = false;
	        },
	
	        /**
	         * Redraw the axis to reflect changes in the data or axis extremes
	         */
	        redraw: function () {
	
	            if (this.visible) {
	                // render the axis
	                this.render();
	
	                // move plot lines and bands
	                each(this.plotLinesAndBands, function (plotLine) {
	                    plotLine.render();
	                });
	            }
	
	            // mark associated series as dirty and ready for redraw
	            each(this.series, function (series) {
	                series.isDirty = true;
	            });
	
	        },
	
	        /**
	         * Destroys an Axis instance.
	         */
	        destroy: function (keepEvents) {
	            var axis = this,
	                stacks = axis.stacks,
	                stackKey,
	                plotLinesAndBands = axis.plotLinesAndBands,
	                i;
	
	            // Remove the events
	            if (!keepEvents) {
	                removeEvent(axis);
	            }
	
	            // Destroy each stack total
	            for (stackKey in stacks) {
	                destroyObjectProperties(stacks[stackKey]);
	
	                stacks[stackKey] = null;
	            }
	
	            // Destroy collections
	            each([axis.ticks, axis.minorTicks, axis.alternateBands], function (coll) {
	                destroyObjectProperties(coll);
	            });
	            i = plotLinesAndBands.length;
	            while (i--) { // #1975
	                plotLinesAndBands[i].destroy();
	            }
	
	            // Destroy properties
	            each(['stackTotalGroup', 'axisLine', 'axisTitle', 'axisGroup', 'gridGroup', 'labelGroup', 'cross'], function (prop) {
	                if (axis[prop]) {
	                    axis[prop] = axis[prop].destroy();
	                }
	            });
	
	
	            this._addedPlotLB = this.chart._labelPanes = this.ordinalSlope = undefined; // #1611, #2887, #4314, #5316
	        },
	
	        /**
	         * Draw the crosshair
	         * 
	         * @param  {Object} e The event arguments from the modified pointer event
	         * @param  {Object} point The Point object
	         */
	        drawCrosshair: function (e, point) {
	
	            var path,
	                options = this.crosshair,
	                pos,
	                attribs,
	                categorized,
	                strokeWidth;
	
	            // Use last available event when updating non-snapped crosshairs without
	            // mouse interaction (#5287)
	            if (!e) {
	                e = this.cross && this.cross.e;
	            }
	
	            if (
	                // Disabled in options
	                !this.crosshair ||
	                // Snap
	                ((defined(point) || !pick(options.snap, true)) === false)
	            ) {
	                this.hideCrosshair();
	            } else {
	
	                // Get the path
	                if (!pick(options.snap, true)) {
	                    pos = (this.horiz ? e.chartX - this.pos : this.len - e.chartY + this.pos);
	                } else if (defined(point)) {
	                    pos = this.isXAxis ? point.plotX : this.len - point.plotY; // #3834
	                }
	
	                if (this.isRadial) {
	                    path = this.getPlotLinePath(this.isXAxis ? point.x : pick(point.stackY, point.y)) || null; // #3189
	                } else {
	                    path = this.getPlotLinePath(null, null, null, null, pos) || null; // #3189
	                }
	
	                if (path === null) {
	                    this.hideCrosshair();
	                    return;
	                }
	
	                categorized = this.categories && !this.isRadial;
	                strokeWidth = pick(options.width, (categorized ? this.transA : 1));
	
	                // Draw the cross
	                if (this.cross) {
	                    this.cross
	                        .attr({
	                            d: path,
	                            visibility: 'visible',
	                            'stroke-width': strokeWidth // #4737
	                        });
	                } else {
	                    attribs = {
	                        'pointer-events': 'none', // #5259
	                        'stroke-width': strokeWidth,
	                        stroke: options.color || (categorized ? 'rgba(155,200,255,0.2)' : '#C0C0C0'),
	                        zIndex: pick(options.zIndex, 2)
	                    };
	                    if (options.dashStyle) {
	                        attribs.dashstyle = options.dashStyle;
	                    }
	                    this.cross = this.chart.renderer.path(path).attr(attribs).add();
	                }
	                this.cross.e = e;
	            }
	
	        },
	
	        /**
	         *    Hide the crosshair.
	         */
	        hideCrosshair: function () {
	            if (this.cross) {
	                this.cross.hide();
	            }
	        }
	    }; // end Axis
	
	    extend(Axis.prototype, AxisPlotLineOrBandExtension);
	
	    /**
	     * Set the tick positions to a time unit that makes sense, for example
	     * on the first of each month or on every Monday. Return an array
	     * with the time positions. Used in datetime axes as well as for grouping
	     * data on a datetime axis.
	     *
	     * @param {Object} normalizedInterval The interval in axis values (ms) and the count
	     * @param {Number} min The minimum in axis values
	     * @param {Number} max The maximum in axis values
	     * @param {Number} startOfWeek
	     */
	    Axis.prototype.getTimeTicks = function (normalizedInterval, min, max, startOfWeek) {
	        var tickPositions = [],
	            i,
	            higherRanks = {},
	            useUTC = defaultOptions.global.useUTC,
	            minYear, // used in months and years as a basis for Date.UTC()
	            minDate = new Date(min - getTZOffset(min)),
	            interval = normalizedInterval.unitRange,
	            count = normalizedInterval.count;
	
	        if (defined(min)) { // #1300
	            minDate[setMilliseconds](interval >= timeUnits.second ? 0 : // #3935
	                count * mathFloor(minDate.getMilliseconds() / count)); // #3652, #3654
	
	            if (interval >= timeUnits.second) { // second
	                minDate[setSeconds](interval >= timeUnits.minute ? 0 : // #3935
	                    count * mathFloor(minDate.getSeconds() / count));
	            }
	
	            if (interval >= timeUnits.minute) { // minute
	                minDate[setMinutes](interval >= timeUnits.hour ? 0 :
	                    count * mathFloor(minDate[getMinutes]() / count));
	            }
	
	            if (interval >= timeUnits.hour) { // hour
	                minDate[setHours](interval >= timeUnits.day ? 0 :
	                    count * mathFloor(minDate[getHours]() / count));
	            }
	
	            if (interval >= timeUnits.day) { // day
	                minDate[setDate](interval >= timeUnits.month ? 1 :
	                    count * mathFloor(minDate[getDate]() / count));
	            }
	
	            if (interval >= timeUnits.month) { // month
	                minDate[setMonth](interval >= timeUnits.year ? 0 :
	                    count * mathFloor(minDate[getMonth]() / count));
	                minYear = minDate[getFullYear]();
	            }
	
	            if (interval >= timeUnits.year) { // year
	                minYear -= minYear % count;
	                minDate[setFullYear](minYear);
	            }
	
	            // week is a special case that runs outside the hierarchy
	            if (interval === timeUnits.week) {
	                // get start of current week, independent of count
	                minDate[setDate](minDate[getDate]() - minDate[getDay]() +
	                    pick(startOfWeek, 1));
	            }
	
	
	            // get tick positions
	            i = 1;
	            if (timezoneOffset || getTimezoneOffset) {
	                minDate = minDate.getTime();
	                minDate = new Date(minDate + getTZOffset(minDate));
	            }
	            minYear = minDate[getFullYear]();
	            var time = minDate.getTime(),
	                minMonth = minDate[getMonth](),
	                minDateDate = minDate[getDate](),
	                variableDayLength = !useUTC || !!getTimezoneOffset, // #4951
	                localTimezoneOffset = (timeUnits.day +
	                        (useUTC ? getTZOffset(minDate) : minDate.getTimezoneOffset() * 60 * 1000)
	                    ) % timeUnits.day; // #950, #3359
	
	            // iterate and add tick positions at appropriate values
	            while (time < max) {
	                tickPositions.push(time);
	
	                // if the interval is years, use Date.UTC to increase years
	                if (interval === timeUnits.year) {
	                    time = makeTime(minYear + i * count, 0);
	
	                // if the interval is months, use Date.UTC to increase months
	                } else if (interval === timeUnits.month) {
	                    time = makeTime(minYear, minMonth + i * count);
	
	                // if we're using global time, the interval is not fixed as it jumps
	                // one hour at the DST crossover
	                } else if (variableDayLength && (interval === timeUnits.day || interval === timeUnits.week)) {
	                    time = makeTime(minYear, minMonth, minDateDate +
	                        i * count * (interval === timeUnits.day ? 1 : 7));
	
	                // else, the interval is fixed and we use simple addition
	                } else {
	                    time += interval * count;
	                }
	
	                i++;
	            }
	
	            // push the last time
	            tickPositions.push(time);
	
	
	            // mark new days if the time is dividible by day (#1649, #1760)
	            each(grep(tickPositions, function (time) {
	                return interval <= timeUnits.hour && time % timeUnits.day === localTimezoneOffset;
	            }), function (time) {
	                higherRanks[time] = 'day';
	            });
	        }
	
	
	        // record information on the chosen unit - for dynamic label formatter
	        tickPositions.info = extend(normalizedInterval, {
	            higherRanks: higherRanks,
	            totalRange: interval * count
	        });
	
	        return tickPositions;
	    };
	
	    /**
	     * Get a normalized tick interval for dates. Returns a configuration object with
	     * unit range (interval), count and name. Used to prepare data for getTimeTicks.
	     * Previously this logic was part of getTimeTicks, but as getTimeTicks now runs
	     * of segments in stock charts, the normalizing logic was extracted in order to
	     * prevent it for running over again for each segment having the same interval.
	     * #662, #697.
	     */
	    Axis.prototype.normalizeTimeTickInterval = function (tickInterval, unitsOption) {
	        var units = unitsOption || [[
	                'millisecond', // unit name
	                [1, 2, 5, 10, 20, 25, 50, 100, 200, 500] // allowed multiples
	            ], [
	                'second',
	                [1, 2, 5, 10, 15, 30]
	            ], [
	                'minute',
	                [1, 2, 5, 10, 15, 30]
	            ], [
	                'hour',
	                [1, 2, 3, 4, 6, 8, 12]
	            ], [
	                'day',
	                [1, 2]
	            ], [
	                'week',
	                [1, 2]
	            ], [
	                'month',
	                [1, 2, 3, 4, 6]
	            ], [
	                'year',
	                null
	            ]],
	            unit = units[units.length - 1], // default unit is years
	            interval = timeUnits[unit[0]],
	            multiples = unit[1],
	            count,
	            i;
	
	        // loop through the units to find the one that best fits the tickInterval
	        for (i = 0; i < units.length; i++) {
	            unit = units[i];
	            interval = timeUnits[unit[0]];
	            multiples = unit[1];
	
	
	            if (units[i + 1]) {
	                // lessThan is in the middle between the highest multiple and the next unit.
	                var lessThan = (interval * multiples[multiples.length - 1] +
	                            timeUnits[units[i + 1][0]]) / 2;
	
	                // break and keep the current unit
	                if (tickInterval <= lessThan) {
	                    break;
	                }
	            }
	        }
	
	        // prevent 2.5 years intervals, though 25, 250 etc. are allowed
	        if (interval === timeUnits.year && tickInterval < 5 * interval) {
	            multiples = [1, 2, 5];
	        }
	
	        // get the count
	        count = normalizeTickInterval(
	            tickInterval / interval,
	            multiples,
	            unit[0] === 'year' ? mathMax(getMagnitude(tickInterval / interval), 1) : 1 // #1913, #2360
	        );
	
	        return {
	            unitRange: interval,
	            count: count,
	            unitName: unit[0]
	        };
	    };
	    /**
	     * Methods defined on the Axis prototype
	     */
	
	    /**
	     * Set the tick positions of a logarithmic axis
	     */
	    Axis.prototype.getLogTickPositions = function (interval, min, max, minor) {
	        var axis = this,
	            options = axis.options,
	            axisLength = axis.len,
	            lin2log = axis.lin2log,
	            log2lin = axis.log2lin,
	            // Since we use this method for both major and minor ticks,
	            // use a local variable and return the result
	            positions = [];
	
	        // Reset
	        if (!minor) {
	            axis._minorAutoInterval = null;
	        }
	
	        // First case: All ticks fall on whole logarithms: 1, 10, 100 etc.
	        if (interval >= 0.5) {
	            interval = mathRound(interval);
	            positions = axis.getLinearTickPositions(interval, min, max);
	
	        // Second case: We need intermediary ticks. For example
	        // 1, 2, 4, 6, 8, 10, 20, 40 etc.
	        } else if (interval >= 0.08) {
	            var roundedMin = mathFloor(min),
	                intermediate,
	                i,
	                j,
	                len,
	                pos,
	                lastPos,
	                break2;
	
	            if (interval > 0.3) {
	                intermediate = [1, 2, 4];
	            } else if (interval > 0.15) { // 0.2 equals five minor ticks per 1, 10, 100 etc
	                intermediate = [1, 2, 4, 6, 8];
	            } else { // 0.1 equals ten minor ticks per 1, 10, 100 etc
	                intermediate = [1, 2, 3, 4, 5, 6, 7, 8, 9];
	            }
	
	            for (i = roundedMin; i < max + 1 && !break2; i++) {
	                len = intermediate.length;
	                for (j = 0; j < len && !break2; j++) {
	                    pos = log2lin(lin2log(i) * intermediate[j]);
	                    if (pos > min && (!minor || lastPos <= max) && lastPos !== UNDEFINED) { // #1670, lastPos is #3113
	                        positions.push(lastPos);
	                    }
	
	                    if (lastPos > max) {
	                        break2 = true;
	                    }
	                    lastPos = pos;
	                }
	            }
	
	        // Third case: We are so deep in between whole logarithmic values that
	        // we might as well handle the tick positions like a linear axis. For
	        // example 1.01, 1.02, 1.03, 1.04.
	        } else {
	            var realMin = lin2log(min),
	                realMax = lin2log(max),
	                tickIntervalOption = options[minor ? 'minorTickInterval' : 'tickInterval'],
	                filteredTickIntervalOption = tickIntervalOption === 'auto' ? null : tickIntervalOption,
	                tickPixelIntervalOption = options.tickPixelInterval / (minor ? 5 : 1),
	                totalPixelLength = minor ? axisLength / axis.tickPositions.length : axisLength;
	
	            interval = pick(
	                filteredTickIntervalOption,
	                axis._minorAutoInterval,
	                (realMax - realMin) * tickPixelIntervalOption / (totalPixelLength || 1)
	            );
	
	            interval = normalizeTickInterval(
	                interval,
	                null,
	                getMagnitude(interval)
	            );
	
	            positions = map(axis.getLinearTickPositions(
	                interval,
	                realMin,
	                realMax
	            ), log2lin);
	
	            if (!minor) {
	                axis._minorAutoInterval = interval / 5;
	            }
	        }
	
	        // Set the axis-level tickInterval variable
	        if (!minor) {
	            axis.tickInterval = interval;
	        }
	        return positions;
	    };
	
	    Axis.prototype.log2lin = function (num) {
	        return math.log(num) / math.LN10;
	    };
	
	    Axis.prototype.lin2log = function (num) {
	        return math.pow(10, num);
	    };
	    /**
	     * The tooltip object
	     * @param {Object} chart The chart instance
	     * @param {Object} options Tooltip options
	     */
	    var Tooltip = Highcharts.Tooltip = function () {
	        this.init.apply(this, arguments);
	    };
	
	    Tooltip.prototype = {
	
	        init: function (chart, options) {
	
	            var borderWidth = options.borderWidth,
	                style = options.style,
	                padding = pInt(style.padding);
	
	            // Save the chart and options
	            this.chart = chart;
	            this.options = options;
	
	            // Keep track of the current series
	            //this.currentSeries = UNDEFINED;
	
	            // List of crosshairs
	            this.crosshairs = [];
	
	            // Current values of x and y when animating
	            this.now = { x: 0, y: 0 };
	
	            // The tooltip is initially hidden
	            this.isHidden = true;
	
	
	            // create the label
	            this.label = chart.renderer.label('', 0, 0, options.shape || 'callout', null, null, options.useHTML, null, 'tooltip')
	                .attr({
	                    padding: padding,
	                    fill: options.backgroundColor,
	                    'stroke-width': borderWidth,
	                    r: options.borderRadius,
	                    zIndex: 8,
	                    display: 'none' // #2301, #2657, #3532, #5570
	                })
	                .css(style)
	                .css({ padding: 0 }) // Remove it from VML, the padding is applied as an attribute instead (#1117)
	                .add();
	
	            // When using canVG the shadow shows up as a gray circle
	            // even if the tooltip is hidden.
	            if (!useCanVG) {
	                this.label.shadow(options.shadow);
	            }
	
	            // Public property for getting the shared state.
	            this.shared = options.shared;
	        },
	
	        /**
	         * Destroy the tooltip and its elements.
	         */
	        destroy: function () {
	            // Destroy and clear local variables
	            if (this.label) {
	                this.label = this.label.destroy();
	            }
	            clearTimeout(this.hideTimer);
	            clearTimeout(this.tooltipTimeout);
	        },
	
	        /**
	         * Provide a soft movement for the tooltip
	         *
	         * @param {Number} x
	         * @param {Number} y
	         * @private
	         */
	        move: function (x, y, anchorX, anchorY) {
	            var tooltip = this,
	                now = tooltip.now,
	                animate = tooltip.options.animation !== false && !tooltip.isHidden &&
	                    // When we get close to the target position, abort animation and land on the right place (#3056)
	                    (mathAbs(x - now.x) > 1 || mathAbs(y - now.y) > 1),
	                skipAnchor = tooltip.followPointer || tooltip.len > 1;
	
	            // Get intermediate values for animation
	            extend(now, {
	                x: animate ? (2 * now.x + x) / 3 : x,
	                y: animate ? (now.y + y) / 2 : y,
	                anchorX: skipAnchor ? UNDEFINED : animate ? (2 * now.anchorX + anchorX) / 3 : anchorX,
	                anchorY: skipAnchor ? UNDEFINED : animate ? (now.anchorY + anchorY) / 2 : anchorY
	            });
	
	            // Move to the intermediate value
	            tooltip.label.attr(now);
	
	
	            // Run on next tick of the mouse tracker
	            if (animate) {
	
	                // Never allow two timeouts
	                clearTimeout(this.tooltipTimeout);
	
	                // Set the fixed interval ticking for the smooth tooltip
	                this.tooltipTimeout = setTimeout(function () {
	                    // The interval function may still be running during destroy, so check that the chart is really there before calling.
	                    if (tooltip) {
	                        tooltip.move(x, y, anchorX, anchorY);
	                    }
	                }, 32);
	
	            }
	        },
	
	        /**
	         * Hide the tooltip
	         */
	        hide: function (delay) {
	            var tooltip = this;
	            clearTimeout(this.hideTimer); // disallow duplicate timers (#1728, #1766)
	            delay = pick(delay, this.options.hideDelay, 500);
	            if (!this.isHidden) {
	                this.hideTimer = syncTimeout(function () {
	                    tooltip.label[delay ? 'fadeOut' : 'hide']();
	                    tooltip.isHidden = true;
	                }, delay);
	            }
	        },
	
	        /**
	         * Extendable method to get the anchor position of the tooltip
	         * from a point or set of points
	         */
	        getAnchor: function (points, mouseEvent) {
	            var ret,
	                chart = this.chart,
	                inverted = chart.inverted,
	                plotTop = chart.plotTop,
	                plotLeft = chart.plotLeft,
	                plotX = 0,
	                plotY = 0,
	                yAxis,
	                xAxis;
	
	            points = splat(points);
	
	            // Pie uses a special tooltipPos
	            ret = points[0].tooltipPos;
	
	            // When tooltip follows mouse, relate the position to the mouse
	            if (this.followPointer && mouseEvent) {
	                if (mouseEvent.chartX === UNDEFINED) {
	                    mouseEvent = chart.pointer.normalize(mouseEvent);
	                }
	                ret = [
	                    mouseEvent.chartX - chart.plotLeft,
	                    mouseEvent.chartY - plotTop
	                ];
	            }
	            // When shared, use the average position
	            if (!ret) {
	                each(points, function (point) {
	                    yAxis = point.series.yAxis;
	                    xAxis = point.series.xAxis;
	                    plotX += point.plotX  + (!inverted && xAxis ? xAxis.left - plotLeft : 0);
	                    plotY += (point.plotLow ? (point.plotLow + point.plotHigh) / 2 : point.plotY) +
	                        (!inverted && yAxis ? yAxis.top - plotTop : 0); // #1151
	                });
	
	                plotX /= points.length;
	                plotY /= points.length;
	
	                ret = [
	                    inverted ? chart.plotWidth - plotY : plotX,
	                    this.shared && !inverted && points.length > 1 && mouseEvent ?
	                        mouseEvent.chartY - plotTop : // place shared tooltip next to the mouse (#424)
	                        inverted ? chart.plotHeight - plotX : plotY
	                ];
	            }
	
	            return map(ret, mathRound);
	        },
	
	        /**
	         * Place the tooltip in a chart without spilling over
	         * and not covering the point it self.
	         */
	        getPosition: function (boxWidth, boxHeight, point) {
	
	            var chart = this.chart,
	                distance = this.distance,
	                ret = {},
	                h = point.h || 0, // #4117
	                swapped,
	                first = ['y', chart.chartHeight, boxHeight, point.plotY + chart.plotTop, chart.plotTop, chart.plotTop + chart.plotHeight],
	                second = ['x', chart.chartWidth, boxWidth, point.plotX + chart.plotLeft, chart.plotLeft, chart.plotLeft + chart.plotWidth],
	                // The far side is right or bottom
	                preferFarSide = !this.followPointer && pick(point.ttBelow, !chart.inverted === !!point.negative), // #4984
	                /**
	                 * Handle the preferred dimension. When the preferred dimension is tooltip
	                 * on top or bottom of the point, it will look for space there.
	                 */
	                firstDimension = function (dim, outerSize, innerSize, point, min, max) {
	                    var roomLeft = innerSize < point - distance,
	                        roomRight = point + distance + innerSize < outerSize,
	                        alignedLeft = point - distance - innerSize,
	                        alignedRight = point + distance;
	
	                    if (preferFarSide && roomRight) {
	                        ret[dim] = alignedRight;
	                    } else if (!preferFarSide && roomLeft) {
	                        ret[dim] = alignedLeft;
	                    } else if (roomLeft) {
	                        ret[dim] = mathMin(max - innerSize, alignedLeft - h < 0 ? alignedLeft : alignedLeft - h);
	                    } else if (roomRight) {
	                        ret[dim] = mathMax(min, alignedRight + h + innerSize > outerSize ? alignedRight : alignedRight + h);
	                    } else {
	                        return false;
	                    }
	                },
	                /**
	                 * Handle the secondary dimension. If the preferred dimension is tooltip
	                 * on top or bottom of the point, the second dimension is to align the tooltip
	                 * above the point, trying to align center but allowing left or right
	                 * align within the chart box.
	                 */
	                secondDimension = function (dim, outerSize, innerSize, point) {
	                    var retVal;
	
	                    // Too close to the edge, return false and swap dimensions
	                    if (point < distance || point > outerSize - distance) {
	                        retVal = false;
	                    // Align left/top
	                    } else if (point < innerSize / 2) {
	                        ret[dim] = 1;
	                    // Align right/bottom
	                    } else if (point > outerSize - innerSize / 2) {
	                        ret[dim] = outerSize - innerSize - 2;
	                    // Align center
	                    } else {
	                        ret[dim] = point - innerSize / 2;
	                    }
	                    return retVal;
	                },
	                /**
	                 * Swap the dimensions
	                 */
	                swap = function (count) {
	                    var temp = first;
	                    first = second;
	                    second = temp;
	                    swapped = count;
	                },
	                run = function () {
	                    if (firstDimension.apply(0, first) !== false) {
	                        if (secondDimension.apply(0, second) === false && !swapped) {
	                            swap(true);
	                            run();
	                        }
	                    } else if (!swapped) {
	                        swap(true);
	                        run();
	                    } else {
	                        ret.x = ret.y = 0;
	                    }
	                };
	
	            // Under these conditions, prefer the tooltip on the side of the point
	            if (chart.inverted || this.len > 1) {
	                swap();
	            }
	            run();
	
	            return ret;
	
	        },
	
	        /**
	         * In case no user defined formatter is given, this will be used. Note that the context
	         * here is an object holding point, series, x, y etc.
	         */
	        defaultFormatter: function (tooltip) {
	            var items = this.points || splat(this),
	                s;
	
	            // build the header
	            s = [tooltip.tooltipFooterHeaderFormatter(items[0])]; //#3397: abstraction to enable formatting of footer and header
	
	            // build the values
	            s = s.concat(tooltip.bodyFormatter(items));
	
	            // footer
	            s.push(tooltip.tooltipFooterHeaderFormatter(items[0], true)); //#3397: abstraction to enable formatting of footer and header
	
	            return s.join('');
	        },
	
	        /**
	         * Refresh the tooltip's text and position.
	         * @param {Object} point
	         */
	        refresh: function (point, mouseEvent) {
	            var tooltip = this,
	                chart = tooltip.chart,
	                label = tooltip.label,
	                options = tooltip.options,
	                x,
	                y,
	                anchor,
	                textConfig = {},
	                text,
	                pointConfig = [],
	                formatter = options.formatter || tooltip.defaultFormatter,
	                hoverPoints = chart.hoverPoints,
	                borderColor,
	                shared = tooltip.shared,
	                currentSeries;
	
	            clearTimeout(this.hideTimer);
	
	            // get the reference point coordinates (pie charts use tooltipPos)
	            tooltip.followPointer = splat(point)[0].series.tooltipOptions.followPointer;
	            anchor = tooltip.getAnchor(point, mouseEvent);
	            x = anchor[0];
	            y = anchor[1];
	
	            // shared tooltip, array is sent over
	            if (shared && !(point.series && point.series.noSharedTooltip)) {
	
	                // hide previous hoverPoints and set new
	
	                chart.hoverPoints = point;
	                if (hoverPoints) {
	                    each(hoverPoints, function (point) {
	                        point.setState();
	                    });
	                }
	
	                each(point, function (item) {
	                    item.setState(HOVER_STATE);
	
	                    pointConfig.push(item.getLabelConfig());
	                });
	
	                textConfig = {
	                    x: point[0].category,
	                    y: point[0].y
	                };
	                textConfig.points = pointConfig;
	                this.len = pointConfig.length;
	                point = point[0];
	
	            // single point tooltip
	            } else {
	                textConfig = point.getLabelConfig();
	            }
	            text = formatter.call(textConfig, tooltip);
	
	            // register the current series
	            currentSeries = point.series;
	            this.distance = pick(currentSeries.tooltipOptions.distance, 16);
	
	            // update the inner HTML
	            if (text === false) {
	                this.hide();
	            } else {
	
	                // show it
	                if (tooltip.isHidden) {
	                    stop(label);
	                    label.attr({
	                        opacity: 1,
	                        display: 'block'
	                    }).show();
	                }
	
	                // update text
	                label.attr({
	                    text: text
	                });
	
	                // set the stroke color of the box
	                borderColor = options.borderColor || point.color || currentSeries.color || '#606060';
	                label.attr({
	                    stroke: borderColor
	                });
	                tooltip.updatePosition({
	                    plotX: x,
	                    plotY: y,
	                    negative: point.negative,
	                    ttBelow: point.ttBelow,
	                    h: anchor[2] || 0
	                });
	
	                this.isHidden = false;
	            }
	            fireEvent(chart, 'tooltipRefresh', {
	                text: text,
	                x: x + chart.plotLeft,
	                y: y + chart.plotTop,
	                borderColor: borderColor
	            });
	        },
	
	        /**
	         * Find the new position and perform the move
	         */
	        updatePosition: function (point) {
	            var chart = this.chart,
	                label = this.label,
	                pos = (this.options.positioner || this.getPosition).call(
	                    this,
	                    label.width,
	                    label.height,
	                    point
	                );
	
	            // do the move
	            this.move(
	                mathRound(pos.x),
	                mathRound(pos.y || 0), // can be undefined (#3977)
	                point.plotX + chart.plotLeft,
	                point.plotY + chart.plotTop
	            );
	        },
	
	        /**
	         * Get the best X date format based on the closest point range on the axis.
	         */
	        getXDateFormat: function (point, options, xAxis) {
	            var xDateFormat,
	                dateTimeLabelFormats = options.dateTimeLabelFormats,
	                closestPointRange = xAxis && xAxis.closestPointRange,
	                n,
	                blank = '01-01 00:00:00.000',
	                strpos = {
	                    millisecond: 15,
	                    second: 12,
	                    minute: 9,
	                    hour: 6,
	                    day: 3
	                },
	                date,
	                lastN = 'millisecond'; // for sub-millisecond data, #4223
	
	            if (closestPointRange) {
	                date = dateFormat('%m-%d %H:%M:%S.%L', point.x);
	                for (n in timeUnits) {
	
	                    // If the range is exactly one week and we're looking at a Sunday/Monday, go for the week format
	                    if (closestPointRange === timeUnits.week && +dateFormat('%w', point.x) === xAxis.options.startOfWeek &&
	                            date.substr(6) === blank.substr(6)) {
	                        n = 'week';
	                        break;
	                    }
	
	                    // The first format that is too great for the range
	                    if (timeUnits[n] > closestPointRange) {
	                        n = lastN;
	                        break;
	                    }
	
	                    // If the point is placed every day at 23:59, we need to show
	                    // the minutes as well. #2637.
	                    if (strpos[n] && date.substr(strpos[n]) !== blank.substr(strpos[n])) {
	                        break;
	                    }
	
	                    // Weeks are outside the hierarchy, only apply them on Mondays/Sundays like in the first condition
	                    if (n !== 'week') {
	                        lastN = n;
	                    }
	                }
	
	                if (n) {
	                    xDateFormat = dateTimeLabelFormats[n];
	                }
	            } else {
	                xDateFormat = dateTimeLabelFormats.day;
	            }
	
	            return xDateFormat || dateTimeLabelFormats.year; // #2546, 2581
	        },
	
	        /**
	         * Format the footer/header of the tooltip
	         * #3397: abstraction to enable formatting of footer and header
	         */
	        tooltipFooterHeaderFormatter: function (labelConfig, isFooter) {
	            var footOrHead = isFooter ? 'footer' : 'header',
	                series = labelConfig.series,
	                tooltipOptions = series.tooltipOptions,
	                xDateFormat = tooltipOptions.xDateFormat,
	                xAxis = series.xAxis,
	                isDateTime = xAxis && xAxis.options.type === 'datetime' && isNumber(labelConfig.key),
	                formatString = tooltipOptions[footOrHead + 'Format'];
	
	            // Guess the best date format based on the closest point distance (#568, #3418)
	            if (isDateTime && !xDateFormat) {
	                xDateFormat = this.getXDateFormat(labelConfig, tooltipOptions, xAxis);
	            }
	
	            // Insert the footer date format if any
	            if (isDateTime && xDateFormat) {
	                formatString = formatString.replace('{point.key}', '{point.key:' + xDateFormat + '}');
	            }
	
	            return format(formatString, {
	                point: labelConfig,
	                series: series
	            });
	        },
	
	        /**
	         * Build the body (lines) of the tooltip by iterating over the items and returning one entry for each item,
	         * abstracting this functionality allows to easily overwrite and extend it.
	         */
	        bodyFormatter: function (items) {
	            return map(items, function (item) {
	                var tooltipOptions = item.series.tooltipOptions;
	                return (tooltipOptions.pointFormatter || item.point.tooltipFormatter).call(item.point, tooltipOptions.pointFormat);
	            });
	        }
	
	    };
	
	    var hoverChartIndex;
	
	    // Global flag for touch support
	    hasTouch = doc && doc.documentElement.ontouchstart !== UNDEFINED;
	
	    /**
	     * The mouse tracker object. All methods starting with "on" are primary DOM event handlers.
	     * Subsequent methods should be named differently from what they are doing.
	     * @param {Object} chart The Chart instance
	     * @param {Object} options The root options object
	     */
	    var Pointer = Highcharts.Pointer = function (chart, options) {
	        this.init(chart, options);
	    };
	
	    Pointer.prototype = {
	        /**
	         * Initialize Pointer
	         */
	        init: function (chart, options) {
	
	            var chartOptions = options.chart,
	                chartEvents = chartOptions.events,
	                zoomType = useCanVG ? '' : chartOptions.zoomType,
	                inverted = chart.inverted,
	                zoomX,
	                zoomY;
	
	            // Store references
	            this.options = options;
	            this.chart = chart;
	
	            // Zoom status
	            this.zoomX = zoomX = /x/.test(zoomType);
	            this.zoomY = zoomY = /y/.test(zoomType);
	            this.zoomHor = (zoomX && !inverted) || (zoomY && inverted);
	            this.zoomVert = (zoomY && !inverted) || (zoomX && inverted);
	            this.hasZoom = zoomX || zoomY;
	
	            // Do we need to handle click on a touch device?
	            this.runChartClick = chartEvents && !!chartEvents.click;
	
	            this.pinchDown = [];
	            this.lastValidTouch = {};
	
	            if (Highcharts.Tooltip && options.tooltip.enabled) {
	                chart.tooltip = new Tooltip(chart, options.tooltip);
	                this.followTouchMove = pick(options.tooltip.followTouchMove, true);
	            }
	
	            this.setDOMEvents();
	        },
	
	        /**
	         * Add crossbrowser support for chartX and chartY
	         * @param {Object} e The event object in standard browsers
	         */
	        normalize: function (e, chartPosition) {
	            var chartX,
	                chartY,
	                ePos;
	
	            // IE normalizing
	            e = e || win.event;
	            if (!e.target) {
	                e.target = e.srcElement;
	            }
	
	            // iOS (#2757)
	            ePos = e.touches ?  (e.touches.length ? e.touches.item(0) : e.changedTouches[0]) : e;
	
	            // Get mouse position
	            if (!chartPosition) {
	                this.chartPosition = chartPosition = offset(this.chart.container);
	            }
	
	            // chartX and chartY
	            if (ePos.pageX === UNDEFINED) { // IE < 9. #886.
	                chartX = mathMax(e.x, e.clientX - chartPosition.left); // #2005, #2129: the second case is
	                    // for IE10 quirks mode within framesets
	                chartY = e.y;
	            } else {
	                chartX = ePos.pageX - chartPosition.left;
	                chartY = ePos.pageY - chartPosition.top;
	            }
	
	            return extend(e, {
	                chartX: mathRound(chartX),
	                chartY: mathRound(chartY)
	            });
	        },
	
	        /**
	         * Get the click position in terms of axis values.
	         *
	         * @param {Object} e A pointer event
	         */
	        getCoordinates: function (e) {
	            var coordinates = {
	                xAxis: [],
	                yAxis: []
	            };
	
	            each(this.chart.axes, function (axis) {
	                coordinates[axis.isXAxis ? 'xAxis' : 'yAxis'].push({
	                    axis: axis,
	                    value: axis.toValue(e[axis.horiz ? 'chartX' : 'chartY'])
	                });
	            });
	            return coordinates;
	        },
	
	        /**
	         * With line type charts with a single tracker, get the point closest to the mouse.
	         * Run Point.onMouseOver and display tooltip for the point or points.
	         */
	        runPointActions: function (e) {
	
	            var pointer = this,
	                chart = pointer.chart,
	                series = chart.series,
	                tooltip = chart.tooltip,
	                shared = tooltip ? tooltip.shared : false,
	                followPointer,
	                updatePosition = true,
	                hoverPoint = chart.hoverPoint,
	                hoverSeries = chart.hoverSeries,
	                i,
	                anchor,
	                noSharedTooltip,
	                stickToHoverSeries,
	                directTouch,
	                kdpoints = [],
	                kdpointT;
	
	            // For hovering over the empty parts of the plot area (hoverSeries is undefined).
	            // If there is one series with point tracking (combo chart), don't go to nearest neighbour.
	            if (!shared && !hoverSeries) {
	                for (i = 0; i < series.length; i++) {
	                    if (series[i].directTouch || !series[i].options.stickyTracking) {
	                        series = [];
	                    }
	                }
	            }
	
	            // If it has a hoverPoint and that series requires direct touch (like columns, #3899), or we're on
	            // a noSharedTooltip series among shared tooltip series (#4546), use the hoverPoint . Otherwise,
	            // search the k-d tree.
	            stickToHoverSeries = hoverSeries && (shared ? hoverSeries.noSharedTooltip : hoverSeries.directTouch);
	            if (stickToHoverSeries && hoverPoint) {
	                kdpoints = [hoverPoint];
	
	            // Handle shared tooltip or cases where a series is not yet hovered
	            } else {
	                // When we have non-shared tooltip and sticky tracking is disabled,
	                // search for the closest point only on hovered series: #5533, #5476
	                if (!shared && hoverSeries && !hoverSeries.options.stickyTracking) {
	                    series = [hoverSeries];
	                }
	                // Find nearest points on all series
	                each(series, function (s) {
	                    // Skip hidden series
	                    noSharedTooltip = s.noSharedTooltip && shared;
	                    directTouch = !shared && s.directTouch;
	                    if (s.visible && !noSharedTooltip && !directTouch && pick(s.options.enableMouseTracking, true)) { // #3821
	                        kdpointT = s.searchPoint(e, !noSharedTooltip && s.kdDimensions === 1); // #3828
	                        if (kdpointT && kdpointT.series) { // Point.series becomes null when reset and before redraw (#5197)
	                            kdpoints.push(kdpointT);
	                        }
	                    }
	                });
	
	                // Sort kdpoints by distance to mouse pointer
	                kdpoints.sort(function (p1, p2) {
	                    var isCloserX = p1.distX - p2.distX,
	                        isCloser = p1.dist - p2.dist,
	                        isAbove = p1.series.group.zIndex > p2.series.group.zIndex ? -1 : 1;
	                    // We have two points which are not in the same place on xAxis and shared tooltip:
	                    if (isCloserX !== 0) {
	                        return isCloserX;
	                    }
	                    // Points are not exactly in the same place on x/yAxis:
	                    if (isCloser !== 0) {
	                        return isCloser;
	                    }
	                    // The same xAxis and yAxis position, sort by z-index:
	                    return isAbove;
	                });
	            }
	
	            // Remove points with different x-positions, required for shared tooltip and crosshairs (#4645):
	            if (shared) {
	                i = kdpoints.length;
	                while (i--) {
	                    if (kdpoints[i].clientX !== kdpoints[0].clientX || kdpoints[i].series.noSharedTooltip) {
	                        kdpoints.splice(i, 1);
	                    }
	                }
	            }
	
	            // Refresh tooltip for kdpoint if new hover point or tooltip was hidden // #3926, #4200
	            if (kdpoints[0] && (kdpoints[0] !== pointer.hoverPoint || (tooltip && tooltip.isHidden))) {
	                // Draw tooltip if necessary
	                if (shared && !kdpoints[0].series.noSharedTooltip) {
	                    // Do mouseover on all points (#3919, #3985, #4410)
	                    for (i = 0; i >= 0; i--) {
	                        kdpoints[i].onMouseOver(e, kdpoints[i] !== ((hoverSeries && hoverSeries.directTouch && hoverPoint) || kdpoints[0]));
	                    }
	                    // Make sure that the hoverPoint and hoverSeries are stored for events (e.g. click), #5622
	                    if (hoverSeries && hoverSeries.directTouch && hoverPoint && hoverPoint !== kdpoints[0]) {
	                        hoverPoint.onMouseOver(e, false);
	                    }
	                    if (kdpoints.length && tooltip) {
	                        // Keep the order of series in tooltip:
	                        tooltip.refresh(kdpoints.sort(function (p1, p2) {
	                            return p1.series.index - p2.series.index;
	                        }), e);
	                    }
	                } else {
	                    if (tooltip) {
	                        tooltip.refresh(kdpoints[0], e);
	                    }
	                    if (!hoverSeries || !hoverSeries.directTouch) { // #4448
	                        kdpoints[0].onMouseOver(e);
	                    }
	                }
	                pointer.prevKDPoint = kdpoints[0];
	                updatePosition = false;
	            }
	            // Update positions (regardless of kdpoint or hoverPoint)
	            if (updatePosition) {
	                followPointer = hoverSeries && hoverSeries.tooltipOptions.followPointer;
	                if (tooltip && followPointer && !tooltip.isHidden) {
	                    anchor = tooltip.getAnchor([{}], e);
	                    tooltip.updatePosition({ plotX: anchor[0], plotY: anchor[1] });
	                }
	            }
	
	            // Start the event listener to pick up the tooltip and crosshairs
	            if (!pointer._onDocumentMouseMove) {
	                pointer._onDocumentMouseMove = function (e) {
	                    if (charts[hoverChartIndex]) {
	                        charts[hoverChartIndex].pointer.onDocumentMouseMove(e);
	                    }
	                };
	                addEvent(doc, 'mousemove', pointer._onDocumentMouseMove);
	            }
	
	            // Crosshair. For each hover point, loop over axes and draw cross if that point
	            // belongs to the axis (#4927).
	            each(shared ? kdpoints : [pick(hoverPoint, kdpoints[0])], function drawPointCrosshair(point) { // #5269
	                each(chart.axes, function drawAxisCrosshair(axis) {
	                    // In case of snap = false, point is undefined, and we draw the crosshair anyway (#5066)
	                    if (!point || point.series && point.series[axis.coll] === axis) { // #5658
	                        axis.drawCrosshair(e, point);
	                    }
	                });
	            });
	        },
	
	        /**
	         * Reset the tracking by hiding the tooltip, the hover series state and the hover point
	         *
	         * @param allowMove {Boolean} Instead of destroying the tooltip altogether, allow moving it if possible
	         */
	        reset: function (allowMove, delay) {
	            var pointer = this,
	                chart = pointer.chart,
	                hoverSeries = chart.hoverSeries,
	                hoverPoint = chart.hoverPoint,
	                hoverPoints = chart.hoverPoints,
	                tooltip = chart.tooltip,
	                tooltipPoints = tooltip && tooltip.shared ? hoverPoints : hoverPoint;
	
	            // Check if the points have moved outside the plot area (#1003, #4736, #5101)
	            if (allowMove && tooltipPoints) {
	                each(splat(tooltipPoints), function (point) {
	                    if (point.series.isCartesian && point.plotX === undefined) {
	                        allowMove = false;
	                    }
	                });
	            }
	        
	            // Just move the tooltip, #349
	            if (allowMove) {
	                if (tooltip && tooltipPoints) {
	                    tooltip.refresh(tooltipPoints);
	                    if (hoverPoint) { // #2500
	                        hoverPoint.setState(hoverPoint.state, true);
	                        each(chart.axes, function (axis) {
	                            if (axis.crosshair) {
	                                axis.drawCrosshair(null, hoverPoint);
	                            }
	                        });
	                    }
	                }
	
	            // Full reset
	            } else {
	
	                if (hoverPoint) {
	                    hoverPoint.onMouseOut();
	                }
	
	                if (hoverPoints) {
	                    each(hoverPoints, function (point) {
	                        point.setState();
	                    });
	                }
	
	                if (hoverSeries) {
	                    hoverSeries.onMouseOut();
	                }
	
	                if (tooltip) {
	                    tooltip.hide(delay);
	                }
	
	                if (pointer._onDocumentMouseMove) {
	                    removeEvent(doc, 'mousemove', pointer._onDocumentMouseMove);
	                    pointer._onDocumentMouseMove = null;
	                }
	
	                // Remove crosshairs
	                each(chart.axes, function (axis) {
	                    axis.hideCrosshair();
	                });
	
	                pointer.hoverX = pointer.prevKDPoint = chart.hoverPoints = chart.hoverPoint = null;
	            }
	        },
	
	        /**
	         * Scale series groups to a certain scale and translation
	         */
	        scaleGroups: function (attribs, clip) {
	
	            var chart = this.chart,
	                seriesAttribs;
	
	            // Scale each series
	            each(chart.series, function (series) {
	                seriesAttribs = attribs || series.getPlotBox(); // #1701
	                if (series.xAxis && series.xAxis.zoomEnabled) {
	                    series.group.attr(seriesAttribs);
	                    if (series.markerGroup) {
	                        series.markerGroup.attr(seriesAttribs);
	                        series.markerGroup.clip(clip ? chart.clipRect : null);
	                    }
	                    if (series.dataLabelsGroup) {
	                        series.dataLabelsGroup.attr(seriesAttribs);
	                    }
	                }
	            });
	
	            // Clip
	            chart.clipRect.attr(clip || chart.clipBox);
	        },
	
	        /**
	         * Start a drag operation
	         */
	        dragStart: function (e) {
	            var chart = this.chart;
	
	            // Record the start position
	            chart.mouseIsDown = e.type;
	            chart.cancelClick = false;
	            chart.mouseDownX = this.mouseDownX = e.chartX;
	            chart.mouseDownY = this.mouseDownY = e.chartY;
	        },
	
	        /**
	         * Perform a drag operation in response to a mousemove event while the mouse is down
	         */
	        drag: function (e) {
	
	            var chart = this.chart,
	                chartOptions = chart.options.chart,
	                chartX = e.chartX,
	                chartY = e.chartY,
	                zoomHor = this.zoomHor,
	                zoomVert = this.zoomVert,
	                plotLeft = chart.plotLeft,
	                plotTop = chart.plotTop,
	                plotWidth = chart.plotWidth,
	                plotHeight = chart.plotHeight,
	                clickedInside,
	                size,
	                selectionMarker = this.selectionMarker,
	                mouseDownX = this.mouseDownX,
	                mouseDownY = this.mouseDownY,
	                panKey = chartOptions.panKey && e[chartOptions.panKey + 'Key'];
	
	            // If the device supports both touch and mouse (like IE11), and we are touch-dragging
	            // inside the plot area, don't handle the mouse event. #4339.
	            if (selectionMarker && selectionMarker.touch) {
	                return;
	            }
	
	            // If the mouse is outside the plot area, adjust to cooordinates
	            // inside to prevent the selection marker from going outside
	            if (chartX < plotLeft) {
	                chartX = plotLeft;
	            } else if (chartX > plotLeft + plotWidth) {
	                chartX = plotLeft + plotWidth;
	            }
	
	            if (chartY < plotTop) {
	                chartY = plotTop;
	            } else if (chartY > plotTop + plotHeight) {
	                chartY = plotTop + plotHeight;
	            }
	
	            // determine if the mouse has moved more than 10px
	            this.hasDragged = Math.sqrt(
	                Math.pow(mouseDownX - chartX, 2) +
	                Math.pow(mouseDownY - chartY, 2)
	            );
	
	            if (this.hasDragged > 10) {
	                clickedInside = chart.isInsidePlot(mouseDownX - plotLeft, mouseDownY - plotTop);
	
	                // make a selection
	                if (chart.hasCartesianSeries && (this.zoomX || this.zoomY) && clickedInside && !panKey) {
	                    if (!selectionMarker) {
	                        this.selectionMarker = selectionMarker = chart.renderer.rect(
	                            plotLeft,
	                            plotTop,
	                            zoomHor ? 1 : plotWidth,
	                            zoomVert ? 1 : plotHeight,
	                            0
	                        )
	                        .attr({
	                            fill: chartOptions.selectionMarkerFill || 'rgba(69,114,167,0.25)',
	                            zIndex: 7
	                        })
	                        .add();
	                    }
	                }
	
	                // adjust the width of the selection marker
	                if (selectionMarker && zoomHor) {
	                    size = chartX - mouseDownX;
	                    selectionMarker.attr({
	                        width: mathAbs(size),
	                        x: (size > 0 ? 0 : size) + mouseDownX
	                    });
	                }
	                // adjust the height of the selection marker
	                if (selectionMarker && zoomVert) {
	                    size = chartY - mouseDownY;
	                    selectionMarker.attr({
	                        height: mathAbs(size),
	                        y: (size > 0 ? 0 : size) + mouseDownY
	                    });
	                }
	
	                // panning
	                if (clickedInside && !selectionMarker && chartOptions.panning) {
	                    chart.pan(e, chartOptions.panning);
	                }
	            }
	        },
	
	        /**
	         * On mouse up or touch end across the entire document, drop the selection.
	         */
	        drop: function (e) {
	            var pointer = this,
	                chart = this.chart,
	                hasPinched = this.hasPinched;
	
	            if (this.selectionMarker) {
	                var selectionData = {
	                        originalEvent: e, // #4890
	                        xAxis: [],
	                        yAxis: []
	                    },
	                    selectionBox = this.selectionMarker,
	                    selectionLeft = selectionBox.attr ? selectionBox.attr('x') : selectionBox.x,
	                    selectionTop = selectionBox.attr ? selectionBox.attr('y') : selectionBox.y,
	                    selectionWidth = selectionBox.attr ? selectionBox.attr('width') : selectionBox.width,
	                    selectionHeight = selectionBox.attr ? selectionBox.attr('height') : selectionBox.height,
	                    runZoom;
	
	                // a selection has been made
	                if (this.hasDragged || hasPinched) {
	
	                    // record each axis' min and max
	                    each(chart.axes, function (axis) {
	                        if (axis.zoomEnabled && defined(axis.min) && (hasPinched || pointer[{ xAxis: 'zoomX', yAxis: 'zoomY' }[axis.coll]])) { // #859, #3569
	                            var horiz = axis.horiz,
	                                minPixelPadding = e.type === 'touchend' ? axis.minPixelPadding : 0, // #1207, #3075
	                                selectionMin = axis.toValue((horiz ? selectionLeft : selectionTop) + minPixelPadding),
	                                selectionMax = axis.toValue((horiz ? selectionLeft + selectionWidth : selectionTop + selectionHeight) - minPixelPadding);
	
	                            selectionData[axis.coll].push({
	                                axis: axis,
	                                min: mathMin(selectionMin, selectionMax), // for reversed axes
	                                max: mathMax(selectionMin, selectionMax)
	                            });
	                            runZoom = true;
	                        }
	                    });
	                    if (runZoom) {
	                        fireEvent(chart, 'selection', selectionData, function (args) {
	                            chart.zoom(extend(args, hasPinched ? { animation: false } : null));
	                        });
	                    }
	
	                }
	                this.selectionMarker = this.selectionMarker.destroy();
	
	                // Reset scaling preview
	                if (hasPinched) {
	                    this.scaleGroups();
	                }
	            }
	
	            // Reset all
	            if (chart) { // it may be destroyed on mouse up - #877
	                css(chart.container, { cursor: chart._cursor });
	                chart.cancelClick = this.hasDragged > 10; // #370
	                chart.mouseIsDown = this.hasDragged = this.hasPinched = false;
	                this.pinchDown = [];
	            }
	        },
	
	        onContainerMouseDown: function (e) {
	
	            e = this.normalize(e);
	
	            // issue #295, dragging not always working in Firefox
	            if (e.preventDefault) {
	                e.preventDefault();
	            }
	
	            this.dragStart(e);
	        },
	
	
	
	        onDocumentMouseUp: function (e) {
	            if (charts[hoverChartIndex]) {
	                charts[hoverChartIndex].pointer.drop(e);
	            }
	        },
	
	        /**
	         * Special handler for mouse move that will hide the tooltip when the mouse leaves the plotarea.
	         * Issue #149 workaround. The mouseleave event does not always fire.
	         */
	        onDocumentMouseMove: function (e) {
	            var chart = this.chart,
	                chartPosition = this.chartPosition;
	
	            e = this.normalize(e, chartPosition);
	
	            // If we're outside, hide the tooltip
	            if (chartPosition && !this.inClass(e.target, 'highcharts-tracker') &&
	                    !chart.isInsidePlot(e.chartX - chart.plotLeft, e.chartY - chart.plotTop)) {
	                this.reset();
	            }
	        },
	
	        /**
	         * When mouse leaves the container, hide the tooltip.
	         */
	        onContainerMouseLeave: function (e) {
	            var chart = charts[hoverChartIndex];
	            if (chart && (e.relatedTarget || e.toElement)) { // #4886, MS Touch end fires mouseleave but with no related target
	                chart.pointer.reset();
	                chart.pointer.chartPosition = null; // also reset the chart position, used in #149 fix
	            }
	        },
	
	        // The mousemove, touchmove and touchstart event handler
	        onContainerMouseMove: function (e) {
	
	            var chart = this.chart;
	
	            if (!defined(hoverChartIndex) || !charts[hoverChartIndex] || !charts[hoverChartIndex].mouseIsDown) {
	                hoverChartIndex = chart.index;
	            }
	
	            e = this.normalize(e);
	            e.returnValue = false; // #2251, #3224
	
	            if (chart.mouseIsDown === 'mousedown') {
	                this.drag(e);
	            }
	
	            // Show the tooltip and run mouse over events (#977)
	            if ((this.inClass(e.target, 'highcharts-tracker') ||
	                    chart.isInsidePlot(e.chartX - chart.plotLeft, e.chartY - chart.plotTop)) && !chart.openMenu) {
	                this.runPointActions(e);
	            }
	        },
	
	        /**
	         * Utility to detect whether an element has, or has a parent with, a specific
	         * class name. Used on detection of tracker objects and on deciding whether
	         * hovering the tooltip should cause the active series to mouse out.
	         */
	        inClass: function (element, className) {
	            var elemClassName;
	            while (element) {
	                elemClassName = attr(element, 'class');
	                if (elemClassName) {
	                    if (elemClassName.indexOf(className) !== -1) {
	                        return true;
	                    }
	                    if (elemClassName.indexOf(PREFIX + 'container') !== -1) {
	                        return false;
	                    }
	                }
	                element = element.parentNode;
	            }
	        },
	
	        onTrackerMouseOut: function (e) {
	            var series = this.chart.hoverSeries,
	                relatedTarget = e.relatedTarget || e.toElement;
	
	            if (series && relatedTarget && !series.options.stickyTracking && // #4886
	                    !this.inClass(relatedTarget, PREFIX + 'tooltip') &&
	                    !this.inClass(relatedTarget, PREFIX + 'series-' + series.index)) { // #2499, #4465
	                series.onMouseOut();
	            }
	        },
	
	        onContainerClick: function (e) {
	            var chart = this.chart,
	                hoverPoint = chart.hoverPoint,
	                plotLeft = chart.plotLeft,
	                plotTop = chart.plotTop;
	
	            e = this.normalize(e);
	
	            if (!chart.cancelClick) {
	
	                // On tracker click, fire the series and point events. #783, #1583
	                if (hoverPoint && this.inClass(e.target, PREFIX + 'tracker')) {
	
	                    // the series click event
	                    fireEvent(hoverPoint.series, 'click', extend(e, {
	                        point: hoverPoint
	                    }));
	
	                    // the point click event
	                    if (chart.hoverPoint) { // it may be destroyed (#1844)
	                        hoverPoint.firePointEvent('click', e);
	                    }
	
	                // When clicking outside a tracker, fire a chart event
	                } else {
	                    extend(e, this.getCoordinates(e));
	
	                    // fire a click event in the chart
	                    if (chart.isInsidePlot(e.chartX - plotLeft, e.chartY - plotTop)) {
	                        fireEvent(chart, 'click', e);
	                    }
	                }
	
	
	            }
	        },
	
	        /**
	         * Set the JS DOM events on the container and document. This method should contain
	         * a one-to-one assignment between methods and their handlers. Any advanced logic should
	         * be moved to the handler reflecting the event's name.
	         */
	        setDOMEvents: function () {
	
	            var pointer = this,
	                container = pointer.chart.container;
	
	            container.onmousedown = function (e) {
	                pointer.onContainerMouseDown(e);
	            };
	            container.onmousemove = function (e) {
	                pointer.onContainerMouseMove(e);
	            };
	            container.onclick = function (e) {
	                pointer.onContainerClick(e);
	            };
	            addEvent(container, 'mouseleave', pointer.onContainerMouseLeave);
	            if (chartCount === 1) {
	                addEvent(doc, 'mouseup', pointer.onDocumentMouseUp);
	            }
	            if (hasTouch) {
	                container.ontouchstart = function (e) {
	                    pointer.onContainerTouchStart(e);
	                };
	                container.ontouchmove = function (e) {
	                    pointer.onContainerTouchMove(e);
	                };
	                if (chartCount === 1) {
	                    addEvent(doc, 'touchend', pointer.onDocumentTouchEnd);
	                }
	            }
	
	        },
	
	        /**
	         * Destroys the Pointer object and disconnects DOM events.
	         */
	        destroy: function () {
	            var prop;
	
	            removeEvent(this.chart.container, 'mouseleave', this.onContainerMouseLeave);
	            if (!chartCount) {
	                removeEvent(doc, 'mouseup', this.onDocumentMouseUp);
	                removeEvent(doc, 'touchend', this.onDocumentTouchEnd);
	            }
	
	            // memory and CPU leak
	            clearInterval(this.tooltipTimeout);
	
	            for (prop in this) {
	                this[prop] = null;
	            }
	        }
	    };
	
	
	    /* Support for touch devices */
	    extend(Highcharts.Pointer.prototype, {
	
	        /**
	         * Run translation operations
	         */
	        pinchTranslate: function (pinchDown, touches, transform, selectionMarker, clip, lastValidTouch) {
	            if (this.zoomHor || this.pinchHor) {
	                this.pinchTranslateDirection(true, pinchDown, touches, transform, selectionMarker, clip, lastValidTouch);
	            }
	            if (this.zoomVert || this.pinchVert) {
	                this.pinchTranslateDirection(false, pinchDown, touches, transform, selectionMarker, clip, lastValidTouch);
	            }
	        },
	
	        /**
	         * Run translation operations for each direction (horizontal and vertical) independently
	         */
	        pinchTranslateDirection: function (horiz, pinchDown, touches, transform, selectionMarker, clip, lastValidTouch, forcedScale) {
	            var chart = this.chart,
	                xy = horiz ? 'x' : 'y',
	                XY = horiz ? 'X' : 'Y',
	                sChartXY = 'chart' + XY,
	                wh = horiz ? 'width' : 'height',
	                plotLeftTop = chart['plot' + (horiz ? 'Left' : 'Top')],
	                selectionWH,
	                selectionXY,
	                clipXY,
	                scale = forcedScale || 1,
	                inverted = chart.inverted,
	                bounds = chart.bounds[horiz ? 'h' : 'v'],
	                singleTouch = pinchDown.length === 1,
	                touch0Start = pinchDown[0][sChartXY],
	                touch0Now = touches[0][sChartXY],
	                touch1Start = !singleTouch && pinchDown[1][sChartXY],
	                touch1Now = !singleTouch && touches[1][sChartXY],
	                outOfBounds,
	                transformScale,
	                scaleKey,
	                setScale = function () {
	                    if (!singleTouch && mathAbs(touch0Start - touch1Start) > 20) { // Don't zoom if fingers are too close on this axis
	                        scale = forcedScale || mathAbs(touch0Now - touch1Now) / mathAbs(touch0Start - touch1Start);
	                    }
	
	                    clipXY = ((plotLeftTop - touch0Now) / scale) + touch0Start;
	                    selectionWH = chart['plot' + (horiz ? 'Width' : 'Height')] / scale;
	                };
	
	            // Set the scale, first pass
	            setScale();
	
	            selectionXY = clipXY; // the clip position (x or y) is altered if out of bounds, the selection position is not
	
	            // Out of bounds
	            if (selectionXY < bounds.min) {
	                selectionXY = bounds.min;
	                outOfBounds = true;
	            } else if (selectionXY + selectionWH > bounds.max) {
	                selectionXY = bounds.max - selectionWH;
	                outOfBounds = true;
	            }
	
	            // Is the chart dragged off its bounds, determined by dataMin and dataMax?
	            if (outOfBounds) {
	
	                // Modify the touchNow position in order to create an elastic drag movement. This indicates
	                // to the user that the chart is responsive but can't be dragged further.
	                touch0Now -= 0.8 * (touch0Now - lastValidTouch[xy][0]);
	                if (!singleTouch) {
	                    touch1Now -= 0.8 * (touch1Now - lastValidTouch[xy][1]);
	                }
	
	                // Set the scale, second pass to adapt to the modified touchNow positions
	                setScale();
	
	            } else {
	                lastValidTouch[xy] = [touch0Now, touch1Now];
	            }
	
	            // Set geometry for clipping, selection and transformation
	            if (!inverted) {
	                clip[xy] = clipXY - plotLeftTop;
	                clip[wh] = selectionWH;
	            }
	            scaleKey = inverted ? (horiz ? 'scaleY' : 'scaleX') : 'scale' + XY;
	            transformScale = inverted ? 1 / scale : scale;
	
	            selectionMarker[wh] = selectionWH;
	            selectionMarker[xy] = selectionXY;
	            transform[scaleKey] = scale;
	            transform['translate' + XY] = (transformScale * plotLeftTop) + (touch0Now - (transformScale * touch0Start));
	        },
	
	        /**
	         * Handle touch events with two touches
	         */
	        pinch: function (e) {
	
	            var self = this,
	                chart = self.chart,
	                pinchDown = self.pinchDown,
	                touches = e.touches,
	                touchesLength = touches.length,
	                lastValidTouch = self.lastValidTouch,
	                hasZoom = self.hasZoom,
	                selectionMarker = self.selectionMarker,
	                transform = {},
	                fireClickEvent = touchesLength === 1 && ((self.inClass(e.target, PREFIX + 'tracker') &&
	                    chart.runTrackerClick) || self.runChartClick),
	                clip = {};
	
	            // Don't initiate panning until the user has pinched. This prevents us from
	            // blocking page scrolling as users scroll down a long page (#4210).
	            if (touchesLength > 1) {
	                self.initiated = true;
	            }
	
	            // On touch devices, only proceed to trigger click if a handler is defined
	            if (hasZoom && self.initiated && !fireClickEvent) {
	                e.preventDefault();
	            }
	
	            // Normalize each touch
	            map(touches, function (e) {
	                return self.normalize(e);
	            });
	
	            // Register the touch start position
	            if (e.type === 'touchstart') {
	                each(touches, function (e, i) {
	                    pinchDown[i] = { chartX: e.chartX, chartY: e.chartY };
	                });
	                lastValidTouch.x = [pinchDown[0].chartX, pinchDown[1] && pinchDown[1].chartX];
	                lastValidTouch.y = [pinchDown[0].chartY, pinchDown[1] && pinchDown[1].chartY];
	
	                // Identify the data bounds in pixels
	                each(chart.axes, function (axis) {
	                    if (axis.zoomEnabled) {
	                        var bounds = chart.bounds[axis.horiz ? 'h' : 'v'],
	                            minPixelPadding = axis.minPixelPadding,
	                            min = axis.toPixels(pick(axis.options.min, axis.dataMin)),
	                            max = axis.toPixels(pick(axis.options.max, axis.dataMax)),
	                            absMin = mathMin(min, max),
	                            absMax = mathMax(min, max);
	
	                        // Store the bounds for use in the touchmove handler
	                        bounds.min = mathMin(axis.pos, absMin - minPixelPadding);
	                        bounds.max = mathMax(axis.pos + axis.len, absMax + minPixelPadding);
	                    }
	                });
	                self.res = true; // reset on next move
	
	            // Event type is touchmove, handle panning and pinching
	            } else if (pinchDown.length) { // can be 0 when releasing, if touchend fires first
	
	
	                // Set the marker
	                if (!selectionMarker) {
	                    self.selectionMarker = selectionMarker = extend({
	                        destroy: noop,
	                        touch: true
	                    }, chart.plotBox);
	                }
	
	                self.pinchTranslate(pinchDown, touches, transform, selectionMarker, clip, lastValidTouch);
	
	                self.hasPinched = hasZoom;
	
	                // Scale and translate the groups to provide visual feedback during pinching
	                self.scaleGroups(transform, clip);
	
	                // Optionally move the tooltip on touchmove
	                if (!hasZoom && self.followTouchMove && touchesLength === 1) {
	                    this.runPointActions(self.normalize(e));
	                } else if (self.res) {
	                    self.res = false;
	                    this.reset(false, 0);
	                }
	            }
	        },
	
	        /**
	         * General touch handler shared by touchstart and touchmove.
	         */
	        touch: function (e, start) {
	            var chart = this.chart,
	                hasMoved,
	                pinchDown;
	
	            hoverChartIndex = chart.index;
	
	            if (e.touches.length === 1) {
	
	                e = this.normalize(e);
	
	                if (chart.isInsidePlot(e.chartX - chart.plotLeft, e.chartY - chart.plotTop) && !chart.openMenu) {
	
	                    // Run mouse events and display tooltip etc
	                    if (start) {
	                        this.runPointActions(e);
	                    }
	
	                    // Android fires touchmove events after the touchstart even if the
	                    // finger hasn't moved, or moved only a pixel or two. In iOS however,
	                    // the touchmove doesn't fire unless the finger moves more than ~4px.
	                    // So we emulate this behaviour in Android by checking how much it
	                    // moved, and cancelling on small distances. #3450.
	                    if (e.type === 'touchmove') {
	                        pinchDown = this.pinchDown;
	                        hasMoved = pinchDown[0] ? Math.sqrt( // #5266
	                            Math.pow(pinchDown[0].chartX - e.chartX, 2) +
	                            Math.pow(pinchDown[0].chartY - e.chartY, 2)
	                        ) >= 4 : false;
	                    }
	
	                    if (pick(hasMoved, true)) {
	                        this.pinch(e);
	                    }
	
	                } else if (start) {
	                    // Hide the tooltip on touching outside the plot area (#1203)
	                    this.reset();
	                }
	
	            } else if (e.touches.length === 2) {
	                this.pinch(e);
	            }
	        },
	
	        onContainerTouchStart: function (e) {
	            this.touch(e, true);
	        },
	
	        onContainerTouchMove: function (e) {
	            this.touch(e);
	        },
	
	        onDocumentTouchEnd: function (e) {
	            if (charts[hoverChartIndex]) {
	                charts[hoverChartIndex].pointer.drop(e);
	            }
	        }
	
	    });
	    if (win.PointerEvent || win.MSPointerEvent) {
	
	        // The touches object keeps track of the points being touched at all times
	        var touches = {},
	            hasPointerEvent = !!win.PointerEvent,
	            getWebkitTouches = function () {
	                var key,
	                    fake = [];
	                fake.item = function (i) {
	                    return this[i];
	                };
	                for (key in touches) {
	                    if (touches.hasOwnProperty(key)) {
	                        fake.push({
	                            pageX: touches[key].pageX,
	                            pageY: touches[key].pageY,
	                            target: touches[key].target
	                        });
	                    }
	                }
	                return fake;
	            },
	            translateMSPointer = function (e, method, wktype, func) {
	                var p;
	                if ((e.pointerType === 'touch' || e.pointerType === e.MSPOINTER_TYPE_TOUCH) && charts[hoverChartIndex]) {
	                    func(e);
	                    p = charts[hoverChartIndex].pointer;
	                    p[method]({
	                        type: wktype,
	                        target: e.currentTarget,
	                        preventDefault: noop,
	                        touches: getWebkitTouches()
	                    });
	                }
	            };
	
	        /**
	         * Extend the Pointer prototype with methods for each event handler and more
	         */
	        extend(Pointer.prototype, {
	            onContainerPointerDown: function (e) {
	                translateMSPointer(e, 'onContainerTouchStart', 'touchstart', function (e) {
	                    touches[e.pointerId] = { pageX: e.pageX, pageY: e.pageY, target: e.currentTarget };
	                });
	            },
	            onContainerPointerMove: function (e) {
	                translateMSPointer(e, 'onContainerTouchMove', 'touchmove', function (e) {
	                    touches[e.pointerId] = { pageX: e.pageX, pageY: e.pageY };
	                    if (!touches[e.pointerId].target) {
	                        touches[e.pointerId].target = e.currentTarget;
	                    }
	                });
	            },
	            onDocumentPointerUp: function (e) {
	                translateMSPointer(e, 'onDocumentTouchEnd', 'touchend', function (e) {
	                    delete touches[e.pointerId];
	                });
	            },
	
	            /**
	             * Add or remove the MS Pointer specific events
	             */
	            batchMSEvents: function (fn) {
	                fn(this.chart.container, hasPointerEvent ? 'pointerdown' : 'MSPointerDown', this.onContainerPointerDown);
	                fn(this.chart.container, hasPointerEvent ? 'pointermove' : 'MSPointerMove', this.onContainerPointerMove);
	                fn(doc, hasPointerEvent ? 'pointerup' : 'MSPointerUp', this.onDocumentPointerUp);
	            }
	        });
	
	        // Disable default IE actions for pinch and such on chart element
	        wrap(Pointer.prototype, 'init', function (proceed, chart, options) {
	            proceed.call(this, chart, options);
	            if (this.hasZoom) { // #4014
	                css(chart.container, {
	                    '-ms-touch-action': NONE,
	                    'touch-action': NONE
	                });
	            }
	        });
	
	        // Add IE specific touch events to chart
	        wrap(Pointer.prototype, 'setDOMEvents', function (proceed) {
	            proceed.apply(this);
	            if (this.hasZoom || this.followTouchMove) {
	                this.batchMSEvents(addEvent);
	            }
	        });
	        // Destroy MS events also
	        wrap(Pointer.prototype, 'destroy', function (proceed) {
	            this.batchMSEvents(removeEvent);
	            proceed.call(this);
	        });
	    }
	    /**
	     * The overview of the chart's series
	     */
	    var Legend = Highcharts.Legend = function (chart, options) {
	        this.init(chart, options);
	    };
	
	    Legend.prototype = {
	
	        /**
	         * Initialize the legend
	         */
	        init: function (chart, options) {
	
	            var legend = this,
	                itemStyle = options.itemStyle,
	                padding,
	                itemMarginTop = options.itemMarginTop || 0;
	
	            this.options = options;
	
	            if (!options.enabled) {
	                return;
	            }
	
	            legend.itemStyle = itemStyle;
	            legend.itemHiddenStyle = merge(itemStyle, options.itemHiddenStyle);
	            legend.itemMarginTop = itemMarginTop;
	            legend.padding = padding = pick(options.padding, 8);
	            legend.initialItemX = padding;
	            legend.initialItemY = padding - 5; // 5 is the number of pixels above the text
	            legend.maxItemWidth = 0;
	            legend.chart = chart;
	            legend.itemHeight = 0;
	            legend.symbolWidth = pick(options.symbolWidth, 16);
	            legend.pages = [];
	
	
	            // Render it
	            legend.render();
	
	            // move checkboxes
	            addEvent(legend.chart, 'endResize', function () {
	                legend.positionCheckboxes();
	            });
	
	        },
	
	        /**
	         * Set the colors for the legend item
	         * @param {Object} item A Series or Point instance
	         * @param {Object} visible Dimmed or colored
	         */
	        colorizeItem: function (item, visible) {
	            var legend = this,
	                options = legend.options,
	                legendItem = item.legendItem,
	                legendLine = item.legendLine,
	                legendSymbol = item.legendSymbol,
	                hiddenColor = legend.itemHiddenStyle.color,
	                textColor = visible ? options.itemStyle.color : hiddenColor,
	                symbolColor = visible ? (item.legendColor || item.color || '#CCC') : hiddenColor,
	                markerOptions = item.options && item.options.marker,
	                symbolAttr = { fill: symbolColor },
	                key,
	                val;
	
	            if (legendItem) {
	                legendItem.css({ fill: textColor, color: textColor }); // color for #1553, oldIE
	            }
	            if (legendLine) {
	                legendLine.attr({ stroke: symbolColor });
	            }
	
	            if (legendSymbol) {
	
	                // Apply marker options
	                if (markerOptions && legendSymbol.isMarker) { // #585
	                    symbolAttr.stroke = symbolColor;
	                    markerOptions = item.convertAttribs(markerOptions);
	                    for (key in markerOptions) {
	                        val = markerOptions[key];
	                        if (val !== UNDEFINED) {
	                            symbolAttr[key] = val;
	                        }
	                    }
	                }
	
	                legendSymbol.attr(symbolAttr);
	            }
	        },
	
	        /**
	         * Position the legend item
	         * @param {Object} item A Series or Point instance
	         */
	        positionItem: function (item) {
	            var legend = this,
	                options = legend.options,
	                symbolPadding = options.symbolPadding,
	                ltr = !options.rtl,
	                legendItemPos = item._legendItemPos,
	                itemX = legendItemPos[0],
	                itemY = legendItemPos[1],
	                checkbox = item.checkbox,
	                legendGroup = item.legendGroup;
	
	            if (legendGroup && legendGroup.element) {
	                legendGroup.translate(
	                    ltr ? itemX : legend.legendWidth - itemX - 2 * symbolPadding - 4,
	                    itemY
	                );
	            }
	
	            if (checkbox) {
	                checkbox.x = itemX;
	                checkbox.y = itemY;
	            }
	        },
	
	        /**
	         * Destroy a single legend item
	         * @param {Object} item The series or point
	         */
	        destroyItem: function (item) {
	            var checkbox = item.checkbox;
	
	            // destroy SVG elements
	            each(['legendItem', 'legendLine', 'legendSymbol', 'legendGroup'], function (key) {
	                if (item[key]) {
	                    item[key] = item[key].destroy();
	                }
	            });
	
	            if (checkbox) {
	                discardElement(item.checkbox);
	            }
	        },
	
	        /**
	         * Destroys the legend.
	         */
	        destroy: function () {
	            var legend = this,
	                legendGroup = legend.group,
	                box = legend.box;
	
	            if (box) {
	                legend.box = box.destroy();
	            }
	
	            if (legendGroup) {
	                legend.group = legendGroup.destroy();
	            }
	        },
	
	        /**
	         * Position the checkboxes after the width is determined
	         */
	        positionCheckboxes: function (scrollOffset) {
	            var alignAttr = this.group.alignAttr,
	                translateY,
	                clipHeight = this.clipHeight || this.legendHeight,
	                titleHeight = this.titleHeight;
	
	            if (alignAttr) {
	                translateY = alignAttr.translateY;
	                each(this.allItems, function (item) {
	                    var checkbox = item.checkbox,
	                        top;
	
	                    if (checkbox) {
	                        top = translateY + titleHeight + checkbox.y + (scrollOffset || 0) + 3;
	                        css(checkbox, {
	                            left: (alignAttr.translateX + item.checkboxOffset + checkbox.x - 20) + PX,
	                            top: top + PX,
	                            display: top > translateY - 6 && top < translateY + clipHeight - 6 ? '' : NONE
	                        });
	                    }
	                });
	            }
	        },
	
	        /**
	         * Render the legend title on top of the legend
	         */
	        renderTitle: function () {
	            var options = this.options,
	                padding = this.padding,
	                titleOptions = options.title,
	                titleHeight = 0,
	                bBox;
	
	            if (titleOptions.text) {
	                if (!this.title) {
	                    this.title = this.chart.renderer.label(titleOptions.text, padding - 3, padding - 4, null, null, null, null, null, 'legend-title')
	                        .attr({ zIndex: 1 })
	                        .css(titleOptions.style)
	                        .add(this.group);
	                }
	                bBox = this.title.getBBox();
	                titleHeight = bBox.height;
	                this.offsetWidth = bBox.width; // #1717
	                this.contentGroup.attr({ translateY: titleHeight });
	            }
	            this.titleHeight = titleHeight;
	        },
	
	        /**
	         * Set the legend item text
	         */
	        setText: function (item) {
	            var options = this.options;
	            item.legendItem.attr({
	                text: options.labelFormat ? format(options.labelFormat, item) : options.labelFormatter.call(item)
	            });
	        },
	
	        /**
	         * Render a single specific legend item
	         * @param {Object} item A series or point
	         */
	        renderItem: function (item) {
	            var legend = this,
	                chart = legend.chart,
	                renderer = chart.renderer,
	                options = legend.options,
	                horizontal = options.layout === 'horizontal',
	                symbolWidth = legend.symbolWidth,
	                symbolPadding = options.symbolPadding,
	                itemStyle = legend.itemStyle,
	                itemHiddenStyle = legend.itemHiddenStyle,
	                padding = legend.padding,
	                itemDistance = horizontal ? pick(options.itemDistance, 20) : 0,
	                ltr = !options.rtl,
	                itemHeight,
	                widthOption = options.width,
	                itemMarginBottom = options.itemMarginBottom || 0,
	                itemMarginTop = legend.itemMarginTop,
	                initialItemX = legend.initialItemX,
	                bBox,
	                itemWidth,
	                li = item.legendItem,
	                series = item.series && item.series.drawLegendSymbol ? item.series : item,
	                seriesOptions = series.options,
	                showCheckbox = legend.createCheckboxForItem && seriesOptions && seriesOptions.showCheckbox,
	                useHTML = options.useHTML;
	
	            if (!li) { // generate it once, later move it
	
	                // Generate the group box
	                // A group to hold the symbol and text. Text is to be appended in Legend class.
	                item.legendGroup = renderer.g('legend-item')
	                    .attr({ zIndex: 1 })
	                    .add(legend.scrollGroup);
	
	                // Generate the list item text and add it to the group
	                item.legendItem = li = renderer.text(
	                        '',
	                        ltr ? symbolWidth + symbolPadding : -symbolPadding,
	                        legend.baseline || 0,
	                        useHTML
	                    )
	                    .css(merge(item.visible ? itemStyle : itemHiddenStyle)) // merge to prevent modifying original (#1021)
	                    .attr({
	                        align: ltr ? 'left' : 'right',
	                        zIndex: 2
	                    })
	                    .add(item.legendGroup);
	
	                // Get the baseline for the first item - the font size is equal for all
	                if (!legend.baseline) {
	                    legend.fontMetrics = renderer.fontMetrics(itemStyle.fontSize, li);
	                    legend.baseline = legend.fontMetrics.f + 3 + itemMarginTop;
	                    li.attr('y', legend.baseline);
	                }
	
	                // Draw the legend symbol inside the group box
	                series.drawLegendSymbol(legend, item);
	
	                if (legend.setItemEvents) {
	                    legend.setItemEvents(item, li, useHTML, itemStyle, itemHiddenStyle);
	                }
	
	                // add the HTML checkbox on top
	                if (showCheckbox) {
	                    legend.createCheckboxForItem(item);
	                }
	            }
	
	            // Colorize the items
	            legend.colorizeItem(item, item.visible);
	
	            // Always update the text
	            legend.setText(item);
	
	            // calculate the positions for the next line
	            bBox = li.getBBox();
	
	            itemWidth = item.checkboxOffset =
	                options.itemWidth ||
	                item.legendItemWidth ||
	                symbolWidth + symbolPadding + bBox.width + itemDistance + (showCheckbox ? 20 : 0);
	            legend.itemHeight = itemHeight = mathRound(item.legendItemHeight || bBox.height);
	
	            // if the item exceeds the width, start a new line
	            if (horizontal && legend.itemX - initialItemX + itemWidth >
	                    (widthOption || (chart.chartWidth - 2 * padding - initialItemX - options.x))) {
	                legend.itemX = initialItemX;
	                legend.itemY += itemMarginTop + legend.lastLineHeight + itemMarginBottom;
	                legend.lastLineHeight = 0; // reset for next line (#915, #3976)
	            }
	
	            // If the item exceeds the height, start a new column
	            /*if (!horizontal && legend.itemY + options.y + itemHeight > chart.chartHeight - spacingTop - spacingBottom) {
	                legend.itemY = legend.initialItemY;
	                legend.itemX += legend.maxItemWidth;
	                legend.maxItemWidth = 0;
	            }*/
	
	            // Set the edge positions
	            legend.maxItemWidth = mathMax(legend.maxItemWidth, itemWidth);
	            legend.lastItemY = itemMarginTop + legend.itemY + itemMarginBottom;
	            legend.lastLineHeight = mathMax(itemHeight, legend.lastLineHeight); // #915
	
	            // cache the position of the newly generated or reordered items
	            item._legendItemPos = [legend.itemX, legend.itemY];
	
	            // advance
	            if (horizontal) {
	                legend.itemX += itemWidth;
	
	            } else {
	                legend.itemY += itemMarginTop + itemHeight + itemMarginBottom;
	                legend.lastLineHeight = itemHeight;
	            }
	
	            // the width of the widest item
	            legend.offsetWidth = widthOption || mathMax(
	                (horizontal ? legend.itemX - initialItemX - itemDistance : itemWidth) + padding,
	                legend.offsetWidth
	            );
	        },
	
	        /**
	         * Get all items, which is one item per series for normal series and one item per point
	         * for pie series.
	         */
	        getAllItems: function () {
	            var allItems = [];
	            each(this.chart.series, function (series) {
	                var seriesOptions = series.options;
	
	                // Handle showInLegend. If the series is linked to another series, defaults to false.
	                if (!pick(seriesOptions.showInLegend, !defined(seriesOptions.linkedTo) ? UNDEFINED : false, true)) {
	                    return;
	                }
	
	                // use points or series for the legend item depending on legendType
	                allItems = allItems.concat(
	                        series.legendItems ||
	                        (seriesOptions.legendType === 'point' ?
	                                series.data :
	                                series)
	                );
	            });
	            return allItems;
	        },
	
	        /**
	         * Adjust the chart margins by reserving space for the legend on only one side
	         * of the chart. If the position is set to a corner, top or bottom is reserved
	         * for horizontal legends and left or right for vertical ones.
	         */
	        adjustMargins: function (margin, spacing) {
	            var chart = this.chart,
	                options = this.options,
	                // Use the first letter of each alignment option in order to detect the side
	                alignment = options.align.charAt(0) + options.verticalAlign.charAt(0) + options.layout.charAt(0); // #4189 - use charAt(x) notation instead of [x] for IE7
	
	            if (!options.floating) {
	
	                each([
	                    /(lth|ct|rth)/,
	                    /(rtv|rm|rbv)/,
	                    /(rbh|cb|lbh)/,
	                    /(lbv|lm|ltv)/
	                ], function (alignments, side) {
	                    if (alignments.test(alignment) && !defined(margin[side])) {
	                        // Now we have detected on which side of the chart we should reserve space for the legend
	                        chart[marginNames[side]] = mathMax(
	                            chart[marginNames[side]],
	                            chart.legend[(side + 1) % 2 ? 'legendHeight' : 'legendWidth'] +
	                                [1, -1, -1, 1][side] * options[(side % 2) ? 'x' : 'y'] +
	                                pick(options.margin, 12) +
	                                spacing[side]
	                        );
	                    }
	                });
	            }
	        },
	
	        /**
	         * Render the legend. This method can be called both before and after
	         * chart.render. If called after, it will only rearrange items instead
	         * of creating new ones.
	         */
	        render: function () {
	            var legend = this,
	                chart = legend.chart,
	                renderer = chart.renderer,
	                legendGroup = legend.group,
	                allItems,
	                display,
	                legendWidth,
	                legendHeight,
	                box = legend.box,
	                options = legend.options,
	                padding = legend.padding,
	                legendBorderWidth = options.borderWidth,
	                legendBackgroundColor = options.backgroundColor;
	
	            legend.itemX = legend.initialItemX;
	            legend.itemY = legend.initialItemY;
	            legend.offsetWidth = 0;
	            legend.lastItemY = 0;
	
	            if (!legendGroup) {
	                legend.group = legendGroup = renderer.g('legend')
	                    .attr({ zIndex: 7 })
	                    .add();
	                legend.contentGroup = renderer.g()
	                    .attr({ zIndex: 1 }) // above background
	                    .add(legendGroup);
	                legend.scrollGroup = renderer.g()
	                    .add(legend.contentGroup);
	            }
	
	            legend.renderTitle();
	
	            // add each series or point
	            allItems = legend.getAllItems();
	
	            // sort by legendIndex
	            stableSort(allItems, function (a, b) {
	                return ((a.options && a.options.legendIndex) || 0) - ((b.options && b.options.legendIndex) || 0);
	            });
	
	            // reversed legend
	            if (options.reversed) {
	                allItems.reverse();
	            }
	
	            legend.allItems = allItems;
	            legend.display = display = !!allItems.length;
	
	            // render the items
	            legend.lastLineHeight = 0;
	            each(allItems, function (item) {
	                legend.renderItem(item);
	            });
	
	            // Get the box
	            legendWidth = (options.width || legend.offsetWidth) + padding;
	            legendHeight = legend.lastItemY + legend.lastLineHeight + legend.titleHeight;
	            legendHeight = legend.handleOverflow(legendHeight);
	            legendHeight += padding;
	
	            // Draw the border and/or background
	            if (legendBorderWidth || legendBackgroundColor) {
	
	                if (!box) {
	                    legend.box = box = renderer.rect(
	                        0,
	                        0,
	                        legendWidth,
	                        legendHeight,
	                        options.borderRadius,
	                        legendBorderWidth || 0
	                    ).attr({
	                        stroke: options.borderColor,
	                        'stroke-width': legendBorderWidth || 0,
	                        fill: legendBackgroundColor || NONE
	                    })
	                    .add(legendGroup)
	                    .shadow(options.shadow);
	                    box.isNew = true;
	
	                } else if (legendWidth > 0 && legendHeight > 0) {
	                    box[box.isNew ? 'attr' : 'animate'](
	                        box.crisp({ width: legendWidth, height: legendHeight })
	                    );
	                    box.isNew = false;
	                }
	
	                // hide the border if no items
	                box[display ? 'show' : 'hide']();
	            }
	
	            legend.legendWidth = legendWidth;
	            legend.legendHeight = legendHeight;
	
	            // Now that the legend width and height are established, put the items in the
	            // final position
	            each(allItems, function (item) {
	                legend.positionItem(item);
	            });
	
	            // 1.x compatibility: positioning based on style
	            /*var props = ['left', 'right', 'top', 'bottom'],
	                prop,
	                i = 4;
	            while (i--) {
	                prop = props[i];
	                if (options.style[prop] && options.style[prop] !== 'auto') {
	                    options[i < 2 ? 'align' : 'verticalAlign'] = prop;
	                    options[i < 2 ? 'x' : 'y'] = pInt(options.style[prop]) * (i % 2 ? -1 : 1);
	                }
	            }*/
	
	            if (display) {
	                legendGroup.align(extend({
	                    width: legendWidth,
	                    height: legendHeight
	                }, options), true, 'spacingBox');
	            }
	
	            if (!chart.isResizing) {
	                this.positionCheckboxes();
	            }
	        },
	
	        /**
	         * Set up the overflow handling by adding navigation with up and down arrows below the
	         * legend.
	         */
	        handleOverflow: function (legendHeight) {
	            var legend = this,
	                chart = this.chart,
	                renderer = chart.renderer,
	                options = this.options,
	                optionsY = options.y,
	                alignTop = options.verticalAlign === 'top',
	                spaceHeight = chart.spacingBox.height + (alignTop ? -optionsY : optionsY) - this.padding,
	                maxHeight = options.maxHeight,
	                clipHeight,
	                clipRect = this.clipRect,
	                navOptions = options.navigation,
	                animation = pick(navOptions.animation, true),
	                arrowSize = navOptions.arrowSize || 12,
	                nav = this.nav,
	                pages = this.pages,
	                padding = this.padding,
	                lastY,
	                allItems = this.allItems,
	                clipToHeight = function (height) {
	                    clipRect.attr({
	                        height: height
	                    });
	
	                    // useHTML
	                    if (legend.contentGroup.div) {
	                        legend.contentGroup.div.style.clip = 'rect(' + padding + 'px,9999px,' + (padding + height) + 'px,0)';
	                    }
	                };
	
	
	            // Adjust the height
	            if (options.layout === 'horizontal') {
	                spaceHeight /= 2;
	            }
	            if (maxHeight) {
	                spaceHeight = mathMin(spaceHeight, maxHeight);
	            }
	
	            // Reset the legend height and adjust the clipping rectangle
	            pages.length = 0;
	            if (legendHeight > spaceHeight && navOptions.enabled !== false) {
	
	                this.clipHeight = clipHeight = mathMax(spaceHeight - 20 - this.titleHeight - padding, 0);
	                this.currentPage = pick(this.currentPage, 1);
	                this.fullHeight = legendHeight;
	
	                // Fill pages with Y positions so that the top of each a legend item defines
	                // the scroll top for each page (#2098)
	                each(allItems, function (item, i) {
	                    var y = item._legendItemPos[1],
	                        h = mathRound(item.legendItem.getBBox().height),
	                        len = pages.length;
	
	                    if (!len || (y - pages[len - 1] > clipHeight && (lastY || y) !== pages[len - 1])) {
	                        pages.push(lastY || y);
	                        len++;
	                    }
	
	                    if (i === allItems.length - 1 && y + h - pages[len - 1] > clipHeight) {
	                        pages.push(y);
	                    }
	                    if (y !== lastY) {
	                        lastY = y;
	                    }
	                });
	
	                // Only apply clipping if needed. Clipping causes blurred legend in PDF export (#1787)
	                if (!clipRect) {
	                    clipRect = legend.clipRect = renderer.clipRect(0, padding, 9999, 0);
	                    legend.contentGroup.clip(clipRect);
	                }
	
	                clipToHeight(clipHeight);
	
	                // Add navigation elements
	                if (!nav) {
	                    this.nav = nav = renderer.g().attr({ zIndex: 1 }).add(this.group);
	                    this.up = renderer.symbol('triangle', 0, 0, arrowSize, arrowSize)
	                        .on('click', function () {
	                            legend.scroll(-1, animation);
	                        })
	                        .add(nav);
	                    this.pager = renderer.text('', 15, 10)
	                        .css(navOptions.style)
	                        .add(nav);
	                    this.down = renderer.symbol('triangle-down', 0, 0, arrowSize, arrowSize)
	                        .on('click', function () {
	                            legend.scroll(1, animation);
	                        })
	                        .add(nav);
	                }
	
	                // Set initial position
	                legend.scroll(0);
	
	                legendHeight = spaceHeight;
	
	            } else if (nav) {
	                clipToHeight(chart.chartHeight);
	                nav.hide();
	                this.scrollGroup.attr({
	                    translateY: 1
	                });
	                this.clipHeight = 0; // #1379
	            }
	
	            return legendHeight;
	        },
	
	        /**
	         * Scroll the legend by a number of pages
	         * @param {Object} scrollBy
	         * @param {Object} animation
	         */
	        scroll: function (scrollBy, animation) {
	            var pages = this.pages,
	                pageCount = pages.length,
	                currentPage = this.currentPage + scrollBy,
	                clipHeight = this.clipHeight,
	                navOptions = this.options.navigation,
	                activeColor = navOptions.activeColor,
	                inactiveColor = navOptions.inactiveColor,
	                pager = this.pager,
	                padding = this.padding,
	                scrollOffset;
	
	            // When resizing while looking at the last page
	            if (currentPage > pageCount) {
	                currentPage = pageCount;
	            }
	
	            if (currentPage > 0) {
	
	                if (animation !== UNDEFINED) {
	                    setAnimation(animation, this.chart);
	                }
	
	                this.nav.attr({
	                    translateX: padding,
	                    translateY: clipHeight + this.padding + 7 + this.titleHeight,
	                    visibility: VISIBLE
	                });
	                this.up.attr({
	                        fill: currentPage === 1 ? inactiveColor : activeColor
	                    })
	                    .css({
	                        cursor: currentPage === 1 ? 'default' : 'pointer'
	                    });
	                pager.attr({
	                    text: currentPage + '/' + pageCount
	                });
	                this.down.attr({
	                        x: 18 + this.pager.getBBox().width, // adjust to text width
	                        fill: currentPage === pageCount ? inactiveColor : activeColor
	                    })
	                    .css({
	                        cursor: currentPage === pageCount ? 'default' : 'pointer'
	                    });
	
	                scrollOffset = -pages[currentPage - 1] + this.initialItemY;
	
	                this.scrollGroup.animate({
	                    translateY: scrollOffset
	                });
	
	                this.currentPage = currentPage;
	                this.positionCheckboxes(scrollOffset);
	            }
	
	        }
	
	    };
	
	    /*
	     * LegendSymbolMixin
	     */
	
	    var LegendSymbolMixin = Highcharts.LegendSymbolMixin = {
	
	        /**
	         * Get the series' symbol in the legend
	         *
	         * @param {Object} legend The legend object
	         * @param {Object} item The series (this) or point
	         */
	        drawRectangle: function (legend, item) {
	            var symbolHeight = legend.options.symbolHeight || legend.fontMetrics.f;
	
	            item.legendSymbol = this.chart.renderer.rect(
	                0,
	                legend.baseline - symbolHeight + 1, // #3988
	                legend.symbolWidth,
	                symbolHeight,
	                legend.options.symbolRadius || 0
	            ).attr({
	                zIndex: 3
	            }).add(item.legendGroup);
	
	        },
	
	        /**
	         * Get the series' symbol in the legend. This method should be overridable to create custom
	         * symbols through Highcharts.seriesTypes[type].prototype.drawLegendSymbols.
	         *
	         * @param {Object} legend The legend object
	         */
	        drawLineMarker: function (legend) {
	
	            var options = this.options,
	                markerOptions = options.marker,
	                radius,
	                legendSymbol,
	                symbolWidth = legend.symbolWidth,
	                renderer = this.chart.renderer,
	                legendItemGroup = this.legendGroup,
	                verticalCenter = legend.baseline - mathRound(legend.fontMetrics.b * 0.3),
	                attr;
	
	            // Draw the line
	            if (options.lineWidth) {
	                attr = {
	                    'stroke-width': options.lineWidth
	                };
	                if (options.dashStyle) {
	                    attr.dashstyle = options.dashStyle;
	                }
	                this.legendLine = renderer.path([
	                    M,
	                    0,
	                    verticalCenter,
	                    L,
	                    symbolWidth,
	                    verticalCenter
	                ])
	                .attr(attr)
	                .add(legendItemGroup);
	            }
	
	            // Draw the marker
	            if (markerOptions && markerOptions.enabled !== false) {
	                radius = markerOptions.radius;
	                this.legendSymbol = legendSymbol = renderer.symbol(
	                    this.symbol,
	                    (symbolWidth / 2) - radius,
	                    verticalCenter - radius,
	                    2 * radius,
	                    2 * radius,
	                    markerOptions
	                )
	                .add(legendItemGroup);
	                legendSymbol.isMarker = true;
	            }
	        }
	    };
	
	    // Workaround for #2030, horizontal legend items not displaying in IE11 Preview,
	    // and for #2580, a similar drawing flaw in Firefox 26.
	    // Explore if there's a general cause for this. The problem may be related
	    // to nested group elements, as the legend item texts are within 4 group elements.
	    if (/Trident\/7\.0/.test(userAgent) || isFirefox) {
	        wrap(Legend.prototype, 'positionItem', function (proceed, item) {
	            var legend = this,
	                runPositionItem = function () { // If chart destroyed in sync, this is undefined (#2030)
	                    if (item._legendItemPos) {
	                        proceed.call(legend, item);
	                    }
	                };
	
	            // Do it now, for export and to get checkbox placement
	            runPositionItem();
	
	            // Do it after to work around the core issue
	            setTimeout(runPositionItem);
	        });
	    }
	    /**
	     * The Chart class
	     * @param {String|Object} renderTo The DOM element to render to, or its id
	     * @param {Object} options
	     * @param {Function} callback Function to run when the chart has loaded
	     */
	    var Chart = Highcharts.Chart = function () {
	        this.getArgs.apply(this, arguments);
	    };
	
	    Highcharts.chart = function (a, b, c) {
	        return new Chart(a, b, c);
	    };
	
	    Chart.prototype = {
	
	        /**
	         * Hook for modules
	         */
	        callbacks: [],
	
	        /**
	         * Handle the arguments passed to the constructor
	         * @returns {Array} Arguments without renderTo
	         */
	        getArgs: function () {
	            var args = [].slice.call(arguments);
	        
	            // Remove the optional first argument, renderTo, and
	            // set it on this.
	            if (isString(args[0]) || args[0].nodeName) {
	                this.renderTo = args.shift();
	            }
	            this.init(args[0], args[1]);
	        },
	
	        /**
	         * Initialize the chart
	         */
	        init: function (userOptions, callback) {
	
	            // Handle regular options
	            var options,
	                seriesOptions = userOptions.series; // skip merging data points to increase performance
	
	            userOptions.series = null;
	            options = merge(defaultOptions, userOptions); // do the merge
	            options.series = userOptions.series = seriesOptions; // set back the series data
	            this.userOptions = userOptions;
	
	            var optionsChart = options.chart;
	
	            // Create margin & spacing array
	            this.margin = this.splashArray('margin', optionsChart);
	            this.spacing = this.splashArray('spacing', optionsChart);
	
	            var chartEvents = optionsChart.events;
	
	            //this.runChartClick = chartEvents && !!chartEvents.click;
	            this.bounds = { h: {}, v: {} }; // Pixel data bounds for touch zoom
	
	            this.callback = callback;
	            this.isResizing = 0;
	            this.options = options;
	            //chartTitleOptions = UNDEFINED;
	            //chartSubtitleOptions = UNDEFINED;
	
	            this.axes = [];
	            this.series = [];
	            this.hasCartesianSeries = optionsChart.showAxes;
	            //this.axisOffset = UNDEFINED;
	            //this.maxTicks = UNDEFINED; // handle the greatest amount of ticks on grouped axes
	            //this.inverted = UNDEFINED;
	            //this.loadingShown = UNDEFINED;
	            //this.container = UNDEFINED;
	            //this.chartWidth = UNDEFINED;
	            //this.chartHeight = UNDEFINED;
	            //this.marginRight = UNDEFINED;
	            //this.marginBottom = UNDEFINED;
	            //this.containerWidth = UNDEFINED;
	            //this.containerHeight = UNDEFINED;
	            //this.oldChartWidth = UNDEFINED;
	            //this.oldChartHeight = UNDEFINED;
	
	            //this.renderTo = UNDEFINED;
	            //this.renderToClone = UNDEFINED;
	
	            //this.spacingBox = UNDEFINED
	
	            //this.legend = UNDEFINED;
	
	            // Elements
	            //this.chartBackground = UNDEFINED;
	            //this.plotBackground = UNDEFINED;
	            //this.plotBGImage = UNDEFINED;
	            //this.plotBorder = UNDEFINED;
	            //this.loadingDiv = UNDEFINED;
	            //this.loadingSpan = UNDEFINED;
	
	            var chart = this,
	                eventType;
	
	            // Add the chart to the global lookup
	            chart.index = charts.length;
	            charts.push(chart);
	            chartCount++;
	
	            // Set up auto resize
	            if (optionsChart.reflow !== false) {
	                addEvent(chart, 'load', function () {
	                    chart.initReflow();
	                });
	            }
	
	            // Chart event handlers
	            if (chartEvents) {
	                for (eventType in chartEvents) {
	                    addEvent(chart, eventType, chartEvents[eventType]);
	                }
	            }
	
	            chart.xAxis = [];
	            chart.yAxis = [];
	
	            // Expose methods and variables
	            chart.animation = useCanVG ? false : pick(optionsChart.animation, true);
	            chart.pointCount = chart.colorCounter = chart.symbolCounter = 0;
	
	            chart.firstRender();
	        },
	
	        /**
	         * Initialize an individual series, called internally before render time
	         */
	        initSeries: function (options) {
	            var chart = this,
	                optionsChart = chart.options.chart,
	                type = options.type || optionsChart.type || optionsChart.defaultSeriesType,
	                series,
	                constr = seriesTypes[type];
	
	            // No such series type
	            if (!constr) {
	                error(17, true);
	            }
	
	            series = new constr();
	            series.init(this, options);
	            return series;
	        },
	
	        /**
	         * Check whether a given point is within the plot area
	         *
	         * @param {Number} plotX Pixel x relative to the plot area
	         * @param {Number} plotY Pixel y relative to the plot area
	         * @param {Boolean} inverted Whether the chart is inverted
	         */
	        isInsidePlot: function (plotX, plotY, inverted) {
	            var x = inverted ? plotY : plotX,
	                y = inverted ? plotX : plotY;
	
	            return x >= 0 &&
	                x <= this.plotWidth &&
	                y >= 0 &&
	                y <= this.plotHeight;
	        },
	
	        /**
	         * Redraw legend, axes or series based on updated data
	         *
	         * @param {Boolean|Object} animation Whether to apply animation, and optionally animation
	         *    configuration
	         */
	        redraw: function (animation) {
	            var chart = this,
	                axes = chart.axes,
	                series = chart.series,
	                pointer = chart.pointer,
	                legend = chart.legend,
	                redrawLegend = chart.isDirtyLegend,
	                hasStackedSeries,
	                hasDirtyStacks,
	                hasCartesianSeries = chart.hasCartesianSeries,
	                isDirtyBox = chart.isDirtyBox,
	                seriesLength = series.length,
	                i = seriesLength,
	                serie,
	                renderer = chart.renderer,
	                isHiddenChart = renderer.isHidden(),
	                afterRedraw = [];
	
	            setAnimation(animation, chart);
	
	            if (isHiddenChart) {
	                chart.cloneRenderTo();
	            }
	
	            // Adjust title layout (reflow multiline text)
	            chart.layOutTitles();
	
	            // link stacked series
	            while (i--) {
	                serie = series[i];
	
	                if (serie.options.stacking) {
	                    hasStackedSeries = true;
	
	                    if (serie.isDirty) {
	                        hasDirtyStacks = true;
	                        break;
	                    }
	                }
	            }
	            if (hasDirtyStacks) { // mark others as dirty
	                i = seriesLength;
	                while (i--) {
	                    serie = series[i];
	                    if (serie.options.stacking) {
	                        serie.isDirty = true;
	                    }
	                }
	            }
	
	            // Handle updated data in the series
	            each(series, function (serie) {
	                if (serie.isDirty) {
	                    if (serie.options.legendType === 'point') {
	                        if (serie.updateTotals) {
	                            serie.updateTotals();
	                        }
	                        redrawLegend = true;
	                    }
	                }
	                if (serie.isDirtyData) {
	                    fireEvent(serie, 'updatedData');
	                }
	            });
	
	            // handle added or removed series
	            if (redrawLegend && legend.options.enabled) { // series or pie points are added or removed
	                // draw legend graphics
	                legend.render();
	
	                chart.isDirtyLegend = false;
	            }
	
	            // reset stacks
	            if (hasStackedSeries) {
	                chart.getStacks();
	            }
	
	
	            if (hasCartesianSeries) {
	                if (!chart.isResizing) {
	
	                    // reset maxTicks
	                    chart.maxTicks = null;
	
	                    // set axes scales
	                    each(axes, function (axis) {
	                        axis.updateNames();
	                        axis.setScale();
	                    });
	                }
	            }
	
	            chart.getMargins(); // #3098
	
	            if (hasCartesianSeries) {
	                // If one axis is dirty, all axes must be redrawn (#792, #2169)
	                each(axes, function (axis) {
	                    if (axis.isDirty) {
	                        isDirtyBox = true;
	                    }
	                });
	
	                // redraw axes
	                each(axes, function (axis) {
	
	                    // Fire 'afterSetExtremes' only if extremes are set
	                    var key = axis.min + ',' + axis.max;
	                    if (axis.extKey !== key) { // #821, #4452
	                        axis.extKey = key;
	                        afterRedraw.push(function () { // prevent a recursive call to chart.redraw() (#1119)
	                            fireEvent(axis, 'afterSetExtremes', extend(axis.eventArgs, axis.getExtremes())); // #747, #751
	                            delete axis.eventArgs;
	                        });
	                    }
	                    if (isDirtyBox || hasStackedSeries) {
	                        axis.redraw();
	                    }
	                });
	            }
	
	            // the plot areas size has changed
	            if (isDirtyBox) {
	                chart.drawChartBox();
	            }
	
	
	            // redraw affected series
	            each(series, function (serie) {
	                if (serie.isDirty && serie.visible &&
	                        (!serie.isCartesian || serie.xAxis)) { // issue #153
	                    serie.redraw();
	                }
	            });
	
	            // move tooltip or reset
	            if (pointer) {
	                pointer.reset(true);
	            }
	
	            // redraw if canvas
	            renderer.draw();
	
	            // fire the event
	            fireEvent(chart, 'redraw');
	
	            if (isHiddenChart) {
	                chart.cloneRenderTo(true);
	            }
	
	            // Fire callbacks that are put on hold until after the redraw
	            each(afterRedraw, function (callback) {
	                callback.call();
	            });
	        },
	
	        /**
	         * Get an axis, series or point object by id.
	         * @param id {String} The id as given in the configuration options
	         */
	        get: function (id) {
	            var chart = this,
	                axes = chart.axes,
	                series = chart.series;
	
	            var i,
	                j,
	                points;
	
	            // search axes
	            for (i = 0; i < axes.length; i++) {
	                if (axes[i].options.id === id) {
	                    return axes[i];
	                }
	            }
	
	            // search series
	            for (i = 0; i < series.length; i++) {
	                if (series[i].options.id === id) {
	                    return series[i];
	                }
	            }
	
	            // search points
	            for (i = 0; i < series.length; i++) {
	                points = series[i].points || [];
	                for (j = 0; j < points.length; j++) {
	                    if (points[j].id === id) {
	                        return points[j];
	                    }
	                }
	            }
	            return null;
	        },
	
	        /**
	         * Create the Axis instances based on the config options
	         */
	        getAxes: function () {
	            var chart = this,
	                options = this.options,
	                xAxisOptions = options.xAxis = splat(options.xAxis || {}),
	                yAxisOptions = options.yAxis = splat(options.yAxis || {}),
	                optionsArray;
	
	            // make sure the options are arrays and add some members
	            each(xAxisOptions, function (axis, i) {
	                axis.index = i;
	                axis.isX = true;
	            });
	
	            each(yAxisOptions, function (axis, i) {
	                axis.index = i;
	            });
	
	            // concatenate all axis options into one array
	            optionsArray = xAxisOptions.concat(yAxisOptions);
	
	            each(optionsArray, function (axisOptions) {
	                new Axis(chart, axisOptions); // eslint-disable-line no-new
	            });
	        },
	
	
	        /**
	         * Get the currently selected points from all series
	         */
	        getSelectedPoints: function () {
	            var points = [];
	            each(this.series, function (serie) {
	                points = points.concat(grep(serie.points || [], function (point) {
	                    return point.selected;
	                }));
	            });
	            return points;
	        },
	
	        /**
	         * Get the currently selected series
	         */
	        getSelectedSeries: function () {
	            return grep(this.series, function (serie) {
	                return serie.selected;
	            });
	        },
	
	        /**
	         * Show the title and subtitle of the chart
	         *
	         * @param titleOptions {Object} New title options
	         * @param subtitleOptions {Object} New subtitle options
	         *
	         */
	        setTitle: function (titleOptions, subtitleOptions, redraw) {
	            var chart = this,
	                options = chart.options,
	                chartTitleOptions,
	                chartSubtitleOptions;
	
	            chartTitleOptions = options.title = merge(options.title, titleOptions);
	            chartSubtitleOptions = options.subtitle = merge(options.subtitle, subtitleOptions);
	
	            // add title and subtitle
	            each([
	                ['title', titleOptions, chartTitleOptions],
	                ['subtitle', subtitleOptions, chartSubtitleOptions]
	            ], function (arr) {
	                var name = arr[0],
	                    title = chart[name],
	                    titleOptions = arr[1],
	                    chartTitleOptions = arr[2];
	
	                if (title && titleOptions) {
	                    chart[name] = title = title.destroy(); // remove old
	                }
	
	                if (chartTitleOptions && chartTitleOptions.text && !title) {
	                    chart[name] = chart.renderer.text(
	                        chartTitleOptions.text,
	                        0,
	                        0,
	                        chartTitleOptions.useHTML
	                    )
	                    .attr({
	                        align: chartTitleOptions.align,
	                        'class': PREFIX + name,
	                        zIndex: chartTitleOptions.zIndex || 4
	                    })
	                    .css(chartTitleOptions.style)
	                    .add();
	            
	                }
	            });
	            chart.layOutTitles(redraw);
	        },
	
	        /**
	         * Lay out the chart titles and cache the full offset height for use in getMargins
	         */
	        layOutTitles: function (redraw) {
	            var titleOffset = 0,
	                title = this.title,
	                subtitle = this.subtitle,
	                options = this.options,
	                titleOptions = options.title,
	                subtitleOptions = options.subtitle,
	                requiresDirtyBox,
	                renderer = this.renderer,
	                spacingBox = this.spacingBox;
	
	            if (title) {
	                title
	                    .css({ width: (titleOptions.width || spacingBox.width + titleOptions.widthAdjust) + PX })
	                    .align(extend({
	                        y: renderer.fontMetrics(titleOptions.style.fontSize, title).b - 3
	                    }, titleOptions), false, spacingBox);
	
	                if (!titleOptions.floating && !titleOptions.verticalAlign) {
	                    titleOffset = title.getBBox().height;
	                }
	            }
	            if (subtitle) {
	                subtitle
	                    .css({ width: (subtitleOptions.width || spacingBox.width + subtitleOptions.widthAdjust) + PX })
	                    .align(extend({
	                        y: titleOffset + (titleOptions.margin - 13) + renderer.fontMetrics(subtitleOptions.style.fontSize, title).b
	                    }, subtitleOptions), false, spacingBox);
	
	                if (!subtitleOptions.floating && !subtitleOptions.verticalAlign) {
	                    titleOffset = mathCeil(titleOffset + subtitle.getBBox().height);
	                }
	            }
	
	            requiresDirtyBox = this.titleOffset !== titleOffset;
	            this.titleOffset = titleOffset; // used in getMargins
	
	            if (!this.isDirtyBox && requiresDirtyBox) {
	                this.isDirtyBox = requiresDirtyBox;
	                // Redraw if necessary (#2719, #2744)
	                if (this.hasRendered && pick(redraw, true) && this.isDirtyBox) {
	                    this.redraw();
	                }
	            }
	        },
	
	        /**
	         * Get chart width and height according to options and container size
	         */
	        getChartSize: function () {
	            var chart = this,
	                optionsChart = chart.options.chart,
	                widthOption = optionsChart.width,
	                heightOption = optionsChart.height,
	                renderTo = chart.renderToClone || chart.renderTo;
	
	            // Get inner width and height
	            if (!defined(widthOption)) {
	                chart.containerWidth = getStyle(renderTo, 'width');
	            }
	            if (!defined(heightOption)) {
	                chart.containerHeight = getStyle(renderTo, 'height');
	            }
	
	            chart.chartWidth = mathMax(0, widthOption || chart.containerWidth || 600); // #1393, 1460
	            chart.chartHeight = mathMax(0, pick(heightOption,
	                // the offsetHeight of an empty container is 0 in standard browsers, but 19 in IE7:
	                chart.containerHeight > 19 ? chart.containerHeight : 400));
	        },
	
	        /**
	         * Create a clone of the chart's renderTo div and place it outside the viewport to allow
	         * size computation on chart.render and chart.redraw
	         */
	        cloneRenderTo: function (revert) {
	            var clone = this.renderToClone,
	                container = this.container;
	
	            // Destroy the clone and bring the container back to the real renderTo div
	            if (revert) {
	                if (clone) {
	                    while (clone.childNodes.length) { // #5231
	                        this.renderTo.appendChild(clone.firstChild);
	                    }
	                    discardElement(clone);
	                    delete this.renderToClone;
	                }
	
	            // Set up the clone
	            } else {
	                if (container && container.parentNode === this.renderTo) {
	                    this.renderTo.removeChild(container); // do not clone this
	                }
	                this.renderToClone = clone = this.renderTo.cloneNode(0);
	                css(clone, {
	                    position: ABSOLUTE,
	                    top: '-9999px',
	                    display: 'block' // #833
	                });
	                if (clone.style.setProperty) { // #2631
	                    clone.style.setProperty('display', 'block', 'important');
	                }
	                doc.body.appendChild(clone);
	                if (container) {
	                    clone.appendChild(container);
	                }
	            }
	        },
	
	        /**
	         * Get the containing element, determine the size and create the inner container
	         * div to hold the chart
	         */
	        getContainer: function () {
	            var chart = this,
	                container,
	                options = chart.options,
	                optionsChart = options.chart,
	                chartWidth,
	                chartHeight,
	                renderTo = chart.renderTo,
	                indexAttrName = 'data-highcharts-chart',
	                oldChartIndex,
	                Ren,
	                containerId = 'highcharts-' + idCounter++;
	
	            if (!renderTo) {
	                chart.renderTo = renderTo = optionsChart.renderTo;
	            }
	        
	            if (isString(renderTo)) {
	                chart.renderTo = renderTo = doc.getElementById(renderTo);
	            }
	
	            // Display an error if the renderTo is wrong
	            if (!renderTo) {
	                error(13, true);
	            }
	
	            // If the container already holds a chart, destroy it. The check for hasRendered is there
	            // because web pages that are saved to disk from the browser, will preserve the data-highcharts-chart
	            // attribute and the SVG contents, but not an interactive chart. So in this case,
	            // charts[oldChartIndex] will point to the wrong chart if any (#2609).
	            oldChartIndex = pInt(attr(renderTo, indexAttrName));
	            if (isNumber(oldChartIndex) && charts[oldChartIndex] && charts[oldChartIndex].hasRendered) {
	                charts[oldChartIndex].destroy();
	            }
	
	            // Make a reference to the chart from the div
	            attr(renderTo, indexAttrName, chart.index);
	
	            // remove previous chart
	            renderTo.innerHTML = '';
	
	            // If the container doesn't have an offsetWidth, it has or is a child of a node
	            // that has display:none. We need to temporarily move it out to a visible
	            // state to determine the size, else the legend and tooltips won't render
	            // properly. The allowClone option is used in sparklines as a micro optimization,
	            // saving about 1-2 ms each chart.
	            if (!optionsChart.skipClone && !renderTo.offsetWidth) {
	                chart.cloneRenderTo();
	            }
	
	            // get the width and height
	            chart.getChartSize();
	            chartWidth = chart.chartWidth;
	            chartHeight = chart.chartHeight;
	
	            // create the inner container
	            chart.container = container = createElement(DIV, {
	                    className: PREFIX + 'container' +
	                        (optionsChart.className ? ' ' + optionsChart.className : ''),
	                    id: containerId
	                }, extend({
	                    position: RELATIVE,
	                    overflow: HIDDEN, // needed for context menu (avoid scrollbars) and
	                        // content overflow in IE
	                    width: chartWidth + PX,
	                    height: chartHeight + PX,
	                    textAlign: 'left',
	                    lineHeight: 'normal', // #427
	                    zIndex: 0, // #1072
	                    '-webkit-tap-highlight-color': 'rgba(0,0,0,0)'
	                }, optionsChart.style),
	                chart.renderToClone || renderTo
	            );
	
	            // cache the cursor (#1650)
	            chart._cursor = container.style.cursor;
	
	            // Initialize the renderer
	            Ren = Highcharts[optionsChart.renderer] || Renderer;
	            chart.renderer = new Ren(
	                container,
	                chartWidth,
	                chartHeight,
	                optionsChart.style,
	                optionsChart.forExport,
	                options.exporting && options.exporting.allowHTML
	            );
	
	            if (useCanVG) {
	                // If we need canvg library, extend and configure the renderer
	                // to get the tracker for translating mouse events
	                chart.renderer.create(chart, container, chartWidth, chartHeight);
	            }
	            // Add a reference to the charts index
	            chart.renderer.chartIndex = chart.index;
	        },
	
	        /**
	         * Calculate margins by rendering axis labels in a preliminary position. Title,
	         * subtitle and legend have already been rendered at this stage, but will be
	         * moved into their final positions
	         */
	        getMargins: function (skipAxes) {
	            var chart = this,
	                spacing = chart.spacing,
	                margin = chart.margin,
	                titleOffset = chart.titleOffset;
	
	            chart.resetMargins();
	
	            // Adjust for title and subtitle
	            if (titleOffset && !defined(margin[0])) {
	                chart.plotTop = mathMax(chart.plotTop, titleOffset + chart.options.title.margin + spacing[0]);
	            }
	
	            // Adjust for legend
	            if (chart.legend.display) {
	                chart.legend.adjustMargins(margin, spacing);
	            }
	
	            // adjust for scroller
	            if (chart.extraBottomMargin) {
	                chart.marginBottom += chart.extraBottomMargin;
	            }
	            if (chart.extraTopMargin) {
	                chart.plotTop += chart.extraTopMargin;
	            }
	            if (!skipAxes) {
	                this.getAxisMargins();
	            }
	        },
	
	        getAxisMargins: function () {
	
	            var chart = this,
	                axisOffset = chart.axisOffset = [0, 0, 0, 0], // top, right, bottom, left
	                margin = chart.margin;
	
	            // pre-render axes to get labels offset width
	            if (chart.hasCartesianSeries) {
	                each(chart.axes, function (axis) {
	                    if (axis.visible) {
	                        axis.getOffset();
	                    }
	                });
	            }
	
	            // Add the axis offsets
	            each(marginNames, function (m, side) {
	                if (!defined(margin[side])) {
	                    chart[m] += axisOffset[side];
	                }
	            });
	
	            chart.setChartSize();
	
	        },
	
	        /**
	         * Resize the chart to its container if size is not explicitly set
	         */
	        reflow: function (e) {
	            var chart = this,
	                optionsChart = chart.options.chart,
	                renderTo = chart.renderTo,
	                hasUserWidth = defined(optionsChart.width),
	                width = optionsChart.width || getStyle(renderTo, 'width'),
	                height = optionsChart.height || getStyle(renderTo, 'height'),
	                target = e ? e.target : win;
	
	            // Width and height checks for display:none. Target is doc in IE8 and Opera,
	            // win in Firefox, Chrome and IE9.
	            if (!hasUserWidth && !chart.isPrinting && width && height && (target === win || target === doc)) { // #1093
	                if (width !== chart.containerWidth || height !== chart.containerHeight) {
	                    clearTimeout(chart.reflowTimeout);
	                    // When called from window.resize, e is set, else it's called directly (#2224)
	                    chart.reflowTimeout = syncTimeout(function () {
	                        if (chart.container) { // It may have been destroyed in the meantime (#1257)
	                            chart.setSize(undefined, undefined, false);
	                        }
	                    }, e ? 100 : 0);
	                }
	                chart.containerWidth = width;
	                chart.containerHeight = height;
	            }
	        },
	
	        /**
	         * Add the event handlers necessary for auto resizing
	         */
	        initReflow: function () {
	            var chart = this,
	                reflow = function (e) {
	                    chart.reflow(e);
	                };
	
	
	            addEvent(win, 'resize', reflow);
	            addEvent(chart, 'destroy', function () {
	                removeEvent(win, 'resize', reflow);
	            });
	        },
	
	        /**
	         * Resize the chart to a given width and height
	         * @param {Number} width
	         * @param {Number} height
	         * @param {Object|Boolean} animation
	         */
	        setSize: function (width, height, animation) {
	            var chart = this,
	                renderer = chart.renderer,
	                globalAnimation;
	
	            // Handle the isResizing counter
	            chart.isResizing += 1;
	        
	            // set the animation for the current process
	            setAnimation(animation, chart);
	
	            chart.oldChartHeight = chart.chartHeight;
	            chart.oldChartWidth = chart.chartWidth;
	            if (width !== undefined) {
	                chart.options.chart.width = width;
	            }
	            if (height !== undefined) {
	                chart.options.chart.height = height;
	            }
	            chart.getChartSize();
	
	            // Resize the container with the global animation applied if enabled (#2503)
	            globalAnimation = renderer.globalAnimation;
	            (globalAnimation ? animate : css)(chart.container, {
	                width: chart.chartWidth + PX,
	                height: chart.chartHeight + PX
	            }, globalAnimation);
	
	            chart.setChartSize(true);
	            renderer.setSize(chart.chartWidth, chart.chartHeight, animation);
	
	            // handle axes
	            chart.maxTicks = null;
	            each(chart.axes, function (axis) {
	                axis.isDirty = true;
	                axis.setScale();
	            });
	
	            // make sure non-cartesian series are also handled
	            each(chart.series, function (serie) {
	                serie.isDirty = true;
	            });
	
	            chart.isDirtyLegend = true; // force legend redraw
	            chart.isDirtyBox = true; // force redraw of plot and chart border
	
	            chart.layOutTitles(); // #2857
	            chart.getMargins();
	
	            chart.redraw(animation);
	
	
	            chart.oldChartHeight = null;
	            fireEvent(chart, 'resize');
	
	            // Fire endResize and set isResizing back. If animation is disabled, fire without delay
	            syncTimeout(function () {
	                if (chart) {
	                    fireEvent(chart, 'endResize', null, function () {
	                        chart.isResizing -= 1;
	                    });
	                }
	            }, animObject(globalAnimation).duration);
	        },
	
	        /**
	         * Set the public chart properties. This is done before and after the pre-render
	         * to determine margin sizes
	         */
	        setChartSize: function (skipAxes) {
	            var chart = this,
	                inverted = chart.inverted,
	                renderer = chart.renderer,
	                chartWidth = chart.chartWidth,
	                chartHeight = chart.chartHeight,
	                optionsChart = chart.options.chart,
	                spacing = chart.spacing,
	                clipOffset = chart.clipOffset,
	                clipX,
	                clipY,
	                plotLeft,
	                plotTop,
	                plotWidth,
	                plotHeight,
	                plotBorderWidth;
	
	            chart.plotLeft = plotLeft = mathRound(chart.plotLeft);
	            chart.plotTop = plotTop = mathRound(chart.plotTop);
	            chart.plotWidth = plotWidth = mathMax(0, mathRound(chartWidth - plotLeft - chart.marginRight));
	            chart.plotHeight = plotHeight = mathMax(0, mathRound(chartHeight - plotTop - chart.marginBottom));
	
	            chart.plotSizeX = inverted ? plotHeight : plotWidth;
	            chart.plotSizeY = inverted ? plotWidth : plotHeight;
	
	            chart.plotBorderWidth = optionsChart.plotBorderWidth || 0;
	
	            // Set boxes used for alignment
	            chart.spacingBox = renderer.spacingBox = {
	                x: spacing[3],
	                y: spacing[0],
	                width: chartWidth - spacing[3] - spacing[1],
	                height: chartHeight - spacing[0] - spacing[2]
	            };
	            chart.plotBox = renderer.plotBox = {
	                x: plotLeft,
	                y: plotTop,
	                width: plotWidth,
	                height: plotHeight
	            };
	
	            plotBorderWidth = 2 * mathFloor(chart.plotBorderWidth / 2);
	            clipX = mathCeil(mathMax(plotBorderWidth, clipOffset[3]) / 2);
	            clipY = mathCeil(mathMax(plotBorderWidth, clipOffset[0]) / 2);
	            chart.clipBox = {
	                x: clipX,
	                y: clipY,
	                width: mathFloor(chart.plotSizeX - mathMax(plotBorderWidth, clipOffset[1]) / 2 - clipX),
	                height: mathMax(0, mathFloor(chart.plotSizeY - mathMax(plotBorderWidth, clipOffset[2]) / 2 - clipY))
	            };
	
	            if (!skipAxes) {
	                each(chart.axes, function (axis) {
	                    axis.setAxisSize();
	                    axis.setAxisTranslation();
	                });
	            }
	        },
	
	        /**
	         * Initial margins before auto size margins are applied
	         */
	        resetMargins: function () {
	            var chart = this;
	
	            each(marginNames, function (m, side) {
	                chart[m] = pick(chart.margin[side], chart.spacing[side]);
	            });
	            chart.axisOffset = [0, 0, 0, 0]; // top, right, bottom, left
	            chart.clipOffset = [0, 0, 0, 0];
	        },
	
	        /**
	         * Draw the borders and backgrounds for chart and plot area
	         */
	        drawChartBox: function () {
	            var chart = this,
	                optionsChart = chart.options.chart,
	                renderer = chart.renderer,
	                chartWidth = chart.chartWidth,
	                chartHeight = chart.chartHeight,
	                chartBackground = chart.chartBackground,
	                plotBackground = chart.plotBackground,
	                plotBorder = chart.plotBorder,
	                plotBGImage = chart.plotBGImage,
	                chartBorderWidth = optionsChart.borderWidth || 0,
	                chartBackgroundColor = optionsChart.backgroundColor,
	                plotBackgroundColor = optionsChart.plotBackgroundColor,
	                plotBackgroundImage = optionsChart.plotBackgroundImage,
	                plotBorderWidth = optionsChart.plotBorderWidth || 0,
	                mgn,
	                bgAttr,
	                plotLeft = chart.plotLeft,
	                plotTop = chart.plotTop,
	                plotWidth = chart.plotWidth,
	                plotHeight = chart.plotHeight,
	                plotBox = chart.plotBox,
	                clipRect = chart.clipRect,
	                clipBox = chart.clipBox;
	
	            // Chart area
	            mgn = chartBorderWidth + (optionsChart.shadow ? 8 : 0);
	
	            if (chartBorderWidth || chartBackgroundColor) {
	                if (!chartBackground) {
	
	                    bgAttr = {
	                        fill: chartBackgroundColor || NONE
	                    };
	                    if (chartBorderWidth) { // #980
	                        bgAttr.stroke = optionsChart.borderColor;
	                        bgAttr['stroke-width'] = chartBorderWidth;
	                    }
	                    chart.chartBackground = renderer.rect(mgn / 2, mgn / 2, chartWidth - mgn, chartHeight - mgn,
	                            optionsChart.borderRadius, chartBorderWidth)
	                        .attr(bgAttr)
	                        .addClass(PREFIX + 'background')
	                        .add()
	                        .shadow(optionsChart.shadow);
	
	                } else { // resize
	                    chartBackground.animate(
	                        chartBackground.crisp({ width: chartWidth - mgn, height: chartHeight - mgn })
	                    );
	                }
	            }
	
	
	            // Plot background
	            if (plotBackgroundColor) {
	                if (!plotBackground) {
	                    chart.plotBackground = renderer.rect(plotLeft, plotTop, plotWidth, plotHeight, 0)
	                        .attr({
	                            fill: plotBackgroundColor
	                        })
	                        .add()
	                        .shadow(optionsChart.plotShadow);
	                } else {
	                    plotBackground.animate(plotBox);
	                }
	            }
	            if (plotBackgroundImage) {
	                if (!plotBGImage) {
	                    chart.plotBGImage = renderer.image(plotBackgroundImage, plotLeft, plotTop, plotWidth, plotHeight)
	                        .add();
	                } else {
	                    plotBGImage.animate(plotBox);
	                }
	            }
	
	            // Plot clip
	            if (!clipRect) {
	                chart.clipRect = renderer.clipRect(clipBox);
	            } else {
	                clipRect.animate({
	                    width: clipBox.width,
	                    height: clipBox.height
	                });
	            }
	
	            // Plot area border
	            if (plotBorderWidth) {
	                if (!plotBorder) {
	                    chart.plotBorder = renderer.rect(plotLeft, plotTop, plotWidth, plotHeight, 0, -plotBorderWidth)
	                        .attr({
	                            stroke: optionsChart.plotBorderColor,
	                            'stroke-width': plotBorderWidth,
	                            fill: NONE,
	                            zIndex: 1
	                        })
	                        .add();
	                } else {
	                    plotBorder.strokeWidth = -plotBorderWidth;
	                    plotBorder.animate(
	                        plotBorder.crisp({ x: plotLeft, y: plotTop, width: plotWidth, height: plotHeight }) //#3282 plotBorder should be negative
	                    );
	                }
	            }
	
	            // reset
	            chart.isDirtyBox = false;
	        },
	
	        /**
	         * Detect whether a certain chart property is needed based on inspecting its options
	         * and series. This mainly applies to the chart.invert property, and in extensions to
	         * the chart.angular and chart.polar properties.
	         */
	        propFromSeries: function () {
	            var chart = this,
	                optionsChart = chart.options.chart,
	                klass,
	                seriesOptions = chart.options.series,
	                i,
	                value;
	
	
	            each(['inverted', 'angular', 'polar'], function (key) {
	
	                // The default series type's class
	                klass = seriesTypes[optionsChart.type || optionsChart.defaultSeriesType];
	
	                // Get the value from available chart-wide properties
	                value = (
	                    chart[key] || // 1. it is set before
	                    optionsChart[key] || // 2. it is set in the options
	                    (klass && klass.prototype[key]) // 3. it's default series class requires it
	                );
	
	                // 4. Check if any the chart's series require it
	                i = seriesOptions && seriesOptions.length;
	                while (!value && i--) {
	                    klass = seriesTypes[seriesOptions[i].type];
	                    if (klass && klass.prototype[key]) {
	                        value = true;
	                    }
	                }
	
	                // Set the chart property
	                chart[key] = value;
	            });
	
	        },
	
	        /**
	         * Link two or more series together. This is done initially from Chart.render,
	         * and after Chart.addSeries and Series.remove.
	         */
	        linkSeries: function () {
	            var chart = this,
	                chartSeries = chart.series;
	
	            // Reset links
	            each(chartSeries, function (series) {
	                series.linkedSeries.length = 0;
	            });
	
	            // Apply new links
	            each(chartSeries, function (series) {
	                var linkedTo = series.options.linkedTo;
	                if (isString(linkedTo)) {
	                    if (linkedTo === ':previous') {
	                        linkedTo = chart.series[series.index - 1];
	                    } else {
	                        linkedTo = chart.get(linkedTo);
	                    }
	                    if (linkedTo && linkedTo.linkedParent !== series) { // #3341 avoid mutual linking
	                        linkedTo.linkedSeries.push(series);
	                        series.linkedParent = linkedTo;
	                        series.visible = pick(series.options.visible, linkedTo.options.visible, series.visible); // #3879
	                    }
	                }
	            });
	        },
	
	        /**
	         * Render series for the chart
	         */
	        renderSeries: function () {
	            each(this.series, function (serie) {
	                serie.translate();
	                serie.render();
	            });
	        },
	
	        /**
	         * Render labels for the chart
	         */
	        renderLabels: function () {
	            var chart = this,
	                labels = chart.options.labels;
	            if (labels.items) {
	                each(labels.items, function (label) {
	                    var style = extend(labels.style, label.style),
	                        x = pInt(style.left) + chart.plotLeft,
	                        y = pInt(style.top) + chart.plotTop + 12;
	
	                    // delete to prevent rewriting in IE
	                    delete style.left;
	                    delete style.top;
	
	                    chart.renderer.text(
	                        label.html,
	                        x,
	                        y
	                    )
	                    .attr({ zIndex: 2 })
	                    .css(style)
	                    .add();
	
	                });
	            }
	        },
	
	        /**
	         * Render all graphics for the chart
	         */
	        render: function () {
	            var chart = this,
	                axes = chart.axes,
	                renderer = chart.renderer,
	                options = chart.options,
	                tempWidth,
	                tempHeight,
	                redoHorizontal,
	                redoVertical;
	
	            // Title
	            chart.setTitle();
	
	
	            // Legend
	            chart.legend = new Legend(chart, options.legend);
	
	            // Get stacks
	            if (chart.getStacks) {
	                chart.getStacks();
	            }
	
	            // Get chart margins
	            chart.getMargins(true);
	            chart.setChartSize();
	
	            // Record preliminary dimensions for later comparison
	            tempWidth = chart.plotWidth;
	            tempHeight = chart.plotHeight = chart.plotHeight - 21; // 21 is the most common correction for X axis labels
	
	            // Get margins by pre-rendering axes
	            each(axes, function (axis) {
	                axis.setScale();
	            });
	            chart.getAxisMargins();
	
	            // If the plot area size has changed significantly, calculate tick positions again
	            redoHorizontal = tempWidth / chart.plotWidth > 1.1;
	            redoVertical = tempHeight / chart.plotHeight > 1.05; // Height is more sensitive
	
	            if (redoHorizontal || redoVertical) {
	
	                chart.maxTicks = null; // reset for second pass
	                each(axes, function (axis) {
	                    if ((axis.horiz && redoHorizontal) || (!axis.horiz && redoVertical)) {
	                        axis.setTickInterval(true); // update to reflect the new margins
	                    }
	                });
	                chart.getMargins(); // second pass to check for new labels
	            }
	
	            // Draw the borders and backgrounds
	            chart.drawChartBox();
	
	
	            // Axes
	            if (chart.hasCartesianSeries) {
	                each(axes, function (axis) {
	                    if (axis.visible) {
	                        axis.render();
	                    }
	                });
	            }
	
	            // The series
	            if (!chart.seriesGroup) {
	                chart.seriesGroup = renderer.g('series-group')
	                    .attr({ zIndex: 3 })
	                    .add();
	            }
	            chart.renderSeries();
	
	            // Labels
	            chart.renderLabels();
	
	            // Credits
	            chart.showCredits(options.credits);
	
	            // Set flag
	            chart.hasRendered = true;
	
	        },
	
	        /**
	         * Show chart credits based on config options
	         */
	        showCredits: function (credits) {
	            if (credits.enabled && !this.credits) {
	                this.credits = this.renderer.text(
	                    credits.text,
	                    0,
	                    0
	                )
	                .on('click', function () {
	                    if (credits.href) {
	                        win.location.href = credits.href;
	                    }
	                })
	                .attr({
	                    align: credits.position.align,
	                    zIndex: 8
	                })
	                .css(credits.style)
	                .add()
	                .align(credits.position);
	            }
	        },
	
	        /**
	         * Clean up memory usage
	         */
	        destroy: function () {
	            var chart = this,
	                axes = chart.axes,
	                series = chart.series,
	                container = chart.container,
	                i,
	                parentNode = container && container.parentNode;
	
	            // fire the chart.destoy event
	            fireEvent(chart, 'destroy');
	
	            // Delete the chart from charts lookup array
	            charts[chart.index] = UNDEFINED;
	            chartCount--;
	            chart.renderTo.removeAttribute('data-highcharts-chart');
	
	            // remove events
	            removeEvent(chart);
	
	            // ==== Destroy collections:
	            // Destroy axes
	            i = axes.length;
	            while (i--) {
	                axes[i] = axes[i].destroy();
	            }
	
	            // Destroy each series
	            i = series.length;
	            while (i--) {
	                series[i] = series[i].destroy();
	            }
	
	            // ==== Destroy chart properties:
	            each(['title', 'subtitle', 'chartBackground', 'plotBackground', 'plotBGImage',
	                    'plotBorder', 'seriesGroup', 'clipRect', 'credits', 'pointer', 'scroller',
	                    'rangeSelector', 'legend', 'resetZoomButton', 'tooltip', 'renderer'], function (name) {
	                var prop = chart[name];
	
	                if (prop && prop.destroy) {
	                    chart[name] = prop.destroy();
	                }
	            });
	
	            // remove container and all SVG
	            if (container) { // can break in IE when destroyed before finished loading
	                container.innerHTML = '';
	                removeEvent(container);
	                if (parentNode) {
	                    discardElement(container);
	                }
	
	            }
	
	            // clean it all up
	            for (i in chart) {
	                delete chart[i];
	            }
	
	        },
	
	
	        /**
	         * VML namespaces can't be added until after complete. Listening
	         * for Perini's doScroll hack is not enough.
	         */
	        isReadyToRender: function () {
	            var chart = this;
	
	            // Note: win == win.top is required
	            if ((!hasSVG && (win == win.top && doc.readyState !== 'complete')) || (useCanVG && !win.canvg)) { // eslint-disable-line eqeqeq
	                if (useCanVG) {
	                    // Delay rendering until canvg library is downloaded and ready
	                    CanVGController.push(function () {
	                        chart.firstRender();
	                    }, chart.options.global.canvasToolsURL);
	                } else {
	                    doc.attachEvent('onreadystatechange', function () {
	                        doc.detachEvent('onreadystatechange', chart.firstRender);
	                        if (doc.readyState === 'complete') {
	                            chart.firstRender();
	                        }
	                    });
	                }
	                return false;
	            }
	            return true;
	        },
	
	        /**
	         * Prepare for first rendering after all data are loaded
	         */
	        firstRender: function () {
	            var chart = this,
	                options = chart.options;
	
	            // Check whether the chart is ready to render
	            if (!chart.isReadyToRender()) {
	                return;
	            }
	
	            // Create the container
	            chart.getContainer();
	
	            // Run an early event after the container and renderer are established
	            fireEvent(chart, 'init');
	
	
	            chart.resetMargins();
	            chart.setChartSize();
	
	            // Set the common chart properties (mainly invert) from the given series
	            chart.propFromSeries();
	
	            // get axes
	            chart.getAxes();
	
	            // Initialize the series
	            each(options.series || [], function (serieOptions) {
	                chart.initSeries(serieOptions);
	            });
	
	            chart.linkSeries();
	
	            // Run an event after axes and series are initialized, but before render. At this stage,
	            // the series data is indexed and cached in the xData and yData arrays, so we can access
	            // those before rendering. Used in Highstock.
	            fireEvent(chart, 'beforeRender');
	
	            // depends on inverted and on margins being set
	            if (Highcharts.Pointer) {
	                chart.pointer = new Pointer(chart, options);
	            }
	
	            chart.render();
	
	            // add canvas
	            chart.renderer.draw();
	        
	            // Fire the load event if there are no external images
	            if (!chart.renderer.imgCount && chart.onload) {
	                chart.onload();
	            }
	
	            // If the chart was rendered outside the top container, put it back in (#3679)
	            chart.cloneRenderTo(true);
	
	        },
	
	        /** 
	         * On chart load
	         */
	        onload: function () {
	            var chart = this;
	
	            // Run callbacks
	            each([this.callback].concat(this.callbacks), function (fn) {
	                if (fn && chart.index !== undefined) { // Chart destroyed in its own callback (#3600)
	                    fn.apply(chart, [chart]);
	                }
	            });
	
	            fireEvent(chart, 'load');
	
	            // Don't run again
	            this.onload = null;
	        },
	
	        /**
	        * Creates arrays for spacing and margin from given options.
	        */
	        splashArray: function (target, options) {
	            var oVar = options[target],
	                tArray = isObject(oVar) ? oVar : [oVar, oVar, oVar, oVar];
	
	            return [pick(options[target + 'Top'], tArray[0]),
	                    pick(options[target + 'Right'], tArray[1]),
	                    pick(options[target + 'Bottom'], tArray[2]),
	                    pick(options[target + 'Left'], tArray[3])];
	        }
	    }; // end Chart
	
	    var CenteredSeriesMixin = Highcharts.CenteredSeriesMixin = {
	        /**
	         * Get the center of the pie based on the size and center options relative to the
	         * plot area. Borrowed by the polar and gauge series types.
	         */
	        getCenter: function () {
	
	            var options = this.options,
	                chart = this.chart,
	                slicingRoom = 2 * (options.slicedOffset || 0),
	                handleSlicingRoom,
	                plotWidth = chart.plotWidth - 2 * slicingRoom,
	                plotHeight = chart.plotHeight - 2 * slicingRoom,
	                centerOption = options.center,
	                positions = [pick(centerOption[0], '50%'), pick(centerOption[1], '50%'), options.size || '100%', options.innerSize || 0],
	                smallestSize = mathMin(plotWidth, plotHeight),
	                i,
	                value;
	
	            for (i = 0; i < 4; ++i) {
	                value = positions[i];
	                handleSlicingRoom = i < 2 || (i === 2 && /%$/.test(value));
	
	                // i == 0: centerX, relative to width
	                // i == 1: centerY, relative to height
	                // i == 2: size, relative to smallestSize
	                // i == 3: innerSize, relative to size
	                positions[i] = relativeLength(value, [plotWidth, plotHeight, smallestSize, positions[2]][i]) +
	                    (handleSlicingRoom ? slicingRoom : 0);
	
	            }
	            // innerSize cannot be larger than size (#3632)
	            if (positions[3] > positions[2]) {
	                positions[3] = positions[2];
	            }
	            return positions;
	        }
	    };
	
	    /**
	     * The Point object and prototype. Inheritable and used as base for PiePoint
	     */
	    var Point = function () {};
	    Point.prototype = {
	
	        /**
	         * Initialize the point
	         * @param {Object} series The series object containing this point
	         * @param {Object} options The data in either number, array or object format
	         */
	        init: function (series, options, x) {
	
	            var point = this,
	                colors;
	            point.series = series;
	            point.color = series.color; // #3445
	            point.applyOptions(options, x);
	            point.pointAttr = {};
	
	            if (series.options.colorByPoint) {
	                colors = series.options.colors || series.chart.options.colors;
	                point.color = point.color || colors[series.colorCounter++];
	                // loop back to zero
	                if (series.colorCounter === colors.length) {
	                    series.colorCounter = 0;
	                }
	            }
	
	            series.chart.pointCount++;
	            return point;
	        },
	        /**
	         * Apply the options containing the x and y data and possible some extra properties.
	         * This is called on point init or from point.update.
	         *
	         * @param {Object} options
	         */
	        applyOptions: function (options, x) {
	            var point = this,
	                series = point.series,
	                pointValKey = series.options.pointValKey || series.pointValKey;
	
	            options = Point.prototype.optionsToObject.call(this, options);
	
	            // copy options directly to point
	            extend(point, options);
	            point.options = point.options ? extend(point.options, options) : options;
	
	            // Since options are copied into the Point instance, some accidental options must be shielded (#5681)
	            if (options.group) {
	                delete point.group;
	            }
	
	            // For higher dimension series types. For instance, for ranges, point.y is mapped to point.low.
	            if (pointValKey) {
	                point.y = point[pointValKey];
	            }
	            point.isNull = pick(
	                point.isValid && !point.isValid(),
	                point.x === null || !isNumber(point.y, true)
	            ); // #3571, check for NaN
	
	            // If no x is set by now, get auto incremented value. All points must have an
	            // x value, however the y value can be null to create a gap in the series
	            if ('name' in point && x === undefined && series.xAxis && series.xAxis.hasNames) {
	                point.x = series.xAxis.nameToX(point);
	            }
	            if (point.x === undefined && series) {
	                if (x === undefined) {
	                    point.x = series.autoIncrement(point);
	                } else {
	                    point.x = x;
	                }
	            }
	        
	            return point;
	        },
	
	        /**
	         * Transform number or array configs into objects
	         */
	        optionsToObject: function (options) {
	            var ret = {},
	                series = this.series,
	                keys = series.options.keys,
	                pointArrayMap = keys || series.pointArrayMap || ['y'],
	                valueCount = pointArrayMap.length,
	                firstItemType,
	                i = 0,
	                j = 0;
	
	            if (isNumber(options) || options === null) {
	                ret[pointArrayMap[0]] = options;
	
	            } else if (isArray(options)) {
	                // with leading x value
	                if (!keys && options.length > valueCount) {
	                    firstItemType = typeof options[0];
	                    if (firstItemType === 'string') {
	                        ret.name = options[0];
	                    } else if (firstItemType === 'number') {
	                        ret.x = options[0];
	                    }
	                    i++;
	                }
	                while (j < valueCount) {
	                    if (!keys || options[i] !== undefined) { // Skip undefined positions for keys
	                        ret[pointArrayMap[j]] = options[i];
	                    }
	                    i++;
	                    j++;
	                }
	            } else if (typeof options === 'object') {
	                ret = options;
	
	                // This is the fastest way to detect if there are individual point dataLabels that need
	                // to be considered in drawDataLabels. These can only occur in object configs.
	                if (options.dataLabels) {
	                    series._hasPointLabels = true;
	                }
	
	                // Same approach as above for markers
	                if (options.marker) {
	                    series._hasPointMarkers = true;
	                }
	            }
	            return ret;
	        },
	
	        /**
	         * Destroy a point to clear memory. Its reference still stays in series.data.
	         */
	        destroy: function () {
	            var point = this,
	                series = point.series,
	                chart = series.chart,
	                hoverPoints = chart.hoverPoints,
	                prop;
	
	            chart.pointCount--;
	
	            if (hoverPoints) {
	                point.setState();
	                erase(hoverPoints, point);
	                if (!hoverPoints.length) {
	                    chart.hoverPoints = null;
	                }
	
	            }
	            if (point === chart.hoverPoint) {
	                point.onMouseOut();
	            }
	
	            // remove all events
	            if (point.graphic || point.dataLabel) { // removeEvent and destroyElements are performance expensive
	                removeEvent(point);
	                point.destroyElements();
	            }
	
	            if (point.legendItem) { // pies have legend items
	                chart.legend.destroyItem(point);
	            }
	
	            for (prop in point) {
	                point[prop] = null;
	            }
	
	
	        },
	
	        /**
	         * Destroy SVG elements associated with the point
	         */
	        destroyElements: function () {
	            var point = this,
	                props = ['graphic', 'dataLabel', 'dataLabelUpper', 'connector', 'shadowGroup'],
	                prop,
	                i = 6;
	            while (i--) {
	                prop = props[i];
	                if (point[prop]) {
	                    point[prop] = point[prop].destroy();
	                }
	            }
	        },
	
	        /**
	         * Return the configuration hash needed for the data label and tooltip formatters
	         */
	        getLabelConfig: function () {
	            return {
	                x: this.category,
	                y: this.y,
	                color: this.color,
	                key: this.name || this.category,
	                series: this.series,
	                point: this,
	                percentage: this.percentage,
	                total: this.total || this.stackTotal
	            };
	        },
	
	        /**
	         * Extendable method for formatting each point's tooltip line
	         *
	         * @return {String} A string to be concatenated in to the common tooltip text
	         */
	        tooltipFormatter: function (pointFormat) {
	
	            // Insert options for valueDecimals, valuePrefix, and valueSuffix
	            var series = this.series,
	                seriesTooltipOptions = series.tooltipOptions,
	                valueDecimals = pick(seriesTooltipOptions.valueDecimals, ''),
	                valuePrefix = seriesTooltipOptions.valuePrefix || '',
	                valueSuffix = seriesTooltipOptions.valueSuffix || '';
	
	            // Loop over the point array map and replace unformatted values with sprintf formatting markup
	            each(series.pointArrayMap || ['y'], function (key) {
	                key = '{point.' + key; // without the closing bracket
	                if (valuePrefix || valueSuffix) {
	                    pointFormat = pointFormat.replace(key + '}', valuePrefix + key + '}' + valueSuffix);
	                }
	                pointFormat = pointFormat.replace(key + '}', key + ':,.' + valueDecimals + 'f}');
	            });
	
	            return format(pointFormat, {
	                point: this,
	                series: this.series
	            });
	        },
	
	        /**
	         * Fire an event on the Point object.
	         * @param {String} eventType
	         * @param {Object} eventArgs Additional event arguments
	         * @param {Function} defaultFunction Default event handler
	         */
	        firePointEvent: function (eventType, eventArgs, defaultFunction) {
	            var point = this,
	                series = this.series,
	                seriesOptions = series.options;
	
	            // load event handlers on demand to save time on mouseover/out
	            if (seriesOptions.point.events[eventType] || (point.options && point.options.events && point.options.events[eventType])) {
	                this.importEvents();
	            }
	
	            // add default handler if in selection mode
	            if (eventType === 'click' && seriesOptions.allowPointSelect) {
	                defaultFunction = function (event) {
	                    // Control key is for Windows, meta (= Cmd key) for Mac, Shift for Opera
	                    if (point.select) { // Could be destroyed by prior event handlers (#2911)
	                        point.select(null, event.ctrlKey || event.metaKey || event.shiftKey);
	                    }
	                };
	            }
	
	            fireEvent(this, eventType, eventArgs, defaultFunction);
	        },
	        visible: true
	    };
	    /**
	     * @classDescription The base function which all other series types inherit from. The data in the series is stored
	     * in various arrays.
	     *
	     * - First, series.options.data contains all the original config options for
	     * each point whether added by options or methods like series.addPoint.
	     * - Next, series.data contains those values converted to points, but in case the series data length
	     * exceeds the cropThreshold, or if the data is grouped, series.data doesn't contain all the points. It
	     * only contains the points that have been created on demand.
	     * - Then there's series.points that contains all currently visible point objects. In case of cropping,
	     * the cropped-away points are not part of this array. The series.points array starts at series.cropStart
	     * compared to series.data and series.options.data. If however the series data is grouped, these can't
	     * be correlated one to one.
	     * - series.xData and series.processedXData contain clean x values, equivalent to series.data and series.points.
	     * - series.yData and series.processedYData contain clean x values, equivalent to series.data and series.points.
	     *
	     * @param {Object} chart
	     * @param {Object} options
	     */
	    var Series = Highcharts.Series = function () {};
	
	    Series.prototype = {
	
	        isCartesian: true,
	        type: 'line',
	        pointClass: Point,
	        sorted: true, // requires the data to be sorted
	        requireSorting: true,
	        pointAttrToOptions: { // mapping between SVG attributes and the corresponding options
	            stroke: 'lineColor',
	            'stroke-width': 'lineWidth',
	            fill: 'fillColor',
	            r: 'radius'
	        },
	        directTouch: false,
	        axisTypes: ['xAxis', 'yAxis'],
	        colorCounter: 0,
	        parallelArrays: ['x', 'y'], // each point's x and y values are stored in this.xData and this.yData
	        init: function (chart, options) {
	            var series = this,
	                eventType,
	                events,
	                chartSeries = chart.series,
	                sortByIndex = function (a, b) {
	                    return pick(a.options.index, a._i) - pick(b.options.index, b._i);
	                };
	
	            series.chart = chart;
	            series.options = options = series.setOptions(options); // merge with plotOptions
	            series.linkedSeries = [];
	
	            // bind the axes
	            series.bindAxes();
	
	            // set some variables
	            extend(series, {
	                name: options.name,
	                state: NORMAL_STATE,
	                pointAttr: {},
	                visible: options.visible !== false, // true by default
	                selected: options.selected === true // false by default
	            });
	
	            // special
	            if (useCanVG) {
	                options.animation = false;
	            }
	
	            // register event listeners
	            events = options.events;
	            for (eventType in events) {
	                addEvent(series, eventType, events[eventType]);
	            }
	            if (
	                (events && events.click) ||
	                (options.point && options.point.events && options.point.events.click) ||
	                options.allowPointSelect
	            ) {
	                chart.runTrackerClick = true;
	            }
	
	            series.getColor();
	            series.getSymbol();
	
	            // Set the data
	            each(series.parallelArrays, function (key) {
	                series[key + 'Data'] = [];
	            });
	            series.setData(options.data, false);
	
	            // Mark cartesian
	            if (series.isCartesian) {
	                chart.hasCartesianSeries = true;
	            }
	
	            // Register it in the chart
	            chartSeries.push(series);
	            series._i = chartSeries.length - 1;
	
	            // Sort series according to index option (#248, #1123, #2456)
	            stableSort(chartSeries, sortByIndex);
	            if (this.yAxis) {
	                stableSort(this.yAxis.series, sortByIndex);
	            }
	
	            each(chartSeries, function (series, i) {
	                series.index = i;
	                series.name = series.name || 'Series ' + (i + 1);
	            });
	
	        },
	
	        /**
	         * Set the xAxis and yAxis properties of cartesian series, and register the series
	         * in the axis.series array
	         */
	        bindAxes: function () {
	            var series = this,
	                seriesOptions = series.options,
	                chart = series.chart,
	                axisOptions;
	
	            each(series.axisTypes || [], function (AXIS) { // repeat for xAxis and yAxis
	
	                each(chart[AXIS], function (axis) { // loop through the chart's axis objects
	                    axisOptions = axis.options;
	
	                    // apply if the series xAxis or yAxis option mathches the number of the
	                    // axis, or if undefined, use the first axis
	                    if ((seriesOptions[AXIS] === axisOptions.index) ||
	                            (seriesOptions[AXIS] !== UNDEFINED && seriesOptions[AXIS] === axisOptions.id) ||
	                            (seriesOptions[AXIS] === UNDEFINED && axisOptions.index === 0)) {
	
	                        // register this series in the axis.series lookup
	                        axis.series.push(series);
	
	                        // set this series.xAxis or series.yAxis reference
	                        series[AXIS] = axis;
	
	                        // mark dirty for redraw
	                        axis.isDirty = true;
	                    }
	                });
	
	                // The series needs an X and an Y axis
	                if (!series[AXIS] && series.optionalAxis !== AXIS) {
	                    error(18, true);
	                }
	
	            });
	        },
	
	        /**
	         * For simple series types like line and column, the data values are held in arrays like
	         * xData and yData for quick lookup to find extremes and more. For multidimensional series
	         * like bubble and map, this can be extended with arrays like zData and valueData by
	         * adding to the series.parallelArrays array.
	         */
	        updateParallelArrays: function (point, i) {
	            var series = point.series,
	                args = arguments,
	                fn = isNumber(i) ?
	                    // Insert the value in the given position
	                    function (key) {
	                        var val = key === 'y' && series.toYData ? series.toYData(point) : point[key];
	                        series[key + 'Data'][i] = val;
	                    } :
	                    // Apply the method specified in i with the following arguments as arguments
	                    function (key) {
	                        Array.prototype[i].apply(series[key + 'Data'], Array.prototype.slice.call(args, 2));
	                    };
	
	            each(series.parallelArrays, fn);
	        },
	
	        /**
	         * Return an auto incremented x value based on the pointStart and pointInterval options.
	         * This is only used if an x value is not given for the point that calls autoIncrement.
	         */
	        autoIncrement: function () {
	
	            var options = this.options,
	                xIncrement = this.xIncrement,
	                date,
	                pointInterval,
	                pointIntervalUnit = options.pointIntervalUnit;
	
	            xIncrement = pick(xIncrement, options.pointStart, 0);
	
	            this.pointInterval = pointInterval = pick(this.pointInterval, options.pointInterval, 1);
	
	            // Added code for pointInterval strings
	            if (pointIntervalUnit) {
	                date = new Date(xIncrement);
	
	                if (pointIntervalUnit === 'day') {
	                    date = +date[setDate](date[getDate]() + pointInterval);
	                } else if (pointIntervalUnit === 'month') {
	                    date = +date[setMonth](date[getMonth]() + pointInterval);
	                } else if (pointIntervalUnit === 'year') {
	                    date = +date[setFullYear](date[getFullYear]() + pointInterval);
	                }
	                pointInterval = date - xIncrement;
	            }
	
	            this.xIncrement = xIncrement + pointInterval;
	            return xIncrement;
	        },
	    
	        /**
	         * Set the series options by merging from the options tree
	         * @param {Object} itemOptions
	         */
	        setOptions: function (itemOptions) {
	            var chart = this.chart,
	                chartOptions = chart.options,
	                plotOptions = chartOptions.plotOptions,
	                userOptions = chart.userOptions || {},
	                userPlotOptions = userOptions.plotOptions || {},
	                typeOptions = plotOptions[this.type],
	                options,
	                zones;
	
	            this.userOptions = itemOptions;
	
	            // General series options take precedence over type options because otherwise, default
	            // type options like column.animation would be overwritten by the general option.
	            // But issues have been raised here (#3881), and the solution may be to distinguish
	            // between default option and userOptions like in the tooltip below.
	            options = merge(
	                typeOptions,
	                plotOptions.series,
	                itemOptions
	            );
	
	            // The tooltip options are merged between global and series specific options
	            this.tooltipOptions = merge(
	                defaultOptions.tooltip,
	                defaultOptions.plotOptions[this.type].tooltip,
	                userOptions.tooltip,
	                userPlotOptions.series && userPlotOptions.series.tooltip,
	                userPlotOptions[this.type] && userPlotOptions[this.type].tooltip,
	                itemOptions.tooltip
	            );
	
	            // Delete marker object if not allowed (#1125)
	            if (typeOptions.marker === null) {
	                delete options.marker;
	            }
	
	            // Handle color zones
	            this.zoneAxis = options.zoneAxis;
	            zones = this.zones = (options.zones || []).slice();
	            if ((options.negativeColor || options.negativeFillColor) && !options.zones) {
	                zones.push({
	                    value: options[this.zoneAxis + 'Threshold'] || options.threshold || 0,
	                    color: options.negativeColor,
	                    fillColor: options.negativeFillColor
	                });
	            }
	            if (zones.length) { // Push one extra zone for the rest
	                if (defined(zones[zones.length - 1].value)) {
	                    zones.push({
	                        color: this.color,
	                        fillColor: this.fillColor
	                    });
	                }
	            }
	            return options;
	        },
	
	        getCyclic: function (prop, value, defaults) {
	            var i,
	                userOptions = this.userOptions,
	                indexName = '_' + prop + 'Index',
	                counterName = prop + 'Counter';
	
	            if (!value) {
	                if (defined(userOptions[indexName])) { // after Series.update()
	                    i = userOptions[indexName];
	                } else {
	                    userOptions[indexName] = i = this.chart[counterName] % defaults.length;
	                    this.chart[counterName] += 1;
	                }
	                value = defaults[i];
	            }
	            this[prop] = value;
	        },
	
	        /**
	         * Get the series' color
	         */
	        getColor: function () {
	            if (this.options.colorByPoint) {
	                this.options.color = null; // #4359, selected slice got series.color even when colorByPoint was set.
	            } else {
	                this.getCyclic('color', this.options.color || defaultPlotOptions[this.type].color, this.chart.options.colors);
	            }
	        },
	        /**
	         * Get the series' symbol
	         */
	        getSymbol: function () {
	            var seriesMarkerOption = this.options.marker;
	
	            this.getCyclic('symbol', seriesMarkerOption.symbol, this.chart.options.symbols);
	
	            // don't substract radius in image symbols (#604)
	            if (/^url/.test(this.symbol)) {
	                seriesMarkerOption.radius = 0;
	            }
	        },
	
	        drawLegendSymbol: LegendSymbolMixin.drawLineMarker,
	
	        /**
	         * Replace the series data with a new set of data
	         * @param {Object} data
	         * @param {Object} redraw
	         */
	        setData: function (data, redraw, animation, updatePoints) {
	            var series = this,
	                oldData = series.points,
	                oldDataLength = (oldData && oldData.length) || 0,
	                dataLength,
	                options = series.options,
	                chart = series.chart,
	                firstPoint = null,
	                xAxis = series.xAxis,
	                i,
	                turboThreshold = options.turboThreshold,
	                pt,
	                xData = this.xData,
	                yData = this.yData,
	                pointArrayMap = series.pointArrayMap,
	                valueCount = pointArrayMap && pointArrayMap.length;
	
	            data = data || [];
	            dataLength = data.length;
	            redraw = pick(redraw, true);
	
	            // If the point count is the same as is was, just run Point.update which is
	            // cheaper, allows animation, and keeps references to points.
	            if (updatePoints !== false && dataLength && oldDataLength === dataLength && !series.cropped && !series.hasGroupedData && series.visible) {
	                each(data, function (point, i) {
	                    // .update doesn't exist on a linked, hidden series (#3709)
	                    if (oldData[i].update && point !== options.data[i]) {
	                        oldData[i].update(point, false, null, false);
	                    }
	                });
	
	            } else {
	
	                // Reset properties
	                series.xIncrement = null;
	
	                series.colorCounter = 0; // for series with colorByPoint (#1547)
	
	                // Update parallel arrays
	                each(this.parallelArrays, function (key) {
	                    series[key + 'Data'].length = 0;
	                });
	
	                // In turbo mode, only one- or twodimensional arrays of numbers are allowed. The
	                // first value is tested, and we assume that all the rest are defined the same
	                // way. Although the 'for' loops are similar, they are repeated inside each
	                // if-else conditional for max performance.
	                if (turboThreshold && dataLength > turboThreshold) {
	
	                    // find the first non-null point
	                    i = 0;
	                    while (firstPoint === null && i < dataLength) {
	                        firstPoint = data[i];
	                        i++;
	                    }
	
	
	                    if (isNumber(firstPoint)) { // assume all points are numbers
	                        for (i = 0; i < dataLength; i++) {
	                            xData[i] = this.autoIncrement();
	                            yData[i] = data[i];
	                        }
	                    } else if (isArray(firstPoint)) { // assume all points are arrays
	                        if (valueCount) { // [x, low, high] or [x, o, h, l, c]
	                            for (i = 0; i < dataLength; i++) {
	                                pt = data[i];
	                                xData[i] = pt[0];
	                                yData[i] = pt.slice(1, valueCount + 1);
	                            }
	                        } else { // [x, y]
	                            for (i = 0; i < dataLength; i++) {
	                                pt = data[i];
	                                xData[i] = pt[0];
	                                yData[i] = pt[1];
	                            }
	                        }
	                    } else {
	                        error(12); // Highcharts expects configs to be numbers or arrays in turbo mode
	                    }
	                } else {
	                    for (i = 0; i < dataLength; i++) {
	                        if (data[i] !== UNDEFINED) { // stray commas in oldIE
	                            pt = { series: series };
	                            series.pointClass.prototype.applyOptions.apply(pt, [data[i]]);
	                            series.updateParallelArrays(pt, i);
	                        }
	                    }
	                }
	
	                // Forgetting to cast strings to numbers is a common caveat when handling CSV or JSON
	                if (isString(yData[0])) {
	                    error(14, true);
	                }
	
	                series.data = [];
	                series.options.data = series.userOptions.data = data;
	
	                // destroy old points
	                i = oldDataLength;
	                while (i--) {
	                    if (oldData[i] && oldData[i].destroy) {
	                        oldData[i].destroy();
	                    }
	                }
	
	                // reset minRange (#878)
	                if (xAxis) {
	                    xAxis.minRange = xAxis.userMinRange;
	                }
	
	                // redraw
	                series.isDirty = series.isDirtyData = chart.isDirtyBox = true;
	                animation = false;
	            }
	
	            // Typically for pie series, points need to be processed and generated
	            // prior to rendering the legend
	            if (options.legendType === 'point') {
	                this.processData();
	                this.generatePoints();
	            }
	
	            if (redraw) {
	                chart.redraw(animation);
	            }
	        },
	
	        /**
	         * Process the data by cropping away unused data points if the series is longer
	         * than the crop threshold. This saves computing time for lage series.
	         */
	        processData: function (force) {
	            var series = this,
	                processedXData = series.xData, // copied during slice operation below
	                processedYData = series.yData,
	                dataLength = processedXData.length,
	                croppedData,
	                cropStart = 0,
	                cropped,
	                distance,
	                closestPointRange,
	                xAxis = series.xAxis,
	                i, // loop variable
	                options = series.options,
	                cropThreshold = options.cropThreshold,
	                getExtremesFromAll = series.getExtremesFromAll || options.getExtremesFromAll, // #4599
	                isCartesian = series.isCartesian,
	                xExtremes,
	                val2lin = xAxis && xAxis.val2lin,
	                isLog = xAxis && xAxis.isLog,
	                min,
	                max;
	
	            // If the series data or axes haven't changed, don't go through this. Return false to pass
	            // the message on to override methods like in data grouping.
	            if (isCartesian && !series.isDirty && !xAxis.isDirty && !series.yAxis.isDirty && !force) {
	                return false;
	            }
	
	            if (xAxis) {
	                xExtremes = xAxis.getExtremes(); // corrected for log axis (#3053)
	                min = xExtremes.min;
	                max = xExtremes.max;
	            }
	
	            // optionally filter out points outside the plot area
	            if (isCartesian && series.sorted && !getExtremesFromAll && (!cropThreshold || dataLength > cropThreshold || series.forceCrop)) {
	
	                // it's outside current extremes
	                if (processedXData[dataLength - 1] < min || processedXData[0] > max) {
	                    processedXData = [];
	                    processedYData = [];
	
	                // only crop if it's actually spilling out
	                } else if (processedXData[0] < min || processedXData[dataLength - 1] > max) {
	                    croppedData = this.cropData(series.xData, series.yData, min, max);
	                    processedXData = croppedData.xData;
	                    processedYData = croppedData.yData;
	                    cropStart = croppedData.start;
	                    cropped = true;
	                }
	            }
	
	
	            // Find the closest distance between processed points
	            i = processedXData.length || 1;
	            while (--i) {
	                distance = isLog ?
	                    val2lin(processedXData[i]) - val2lin(processedXData[i - 1]) :
	                    processedXData[i] - processedXData[i - 1];
	
	                if (distance > 0 && (closestPointRange === UNDEFINED || distance < closestPointRange)) {
	                    closestPointRange = distance;
	
	                // Unsorted data is not supported by the line tooltip, as well as data grouping and
	                // navigation in Stock charts (#725) and width calculation of columns (#1900)
	                } else if (distance < 0 && series.requireSorting) {
	                    error(15);
	                }
	            }
	
	            // Record the properties
	            series.cropped = cropped; // undefined or true
	            series.cropStart = cropStart;
	            series.processedXData = processedXData;
	            series.processedYData = processedYData;
	
	            series.closestPointRange = closestPointRange;
	
	        },
	
	        /**
	         * Iterate over xData and crop values between min and max. Returns object containing crop start/end
	         * cropped xData with corresponding part of yData, dataMin and dataMax within the cropped range
	         */
	        cropData: function (xData, yData, min, max) {
	            var dataLength = xData.length,
	                cropStart = 0,
	                cropEnd = dataLength,
	                cropShoulder = pick(this.cropShoulder, 1), // line-type series need one point outside
	                i,
	                j;
	
	            // iterate up to find slice start
	            for (i = 0; i < dataLength; i++) {
	                if (xData[i] >= min) {
	                    cropStart = mathMax(0, i - cropShoulder);
	                    break;
	                }
	            }
	
	            // proceed to find slice end
	            for (j = i; j < dataLength; j++) {
	                if (xData[j] > max) {
	                    cropEnd = j + cropShoulder;
	                    break;
	                }
	            }
	
	            return {
	                xData: xData.slice(cropStart, cropEnd),
	                yData: yData.slice(cropStart, cropEnd),
	                start: cropStart,
	                end: cropEnd
	            };
	        },
	
	
	        /**
	         * Generate the data point after the data has been processed by cropping away
	         * unused points and optionally grouped in Highcharts Stock.
	         */
	        generatePoints: function () {
	            var series = this,
	                options = series.options,
	                dataOptions = options.data,
	                data = series.data,
	                dataLength,
	                processedXData = series.processedXData,
	                processedYData = series.processedYData,
	                pointClass = series.pointClass,
	                processedDataLength = processedXData.length,
	                cropStart = series.cropStart || 0,
	                cursor,
	                hasGroupedData = series.hasGroupedData,
	                point,
	                points = [],
	                i;
	
	            if (!data && !hasGroupedData) {
	                var arr = [];
	                arr.length = dataOptions.length;
	                data = series.data = arr;
	            }
	
	            for (i = 0; i < processedDataLength; i++) {
	                cursor = cropStart + i;
	                if (!hasGroupedData) {
	                    if (data[cursor]) {
	                        point = data[cursor];
	                    } else if (dataOptions[cursor] !== UNDEFINED) { // #970
	                        data[cursor] = point = (new pointClass()).init(series, dataOptions[cursor], processedXData[i]);
	                    }
	                    points[i] = point;
	                } else {
	                    // splat the y data in case of ohlc data array
	                    points[i] = (new pointClass()).init(series, [processedXData[i]].concat(splat(processedYData[i])));
	                    points[i].dataGroup = series.groupMap[i];
	                }
	                points[i].index = cursor; // For faster access in Point.update
	            }
	
	            // Hide cropped-away points - this only runs when the number of points is above cropThreshold, or when
	            // swithching view from non-grouped data to grouped data (#637)
	            if (data && (processedDataLength !== (dataLength = data.length) || hasGroupedData)) {
	                for (i = 0; i < dataLength; i++) {
	                    if (i === cropStart && !hasGroupedData) { // when has grouped data, clear all points
	                        i += processedDataLength;
	                    }
	                    if (data[i]) {
	                        data[i].destroyElements();
	                        data[i].plotX = UNDEFINED; // #1003
	                    }
	                }
	            }
	
	            series.data = data;
	            series.points = points;
	        },
	
	        /**
	         * Calculate Y extremes for visible data
	         */
	        getExtremes: function (yData) {
	            var xAxis = this.xAxis,
	                yAxis = this.yAxis,
	                xData = this.processedXData,
	                yDataLength,
	                activeYData = [],
	                activeCounter = 0,
	                xExtremes = xAxis.getExtremes(), // #2117, need to compensate for log X axis
	                xMin = xExtremes.min,
	                xMax = xExtremes.max,
	                validValue,
	                withinRange,
	                x,
	                y,
	                i,
	                j;
	
	            yData = yData || this.stackedYData || this.processedYData || [];
	            yDataLength = yData.length;
	
	            for (i = 0; i < yDataLength; i++) {
	
	                x = xData[i];
	                y = yData[i];
	
	                // For points within the visible range, including the first point outside the
	                // visible range, consider y extremes
	                validValue = (isNumber(y, true) || isArray(y)) && (!yAxis.isLog || (y.length || y > 0));
	                withinRange = this.getExtremesFromAll || this.options.getExtremesFromAll || this.cropped ||
	                    ((xData[i + 1] || x) >= xMin &&    (xData[i - 1] || x) <= xMax);
	
	                if (validValue && withinRange) {
	
	                    j = y.length;
	                    if (j) { // array, like ohlc or range data
	                        while (j--) {
	                            if (y[j] !== null) {
	                                activeYData[activeCounter++] = y[j];
	                            }
	                        }
	                    } else {
	                        activeYData[activeCounter++] = y;
	                    }
	                }
	            }
	            this.dataMin = arrayMin(activeYData);
	            this.dataMax = arrayMax(activeYData);
	        },
	
	        /**
	         * Translate data points from raw data values to chart specific positioning data
	         * needed later in drawPoints, drawGraph and drawTracker.
	         */
	        translate: function () {
	            if (!this.processedXData) { // hidden series
	                this.processData();
	            }
	            this.generatePoints();
	            var series = this,
	                options = series.options,
	                stacking = options.stacking,
	                xAxis = series.xAxis,
	                categories = xAxis.categories,
	                yAxis = series.yAxis,
	                points = series.points,
	                dataLength = points.length,
	                hasModifyValue = !!series.modifyValue,
	                i,
	                pointPlacement = options.pointPlacement,
	                dynamicallyPlaced = pointPlacement === 'between' || isNumber(pointPlacement),
	                threshold = options.threshold,
	                stackThreshold = options.startFromThreshold ? threshold : 0,
	                plotX,
	                plotY,
	                lastPlotX,
	                stackIndicator,
	                closestPointRangePx = Number.MAX_VALUE;
	
	            // Translate each point
	            for (i = 0; i < dataLength; i++) {
	                var point = points[i],
	                    xValue = point.x,
	                    yValue = point.y,
	                    yBottom = point.low,
	                    stack = stacking && yAxis.stacks[(series.negStacks && yValue < (stackThreshold ? 0 : threshold) ? '-' : '') + series.stackKey],
	                    pointStack,
	                    stackValues;
	
	                // Discard disallowed y values for log axes (#3434)
	                if (yAxis.isLog && yValue !== null && yValue <= 0) {
	                    point.isNull = true;
	                }
	
	                // Get the plotX translation
	                point.plotX = plotX = correctFloat( // #5236
	                    mathMin(mathMax(-1e5, xAxis.translate(xValue, 0, 0, 0, 1, pointPlacement, this.type === 'flags')), 1e5) // #3923
	                );
	
	                // Calculate the bottom y value for stacked series
	                if (stacking && series.visible && !point.isNull && stack && stack[xValue]) {
	                    stackIndicator = series.getStackIndicator(stackIndicator, xValue, series.index);
	                    pointStack = stack[xValue];
	                    stackValues = pointStack.points[stackIndicator.key];
	                    yBottom = stackValues[0];
	                    yValue = stackValues[1];
	
	                    if (yBottom === stackThreshold && stackIndicator.key === stack[xValue].base) {
	                        yBottom = pick(threshold, yAxis.min);
	                    }
	                    if (yAxis.isLog && yBottom <= 0) { // #1200, #1232
	                        yBottom = null;
	                    }
	
	                    point.total = point.stackTotal = pointStack.total;
	                    point.percentage = pointStack.total && (point.y / pointStack.total * 100);
	                    point.stackY = yValue;
	
	                    // Place the stack label
	                    pointStack.setOffset(series.pointXOffset || 0, series.barW || 0);
	
	                }
	
	                // Set translated yBottom or remove it
	                point.yBottom = defined(yBottom) ?
	                    yAxis.translate(yBottom, 0, 1, 0, 1) :
	                    null;
	
	                // general hook, used for Highstock compare mode
	                if (hasModifyValue) {
	                    yValue = series.modifyValue(yValue, point);
	                }
	
	                // Set the the plotY value, reset it for redraws
	                point.plotY = plotY = (typeof yValue === 'number' && yValue !== Infinity) ?
	                    mathMin(mathMax(-1e5, yAxis.translate(yValue, 0, 1, 0, 1)), 1e5) : // #3201
	                    UNDEFINED;
	                point.isInside = plotY !== UNDEFINED && plotY >= 0 && plotY <= yAxis.len && // #3519
	                    plotX >= 0 && plotX <= xAxis.len;
	
	
	                // Set client related positions for mouse tracking
	                point.clientX = dynamicallyPlaced ? correctFloat(xAxis.translate(xValue, 0, 0, 0, 1, pointPlacement)) : plotX; // #1514, #5383, #5518
	
	                point.negative = point.y < (threshold || 0);
	
	                // some API data
	                point.category = categories && categories[point.x] !== UNDEFINED ?
	                    categories[point.x] : point.x;
	
	                // Determine auto enabling of markers (#3635, #5099)
	                if (!point.isNull) {
	                    if (lastPlotX !== undefined) {
	                        closestPointRangePx = mathMin(closestPointRangePx, mathAbs(plotX - lastPlotX));
	                    }
	                    lastPlotX = plotX;
	                }
	
	            }
	            series.closestPointRangePx = closestPointRangePx;
	        },
	
	        /**
	         * Return the series points with null points filtered out
	         */
	        getValidPoints: function (points, insideOnly) {
	            var chart = this.chart;
	            return grep(points || this.points || [], function isValidPoint(point) { // #3916, #5029
	                if (insideOnly && !chart.isInsidePlot(point.plotX, point.plotY, chart.inverted)) { // #5085
	                    return false;
	                }
	                return !point.isNull;
	            });
	        },
	
	        /**
	         * Set the clipping for the series. For animated series it is called twice, first to initiate
	         * animating the clip then the second time without the animation to set the final clip.
	         */
	        setClip: function (animation) {
	            var chart = this.chart,
	                options = this.options,
	                renderer = chart.renderer,
	                inverted = chart.inverted,
	                seriesClipBox = this.clipBox,
	                clipBox = seriesClipBox || chart.clipBox,
	                sharedClipKey = this.sharedClipKey || ['_sharedClip', animation && animation.duration, animation && animation.easing, clipBox.height, options.xAxis, options.yAxis].join(','), // #4526
	                clipRect = chart[sharedClipKey],
	                markerClipRect = chart[sharedClipKey + 'm'];
	
	            // If a clipping rectangle with the same properties is currently present in the chart, use that.
	            if (!clipRect) {
	
	                // When animation is set, prepare the initial positions
	                if (animation) {
	                    clipBox.width = 0;
	
	                    chart[sharedClipKey + 'm'] = markerClipRect = renderer.clipRect(
	                        -99, // include the width of the first marker
	                        inverted ? -chart.plotLeft : -chart.plotTop,
	                        99,
	                        inverted ? chart.chartWidth : chart.chartHeight
	                    );
	                }
	                chart[sharedClipKey] = clipRect = renderer.clipRect(clipBox);
	                // Create hashmap for series indexes
	                clipRect.count = { length: 0 };
	
	            }
	            if (animation) {
	                if (!clipRect.count[this.index]) {
	                    clipRect.count[this.index] = true;
	                    clipRect.count.length += 1;
	                }
	            }
	
	            if (options.clip !== false) {
	                this.group.clip(animation || seriesClipBox ? clipRect : chart.clipRect);
	                this.markerGroup.clip(markerClipRect);
	                this.sharedClipKey = sharedClipKey;
	            }
	
	            // Remove the shared clipping rectangle when all series are shown
	            if (!animation) {
	                if (clipRect.count[this.index]) {
	                    delete clipRect.count[this.index];
	                    clipRect.count.length -= 1;
	                }
	
	                if (clipRect.count.length === 0 && sharedClipKey && chart[sharedClipKey]) {
	                    if (!seriesClipBox) {
	                        chart[sharedClipKey] = chart[sharedClipKey].destroy();
	                    }
	                    if (chart[sharedClipKey + 'm']) {
	                        chart[sharedClipKey + 'm'] = chart[sharedClipKey + 'm'].destroy();
	                    }
	                }
	            }
	        },
	
	        /**
	         * Animate in the series
	         */
	        animate: function (init) {
	            var series = this,
	                chart = series.chart,
	                clipRect,
	                animation = animObject(series.options.animation),
	                sharedClipKey;
	
	            // Initialize the animation. Set up the clipping rectangle.
	            if (init) {
	
	                series.setClip(animation);
	
	            // Run the animation
	            } else {
	                sharedClipKey = this.sharedClipKey;
	                clipRect = chart[sharedClipKey];
	                if (clipRect) {
	                    clipRect.animate({
	                        width: chart.plotSizeX
	                    }, animation);
	                }
	                if (chart[sharedClipKey + 'm']) {
	                    chart[sharedClipKey + 'm'].animate({
	                        width: chart.plotSizeX + 99
	                    }, animation);
	                }
	
	                // Delete this function to allow it only once
	                series.animate = null;
	
	            }
	        },
	
	        /**
	         * This runs after animation to land on the final plot clipping
	         */
	        afterAnimate: function () {
	            this.setClip();
	            fireEvent(this, 'afterAnimate');
	        },
	
	        /**
	         * Draw the markers
	         */
	        drawPoints: function () {
	            var series = this,
	                pointAttr,
	                points = series.points,
	                chart = series.chart,
	                plotX,
	                plotY,
	                i,
	                point,
	                radius,
	                symbol,
	                isImage,
	                graphic,
	                options = series.options,
	                seriesMarkerOptions = options.marker,
	                seriesPointAttr = series.pointAttr[''],
	                pointMarkerOptions,
	                hasPointMarker,
	                enabled,
	                isInside,
	                markerGroup = series.markerGroup,
	                xAxis = series.xAxis,
	                globallyEnabled = pick(
	                    seriesMarkerOptions.enabled,
	                    xAxis.isRadial,
	                    series.closestPointRangePx > 2 * seriesMarkerOptions.radius
	                );
	
	            if (seriesMarkerOptions.enabled !== false || series._hasPointMarkers) {
	
	                i = points.length;
	                while (i--) {
	                    point = points[i];
	                    plotX = mathFloor(point.plotX); // #1843
	                    plotY = point.plotY;
	                    graphic = point.graphic;
	                    pointMarkerOptions = point.marker || {};
	                    hasPointMarker = !!point.marker;
	                    enabled = (globallyEnabled && pointMarkerOptions.enabled === UNDEFINED) || pointMarkerOptions.enabled;
	                    isInside = point.isInside;
	
	                    // only draw the point if y is defined
	                    if (enabled && isNumber(plotY) && point.y !== null) {
	
	                        // shortcuts
	                        pointAttr = point.pointAttr[point.selected ? SELECT_STATE : NORMAL_STATE] || seriesPointAttr;
	                        radius = pointAttr.r;
	                        symbol = pick(pointMarkerOptions.symbol, series.symbol);
	                        isImage = symbol.indexOf('url') === 0;
	
	                        if (graphic) { // update
	                            graphic[isInside ? 'show' : 'hide'](true) // Since the marker group isn't clipped, each individual marker must be toggled
	                                .attr(pointAttr) // #4759
	                                .animate(extend({
	                                    x: plotX - radius,
	                                    y: plotY - radius
	                                }, graphic.symbolName ? { // don't apply to image symbols #507
	                                    width: 2 * radius,
	                                    height: 2 * radius
	                                } : {}));
	                        } else if (isInside && (radius > 0 || isImage)) {
	                            point.graphic = graphic = chart.renderer.symbol(
	                                symbol,
	                                plotX - radius,
	                                plotY - radius,
	                                2 * radius,
	                                2 * radius,
	                                hasPointMarker ? pointMarkerOptions : seriesMarkerOptions
	                            )
	                            .attr(pointAttr)
	                            .add(markerGroup);
	                        }
	
	                    } else if (graphic) {
	                        point.graphic = graphic.destroy(); // #1269
	                    }
	                }
	            }
	
	        },
	
	        /**
	         * Convert state properties from API naming conventions to SVG attributes
	         *
	         * @param {Object} options API options object
	         * @param {Object} base1 SVG attribute object to inherit from
	         * @param {Object} base2 Second level SVG attribute object to inherit from
	         */
	        convertAttribs: function (options, base1, base2, base3) {
	            var conversion = this.pointAttrToOptions,
	                attr,
	                option,
	                obj = {};
	
	            options = options || {};
	            base1 = base1 || {};
	            base2 = base2 || {};
	            base3 = base3 || {};
	
	            for (attr in conversion) {
	                option = conversion[attr];
	                obj[attr] = pick(options[option], base1[attr], base2[attr], base3[attr]);
	            }
	            return obj;
	        },
	
	        /**
	         * Get the state attributes. Each series type has its own set of attributes
	         * that are allowed to change on a point's state change. Series wide attributes are stored for
	         * all series, and additionally point specific attributes are stored for all
	         * points with individual marker options. If such options are not defined for the point,
	         * a reference to the series wide attributes is stored in point.pointAttr.
	         */
	        getAttribs: function () {
	            var series = this,
	                seriesOptions = series.options,
	                normalOptions = defaultPlotOptions[series.type].marker ? seriesOptions.marker : seriesOptions,
	                stateOptions = normalOptions.states,
	                stateOptionsHover = stateOptions[HOVER_STATE],
	                pointStateOptionsHover,
	                seriesColor = series.color,
	                seriesNegativeColor = series.options.negativeColor,
	                normalDefaults = {
	                    stroke: seriesColor,
	                    fill: seriesColor
	                },
	                points = series.points || [], // #927
	                i,
	                j,
	                threshold,
	                point,
	                seriesPointAttr = [],
	                pointAttr,
	                pointAttrToOptions = series.pointAttrToOptions,
	                hasPointSpecificOptions = series.hasPointSpecificOptions,
	                defaultLineColor = normalOptions.lineColor,
	                defaultFillColor = normalOptions.fillColor,
	                turboThreshold = seriesOptions.turboThreshold,
	                zones = series.zones,
	                zoneAxis = series.zoneAxis || 'y',
	                zoneColor, 
	                attr,
	                key;
	
	            // series type specific modifications
	            if (seriesOptions.marker) { // line, spline, area, areaspline, scatter
	
	                // if no hover radius is given, default to normal radius + 2
	                stateOptionsHover.radius = +stateOptionsHover.radius || +normalOptions.radius + +stateOptionsHover.radiusPlus;
	                stateOptionsHover.lineWidth = stateOptionsHover.lineWidth || normalOptions.lineWidth + stateOptionsHover.lineWidthPlus;
	
	            } else { // column, bar, pie
	
	                // if no hover color is given, brighten the normal color
	                stateOptionsHover.color = stateOptionsHover.color ||
	                    Color(stateOptionsHover.color || seriesColor)
	                        .brighten(stateOptionsHover.brightness).get();
	
	                // if no hover negativeColor is given, brighten the normal negativeColor
	                stateOptionsHover.negativeColor = stateOptionsHover.negativeColor ||
	                    Color(stateOptionsHover.negativeColor || seriesNegativeColor)
	                        .brighten(stateOptionsHover.brightness).get();
	            }
	
	            // general point attributes for the series normal state
	            seriesPointAttr[NORMAL_STATE] = series.convertAttribs(normalOptions, normalDefaults);
	
	            // HOVER_STATE and SELECT_STATE states inherit from normal state except the default radius
	            each([HOVER_STATE, SELECT_STATE], function (state) {
	                seriesPointAttr[state] =
	                        series.convertAttribs(stateOptions[state], seriesPointAttr[NORMAL_STATE]);
	            });
	
	            // set it
	            series.pointAttr = seriesPointAttr;
	
	
	            // Generate the point-specific attribute collections if specific point
	            // options are given. If not, create a referance to the series wide point
	            // attributes
	            i = points.length;
	            if (!turboThreshold || i < turboThreshold || hasPointSpecificOptions) {
	                while (i--) {
	                    point = points[i];
	                    normalOptions = (point.options && point.options.marker) || point.options;
	                    if (normalOptions && normalOptions.enabled === false) {
	                        normalOptions.radius = 0;
	                    }
	
	                    zoneColor = null;
	                    if (zones.length) {
	                        j = 0;
	                        threshold = zones[j];
	                        while (point[zoneAxis] >= threshold.value) {
	                            threshold = zones[++j];
	                        }
	
	                        point.color = point.fillColor = zoneColor = pick(threshold.color, series.color); // #3636, #4267, #4430 - inherit color from series, when color is undefined
	
	                    }
	
	                    hasPointSpecificOptions = seriesOptions.colorByPoint || point.color; // #868
	
	                    // check if the point has specific visual options
	                    if (point.options) {
	                        for (key in pointAttrToOptions) {
	                            if (defined(normalOptions[pointAttrToOptions[key]])) {
	                                hasPointSpecificOptions = true;
	                            }
	                        }
	                    }
	
	                    // a specific marker config object is defined for the individual point:
	                    // create it's own attribute collection
	                    if (hasPointSpecificOptions) {
	                        normalOptions = normalOptions || {};
	                        pointAttr = [];
	                        stateOptions = normalOptions.states || {}; // reassign for individual point
	                        pointStateOptionsHover = stateOptions[HOVER_STATE] = stateOptions[HOVER_STATE] || {};
	
	                        // Handle colors for column and pies
	                        if (!seriesOptions.marker || (point.negative && !pointStateOptionsHover.fillColor && !stateOptionsHover.fillColor)) { // column, bar, point or negative threshold for series with markers (#3636)
	                            // If no hover color is given, brighten the normal color. #1619, #2579
	                            pointStateOptionsHover[series.pointAttrToOptions.fill] = pointStateOptionsHover.color || (!point.options.color && stateOptionsHover[(point.negative && seriesNegativeColor ? 'negativeColor' : 'color')]) ||
	                                Color(point.color)
	                                    .brighten(pointStateOptionsHover.brightness || stateOptionsHover.brightness)
	                                    .get();
	                        }
	
	                        // normal point state inherits series wide normal state
	                        attr = { color: point.color }; // #868
	                        if (!defaultFillColor) { // Individual point color or negative color markers (#2219)
	                            attr.fillColor = point.color;
	                        }
	                        if (!defaultLineColor) {
	                            attr.lineColor = point.color; // Bubbles take point color, line markers use white
	                        }
	                        // Color is explicitly set to null or undefined (#1288, #4068)
	                        if (normalOptions.hasOwnProperty('color') && !normalOptions.color) {
	                            delete normalOptions.color;
	                        }
	
	                        // When zone is set, but series.states.hover.color is not set, apply zone color on hover, #4670: 
	                        if (zoneColor && !stateOptionsHover.fillColor) {
	                            pointStateOptionsHover.fillColor = zoneColor;
	                        }
	
	                        pointAttr[NORMAL_STATE] = series.convertAttribs(extend(attr, normalOptions), seriesPointAttr[NORMAL_STATE]);
	
	                        // inherit from point normal and series hover
	                        pointAttr[HOVER_STATE] = series.convertAttribs(
	                            stateOptions[HOVER_STATE],
	                            seriesPointAttr[HOVER_STATE],
	                            pointAttr[NORMAL_STATE]
	                        );
	
	                        // inherit from point normal and series hover
	                        pointAttr[SELECT_STATE] = series.convertAttribs(
	                            stateOptions[SELECT_STATE],
	                            seriesPointAttr[SELECT_STATE],
	                            pointAttr[NORMAL_STATE]
	                        );
	
	
	                    // no marker config object is created: copy a reference to the series-wide
	                    // attribute collection
	                    } else {
	                        pointAttr = seriesPointAttr;
	                    }
	
	                    point.pointAttr = pointAttr;
	                }
	            }
	        },
	
	        /**
	         * Clear DOM objects and free up memory
	         */
	        destroy: function () {
	            var series = this,
	                chart = series.chart,
	                issue134 = /AppleWebKit\/533/.test(userAgent),
	                destroy,
	                i,
	                data = series.data || [],
	                point,
	                prop,
	                axis;
	
	            // add event hook
	            fireEvent(series, 'destroy');
	
	            // remove all events
	            removeEvent(series);
	
	            // erase from axes
	            each(series.axisTypes || [], function (AXIS) {
	                axis = series[AXIS];
	                if (axis) {
	                    erase(axis.series, series);
	                    axis.isDirty = axis.forceRedraw = true;
	                }
	            });
	
	            // remove legend items
	            if (series.legendItem) {
	                series.chart.legend.destroyItem(series);
	            }
	
	            // destroy all points with their elements
	            i = data.length;
	            while (i--) {
	                point = data[i];
	                if (point && point.destroy) {
	                    point.destroy();
	                }
	            }
	            series.points = null;
	
	            // Clear the animation timeout if we are destroying the series during initial animation
	            clearTimeout(series.animationTimeout);
	
	            // Destroy all SVGElements associated to the series
	            for (prop in series) {
	                if (series[prop] instanceof SVGElement && !series[prop].survive) { // Survive provides a hook for not destroying
	
	                    // issue 134 workaround
	                    destroy = issue134 && prop === 'group' ?
	                        'hide' :
	                        'destroy';
	
	                    series[prop][destroy]();
	                }
	            }
	
	            // remove from hoverSeries
	            if (chart.hoverSeries === series) {
	                chart.hoverSeries = null;
	            }
	            erase(chart.series, series);
	
	            // clear all members
	            for (prop in series) {
	                delete series[prop];
	            }
	        },
	
	        /**
	         * Get the graph path
	         */
	        getGraphPath: function (points, nullsAsZeroes, connectCliffs) {
	            var series = this,
	                options = series.options,
	                step = options.step,
	                reversed,
	                graphPath = [],
	                xMap = [],
	                gap;
	
	            points = points || series.points;
	
	            // Bottom of a stack is reversed
	            reversed = points.reversed;
	            if (reversed) {
	                points.reverse();
	            }
	            // Reverse the steps (#5004)
	            step = { right: 1, center: 2 }[step] || (step && 3);
	            if (step && reversed) {
	                step = 4 - step;
	            }
	
	            // Remove invalid points, especially in spline (#5015)
	            if (options.connectNulls && !nullsAsZeroes && !connectCliffs) {
	                points = this.getValidPoints(points);
	            }
	
	            // Build the line
	            each(points, function (point, i) {
	
	                var plotX = point.plotX,
	                    plotY = point.plotY,
	                    lastPoint = points[i - 1],
	                    pathToPoint; // the path to this point from the previous
	
	                if ((point.leftCliff || (lastPoint && lastPoint.rightCliff)) && !connectCliffs) {
	                    gap = true; // ... and continue
	                }
	
	                // Line series, nullsAsZeroes is not handled
	                if (point.isNull && !defined(nullsAsZeroes) && i > 0) {
	                    gap = !options.connectNulls;
	
	                // Area series, nullsAsZeroes is set
	                } else if (point.isNull && !nullsAsZeroes) {
	                    gap = true;
	
	                } else {
	
	                    if (i === 0 || gap) {
	                        pathToPoint = [M, point.plotX, point.plotY];
	                
	                    } else if (series.getPointSpline) { // generate the spline as defined in the SplineSeries object
	                    
	                        pathToPoint = series.getPointSpline(points, point, i);
	
	                    } else if (step) {
	
	                        if (step === 1) { // right
	                            pathToPoint = [
	                                L,
	                                lastPoint.plotX,
	                                plotY
	                            ];
	                        
	                        } else if (step === 2) { // center
	                            pathToPoint = [
	                                L,
	                                (lastPoint.plotX + plotX) / 2,
	                                lastPoint.plotY,
	                                L,
	                                (lastPoint.plotX + plotX) / 2,
	                                plotY
	                            ];
	                        
	                        } else {
	                            pathToPoint = [
	                                L,
	                                plotX,
	                                lastPoint.plotY
	                            ];
	                        }
	                        pathToPoint.push(L, plotX, plotY);
	
	                    } else {
	                        // normal line to next point
	                        pathToPoint = [
	                            L,
	                            plotX,
	                            plotY
	                        ];
	                    }
	
	                    // Prepare for animation. When step is enabled, there are two path nodes for each x value.
	                    xMap.push(point.x);
	                    if (step) {
	                        xMap.push(point.x);
	                    }
	
	                    graphPath.push.apply(graphPath, pathToPoint);
	                    gap = false;
	                }
	            });
	
	            graphPath.xMap = xMap;
	            series.graphPath = graphPath;
	
	            return graphPath;
	
	        },
	
	        /**
	         * Draw the actual graph
	         */
	        drawGraph: function () {
	            var series = this,
	                options = this.options,
	                props = [['graph', options.lineColor || this.color, options.dashStyle]],
	                lineWidth = options.lineWidth,
	                roundCap = options.linecap !== 'square',
	                graphPath = (this.gappedPath || this.getGraphPath).call(this),
	                zones = this.zones;
	
	            each(zones, function (threshold, i) {
	                props.push(['zoneGraph' + i, threshold.color || series.color, threshold.dashStyle || options.dashStyle]);
	            });
	
	            // Draw the graph
	            each(props, function (prop, i) {
	                var graphKey = prop[0],
	                    graph = series[graphKey],
	                    attribs;
	
	                if (graph) {
	                    graph.endX = graphPath.xMap;
	                    graph.animate({ d: graphPath });
	
	                } else if (lineWidth && graphPath.length) { // #1487
	                    attribs = {
	                        stroke: prop[1],
	                        'stroke-width': lineWidth,
	                        fill: 'none',
	                        zIndex: 1 // #1069
	                    };
	                    if (prop[2]) {
	                        attribs.dashstyle = prop[2];
	                    } else if (roundCap) {
	                        attribs['stroke-linecap'] = attribs['stroke-linejoin'] = 'round';
	                    }
	
	                    graph = series[graphKey] = series.chart.renderer.path(graphPath)
	                        .attr(attribs)
	                        .add(series.group)
	                        .shadow((i < 2) && options.shadow); // add shadow to normal series (0) or to first zone (1) #3932
	                }
	
	                // Helpers for animation
	                if (graph) {
	                    graph.startX = graphPath.xMap;
	                    //graph.shiftUnit = options.step ? 2 : 1;
	                    graph.isArea = graphPath.isArea; // For arearange animation
	                }
	            });
	        },
	
	        /**
	         * Clip the graphs into the positive and negative coloured graphs
	         */
	        applyZones: function () {
	            var series = this,
	                chart = this.chart,
	                renderer = chart.renderer,
	                zones = this.zones,
	                translatedFrom,
	                translatedTo,
	                clips = this.clips || [],
	                clipAttr,
	                graph = this.graph,
	                area = this.area,
	                chartSizeMax = mathMax(chart.chartWidth, chart.chartHeight),
	                axis = this[(this.zoneAxis || 'y') + 'Axis'],
	                extremes,
	                reversed,
	                inverted = chart.inverted,
	                horiz,
	                pxRange,
	                pxPosMin,
	                pxPosMax,
	                ignoreZones = false;
	
	            if (zones.length && (graph || area) && axis && axis.min !== UNDEFINED) {
	                reversed = axis.reversed;
	                horiz = axis.horiz;
	                // The use of the Color Threshold assumes there are no gaps
	                // so it is safe to hide the original graph and area
	                if (graph) {
	                    graph.hide();
	                }
	                if (area) {
	                    area.hide();
	                }
	
	                // Create the clips
	                extremes = axis.getExtremes();
	                each(zones, function (threshold, i) {
	
	                    translatedFrom = reversed ?
	                        (horiz ? chart.plotWidth : 0) :
	                        (horiz ? 0 : axis.toPixels(extremes.min));
	                    translatedFrom = mathMin(mathMax(pick(translatedTo, translatedFrom), 0), chartSizeMax);
	                    translatedTo = mathMin(mathMax(mathRound(axis.toPixels(pick(threshold.value, extremes.max), true)), 0), chartSizeMax);
	
	                    if (ignoreZones) {
	                        translatedFrom = translatedTo = axis.toPixels(extremes.max);
	                    }
	
	                    pxRange = Math.abs(translatedFrom - translatedTo);
	                    pxPosMin = mathMin(translatedFrom, translatedTo);
	                    pxPosMax = mathMax(translatedFrom, translatedTo);
	                    if (axis.isXAxis) {
	                        clipAttr = {
	                            x: inverted ? pxPosMax : pxPosMin,
	                            y: 0,
	                            width: pxRange,
	                            height: chartSizeMax
	                        };
	                        if (!horiz) {
	                            clipAttr.x = chart.plotHeight - clipAttr.x;
	                        }
	                    } else {
	                        clipAttr = {
	                            x: 0,
	                            y: inverted ? pxPosMax : pxPosMin,
	                            width: chartSizeMax,
	                            height: pxRange
	                        };
	                        if (horiz) {
	                            clipAttr.y = chart.plotWidth - clipAttr.y;
	                        }
	                    }
	
	                    /// VML SUPPPORT
	                    if (inverted && renderer.isVML) {
	                        if (axis.isXAxis) {
	                            clipAttr = {
	                                x: 0,
	                                y: reversed ? pxPosMin : pxPosMax,
	                                height: clipAttr.width,
	                                width: chart.chartWidth
	                            };
	                        } else {
	                            clipAttr = {
	                                x: clipAttr.y - chart.plotLeft - chart.spacingBox.x,
	                                y: 0,
	                                width: clipAttr.height,
	                                height: chart.chartHeight
	                            };
	                        }
	                    }
	                    /// END OF VML SUPPORT
	
	                    if (clips[i]) {
	                        clips[i].animate(clipAttr);
	                    } else {
	                        clips[i] = renderer.clipRect(clipAttr);
	
	                        if (graph) {
	                            series['zoneGraph' + i].clip(clips[i]);
	                        }
	
	                        if (area) {
	                            series['zoneArea' + i].clip(clips[i]);
	                        }
	                    }
	                    // if this zone extends out of the axis, ignore the others
	                    ignoreZones = threshold.value > extremes.max;
	                });
	                this.clips = clips;
	            }
	        },
	
	        /**
	         * Initialize and perform group inversion on series.group and series.markerGroup
	         */
	        invertGroups: function () {
	            var series = this,
	                chart = series.chart;
	
	            // Pie, go away (#1736)
	            if (!series.xAxis) {
	                return;
	            }
	
	            // A fixed size is needed for inversion to work
	            function setInvert() {
	                var size = {
	                    width: series.yAxis.len,
	                    height: series.xAxis.len
	                };
	
	                each(['group', 'markerGroup'], function (groupName) {
	                    if (series[groupName]) {
	                        series[groupName].attr(size).invert();
	                    }
	                });
	            }
	
	            addEvent(chart, 'resize', setInvert); // do it on resize
	            addEvent(series, 'destroy', function () {
	                removeEvent(chart, 'resize', setInvert);
	            });
	
	            // Do it now
	            setInvert(); // do it now
	
	            // On subsequent render and redraw, just do setInvert without setting up events again
	            series.invertGroups = setInvert;
	        },
	
	        /**
	         * General abstraction for creating plot groups like series.group, series.dataLabelsGroup and
	         * series.markerGroup. On subsequent calls, the group will only be adjusted to the updated plot size.
	         */
	        plotGroup: function (prop, name, visibility, zIndex, parent) {
	            var group = this[prop],
	                isNew = !group;
	
	            // Generate it on first call
	            if (isNew) {
	                this[prop] = group = this.chart.renderer.g(name)
	                    .attr({
	                        zIndex: zIndex || 0.1 // IE8 and pointer logic use this
	                    })
	                    .add(parent);
	
	                group.addClass('highcharts-series-' + this.index);
	            }
	
	            // Place it on first and subsequent (redraw) calls
	            group.attr({ visibility: visibility })[isNew ? 'attr' : 'animate'](this.getPlotBox());
	            return group;
	        },
	
	        /**
	         * Get the translation and scale for the plot area of this series
	         */
	        getPlotBox: function () {
	            var chart = this.chart,
	                xAxis = this.xAxis,
	                yAxis = this.yAxis;
	
	            // Swap axes for inverted (#2339)
	            if (chart.inverted) {
	                xAxis = yAxis;
	                yAxis = this.xAxis;
	            }
	            return {
	                translateX: xAxis ? xAxis.left : chart.plotLeft,
	                translateY: yAxis ? yAxis.top : chart.plotTop,
	                scaleX: 1, // #1623
	                scaleY: 1
	            };
	        },
	
	        /**
	         * Render the graph and markers
	         */
	        render: function () {
	            var series = this,
	                chart = series.chart,
	                group,
	                options = series.options,
	                // Animation doesn't work in IE8 quirks when the group div is hidden,
	                // and looks bad in other oldIE
	                animDuration = !!series.animate && chart.renderer.isSVG && animObject(options.animation).duration,
	                visibility = series.visible ? 'inherit' : 'hidden', // #2597
	                zIndex = options.zIndex,
	                hasRendered = series.hasRendered,
	                chartSeriesGroup = chart.seriesGroup;
	
	            // the group
	            group = series.plotGroup(
	                'group',
	                'series',
	                visibility,
	                zIndex,
	                chartSeriesGroup
	            );
	
	            series.markerGroup = series.plotGroup(
	                'markerGroup',
	                'markers',
	                visibility,
	                zIndex,
	                chartSeriesGroup
	            );
	
	            // initiate the animation
	            if (animDuration) {
	                series.animate(true);
	            }
	
	            // cache attributes for shapes
	            series.getAttribs();
	
	            // SVGRenderer needs to know this before drawing elements (#1089, #1795)
	            group.inverted = series.isCartesian ? chart.inverted : false;
	
	            // draw the graph if any
	            if (series.drawGraph) {
	                series.drawGraph();
	                series.applyZones();
	            }
	
	            each(series.points, function (point) {
	                if (point.redraw) {
	                    point.redraw();
	                }
	            });
	
	            // draw the data labels (inn pies they go before the points)
	            if (series.drawDataLabels) {
	                series.drawDataLabels();
	            }
	
	            // draw the points
	            if (series.visible) {
	                series.drawPoints();
	            }
	
	
	            // draw the mouse tracking area
	            if (series.drawTracker && series.options.enableMouseTracking !== false) {
	                series.drawTracker();
	            }
	
	            // Handle inverted series and tracker groups
	            if (chart.inverted) {
	                series.invertGroups();
	            }
	
	            // Initial clipping, must be defined after inverting groups for VML. Applies to columns etc. (#3839).
	            if (options.clip !== false && !series.sharedClipKey && !hasRendered) {
	                group.clip(chart.clipRect);
	            }
	
	            // Run the animation
	            if (animDuration) {
	                series.animate();
	            }
	
	            // Call the afterAnimate function on animation complete (but don't overwrite the animation.complete option
	            // which should be available to the user).
	            if (!hasRendered) {
	                series.animationTimeout = syncTimeout(function () {
	                    series.afterAnimate();
	                }, animDuration);
	            }
	
	            series.isDirty = series.isDirtyData = false; // means data is in accordance with what you see
	            // (See #322) series.isDirty = series.isDirtyData = false; // means data is in accordance with what you see
	            series.hasRendered = true;
	        },
	
	        /**
	         * Redraw the series after an update in the axes.
	         */
	        redraw: function () {
	            var series = this,
	                chart = series.chart,
	                wasDirty = series.isDirty || series.isDirtyData, // cache it here as it is set to false in render, but used after
	                group = series.group,
	                xAxis = series.xAxis,
	                yAxis = series.yAxis;
	
	            // reposition on resize
	            if (group) {
	                if (chart.inverted) {
	                    group.attr({
	                        width: chart.plotWidth,
	                        height: chart.plotHeight
	                    });
	                }
	
	                group.animate({
	                    translateX: pick(xAxis && xAxis.left, chart.plotLeft),
	                    translateY: pick(yAxis && yAxis.top, chart.plotTop)
	                });
	            }
	
	            series.translate();
	            series.render();
	            if (wasDirty) { // #3868, #3945
	                delete this.kdTree;
	            }
	        },
	
	        /**
	         * KD Tree && PointSearching Implementation
	         */
	
	        kdDimensions: 1,
	        kdAxisArray: ['clientX', 'plotY'],
	
	        searchPoint: function (e, compareX) {
	            var series = this,
	                xAxis = series.xAxis,
	                yAxis = series.yAxis,
	                inverted = series.chart.inverted;
	
	            return this.searchKDTree({
	                clientX: inverted ? xAxis.len - e.chartY + xAxis.pos : e.chartX - xAxis.pos,
	                plotY: inverted ? yAxis.len - e.chartX + yAxis.pos : e.chartY - yAxis.pos
	            }, compareX);
	        },
	
	        buildKDTree: function () {
	            var series = this,
	                dimensions = series.kdDimensions;
	
	            // Internal function
	            function _kdtree(points, depth, dimensions) {
	                var axis,
	                    median,
	                    length = points && points.length;
	
	                if (length) {
	
	                    // alternate between the axis
	                    axis = series.kdAxisArray[depth % dimensions];
	
	                    // sort point array
	                    points.sort(function (a, b) {
	                        return a[axis] - b[axis];
	                    });
	
	                    median = Math.floor(length / 2);
	
	                    // build and return nod
	                    return {
	                        point: points[median],
	                        left: _kdtree(points.slice(0, median), depth + 1, dimensions),
	                        right: _kdtree(points.slice(median + 1), depth + 1, dimensions)
	                    };
	
	                }
	            }
	
	            // Start the recursive build process with a clone of the points array and null points filtered out (#3873)
	            function startRecursive() {
	                series.kdTree = _kdtree(
	                    series.getValidPoints(
	                        null,
	                        !series.directTouch // For line-type series restrict to plot area, but column-type series not (#3916, #4511)
	                    ),
	                    dimensions,
	                    dimensions
	                );
	            }
	            delete series.kdTree;
	
	            // For testing tooltips, don't build async
	            syncTimeout(startRecursive, series.options.kdNow ? 0 : 1);
	        },
	
	        searchKDTree: function (point, compareX) {
	            var series = this,
	                kdX = this.kdAxisArray[0],
	                kdY = this.kdAxisArray[1],
	                kdComparer = compareX ? 'distX' : 'dist';
	
	            // Set the one and two dimensional distance on the point object
	            function setDistance(p1, p2) {
	                var x = (defined(p1[kdX]) && defined(p2[kdX])) ? Math.pow(p1[kdX] - p2[kdX], 2) : null,
	                    y = (defined(p1[kdY]) && defined(p2[kdY])) ? Math.pow(p1[kdY] - p2[kdY], 2) : null,
	                    r = (x || 0) + (y || 0);
	
	                p2.dist = defined(r) ? Math.sqrt(r) : Number.MAX_VALUE;
	                p2.distX = defined(x) ? Math.sqrt(x) : Number.MAX_VALUE;
	            }
	            function _search(search, tree, depth, dimensions) {
	                var point = tree.point,
	                    axis = series.kdAxisArray[depth % dimensions],
	                    tdist,
	                    sideA,
	                    sideB,
	                    ret = point,
	                    nPoint1,
	                    nPoint2;
	
	                setDistance(search, point);
	
	                // Pick side based on distance to splitting point
	                tdist = search[axis] - point[axis];
	                sideA = tdist < 0 ? 'left' : 'right';
	                sideB = tdist < 0 ? 'right' : 'left';
	
	                // End of tree
	                if (tree[sideA]) {
	                    nPoint1 = _search(search, tree[sideA], depth + 1, dimensions);
	
	                    ret = (nPoint1[kdComparer] < ret[kdComparer] ? nPoint1 : point);
	                }
	                if (tree[sideB]) {
	                    // compare distance to current best to splitting point to decide wether to check side B or not
	                    if (Math.sqrt(tdist * tdist) < ret[kdComparer]) {
	                        nPoint2 = _search(search, tree[sideB], depth + 1, dimensions);
	                        ret = (nPoint2[kdComparer] < ret[kdComparer] ? nPoint2 : ret);
	                    }
	                }
	
	                return ret;
	            }
	
	            if (!this.kdTree) {
	                this.buildKDTree();
	            }
	
	            if (this.kdTree) {
	                return _search(point,
	                    this.kdTree, this.kdDimensions, this.kdDimensions);
	            }
	        }
	
	    }; // end Series prototype
	
	    /**
	     * The class for stack items
	     */
	    function StackItem(axis, options, isNegative, x, stackOption) {
	
	        var inverted = axis.chart.inverted;
	
	        this.axis = axis;
	
	        // Tells if the stack is negative
	        this.isNegative = isNegative;
	
	        // Save the options to be able to style the label
	        this.options = options;
	
	        // Save the x value to be able to position the label later
	        this.x = x;
	
	        // Initialize total value
	        this.total = null;
	
	        // This will keep each points' extremes stored by series.index and point index
	        this.points = {};
	
	        // Save the stack option on the series configuration object, and whether to treat it as percent
	        this.stack = stackOption;
	        this.leftCliff = 0;
	        this.rightCliff = 0;
	
	        // The align options and text align varies on whether the stack is negative and
	        // if the chart is inverted or not.
	        // First test the user supplied value, then use the dynamic.
	        this.alignOptions = {
	            align: options.align || (inverted ? (isNegative ? 'left' : 'right') : 'center'),
	            verticalAlign: options.verticalAlign || (inverted ? 'middle' : (isNegative ? 'bottom' : 'top')),
	            y: pick(options.y, inverted ? 4 : (isNegative ? 14 : -6)),
	            x: pick(options.x, inverted ? (isNegative ? -6 : 6) : 0)
	        };
	
	        this.textAlign = options.textAlign || (inverted ? (isNegative ? 'right' : 'left') : 'center');
	    }
	
	    StackItem.prototype = {
	        destroy: function () {
	            destroyObjectProperties(this, this.axis);
	        },
	
	        /**
	         * Renders the stack total label and adds it to the stack label group.
	         */
	        render: function (group) {
	            var options = this.options,
	                formatOption = options.format,
	                str = formatOption ?
	                    format(formatOption, this) :
	                    options.formatter.call(this);  // format the text in the label
	
	            // Change the text to reflect the new total and set visibility to hidden in case the serie is hidden
	            if (this.label) {
	                this.label.attr({ text: str, visibility: 'hidden' });
	            // Create new label
	            } else {
	                this.label =
	                    this.axis.chart.renderer.text(str, null, null, options.useHTML)        // dummy positions, actual position updated with setOffset method in columnseries
	                        .css(options.style)                // apply style
	                        .attr({
	                            align: this.textAlign,                // fix the text-anchor
	                            rotation: options.rotation,    // rotation
	                            visibility: HIDDEN                    // hidden until setOffset is called
	                        })
	                        .add(group);                            // add to the labels-group
	            }
	        },
	
	        /**
	         * Sets the offset that the stack has from the x value and repositions the label.
	         */
	        setOffset: function (xOffset, xWidth) {
	            var stackItem = this,
	                axis = stackItem.axis,
	                chart = axis.chart,
	                inverted = chart.inverted,
	                reversed = axis.reversed,
	                neg = (this.isNegative && !reversed) || (!this.isNegative && reversed), // #4056
	                y = axis.translate(axis.usePercentage ? 100 : this.total, 0, 0, 0, 1), // stack value translated mapped to chart coordinates
	                yZero = axis.translate(0),                        // stack origin
	                h = mathAbs(y - yZero),                            // stack height
	                x = chart.xAxis[0].translate(this.x) + xOffset,    // stack x position
	                plotHeight = chart.plotHeight,
	                stackBox = {    // this is the box for the complete stack
	                    x: inverted ? (neg ? y : y - h) : x,
	                    y: inverted ? plotHeight - x - xWidth : (neg ? (plotHeight - y - h) : plotHeight - y),
	                    width: inverted ? h : xWidth,
	                    height: inverted ? xWidth : h
	                },
	                label = this.label,
	                alignAttr;
	
	            if (label) {
	                label.align(this.alignOptions, null, stackBox);    // align the label to the box
	
	                // Set visibility (#678)
	                alignAttr = label.alignAttr;
	                label[this.options.crop === false || chart.isInsidePlot(alignAttr.x, alignAttr.y) ? 'show' : 'hide'](true);
	            }
	        }
	    };
	
	    /**
	     * Generate stacks for each series and calculate stacks total values
	     */
	    Chart.prototype.getStacks = function () {
	        var chart = this;
	
	        // reset stacks for each yAxis
	        each(chart.yAxis, function (axis) {
	            if (axis.stacks && axis.hasVisibleSeries) {
	                axis.oldStacks = axis.stacks;
	            }
	        });
	
	        each(chart.series, function (series) {
	            if (series.options.stacking && (series.visible === true || chart.options.chart.ignoreHiddenSeries === false)) {
	                series.stackKey = series.type + pick(series.options.stack, '');
	            }
	        });
	    };
	
	
	    // Stacking methods defined on the Axis prototype
	
	    /**
	     * Build the stacks from top down
	     */
	    Axis.prototype.buildStacks = function () {
	        var axisSeries = this.series,
	            series,
	            reversedStacks = pick(this.options.reversedStacks, true),
	            len = axisSeries.length,
	            i;
	        if (!this.isXAxis) {
	            this.usePercentage = false;
	            i = len;
	            while (i--) {
	                axisSeries[reversedStacks ? i : len - i - 1].setStackedPoints();
	            }
	
	            i = len;
	            while (i--) {
	                series = axisSeries[reversedStacks ? i : len - i - 1];
	                if (series.setStackCliffs) {
	                    series.setStackCliffs();
	                }
	            }
	            // Loop up again to compute percent stack
	            if (this.usePercentage) {
	                for (i = 0; i < len; i++) {
	                    axisSeries[i].setPercentStacks();
	                }
	            }
	        }
	    };
	
	    Axis.prototype.renderStackTotals = function () {
	        var axis = this,
	            chart = axis.chart,
	            renderer = chart.renderer,
	            stacks = axis.stacks,
	            stackKey,
	            oneStack,
	            stackCategory,
	            stackTotalGroup = axis.stackTotalGroup;
	
	        // Create a separate group for the stack total labels
	        if (!stackTotalGroup) {
	            axis.stackTotalGroup = stackTotalGroup =
	                renderer.g('stack-labels')
	                    .attr({
	                        visibility: VISIBLE,
	                        zIndex: 6
	                    })
	                    .add();
	        }
	
	        // plotLeft/Top will change when y axis gets wider so we need to translate the
	        // stackTotalGroup at every render call. See bug #506 and #516
	        stackTotalGroup.translate(chart.plotLeft, chart.plotTop);
	
	        // Render each stack total
	        for (stackKey in stacks) {
	            oneStack = stacks[stackKey];
	            for (stackCategory in oneStack) {
	                oneStack[stackCategory].render(stackTotalGroup);
	            }
	        }
	    };
	
	    /**
	     * Set all the stacks to initial states and destroy unused ones.
	     */
	    Axis.prototype.resetStacks = function () {
	        var stacks = this.stacks,
	            type,
	            i;
	        if (!this.isXAxis) {
	            for (type in stacks) {
	                for (i in stacks[type]) {
	
	                    // Clean up memory after point deletion (#1044, #4320)
	                    if (stacks[type][i].touched < this.stacksTouched) {
	                        stacks[type][i].destroy();
	                        delete stacks[type][i];
	
	                    // Reset stacks
	                    } else {
	                        stacks[type][i].total = null;
	                        stacks[type][i].cum = 0;
	                    }
	                }
	            }
	        }
	    };
	
	    Axis.prototype.cleanStacks = function () {
	        var stacks, type, i;
	
	        if (!this.isXAxis) {
	            if (this.oldStacks) {
	                stacks = this.stacks = this.oldStacks;
	            }
	
	            // reset stacks
	            for (type in stacks) {
	                for (i in stacks[type]) {
	                    stacks[type][i].cum = stacks[type][i].total;
	                }
	            }
	        }
	    };
	
	
	    // Stacking methods defnied for Series prototype
	
	    /**
	     * Adds series' points value to corresponding stack
	     */
	    Series.prototype.setStackedPoints = function () {
	        if (!this.options.stacking || (this.visible !== true && this.chart.options.chart.ignoreHiddenSeries !== false)) {
	            return;
	        }
	
	        var series = this,
	            xData = series.processedXData,
	            yData = series.processedYData,
	            stackedYData = [],
	            yDataLength = yData.length,
	            seriesOptions = series.options,
	            threshold = seriesOptions.threshold,
	            stackThreshold = seriesOptions.startFromThreshold ? threshold : 0,
	            stackOption = seriesOptions.stack,
	            stacking = seriesOptions.stacking,
	            stackKey = series.stackKey,
	            negKey = '-' + stackKey,
	            negStacks = series.negStacks,
	            yAxis = series.yAxis,
	            stacks = yAxis.stacks,
	            oldStacks = yAxis.oldStacks,
	            stackIndicator,
	            isNegative,
	            stack,
	            other,
	            key,
	            pointKey,
	            i,
	            x,
	            y;
	
	
	        yAxis.stacksTouched += 1;
	
	        // loop over the non-null y values and read them into a local array
	        for (i = 0; i < yDataLength; i++) {
	            x = xData[i];
	            y = yData[i];
	            stackIndicator = series.getStackIndicator(stackIndicator, x, series.index);
	            pointKey = stackIndicator.key;
	            // Read stacked values into a stack based on the x value,
	            // the sign of y and the stack key. Stacking is also handled for null values (#739)
	            isNegative = negStacks && y < (stackThreshold ? 0 : threshold);
	            key = isNegative ? negKey : stackKey;
	
	            // Create empty object for this stack if it doesn't exist yet
	            if (!stacks[key]) {
	                stacks[key] = {};
	            }
	
	            // Initialize StackItem for this x
	            if (!stacks[key][x]) {
	                if (oldStacks[key] && oldStacks[key][x]) {
	                    stacks[key][x] = oldStacks[key][x];
	                    stacks[key][x].total = null;
	                } else {
	                    stacks[key][x] = new StackItem(yAxis, yAxis.options.stackLabels, isNegative, x, stackOption);
	                }
	            }
	
	            // If the StackItem doesn't exist, create it first
	            stack = stacks[key][x];
	            if (y !== null) {
	                stack.points[pointKey] = stack.points[series.index] = [pick(stack.cum, stackThreshold)];
	
	                // Record the base of the stack
	                if (!defined(stack.cum)) {
	                    stack.base = pointKey;
	                }
	                stack.touched = yAxis.stacksTouched;
	        
	
	                // In area charts, if there are multiple points on the same X value, let the 
	                // area fill the full span of those points
	                if (stackIndicator.index > 0 && series.singleStacks === false) {
	                    stack.points[pointKey][0] = stack.points[series.index + ',' + x + ',0'][0];
	                }
	            }
	
	            // Add value to the stack total
	            if (stacking === 'percent') {
	
	                // Percent stacked column, totals are the same for the positive and negative stacks
	                other = isNegative ? stackKey : negKey;
	                if (negStacks && stacks[other] && stacks[other][x]) {
	                    other = stacks[other][x];
	                    stack.total = other.total = mathMax(other.total, stack.total) + mathAbs(y) || 0;
	
	                // Percent stacked areas
	                } else {
	                    stack.total = correctFloat(stack.total + (mathAbs(y) || 0));
	                }
	            } else {
	                stack.total = correctFloat(stack.total + (y || 0));
	            }
	
	            stack.cum = pick(stack.cum, stackThreshold) + (y || 0);
	
	            if (y !== null) {
	                stack.points[pointKey].push(stack.cum);
	                stackedYData[i] = stack.cum;
	            }
	
	        }
	
	        if (stacking === 'percent') {
	            yAxis.usePercentage = true;
	        }
	
	        this.stackedYData = stackedYData; // To be used in getExtremes
	
	        // Reset old stacks
	        yAxis.oldStacks = {};
	    };
	
	    /**
	     * Iterate over all stacks and compute the absolute values to percent
	     */
	    Series.prototype.setPercentStacks = function () {
	        var series = this,
	            stackKey = series.stackKey,
	            stacks = series.yAxis.stacks,
	            processedXData = series.processedXData,
	            stackIndicator;
	
	        each([stackKey, '-' + stackKey], function (key) {
	            var i = processedXData.length,
	                x,
	                stack,
	                pointExtremes,
	                totalFactor;
	
	            while (i--) {
	                x = processedXData[i];
	                stackIndicator = series.getStackIndicator(stackIndicator, x, series.index);
	                stack = stacks[key] && stacks[key][x];
	                pointExtremes = stack && stack.points[stackIndicator.key];
	                if (pointExtremes) {
	                    totalFactor = stack.total ? 100 / stack.total : 0;
	                    pointExtremes[0] = correctFloat(pointExtremes[0] * totalFactor); // Y bottom value
	                    pointExtremes[1] = correctFloat(pointExtremes[1] * totalFactor); // Y value
	                    series.stackedYData[i] = pointExtremes[1];
	                }
	            }
	        });
	    };
	
	    /**
	    * Get stack indicator, according to it's x-value, to determine points with the same x-value
	    */
	    Series.prototype.getStackIndicator = function (stackIndicator, x, index) {
	        if (!defined(stackIndicator) || stackIndicator.x !== x) {
	            stackIndicator = {
	                x: x,
	                index: 0
	            };
	        } else {
	            stackIndicator.index++;
	        }
	
	        stackIndicator.key = [index, x, stackIndicator.index].join(',');
	
	        return stackIndicator;
	    };
	
	    // Extend the Chart prototype for dynamic methods
	    extend(Chart.prototype, {
	
	        /**
	         * Add a series dynamically after  time
	         *
	         * @param {Object} options The config options
	         * @param {Boolean} redraw Whether to redraw the chart after adding. Defaults to true.
	         * @param {Boolean|Object} animation Whether to apply animation, and optionally animation
	         *    configuration
	         *
	         * @return {Object} series The newly created series object
	         */
	        addSeries: function (options, redraw, animation) {
	            var series,
	                chart = this;
	
	            if (options) {
	                redraw = pick(redraw, true); // defaults to true
	
	                fireEvent(chart, 'addSeries', { options: options }, function () {
	                    series = chart.initSeries(options);
	
	                    chart.isDirtyLegend = true; // the series array is out of sync with the display
	                    chart.linkSeries();
	                    if (redraw) {
	                        chart.redraw(animation);
	                    }
	                });
	            }
	
	            return series;
	        },
	
	        /**
	         * Add an axis to the chart
	         * @param {Object} options The axis option
	         * @param {Boolean} isX Whether it is an X axis or a value axis
	         */
	        addAxis: function (options, isX, redraw, animation) {
	            var key = isX ? 'xAxis' : 'yAxis',
	                chartOptions = this.options,
	                userOptions = merge(options, {
	                    index: this[key].length,
	                    isX: isX
	                });
	
	            new Axis(this, userOptions); // eslint-disable-line no-new
	
	            // Push the new axis options to the chart options
	            chartOptions[key] = splat(chartOptions[key] || {});
	            chartOptions[key].push(userOptions);
	
	            if (pick(redraw, true)) {
	                this.redraw(animation);
	            }
	        },
	
	        /**
	         * Dim the chart and show a loading text or symbol
	         * @param {String} str An optional text to show in the loading label instead of the default one
	         */
	        showLoading: function (str) {
	            var chart = this,
	                options = chart.options,
	                loadingDiv = chart.loadingDiv,
	                loadingOptions = options.loading,
	                setLoadingSize = function () {
	                    if (loadingDiv) {
	                        css(loadingDiv, {
	                            left: chart.plotLeft + PX,
	                            top: chart.plotTop + PX,
	                            width: chart.plotWidth + PX,
	                            height: chart.plotHeight + PX
	                        });
	                    }
	                };
	
	            // create the layer at the first call
	            if (!loadingDiv) {
	                chart.loadingDiv = loadingDiv = createElement(DIV, {
	                    className: PREFIX + 'loading'
	                }, extend(loadingOptions.style, {
	                    zIndex: 10,
	                    display: NONE
	                }), chart.container);
	
	                chart.loadingSpan = createElement(
	                    'span',
	                    null,
	                    loadingOptions.labelStyle,
	                    loadingDiv
	                );
	                addEvent(chart, 'redraw', setLoadingSize); // #1080
	            }
	
	            // update text
	            chart.loadingSpan.innerHTML = str || options.lang.loading;
	
	            // show it
	            if (!chart.loadingShown) {
	                css(loadingDiv, {
	                    opacity: 0,
	                    display: ''
	                });
	                animate(loadingDiv, {
	                    opacity: loadingOptions.style.opacity
	                }, {
	                    duration: loadingOptions.showDuration || 0
	                });
	                chart.loadingShown = true;
	            }
	            setLoadingSize();
	        },
	
	        /**
	         * Hide the loading layer
	         */
	        hideLoading: function () {
	            var options = this.options,
	                loadingDiv = this.loadingDiv;
	
	            if (loadingDiv) {
	                animate(loadingDiv, {
	                    opacity: 0
	                }, {
	                    duration: options.loading.hideDuration || 100,
	                    complete: function () {
	                        css(loadingDiv, { display: NONE });
	                    }
	                });
	            }
	            this.loadingShown = false;
	        }
	    });
	
	    // extend the Point prototype for dynamic methods
	    extend(Point.prototype, {
	        /**
	         * Update the point with new options (typically x/y data) and optionally redraw the series.
	         *
	         * @param {Object} options Point options as defined in the series.data array
	         * @param {Boolean} redraw Whether to redraw the chart or wait for an explicit call
	         * @param {Boolean|Object} animation Whether to apply animation, and optionally animation
	         *    configuration
	         *
	         */
	        update: function (options, redraw, animation, runEvent) {
	            var point = this,
	                series = point.series,
	                graphic = point.graphic,
	                i,
	                chart = series.chart,
	                seriesOptions = series.options;
	
	            redraw = pick(redraw, true);
	
	            function update() {
	
	                point.applyOptions(options);
	
	                // Update visuals
	                if (point.y === null && graphic) { // #4146
	                    point.graphic = graphic.destroy();
	                }
	                if (isObject(options, true)) {
	                    // Defer the actual redraw until getAttribs has been called (#3260)
	                    point.redraw = function () {
	                        if (graphic && graphic.element) {
	                            if (options && options.marker && options.marker.symbol) {
	                                point.graphic = graphic.destroy();
	                            }
	                        }
	                        if (options && options.dataLabels && point.dataLabel) { // #2468
	                            point.dataLabel = point.dataLabel.destroy();
	                        }
	                        point.redraw = null;
	                    };
	                }
	
	                // record changes in the parallel arrays
	                i = point.index;
	                series.updateParallelArrays(point, i);
	            
	                // Record the options to options.data. If there is an object from before,
	                // use point options, otherwise use raw options. (#4701)
	                seriesOptions.data[i] = isObject(seriesOptions.data[i], true) ? point.options : options;
	
	                // redraw
	                series.isDirty = series.isDirtyData = true;
	                if (!series.fixedBox && series.hasCartesianSeries) { // #1906, #2320
	                    chart.isDirtyBox = true;
	                }
	
	                if (seriesOptions.legendType === 'point') { // #1831, #1885
	                    chart.isDirtyLegend = true;
	                }
	                if (redraw) {
	                    chart.redraw(animation);
	                }
	            }
	
	            // Fire the event with a default handler of doing the update
	            if (runEvent === false) { // When called from setData
	                update();
	            } else {
	                point.firePointEvent('update', { options: options }, update);
	            }
	        },
	
	        /**
	         * Remove a point and optionally redraw the series and if necessary the axes
	         * @param {Boolean} redraw Whether to redraw the chart or wait for an explicit call
	         * @param {Boolean|Object} animation Whether to apply animation, and optionally animation
	         *    configuration
	         */
	        remove: function (redraw, animation) {
	            this.series.removePoint(inArray(this, this.series.data), redraw, animation);
	        }
	    });
	
	    // Extend the series prototype for dynamic methods
	    extend(Series.prototype, {
	        /**
	         * Add a point dynamically after chart load time
	         * @param {Object} options Point options as given in series.data
	         * @param {Boolean} redraw Whether to redraw the chart or wait for an explicit call
	         * @param {Boolean} shift If shift is true, a point is shifted off the start
	         *    of the series as one is appended to the end.
	         * @param {Boolean|Object} animation Whether to apply animation, and optionally animation
	         *    configuration
	         */
	        addPoint: function (options, redraw, shift, animation) {
	            var series = this,
	                seriesOptions = series.options,
	                data = series.data,
	                chart = series.chart,
	                names = series.xAxis && series.xAxis.names,
	                dataOptions = seriesOptions.data,
	                point,
	                isInTheMiddle,
	                xData = series.xData,
	                i,
	                x;
	
	            // Optional redraw, defaults to true
	            redraw = pick(redraw, true);
	
	            // Get options and push the point to xData, yData and series.options. In series.generatePoints
	            // the Point instance will be created on demand and pushed to the series.data array.
	            point = { series: series };
	            series.pointClass.prototype.applyOptions.apply(point, [options]);
	            x = point.x;
	
	            // Get the insertion point
	            i = xData.length;
	            if (series.requireSorting && x < xData[i - 1]) {
	                isInTheMiddle = true;
	                while (i && xData[i - 1] > x) {
	                    i--;
	                }
	            }
	
	            series.updateParallelArrays(point, 'splice', i, 0, 0); // insert undefined item
	            series.updateParallelArrays(point, i); // update it
	
	            if (names && point.name) {
	                names[x] = point.name;
	            }
	            dataOptions.splice(i, 0, options);
	
	            if (isInTheMiddle) {
	                series.data.splice(i, 0, null);
	                series.processData();
	            }
	
	            // Generate points to be added to the legend (#1329)
	            if (seriesOptions.legendType === 'point') {
	                series.generatePoints();
	            }
	
	            // Shift the first point off the parallel arrays
	            if (shift) {
	                if (data[0] && data[0].remove) {
	                    data[0].remove(false);
	                } else {
	                    data.shift();
	                    series.updateParallelArrays(point, 'shift');
	
	                    dataOptions.shift();
	                }
	            }
	
	            // redraw
	            series.isDirty = true;
	            series.isDirtyData = true;
	
	            if (redraw) {
	                series.getAttribs(); // #1937
	                chart.redraw(animation); // Animation is set anyway on redraw, #5665
	            }
	        },
	
	        /**
	         * Remove a point (rendered or not), by index
	         */
	        removePoint: function (i, redraw, animation) {
	
	            var series = this,
	                data = series.data,
	                point = data[i],
	                points = series.points,
	                chart = series.chart,
	                remove = function () {
	
	                    if (points && points.length === data.length) { // #4935
	                        points.splice(i, 1);
	                    }
	                    data.splice(i, 1);
	                    series.options.data.splice(i, 1);
	                    series.updateParallelArrays(point || { series: series }, 'splice', i, 1);
	
	                    if (point) {
	                        point.destroy();
	                    }
	
	                    // redraw
	                    series.isDirty = true;
	                    series.isDirtyData = true;
	                    if (redraw) {
	                        chart.redraw();
	                    }
	                };
	
	            setAnimation(animation, chart);
	            redraw = pick(redraw, true);
	
	            // Fire the event with a default handler of removing the point
	            if (point) {
	                point.firePointEvent('remove', null, remove);
	            } else {
	                remove();
	            }
	        },
	
	        /**
	         * Remove a series and optionally redraw the chart
	         *
	         * @param {Boolean} redraw Whether to redraw the chart or wait for an explicit call
	         * @param {Boolean|Object} animation Whether to apply animation, and optionally animation
	         *    configuration
	         */
	        remove: function (redraw, animation, withEvent) {
	            var series = this,
	                chart = series.chart;
	
	            function remove() {
	
	                // Destroy elements
	                series.destroy();
	
	                // Redraw
	                chart.isDirtyLegend = chart.isDirtyBox = true;
	                chart.linkSeries();
	
	                if (pick(redraw, true)) {
	                    chart.redraw(animation);
	                }
	            }
	
	            // Fire the event with a default handler of removing the point
	            if (withEvent !== false) {
	                fireEvent(series, 'remove', null, remove);
	            } else {
	                remove();
	            }
	        },
	
	        /**
	         * Update the series with a new set of options
	         */
	        update: function (newOptions, redraw) {
	            var series = this,
	                chart = this.chart,
	                // must use user options when changing type because this.options is merged
	                // in with type specific plotOptions
	                oldOptions = this.userOptions,
	                oldType = this.type,
	                proto = seriesTypes[oldType].prototype,
	                preserve = ['group', 'markerGroup', 'dataLabelsGroup'],
	                n;
	
	            // If we're changing type or zIndex, create new groups (#3380, #3404)
	            if ((newOptions.type && newOptions.type !== oldType) || newOptions.zIndex !== undefined) {
	                preserve.length = 0;
	            }
	
	            // Make sure groups are not destroyed (#3094)
	            each(preserve, function (prop) {
	                preserve[prop] = series[prop];
	                delete series[prop];
	            });
	
	            // Do the merge, with some forced options
	            newOptions = merge(oldOptions, {
	                animation: false,
	                index: this.index,
	                pointStart: this.xData[0] // when updating after addPoint
	            }, { data: this.options.data }, newOptions);
	
	            // Destroy the series and delete all properties. Reinsert all methods
	            // and properties from the new type prototype (#2270, #3719)
	            this.remove(false, null, false);
	            for (n in proto) {
	                this[n] = UNDEFINED;
	            }
	            extend(this, seriesTypes[newOptions.type || oldType].prototype);
	
	            // Re-register groups (#3094)
	            each(preserve, function (prop) {
	                series[prop] = preserve[prop];
	            });
	
	            this.init(chart, newOptions);
	            chart.linkSeries(); // Links are lost in this.remove (#3028)
	            if (pick(redraw, true)) {
	                chart.redraw(false);
	            }
	        }
	    });
	
	    // Extend the Axis.prototype for dynamic methods
	    extend(Axis.prototype, {
	
	        /**
	         * Update the axis with a new options structure
	         */
	        update: function (newOptions, redraw) {
	            var chart = this.chart;
	
	            newOptions = chart.options[this.coll][this.options.index] = merge(this.userOptions, newOptions);
	
	            this.destroy(true);
	
	            this.init(chart, extend(newOptions, { events: UNDEFINED }));
	
	            chart.isDirtyBox = true;
	            if (pick(redraw, true)) {
	                chart.redraw();
	            }
	        },
	
	        /**
	         * Remove the axis from the chart
	         */
	        remove: function (redraw) {
	            var chart = this.chart,
	                key = this.coll, // xAxis or yAxis
	                axisSeries = this.series,
	                i = axisSeries.length;
	
	            // Remove associated series (#2687)
	            while (i--) {
	                if (axisSeries[i]) {
	                    axisSeries[i].remove(false);
	                }
	            }
	
	            // Remove the axis
	            erase(chart.axes, this);
	            erase(chart[key], this);
	            chart.options[key].splice(this.options.index, 1);
	            each(chart[key], function (axis, i) { // Re-index, #1706
	                axis.options.index = i;
	            });
	            this.destroy();
	            chart.isDirtyBox = true;
	
	            if (pick(redraw, true)) {
	                chart.redraw();
	            }
	        },
	
	        /**
	         * Update the axis title by options
	         */
	        setTitle: function (newTitleOptions, redraw) {
	            this.update({ title: newTitleOptions }, redraw);
	        },
	
	        /**
	         * Set new axis categories and optionally redraw
	         * @param {Array} categories
	         * @param {Boolean} redraw
	         */
	        setCategories: function (categories, redraw) {
	            this.update({ categories: categories }, redraw);
	        }
	
	    });
	
	
	    /**
	     * LineSeries object
	     */
	    var LineSeries = extendClass(Series);
	    seriesTypes.line = LineSeries;
	
	    /**
	     * Set the default options for area
	     */
	    defaultPlotOptions.area = merge(defaultSeriesOptions, {
	        softThreshold: false,
	        threshold: 0
	        // trackByArea: false,
	        // lineColor: null, // overrides color, but lets fillColor be unaltered
	        // fillOpacity: 0.75,
	        // fillColor: null
	    });
	
	    /**
	     * AreaSeries object
	     */
	    var AreaSeries = extendClass(Series, {
	        type: 'area',
	        singleStacks: false,
	        /** 
	         * Return an array of stacked points, where null and missing points are replaced by 
	         * dummy points in order for gaps to be drawn correctly in stacks.
	         */
	        getStackPoints: function () {
	            var series = this,
	                segment = [],
	                keys = [],
	                xAxis = this.xAxis,
	                yAxis = this.yAxis,
	                stack = yAxis.stacks[this.stackKey],
	                pointMap = {},
	                points = this.points,
	                seriesIndex = series.index,
	                yAxisSeries = yAxis.series,
	                seriesLength = yAxisSeries.length,
	                visibleSeries,
	                upOrDown = pick(yAxis.options.reversedStacks, true) ? 1 : -1,
	                i,
	                x;
	
	            if (this.options.stacking) {
	                // Create a map where we can quickly look up the points by their X value.
	                for (i = 0; i < points.length; i++) {
	                    pointMap[points[i].x] = points[i];
	                }
	
	                // Sort the keys (#1651)
	                for (x in stack) {
	                    if (stack[x].total !== null) { // nulled after switching between grouping and not (#1651, #2336)
	                        keys.push(x);
	                    }
	                }
	                keys.sort(function (a, b) {
	                    return a - b;
	                });
	
	                visibleSeries = map(yAxisSeries, function () {
	                    return this.visible;
	                });
	
	                each(keys, function (x, idx) {
	                    var y = 0,
	                        stackPoint,
	                        stackedValues;
	
	                    if (pointMap[x] && !pointMap[x].isNull) {
	                        segment.push(pointMap[x]);
	
	                        // Find left and right cliff. -1 goes left, 1 goes right.
	                        each([-1, 1], function (direction) {
	                            var nullName = direction === 1 ? 'rightNull' : 'leftNull',
	                                cliffName = direction === 1 ? 'rightCliff' : 'leftCliff',
	                                cliff = 0,
	                                otherStack = stack[keys[idx + direction]];
	
	                            // If there is a stack next to this one, to the left or to the right...
	                            if (otherStack) {
	                                i = seriesIndex;
	                                while (i >= 0 && i < seriesLength) { // Can go either up or down, depending on reversedStacks
	                                    stackPoint = otherStack.points[i];
	                                    if (!stackPoint) {
	                                        // If the next point in this series is missing, mark the point
	                                        // with point.leftNull or point.rightNull = true.
	                                        if (i === seriesIndex) {
	                                            pointMap[x][nullName] = true;
	
	                                        // If there are missing points in the next stack in any of the 
	                                        // series below this one, we need to substract the missing values
	                                        // and add a hiatus to the left or right.
	                                        } else if (visibleSeries[i]) {
	                                            stackedValues = stack[x].points[i];
	                                            if (stackedValues) {
	                                                cliff -= stackedValues[1] - stackedValues[0];
	                                            }
	                                        }
	                                    }
	                                    // When reversedStacks is true, loop up, else loop down
	                                    i += upOrDown; 
	                                }                
	                            }
	                            pointMap[x][cliffName] = cliff;
	                        });
	
	
	                    // There is no point for this X value in this series, so we 
	                    // insert a dummy point in order for the areas to be drawn
	                    // correctly.
	                    } else {
	
	                        // Loop down the stack to find the series below this one that has
	                        // a value (#1991)
	                        i = seriesIndex;
	                        while (i >= 0 && i < seriesLength) {
	                            stackPoint = stack[x].points[i];
	                            if (stackPoint) {
	                                y = stackPoint[1];
	                                break;
	                            }
	                            // When reversedStacks is true, loop up, else loop down
	                            i += upOrDown;
	                        }
	
	                        y = yAxis.toPixels(y, true);
	                        segment.push({ 
	                            isNull: true,
	                            plotX: xAxis.toPixels(x, true),
	                            plotY: y,
	                            yBottom: y
	                        });
	                    }
	                });
	
	            } 
	
	            return segment;
	        },
	
	        getGraphPath: function (points) {
	            var getGraphPath = Series.prototype.getGraphPath,
	                graphPath,
	                options = this.options,
	                stacking = options.stacking,
	                yAxis = this.yAxis,
	                topPath,
	                //topPoints = [],
	                bottomPath,
	                bottomPoints = [],
	                graphPoints = [],
	                seriesIndex = this.index,
	                i,
	                areaPath,
	                plotX,
	                stacks = yAxis.stacks[this.stackKey],
	                threshold = options.threshold,
	                translatedThreshold = yAxis.getThreshold(options.threshold),
	                isNull,
	                yBottom,
	                connectNulls = options.connectNulls || stacking === 'percent',
	                /**
	                 * To display null points in underlying stacked series, this series graph must be 
	                 * broken, and the area also fall down to fill the gap left by the null point. #2069
	                 */
	                addDummyPoints = function (i, otherI, side) {
	                    var point = points[i],
	                        stackedValues = stacking && stacks[point.x].points[seriesIndex],
	                        nullVal = point[side + 'Null'] || 0,
	                        cliffVal = point[side + 'Cliff'] || 0,
	                        top,
	                        bottom,
	                        isNull = true;
	
	                    if (cliffVal || nullVal) {
	
	                        top = (nullVal ? stackedValues[0] : stackedValues[1]) + cliffVal;
	                        bottom = stackedValues[0] + cliffVal;
	                        isNull = !!nullVal;
	                
	                    } else if (!stacking && points[otherI] && points[otherI].isNull) {
	                        top = bottom = threshold;
	                    }
	
	                    // Add to the top and bottom line of the area
	                    if (top !== undefined) {
	                        graphPoints.push({
	                            plotX: plotX,
	                            plotY: top === null ? translatedThreshold : yAxis.getThreshold(top),
	                            isNull: isNull
	                        });
	                        bottomPoints.push({
	                            plotX: plotX,
	                            plotY: bottom === null ? translatedThreshold : yAxis.getThreshold(bottom),
	                            doCurve: false // #1041, gaps in areaspline areas
	                        });
	                    }
	                };
	
	            // Find what points to use
	            points = points || this.points;
	        
	            // Fill in missing points
	            if (stacking) {
	                points = this.getStackPoints();
	            }
	
	            for (i = 0; i < points.length; i++) {
	                isNull = points[i].isNull;
	                plotX = pick(points[i].rectPlotX, points[i].plotX);
	                yBottom = pick(points[i].yBottom, translatedThreshold);
	
	                if (!isNull || connectNulls) {
	
	                    if (!connectNulls) {
	                        addDummyPoints(i, i - 1, 'left');
	                    }
	
	                    if (!(isNull && !stacking && connectNulls)) { // Skip null point when stacking is false and connectNulls true
	                        graphPoints.push(points[i]);
	                        bottomPoints.push({
	                            x: i,
	                            plotX: plotX,
	                            plotY: yBottom
	                        });
	                    }
	
	                    if (!connectNulls) {
	                        addDummyPoints(i, i + 1, 'right');
	                    }
	                }
	            }
	
	            topPath = getGraphPath.call(this, graphPoints, true, true);
	        
	            bottomPoints.reversed = true;
	            bottomPath = getGraphPath.call(this, bottomPoints, true, true);
	            if (bottomPath.length) {
	                bottomPath[0] = L;
	            }
	
	            areaPath = topPath.concat(bottomPath);
	            graphPath = getGraphPath.call(this, graphPoints, false, connectNulls); // TODO: don't set leftCliff and rightCliff when connectNulls?
	
	            areaPath.xMap = topPath.xMap;
	            this.areaPath = areaPath;
	            return graphPath;
	        },
	
	        /**
	         * Draw the graph and the underlying area. This method calls the Series base
	         * function and adds the area. The areaPath is calculated in the getSegmentPath
	         * method called from Series.prototype.drawGraph.
	         */
	        drawGraph: function () {
	
	            // Define or reset areaPath
	            this.areaPath = [];
	
	            // Call the base method
	            Series.prototype.drawGraph.apply(this);
	
	            // Define local variables
	            var series = this,
	                areaPath = this.areaPath,
	                options = this.options,
	                zones = this.zones,
	                props = [['area', this.color, options.fillColor]]; // area name, main color, fill color
	
	            each(zones, function (threshold, i) {
	                props.push(['zoneArea' + i, threshold.color || series.color, threshold.fillColor || options.fillColor]);
	            });
	            each(props, function (prop) {
	                var areaKey = prop[0],
	                    area = series[areaKey],
	                    attr;
	
	                // Create or update the area
	                if (area) { // update
	                    area.endX = areaPath.xMap;
	                    area.animate({ d: areaPath });
	
	                } else { // create
	                    attr = {
	                        fill: prop[2] || prop[1],
	                        zIndex: 0 // #1069
	                    };
	                    if (!prop[2]) {
	                        attr['fill-opacity'] = pick(options.fillOpacity, 0.75);
	                    }
	                    area = series[areaKey] = series.chart.renderer.path(areaPath)
	                        .attr(attr)
	                        .add(series.group);
	                    area.isArea = true;
	                }
	                area.startX = areaPath.xMap;
	                area.shiftUnit = options.step ? 2 : 1;
	            });
	        },
	
	        drawLegendSymbol: LegendSymbolMixin.drawRectangle
	    });
	
	    seriesTypes.area = AreaSeries;
	    /**
	     * Set the default options for spline
	     */
	    defaultPlotOptions.spline = merge(defaultSeriesOptions);
	
	    /**
	     * SplineSeries object
	     */
	    var SplineSeries = extendClass(Series, {
	        type: 'spline',
	
	        /**
	         * Get the spline segment from a given point's previous neighbour to the given point
	         */
	        getPointSpline: function (points, point, i) {
	            var smoothing = 1.5, // 1 means control points midway between points, 2 means 1/3 from the point, 3 is 1/4 etc
	                denom = smoothing + 1,
	                plotX = point.plotX,
	                plotY = point.plotY,
	                lastPoint = points[i - 1],
	                nextPoint = points[i + 1],
	                leftContX,
	                leftContY,
	                rightContX,
	                rightContY,
	                ret;
	
	            function doCurve(otherPoint) {
	                return otherPoint && !otherPoint.isNull && otherPoint.doCurve !== false;
	            }
	
	            // Find control points
	            if (doCurve(lastPoint) && doCurve(nextPoint)) {
	                var lastX = lastPoint.plotX,
	                    lastY = lastPoint.plotY,
	                    nextX = nextPoint.plotX,
	                    nextY = nextPoint.plotY,
	                    correction = 0;
	
	                leftContX = (smoothing * plotX + lastX) / denom;
	                leftContY = (smoothing * plotY + lastY) / denom;
	                rightContX = (smoothing * plotX + nextX) / denom;
	                rightContY = (smoothing * plotY + nextY) / denom;
	
	                // Have the two control points make a straight line through main point
	                if (rightContX !== leftContX) { // #5016, division by zero
	                    correction = ((rightContY - leftContY) * (rightContX - plotX)) /
	                        (rightContX - leftContX) + plotY - rightContY;
	                }
	
	                leftContY += correction;
	                rightContY += correction;
	
	                // to prevent false extremes, check that control points are between
	                // neighbouring points' y values
	                if (leftContY > lastY && leftContY > plotY) {
	                    leftContY = mathMax(lastY, plotY);
	                    rightContY = 2 * plotY - leftContY; // mirror of left control point
	                } else if (leftContY < lastY && leftContY < plotY) {
	                    leftContY = mathMin(lastY, plotY);
	                    rightContY = 2 * plotY - leftContY;
	                }
	                if (rightContY > nextY && rightContY > plotY) {
	                    rightContY = mathMax(nextY, plotY);
	                    leftContY = 2 * plotY - rightContY;
	                } else if (rightContY < nextY && rightContY < plotY) {
	                    rightContY = mathMin(nextY, plotY);
	                    leftContY = 2 * plotY - rightContY;
	                }
	
	                // record for drawing in next point
	                point.rightContX = rightContX;
	                point.rightContY = rightContY;
	
	            
	            }
	
	            // Visualize control points for debugging
	            /*
	            if (leftContX) {
	                this.chart.renderer.circle(leftContX + this.chart.plotLeft, leftContY + this.chart.plotTop, 2)
	                    .attr({
	                        stroke: 'red',
	                        'stroke-width': 2,
	                        fill: 'none',
	                        zIndex: 9
	                    })
	                    .add();
	                this.chart.renderer.path(['M', leftContX + this.chart.plotLeft, leftContY + this.chart.plotTop,
	                    'L', plotX + this.chart.plotLeft, plotY + this.chart.plotTop])
	                    .attr({
	                        stroke: 'red',
	                        'stroke-width': 2,
	                        zIndex: 9
	                    })
	                    .add();
	            }
	            if (rightContX) {
	                this.chart.renderer.circle(rightContX + this.chart.plotLeft, rightContY + this.chart.plotTop, 2)
	                    .attr({
	                        stroke: 'green',
	                        'stroke-width': 2,
	                        fill: 'none',
	                        zIndex: 9
	                    })
	                    .add();
	                this.chart.renderer.path(['M', rightContX + this.chart.plotLeft, rightContY + this.chart.plotTop,
	                    'L', plotX + this.chart.plotLeft, plotY + this.chart.plotTop])
	                    .attr({
	                        stroke: 'green',
	                        'stroke-width': 2,
	                        zIndex: 9
	                    })
	                    .add();
	            }
	            // */
	            ret = [
	                'C',
	                pick(lastPoint.rightContX, lastPoint.plotX),
	                pick(lastPoint.rightContY, lastPoint.plotY),
	                pick(leftContX, plotX),
	                pick(leftContY, plotY),
	                plotX,
	                plotY
	            ];
	            lastPoint.rightContX = lastPoint.rightContY = null; // reset for updating series later
	            return ret;
	        }
	    });
	    seriesTypes.spline = SplineSeries;
	
	    /**
	     * Set the default options for areaspline
	     */
	    defaultPlotOptions.areaspline = merge(defaultPlotOptions.area);
	
	    /**
	     * AreaSplineSeries object
	     */
	    var areaProto = AreaSeries.prototype,
	        AreaSplineSeries = extendClass(SplineSeries, {
	            type: 'areaspline',
	            getStackPoints: areaProto.getStackPoints,
	            getGraphPath: areaProto.getGraphPath,
	            setStackCliffs: areaProto.setStackCliffs,
	            drawGraph: areaProto.drawGraph,
	            drawLegendSymbol: LegendSymbolMixin.drawRectangle
	        });
	
	    seriesTypes.areaspline = AreaSplineSeries;
	
	    /**
	     * Set the default options for column
	     */
	    defaultPlotOptions.column = merge(defaultSeriesOptions, {
	        borderColor: '#FFFFFF',
	        //borderWidth: 1,
	        borderRadius: 0,
	        //colorByPoint: undefined,
	        groupPadding: 0.2,
	        //grouping: true,
	        marker: null, // point options are specified in the base options
	        pointPadding: 0.1,
	        //pointWidth: null,
	        minPointLength: 0,
	        cropThreshold: 50, // when there are more points, they will not animate out of the chart on xAxis.setExtremes
	        pointRange: null, // null means auto, meaning 1 in a categorized axis and least distance between points if not categories
	        states: {
	            hover: {
	                brightness: 0.1,
	                shadow: false,
	                halo: false
	            },
	            select: {
	                color: '#C0C0C0',
	                borderColor: '#000000',
	                shadow: false
	            }
	        },
	        dataLabels: {
	            align: null, // auto
	            verticalAlign: null, // auto
	            y: null
	        },
	        softThreshold: false,
	        startFromThreshold: true, // false doesn't work well: http://jsfiddle.net/highcharts/hz8fopan/14/
	        stickyTracking: false,
	        tooltip: {
	            distance: 6
	        },
	        threshold: 0
	    });
	
	    /**
	     * ColumnSeries object
	     */
	    var ColumnSeries = extendClass(Series, {
	        type: 'column',
	        pointAttrToOptions: { // mapping between SVG attributes and the corresponding options
	            stroke: 'borderColor',
	            fill: 'color',
	            r: 'borderRadius'
	        },
	        cropShoulder: 0,
	        directTouch: true, // When tooltip is not shared, this series (and derivatives) requires direct touch/hover. KD-tree does not apply.
	        trackerGroups: ['group', 'dataLabelsGroup'],
	        negStacks: true, // use separate negative stacks, unlike area stacks where a negative
	            // point is substracted from previous (#1910)
	
	        /**
	         * Initialize the series
	         */
	        init: function () {
	            Series.prototype.init.apply(this, arguments);
	
	            var series = this,
	                chart = series.chart;
	
	            // if the series is added dynamically, force redraw of other
	            // series affected by a new column
	            if (chart.hasRendered) {
	                each(chart.series, function (otherSeries) {
	                    if (otherSeries.type === series.type) {
	                        otherSeries.isDirty = true;
	                    }
	                });
	            }
	        },
	
	        /**
	         * Return the width and x offset of the columns adjusted for grouping, groupPadding, pointPadding,
	         * pointWidth etc.
	         */
	        getColumnMetrics: function () {
	
	            var series = this,
	                options = series.options,
	                xAxis = series.xAxis,
	                yAxis = series.yAxis,
	                reversedXAxis = xAxis.reversed,
	                stackKey,
	                stackGroups = {},
	                columnCount = 0;
	
	            // Get the total number of column type series.
	            // This is called on every series. Consider moving this logic to a
	            // chart.orderStacks() function and call it on init, addSeries and removeSeries
	            if (options.grouping === false) {
	                columnCount = 1;
	            } else {
	                each(series.chart.series, function (otherSeries) {
	                    var otherOptions = otherSeries.options,
	                        otherYAxis = otherSeries.yAxis,
	                        columnIndex;
	                    if (otherSeries.type === series.type && otherSeries.visible &&
	                            yAxis.len === otherYAxis.len && yAxis.pos === otherYAxis.pos) {  // #642, #2086
	                        if (otherOptions.stacking) {
	                            stackKey = otherSeries.stackKey;
	                            if (stackGroups[stackKey] === UNDEFINED) {
	                                stackGroups[stackKey] = columnCount++;
	                            }
	                            columnIndex = stackGroups[stackKey];
	                        } else if (otherOptions.grouping !== false) { // #1162
	                            columnIndex = columnCount++;
	                        }
	                        otherSeries.columnIndex = columnIndex;
	                    }
	                });
	            }
	
	            var categoryWidth = mathMin(
	                    mathAbs(xAxis.transA) * (xAxis.ordinalSlope || options.pointRange || xAxis.closestPointRange || xAxis.tickInterval || 1), // #2610
	                    xAxis.len // #1535
	                ),
	                groupPadding = categoryWidth * options.groupPadding,
	                groupWidth = categoryWidth - 2 * groupPadding,
	                pointOffsetWidth = groupWidth / columnCount,
	                pointWidth = mathMin(
	                    options.maxPointWidth || xAxis.len,
	                    pick(options.pointWidth, pointOffsetWidth * (1 - 2 * options.pointPadding))
	                ),
	                pointPadding = (pointOffsetWidth - pointWidth) / 2,
	                colIndex = (series.columnIndex || 0) + (reversedXAxis ? 1 : 0), // #1251, #3737
	                pointXOffset = pointPadding + (groupPadding + colIndex *
	                    pointOffsetWidth - (categoryWidth / 2)) *
	                    (reversedXAxis ? -1 : 1);
	
	            // Save it for reading in linked series (Error bars particularly)
	            series.columnMetrics = {
	                width: pointWidth,
	                offset: pointXOffset
	            };
	            return series.columnMetrics;
	
	        },
	
	        /**
	         * Make the columns crisp. The edges are rounded to the nearest full pixel.
	         */
	        crispCol: function (x, y, w, h) {
	            var chart = this.chart,
	                borderWidth = this.borderWidth,
	                xCrisp = -(borderWidth % 2 ? 0.5 : 0),
	                yCrisp = borderWidth % 2 ? 0.5 : 1,
	                right,
	                bottom,
	                fromTop;
	
	            if (chart.inverted && chart.renderer.isVML) {
	                yCrisp += 1;
	            }
	
	            // Horizontal. We need to first compute the exact right edge, then round it
	            // and compute the width from there.
	            right = Math.round(x + w) + xCrisp;
	            x = Math.round(x) + xCrisp;
	            w = right - x;
	
	            // Vertical
	            bottom = Math.round(y + h) + yCrisp;
	            fromTop = mathAbs(y) <= 0.5 && bottom > 0.5; // #4504, #4656
	            y = Math.round(y) + yCrisp;
	            h = bottom - y;
	
	            // Top edges are exceptions
	            if (fromTop && h) { // #5146
	                y -= 1;
	                h += 1;
	            }
	
	            return {
	                x: x,
	                y: y,
	                width: w,
	                height: h
	            };
	        },
	
	        /**
	         * Translate each point to the plot area coordinate system and find shape positions
	         */
	        translate: function () {
	            var series = this,
	                chart = series.chart,
	                options = series.options,
	                borderWidth = series.borderWidth = pick(
	                    options.borderWidth,
	                    series.closestPointRange * series.xAxis.transA < 2 ? 0 : 1 // #3635
	                ),
	                yAxis = series.yAxis,
	                threshold = options.threshold,
	                translatedThreshold = series.translatedThreshold = yAxis.getThreshold(threshold),
	                minPointLength = pick(options.minPointLength, 5),
	                metrics = series.getColumnMetrics(),
	                pointWidth = metrics.width,
	                seriesBarW = series.barW = mathMax(pointWidth, 1 + 2 * borderWidth), // postprocessed for border width
	                pointXOffset = series.pointXOffset = metrics.offset;
	
	            if (chart.inverted) {
	                translatedThreshold -= 0.5; // #3355
	            }
	
	            // When the pointPadding is 0, we want the columns to be packed tightly, so we allow individual
	            // columns to have individual sizes. When pointPadding is greater, we strive for equal-width
	            // columns (#2694).
	            if (options.pointPadding) {
	                seriesBarW = mathCeil(seriesBarW);
	            }
	
	            Series.prototype.translate.apply(series);
	
	            // Record the new values
	            each(series.points, function (point) {
	                var yBottom = mathMin(pick(point.yBottom, translatedThreshold), 9e4), // #3575
	                    safeDistance = 999 + mathAbs(yBottom),
	                    plotY = mathMin(mathMax(-safeDistance, point.plotY), yAxis.len + safeDistance), // Don't draw too far outside plot area (#1303, #2241, #4264)
	                    barX = point.plotX + pointXOffset,
	                    barW = seriesBarW,
	                    barY = mathMin(plotY, yBottom),
	                    up,
	                    barH = mathMax(plotY, yBottom) - barY;
	
	                // Handle options.minPointLength
	                if (mathAbs(barH) < minPointLength) {
	                    if (minPointLength) {
	                        barH = minPointLength;
	                        up = (!yAxis.reversed && !point.negative) || (yAxis.reversed && point.negative);
	                        barY = mathAbs(barY - translatedThreshold) > minPointLength ? // stacked
	                                yBottom - minPointLength : // keep position
	                                translatedThreshold - (up ? minPointLength : 0); // #1485, #4051
	                    }
	                }
	
	                // Cache for access in polar
	                point.barX = barX;
	                point.pointWidth = pointWidth;
	
	                // Fix the tooltip on center of grouped columns (#1216, #424, #3648)
	                point.tooltipPos = chart.inverted ?
	                    [yAxis.len + yAxis.pos - chart.plotLeft - plotY, series.xAxis.len - barX - barW / 2, barH] :
	                    [barX + barW / 2, plotY + yAxis.pos - chart.plotTop, barH];
	
	                // Register shape type and arguments to be used in drawPoints
	                point.shapeType = 'rect';
	                point.shapeArgs = series.crispCol.apply(
	                    series,
	                    point.isNull ? 
	                        [point.plotX, yAxis.len / 2, 0, 0] : // #3169, drilldown from null must have a position to work from
	                        [barX, barY, barW, barH]
	                );
	            });
	
	        },
	
	        getSymbol: noop,
	
	        /**
	         * Use a solid rectangle like the area series types
	         */
	        drawLegendSymbol: LegendSymbolMixin.drawRectangle,
	
	
	        /**
	         * Columns have no graph
	         */
	        drawGraph: noop,
	
	        /**
	         * Draw the columns. For bars, the series.group is rotated, so the same coordinates
	         * apply for columns and bars. This method is inherited by scatter series.
	         *
	         */
	        drawPoints: function () {
	            var series = this,
	                chart = this.chart,
	                options = series.options,
	                renderer = chart.renderer,
	                animationLimit = options.animationLimit || 250,
	                shapeArgs,
	                pointAttr;
	
	            // draw the columns
	            each(series.points, function (point) {
	                var plotY = point.plotY,
	                    graphic = point.graphic,
	                    borderAttr;
	
	                if (isNumber(plotY) && point.y !== null) {
	                    shapeArgs = point.shapeArgs;
	
	                    borderAttr = defined(series.borderWidth) ? {
	                        'stroke-width': series.borderWidth
	                    } : {};
	
	                    pointAttr = point.pointAttr[point.selected ? SELECT_STATE : NORMAL_STATE] || series.pointAttr[NORMAL_STATE];
	
	                    if (graphic) { // update
	                        stop(graphic);
	                        graphic.attr(borderAttr).attr(pointAttr)[chart.pointCount < animationLimit ? 'animate' : 'attr'](merge(shapeArgs)); // #4267
	
	                    } else {
	                        point.graphic = graphic = renderer[point.shapeType](shapeArgs)
	                            .attr(borderAttr)
	                            .attr(pointAttr)
	                            .add(point.group || series.group)
	                            .shadow(options.shadow, null, options.stacking && !options.borderRadius);
	                    }
	
	                } else if (graphic) {
	                    point.graphic = graphic.destroy(); // #1269
	                }
	            });
	        },
	
	        /**
	         * Animate the column heights one by one from zero
	         * @param {Boolean} init Whether to initialize the animation or run it
	         */
	        animate: function (init) {
	            var series = this,
	                yAxis = this.yAxis,
	                options = series.options,
	                inverted = this.chart.inverted,
	                attr = {},
	                translatedThreshold;
	
	            if (hasSVG) { // VML is too slow anyway
	                if (init) {
	                    attr.scaleY = 0.001;
	                    translatedThreshold = mathMin(yAxis.pos + yAxis.len, mathMax(yAxis.pos, yAxis.toPixels(options.threshold)));
	                    if (inverted) {
	                        attr.translateX = translatedThreshold - yAxis.len;
	                    } else {
	                        attr.translateY = translatedThreshold;
	                    }
	                    series.group.attr(attr);
	
	                } else { // run the animation
	
	                    attr[inverted ? 'translateX' : 'translateY'] = yAxis.pos;
	                    series.group.animate(attr, extend(animObject(series.options.animation), {
	                        // Do the scale synchronously to ensure smooth updating (#5030)
	                        step: function (val, fx) {
	                            series.group.attr({
	                                scaleY: mathMax(0.001, fx.pos) // #5250
	                            });
	                        }
	                    }));
	
	                    // delete this function to allow it only once
	                    series.animate = null;
	                }
	            }
	        },
	
	        /**
	         * Remove this series from the chart
	         */
	        remove: function () {
	            var series = this,
	                chart = series.chart;
	
	            // column and bar series affects other series of the same type
	            // as they are either stacked or grouped
	            if (chart.hasRendered) {
	                each(chart.series, function (otherSeries) {
	                    if (otherSeries.type === series.type) {
	                        otherSeries.isDirty = true;
	                    }
	                });
	            }
	
	            Series.prototype.remove.apply(series, arguments);
	        }
	    });
	    seriesTypes.column = ColumnSeries;
	    /**
	     * Set the default options for bar
	     */
	    defaultPlotOptions.bar = merge(defaultPlotOptions.column);
	    /**
	     * The Bar series class
	     */
	    var BarSeries = extendClass(ColumnSeries, {
	        type: 'bar',
	        inverted: true
	    });
	    seriesTypes.bar = BarSeries;
	
	    /**
	     * Set the default options for scatter
	     */
	    defaultPlotOptions.scatter = merge(defaultSeriesOptions, {
	        lineWidth: 0,
	        marker: {
	            enabled: true // Overrides auto-enabling in line series (#3647)
	        },
	        tooltip: {
	            headerFormat: '<span style="color:{point.color}">\u25CF</span> <span style="font-size: 10px;"> {series.name}</span><br/>',
	            pointFormat: 'x: <b>{point.x}</b><br/>y: <b>{point.y}</b><br/>'
	        }
	    });
	
	    /**
	     * The scatter series class
	     */
	    var ScatterSeries = extendClass(Series, {
	        type: 'scatter',
	        sorted: false,
	        requireSorting: false,
	        noSharedTooltip: true,
	        trackerGroups: ['group', 'markerGroup', 'dataLabelsGroup'],
	        takeOrdinalPosition: false, // #2342
	        kdDimensions: 2,
	        drawGraph: function () {
	            if (this.options.lineWidth) {
	                Series.prototype.drawGraph.call(this);
	            }
	        }
	    });
	
	    seriesTypes.scatter = ScatterSeries;
	
	    /**
	     * Set the default options for pie
	     */
	    defaultPlotOptions.pie = merge(defaultSeriesOptions, {
	        borderColor: '#FFFFFF',
	        borderWidth: 1,
	        center: [null, null],
	        clip: false,
	        colorByPoint: true, // always true for pies
	        dataLabels: {
	            // align: null,
	            // connectorWidth: 1,
	            // connectorColor: point.color,
	            // connectorPadding: 5,
	            distance: 30,
	            enabled: true,
	            formatter: function () { // #2945
	                return this.y === null ? undefined : this.point.name;
	            },
	            // softConnector: true,
	            x: 0
	            // y: 0
	        },
	        ignoreHiddenPoint: true,
	        //innerSize: 0,
	        legendType: 'point',
	        marker: null, // point options are specified in the base options
	        size: null,
	        showInLegend: false,
	        slicedOffset: 10,
	        states: {
	            hover: {
	                brightness: 0.1,
	                shadow: false
	            }
	        },
	        stickyTracking: false,
	        tooltip: {
	            followPointer: true
	        }
	    });
	
	    /**
	     * Extended point object for pies
	     */
	    var PiePoint = extendClass(Point, {
	        /**
	         * Initiate the pie slice
	         */
	        init: function () {
	
	            Point.prototype.init.apply(this, arguments);
	
	            var point = this,
	                toggleSlice;
	
	            point.name = pick(point.name, 'Slice');
	
	            // add event listener for select
	            toggleSlice = function (e) {
	                point.slice(e.type === 'select');
	            };
	            addEvent(point, 'select', toggleSlice);
	            addEvent(point, 'unselect', toggleSlice);
	
	            return point;
	        },
	
	        /**
	         * Toggle the visibility of the pie slice
	         * @param {Boolean} vis Whether to show the slice or not. If undefined, the
	         *    visibility is toggled
	         */
	        setVisible: function (vis, redraw) {
	            var point = this,
	                series = point.series,
	                chart = series.chart,
	                ignoreHiddenPoint = series.options.ignoreHiddenPoint;
	
	            redraw = pick(redraw, ignoreHiddenPoint);
	
	            if (vis !== point.visible) {
	
	                // If called without an argument, toggle visibility
	                point.visible = point.options.visible = vis = vis === UNDEFINED ? !point.visible : vis;
	                series.options.data[inArray(point, series.data)] = point.options; // update userOptions.data
	
	                // Show and hide associated elements. This is performed regardless of redraw or not,
	                // because chart.redraw only handles full series.
	                each(['graphic', 'dataLabel', 'connector', 'shadowGroup'], function (key) {
	                    if (point[key]) {
	                        point[key][vis ? 'show' : 'hide'](true);
	                    }
	                });
	
	                if (point.legendItem) {
	                    chart.legend.colorizeItem(point, vis);
	                }
	
	                // #4170, hide halo after hiding point
	                if (!vis && point.state === 'hover') {
	                    point.setState('');
	                }
	
	                // Handle ignore hidden slices
	                if (ignoreHiddenPoint) {
	                    series.isDirty = true;
	                }
	
	                if (redraw) {
	                    chart.redraw();
	                }
	            }
	        },
	
	        /**
	         * Set or toggle whether the slice is cut out from the pie
	         * @param {Boolean} sliced When undefined, the slice state is toggled
	         * @param {Boolean} redraw Whether to redraw the chart. True by default.
	         */
	        slice: function (sliced, redraw, animation) {
	            var point = this,
	                series = point.series,
	                chart = series.chart,
	                translation;
	
	            setAnimation(animation, chart);
	
	            // redraw is true by default
	            redraw = pick(redraw, true);
	
	            // if called without an argument, toggle
	            point.sliced = point.options.sliced = sliced = defined(sliced) ? sliced : !point.sliced;
	            series.options.data[inArray(point, series.data)] = point.options; // update userOptions.data
	
	            translation = sliced ? point.slicedTranslation : {
	                translateX: 0,
	                translateY: 0
	            };
	
	            point.graphic.animate(translation);
	
	            if (point.shadowGroup) {
	                point.shadowGroup.animate(translation);
	            }
	
	        },
	
	        haloPath: function (size) {
	            var shapeArgs = this.shapeArgs,
	                chart = this.series.chart;
	
	            return this.sliced || !this.visible ? [] : this.series.chart.renderer.symbols.arc(chart.plotLeft + shapeArgs.x, chart.plotTop + shapeArgs.y, shapeArgs.r + size, shapeArgs.r + size, {
	                innerR: this.shapeArgs.r,
	                start: shapeArgs.start,
	                end: shapeArgs.end
	            });
	        }
	    });
	
	    /**
	     * The Pie series class
	     */
	    var PieSeries = {
	        type: 'pie',
	        isCartesian: false,
	        pointClass: PiePoint,
	        requireSorting: false,
	        directTouch: true,
	        noSharedTooltip: true,
	        trackerGroups: ['group', 'dataLabelsGroup'],
	        axisTypes: [],
	        pointAttrToOptions: { // mapping between SVG attributes and the corresponding options
	            stroke: 'borderColor',
	            'stroke-width': 'borderWidth',
	            fill: 'color'
	        },
	
	        /**
	         * Animate the pies in
	         */
	        animate: function (init) {
	            var series = this,
	                points = series.points,
	                startAngleRad = series.startAngleRad;
	
	            if (!init) {
	                each(points, function (point) {
	                    var graphic = point.graphic,
	                        args = point.shapeArgs;
	
	                    if (graphic) {
	                        // start values
	                        graphic.attr({
	                            r: point.startR || (series.center[3] / 2), // animate from inner radius (#779)
	                            start: startAngleRad,
	                            end: startAngleRad
	                        });
	
	                        // animate
	                        graphic.animate({
	                            r: args.r,
	                            start: args.start,
	                            end: args.end
	                        }, series.options.animation);
	                    }
	                });
	
	                // delete this function to allow it only once
	                series.animate = null;
	            }
	        },
	
	        /**
	         * Recompute total chart sum and update percentages of points.
	         */
	        updateTotals: function () {
	            var i,
	                total = 0,
	                points = this.points,
	                len = points.length,
	                point,
	                ignoreHiddenPoint = this.options.ignoreHiddenPoint;
	
	            // Get the total sum
	            for (i = 0; i < len; i++) {
	                point = points[i];
	                // Disallow negative values (#1530, #3623, #5322)
	                if (point.y < 0) {
	                    point.y = null;
	                }
	                total += (ignoreHiddenPoint && !point.visible) ? 0 : point.y;
	            }
	            this.total = total;
	
	            // Set each point's properties
	            for (i = 0; i < len; i++) {
	                point = points[i];
	                point.percentage = (total > 0 && (point.visible || !ignoreHiddenPoint)) ? point.y / total * 100 : 0;
	                point.total = total;
	            }
	        },
	
	        /**
	         * Extend the generatePoints method by adding total and percentage properties to each point
	         */
	        generatePoints: function () {
	            Series.prototype.generatePoints.call(this);
	            this.updateTotals();
	        },
	
	        /**
	         * Do translation for pie slices
	         */
	        translate: function (positions) {
	            this.generatePoints();
	
	            var series = this,
	                cumulative = 0,
	                precision = 1000, // issue #172
	                options = series.options,
	                slicedOffset = options.slicedOffset,
	                connectorOffset = slicedOffset + options.borderWidth,
	                start,
	                end,
	                angle,
	                startAngle = options.startAngle || 0,
	                startAngleRad = series.startAngleRad = mathPI / 180 * (startAngle - 90),
	                endAngleRad = series.endAngleRad = mathPI / 180 * ((pick(options.endAngle, startAngle + 360)) - 90),
	                circ = endAngleRad - startAngleRad, //2 * mathPI,
	                points = series.points,
	                radiusX, // the x component of the radius vector for a given point
	                radiusY,
	                labelDistance = options.dataLabels.distance,
	                ignoreHiddenPoint = options.ignoreHiddenPoint,
	                i,
	                len = points.length,
	                point;
	
	            // Get positions - either an integer or a percentage string must be given.
	            // If positions are passed as a parameter, we're in a recursive loop for adjusting
	            // space for data labels.
	            if (!positions) {
	                series.center = positions = series.getCenter();
	            }
	
	            // utility for getting the x value from a given y, used for anticollision logic in data labels
	            series.getX = function (y, left) {
	
	                angle = math.asin(mathMin((y - positions[1]) / (positions[2] / 2 + labelDistance), 1));
	
	                return positions[0] +
	                    (left ? -1 : 1) *
	                    (mathCos(angle) * (positions[2] / 2 + labelDistance));
	            };
	
	            // Calculate the geometry for each point
	            for (i = 0; i < len; i++) {
	
	                point = points[i];
	
	                // set start and end angle
	                start = startAngleRad + (cumulative * circ);
	                if (!ignoreHiddenPoint || point.visible) {
	                    cumulative += point.percentage / 100;
	                }
	                end = startAngleRad + (cumulative * circ);
	
	                // set the shape
	                point.shapeType = 'arc';
	                point.shapeArgs = {
	                    x: positions[0],
	                    y: positions[1],
	                    r: positions[2] / 2,
	                    innerR: positions[3] / 2,
	                    start: mathRound(start * precision) / precision,
	                    end: mathRound(end * precision) / precision
	                };
	
	                // The angle must stay within -90 and 270 (#2645)
	                angle = (end + start) / 2;
	                if (angle > 1.5 * mathPI) {
	                    angle -= 2 * mathPI;
	                } else if (angle < -mathPI / 2) {
	                    angle += 2 * mathPI;
	                }
	
	                // Center for the sliced out slice
	                point.slicedTranslation = {
	                    translateX: mathRound(mathCos(angle) * slicedOffset),
	                    translateY: mathRound(mathSin(angle) * slicedOffset)
	                };
	
	                // set the anchor point for tooltips
	                radiusX = mathCos(angle) * positions[2] / 2;
	                radiusY = mathSin(angle) * positions[2] / 2;
	                point.tooltipPos = [
	                    positions[0] + radiusX * 0.7,
	                    positions[1] + radiusY * 0.7
	                ];
	
	                point.half = angle < -mathPI / 2 || angle > mathPI / 2 ? 1 : 0;
	                point.angle = angle;
	
	                // set the anchor point for data labels
	                connectorOffset = mathMin(connectorOffset, labelDistance / 2); // #1678
	                point.labelPos = [
	                    positions[0] + radiusX + mathCos(angle) * labelDistance, // first break of connector
	                    positions[1] + radiusY + mathSin(angle) * labelDistance, // a/a
	                    positions[0] + radiusX + mathCos(angle) * connectorOffset, // second break, right outside pie
	                    positions[1] + radiusY + mathSin(angle) * connectorOffset, // a/a
	                    positions[0] + radiusX, // landing point for connector
	                    positions[1] + radiusY, // a/a
	                    labelDistance < 0 ? // alignment
	                        'center' :
	                        point.half ? 'right' : 'left', // alignment
	                    angle // center angle
	                ];
	
	            }
	        },
	
	        drawGraph: null,
	
	        /**
	         * Draw the data points
	         */
	        drawPoints: function () {
	            var series = this,
	                chart = series.chart,
	                renderer = chart.renderer,
	                groupTranslation,
	                //center,
	                graphic,
	                //group,
	                shadow = series.options.shadow,
	                shadowGroup,
	                pointAttr,
	                shapeArgs,
	                attr;
	
	            if (shadow && !series.shadowGroup) {
	                series.shadowGroup = renderer.g('shadow')
	                    .add(series.group);
	            }
	
	            // draw the slices
	            each(series.points, function (point) {
	                if (point.y !== null) {
	                    graphic = point.graphic;
	                    shapeArgs = point.shapeArgs;
	                    shadowGroup = point.shadowGroup;
	                    pointAttr = point.pointAttr[point.selected ? SELECT_STATE : NORMAL_STATE];
	                    if (!pointAttr.stroke) {
	                        pointAttr.stroke = pointAttr.fill;
	                    }
	
	                    // put the shadow behind all points
	                    if (shadow && !shadowGroup) {
	                        shadowGroup = point.shadowGroup = renderer.g('shadow')
	                            .add(series.shadowGroup);
	                    }
	
	                    // if the point is sliced, use special translation, else use plot area traslation
	                    groupTranslation = point.sliced ? point.slicedTranslation : {
	                        translateX: 0,
	                        translateY: 0
	                    };
	
	                    //group.translate(groupTranslation[0], groupTranslation[1]);
	                    if (shadowGroup) {
	                        shadowGroup.attr(groupTranslation);
	                    }
	
	                    // draw the slice
	                    if (graphic) {
	                        graphic
	                            .setRadialReference(series.center)
	                            .attr(pointAttr)
	                            .animate(extend(shapeArgs, groupTranslation));
	                    } else {
	                        attr = { 'stroke-linejoin': 'round' };
	                        if (!point.visible) {
	                            attr.visibility = 'hidden';
	                        }
	
	                        point.graphic = graphic = renderer[point.shapeType](shapeArgs)
	                            .setRadialReference(series.center)
	                            .attr(pointAttr)
	                            .attr(attr)
	                            .attr(groupTranslation)
	                            .add(series.group)
	                            .shadow(shadow, shadowGroup);
	                    }
	                }
	            });
	
	        },
	
	
	        searchPoint: noop,
	
	        /**
	         * Utility for sorting data labels
	         */
	        sortByAngle: function (points, sign) {
	            points.sort(function (a, b) {
	                return a.angle !== undefined && (b.angle - a.angle) * sign;
	            });
	        },
	
	        /**
	         * Use a simple symbol from LegendSymbolMixin
	         */
	        drawLegendSymbol: LegendSymbolMixin.drawRectangle,
	
	        /**
	         * Use the getCenter method from drawLegendSymbol
	         */
	        getCenter: CenteredSeriesMixin.getCenter,
	
	        /**
	         * Pies don't have point marker symbols
	         */
	        getSymbol: noop
	
	    };
	    PieSeries = extendClass(Series, PieSeries);
	    seriesTypes.pie = PieSeries;
	
	    /**
	     * Draw the data labels
	     */
	    Series.prototype.drawDataLabels = function () {
	
	        var series = this,
	            seriesOptions = series.options,
	            cursor = seriesOptions.cursor,
	            options = seriesOptions.dataLabels,
	            points = series.points,
	            pointOptions,
	            generalOptions,
	            hasRendered = series.hasRendered || 0,
	            str,
	            dataLabelsGroup,
	            defer = pick(options.defer, true),
	            renderer = series.chart.renderer;
	
	        if (options.enabled || series._hasPointLabels) {
	
	            // Process default alignment of data labels for columns
	            if (series.dlProcessOptions) {
	                series.dlProcessOptions(options);
	            }
	
	            // Create a separate group for the data labels to avoid rotation
	            dataLabelsGroup = series.plotGroup(
	                'dataLabelsGroup',
	                'data-labels',
	                defer && !hasRendered ? 'hidden' : 'visible', // #5133
	                options.zIndex || 6
	            );
	
	            if (defer) {
	                dataLabelsGroup.attr({ opacity: +hasRendered }); // #3300
	                if (!hasRendered) {
	                    addEvent(series, 'afterAnimate', function () {
	                        if (series.visible) { // #2597, #3023, #3024
	                            dataLabelsGroup.show(true);
	                        }
	                        dataLabelsGroup[seriesOptions.animation ? 'animate' : 'attr']({ opacity: 1 }, { duration: 200 });
	                    });
	                }
	            }
	
	            // Make the labels for each point
	            generalOptions = options;
	            each(points, function (point) {
	
	                var enabled,
	                    dataLabel = point.dataLabel,
	                    labelConfig,
	                    attr,
	                    name,
	                    rotation,
	                    connector = point.connector,
	                    isNew = true,
	                    style,
	                    moreStyle = {};
	
	                // Determine if each data label is enabled
	                pointOptions = point.dlOptions || (point.options && point.options.dataLabels); // dlOptions is used in treemaps
	                enabled = pick(pointOptions && pointOptions.enabled, generalOptions.enabled) && point.y !== null; // #2282, #4641
	
	
	                // If the point is outside the plot area, destroy it. #678, #820
	                if (dataLabel && !enabled) {
	                    point.dataLabel = dataLabel.destroy();
	
	                // Individual labels are disabled if the are explicitly disabled
	                // in the point options, or if they fall outside the plot area.
	                } else if (enabled) {
	
	                    // Create individual options structure that can be extended without
	                    // affecting others
	                    options = merge(generalOptions, pointOptions);
	                    style = options.style;
	
	                    rotation = options.rotation;
	
	                    // Get the string
	                    labelConfig = point.getLabelConfig();
	                    str = options.format ?
	                        format(options.format, labelConfig) :
	                        options.formatter.call(labelConfig, options);
	
	                    // Determine the color
	                    style.color = pick(options.color, style.color, series.color, 'black');
	
	
	                    // update existing label
	                    if (dataLabel) {
	
	                        if (defined(str)) {
	                            dataLabel
	                                .attr({
	                                    text: str
	                                });
	                            isNew = false;
	
	                        } else { // #1437 - the label is shown conditionally
	                            point.dataLabel = dataLabel = dataLabel.destroy();
	                            if (connector) {
	                                point.connector = connector.destroy();
	                            }
	                        }
	
	                    // create new label
	                    } else if (defined(str)) {
	                        attr = {
	                            //align: align,
	                            fill: options.backgroundColor,
	                            stroke: options.borderColor,
	                            'stroke-width': options.borderWidth,
	                            r: options.borderRadius || 0,
	                            rotation: rotation,
	                            padding: options.padding,
	                            zIndex: 1
	                        };
	
	                        // Get automated contrast color
	                        if (style.color === 'contrast') {
	                            moreStyle.color = options.inside || options.distance < 0 || !!seriesOptions.stacking ?
	                                renderer.getContrast(point.color || series.color) :
	                                '#000000';
	                        }
	                        if (cursor) {
	                            moreStyle.cursor = cursor;
	                        }
	
	
	                        // Remove unused attributes (#947)
	                        for (name in attr) {
	                            if (attr[name] === UNDEFINED) {
	                                delete attr[name];
	                            }
	                        }
	
	                        dataLabel = point.dataLabel = renderer[rotation ? 'text' : 'label']( // labels don't support rotation
	                            str,
	                            0,
	                            -9999,
	                            options.shape,
	                            null,
	                            null,
	                            options.useHTML
	                        )
	                        .attr(attr)
	                        .css(extend(style, moreStyle))
	                        .add(dataLabelsGroup)
	                        .shadow(options.shadow);
	
	                    }
	
	                    if (dataLabel) {
	                        // Now the data label is created and placed at 0,0, so we need to align it
	                        series.alignDataLabel(point, dataLabel, options, null, isNew);
	                    }
	                }
	            });
	        }
	    };
	
	    /**
	     * Align each individual data label
	     */
	    Series.prototype.alignDataLabel = function (point, dataLabel, options, alignTo, isNew) {
	        var chart = this.chart,
	            inverted = chart.inverted,
	            plotX = pick(point.plotX, -9999),
	            plotY = pick(point.plotY, -9999),
	            bBox = dataLabel.getBBox(),
	            baseline = chart.renderer.fontMetrics(options.style.fontSize).b,
	            rotation = options.rotation,
	            normRotation,
	            negRotation,
	            align = options.align,
	            rotCorr, // rotation correction
	            // Math.round for rounding errors (#2683), alignTo to allow column labels (#2700)
	            visible = this.visible && (point.series.forceDL || chart.isInsidePlot(plotX, mathRound(plotY), inverted) ||
	                (alignTo && chart.isInsidePlot(plotX, inverted ? alignTo.x + 1 : alignTo.y + alignTo.height - 1, inverted))),
	            alignAttr, // the final position;
	            justify = pick(options.overflow, 'justify') === 'justify';
	
	        if (visible) {
	
	            // The alignment box is a singular point
	            alignTo = extend({
	                x: inverted ? chart.plotWidth - plotY : plotX,
	                y: mathRound(inverted ? chart.plotHeight - plotX : plotY),
	                width: 0,
	                height: 0
	            }, alignTo);
	
	            // Add the text size for alignment calculation
	            extend(options, {
	                width: bBox.width,
	                height: bBox.height
	            });
	
	            // Allow a hook for changing alignment in the last moment, then do the alignment
	            if (rotation) {
	                justify = false; // Not supported for rotated text
	                rotCorr = chart.renderer.rotCorr(baseline, rotation); // #3723
	                alignAttr = {
	                    x: alignTo.x + options.x + alignTo.width / 2 + rotCorr.x,
	                    y: alignTo.y + options.y + { top: 0, middle: 0.5, bottom: 1 }[options.verticalAlign] * alignTo.height
	                };
	                dataLabel[isNew ? 'attr' : 'animate'](alignAttr)
	                    .attr({ // #3003
	                        align: align
	                    });
	
	                // Compensate for the rotated label sticking out on the sides
	                normRotation = (rotation + 720) % 360;
	                negRotation = normRotation > 180 && normRotation < 360;
	
	                if (align === 'left') {
	                    alignAttr.y -= negRotation ? bBox.height : 0;
	                } else if (align === 'center') {
	                    alignAttr.x -= bBox.width / 2;
	                    alignAttr.y -= bBox.height / 2;
	                } else if (align === 'right') {
	                    alignAttr.x -= bBox.width;
	                    alignAttr.y -= negRotation ? 0 : bBox.height;
	                }
	            
	
	            } else {
	                dataLabel.align(options, null, alignTo);
	                alignAttr = dataLabel.alignAttr;
	            }
	
	            // Handle justify or crop
	            if (justify) {
	                this.justifyDataLabel(dataLabel, options, alignAttr, bBox, alignTo, isNew);
	            
	            // Now check that the data label is within the plot area
	            } else if (pick(options.crop, true)) {
	                visible = chart.isInsidePlot(alignAttr.x, alignAttr.y) && chart.isInsidePlot(alignAttr.x + bBox.width, alignAttr.y + bBox.height);
	            }
	
	            // When we're using a shape, make it possible with a connector or an arrow pointing to thie point
	            if (options.shape && !rotation) {
	                dataLabel.attr({
	                    anchorX: point.plotX,
	                    anchorY: point.plotY
	                });
	            }
	        }
	
	        // Show or hide based on the final aligned position
	        if (!visible) {
	            stop(dataLabel);
	            dataLabel.attr({ y: -9999 });
	            dataLabel.placed = false; // don't animate back in
	        }
	
	    };
	
	    /**
	     * If data labels fall partly outside the plot area, align them back in, in a way that
	     * doesn't hide the point.
	     */
	    Series.prototype.justifyDataLabel = function (dataLabel, options, alignAttr, bBox, alignTo, isNew) {
	        var chart = this.chart,
	            align = options.align,
	            verticalAlign = options.verticalAlign,
	            off,
	            justified,
	            padding = dataLabel.box ? 0 : (dataLabel.padding || 0);
	
	        // Off left
	        off = alignAttr.x + padding;
	        if (off < 0) {
	            if (align === 'right') {
	                options.align = 'left';
	            } else {
	                options.x = -off;
	            }
	            justified = true;
	        }
	
	        // Off right
	        off = alignAttr.x + bBox.width - padding;
	        if (off > chart.plotWidth) {
	            if (align === 'left') {
	                options.align = 'right';
	            } else {
	                options.x = chart.plotWidth - off;
	            }
	            justified = true;
	        }
	
	        // Off top
	        off = alignAttr.y + padding;
	        if (off < 0) {
	            if (verticalAlign === 'bottom') {
	                options.verticalAlign = 'top';
	            } else {
	                options.y = -off;
	            }
	            justified = true;
	        }
	
	        // Off bottom
	        off = alignAttr.y + bBox.height - padding;
	        if (off > chart.plotHeight) {
	            if (verticalAlign === 'top') {
	                options.verticalAlign = 'bottom';
	            } else {
	                options.y = chart.plotHeight - off;
	            }
	            justified = true;
	        }
	
	        if (justified) {
	            dataLabel.placed = !isNew;
	            dataLabel.align(options, null, alignTo);
	        }
	    };
	
	    /**
	     * Override the base drawDataLabels method by pie specific functionality
	     */
	    if (seriesTypes.pie) {
	        seriesTypes.pie.prototype.drawDataLabels = function () {
	            var series = this,
	                data = series.data,
	                point,
	                chart = series.chart,
	                options = series.options.dataLabels,
	                connectorPadding = pick(options.connectorPadding, 10),
	                connectorWidth = pick(options.connectorWidth, 1),
	                plotWidth = chart.plotWidth,
	                plotHeight = chart.plotHeight,
	                connector,
	                connectorPath,
	                softConnector = pick(options.softConnector, true),
	                distanceOption = options.distance,
	                seriesCenter = series.center,
	                radius = seriesCenter[2] / 2,
	                centerY = seriesCenter[1],
	                outside = distanceOption > 0,
	                dataLabel,
	                dataLabelWidth,
	                labelPos,
	                labelHeight,
	                halves = [// divide the points into right and left halves for anti collision
	                    [], // right
	                    []  // left
	                ],
	                x,
	                y,
	                visibility,
	                rankArr,
	                i,
	                j,
	                overflow = [0, 0, 0, 0], // top, right, bottom, left
	                sort = function (a, b) {
	                    return b.y - a.y;
	                };
	
	            // get out if not enabled
	            if (!series.visible || (!options.enabled && !series._hasPointLabels)) {
	                return;
	            }
	
	            // run parent method
	            Series.prototype.drawDataLabels.apply(series);
	
	            each(data, function (point) {
	                if (point.dataLabel && point.visible) { // #407, #2510
	
	                    // Arrange points for detection collision
	                    halves[point.half].push(point);
	
	                    // Reset positions (#4905)
	                    point.dataLabel._pos = null;
	                }
	            });
	
	            /* Loop over the points in each half, starting from the top and bottom
	             * of the pie to detect overlapping labels.
	             */
	            i = 2;
	            while (i--) {
	
	                var slots = [],
	                    slotsLength,
	                    usedSlots = [],
	                    points = halves[i],
	                    pos,
	                    bottom,
	                    length = points.length,
	                    slotIndex;
	
	                if (!length) {
	                    continue;
	                }
	
	                // Sort by angle
	                series.sortByAngle(points, i - 0.5);
	
	                // Assume equal label heights on either hemisphere (#2630)
	                j = labelHeight = 0;
	                while (!labelHeight && points[j]) { // #1569
	                    labelHeight = points[j] && points[j].dataLabel && (points[j].dataLabel.getBBox().height || 21); // 21 is for #968
	                    j++;
	                }
	
	                // Only do anti-collision when we are outside the pie and have connectors (#856)
	                if (distanceOption > 0) {
	
	                    // Build the slots
	                    bottom = mathMin(centerY + radius + distanceOption, chart.plotHeight);
	                    for (pos = mathMax(0, centerY - radius - distanceOption); pos <= bottom; pos += labelHeight) {
	                        slots.push(pos);
	                    }
	                    slotsLength = slots.length;
	
	
	                    /* Visualize the slots
	                    if (!series.slotElements) {
	                        series.slotElements = [];
	                    }
	                    if (i === 1) {
	                        series.slotElements.forEach(function (elem) {
	                            elem.destroy();
	                        });
	                        series.slotElements.length = 0;
	                    }
	
	                    slots.forEach(function (pos, no) {
	                        var slotX = series.getX(pos, i) + chart.plotLeft - (i ? 100 : 0),
	                            slotY = pos + chart.plotTop;
	
	                        if (isNumber(slotX)) {
	                            series.slotElements.push(chart.renderer.rect(slotX, slotY - 7, 100, labelHeight, 1)
	                                .attr({
	                                    'stroke-width': 1,
	                                    stroke: 'silver',
	                                    fill: 'rgba(0,0,255,0.1)'
	                                })
	                                .add());
	                            series.slotElements.push(chart.renderer.text('Slot '+ no, slotX, slotY + 4)
	                                .attr({
	                                    fill: 'silver'
	                                }).add());
	                        }
	                    });
	                    // */
	
	                    // if there are more values than available slots, remove lowest values
	                    if (length > slotsLength) {
	                        // create an array for sorting and ranking the points within each quarter
	                        rankArr = [].concat(points);
	                        rankArr.sort(sort);
	                        j = length;
	                        while (j--) {
	                            rankArr[j].rank = j;
	                        }
	                        j = length;
	                        while (j--) {
	                            if (points[j].rank >= slotsLength) {
	                                points.splice(j, 1);
	                            }
	                        }
	                        length = points.length;
	                    }
	
	                    // The label goes to the nearest open slot, but not closer to the edge than
	                    // the label's index.
	                    for (j = 0; j < length; j++) {
	
	                        point = points[j];
	                        labelPos = point.labelPos;
	
	                        var closest = 9999,
	                            distance,
	                            slotI;
	
	                        // find the closest slot index
	                        for (slotI = 0; slotI < slotsLength; slotI++) {
	                            distance = mathAbs(slots[slotI] - labelPos[1]);
	                            if (distance < closest) {
	                                closest = distance;
	                                slotIndex = slotI;
	                            }
	                        }
	
	                        // if that slot index is closer to the edges of the slots, move it
	                        // to the closest appropriate slot
	                        if (slotIndex < j && slots[j] !== null) { // cluster at the top
	                            slotIndex = j;
	                        } else if (slotsLength  < length - j + slotIndex && slots[j] !== null) { // cluster at the bottom
	                            slotIndex = slotsLength - length + j;
	                            while (slots[slotIndex] === null) { // make sure it is not taken
	                                slotIndex++;
	                            }
	                        } else {
	                            // Slot is taken, find next free slot below. In the next run, the next slice will find the
	                            // slot above these, because it is the closest one
	                            while (slots[slotIndex] === null) { // make sure it is not taken
	                                slotIndex++;
	                            }
	                        }
	
	                        usedSlots.push({ i: slotIndex, y: slots[slotIndex] });
	                        slots[slotIndex] = null; // mark as taken
	                    }
	                    // sort them in order to fill in from the top
	                    usedSlots.sort(sort);
	                }
	
	                // now the used slots are sorted, fill them up sequentially
	                for (j = 0; j < length; j++) {
	
	                    var slot, naturalY;
	
	                    point = points[j];
	                    labelPos = point.labelPos;
	                    dataLabel = point.dataLabel;
	                    visibility = point.visible === false ? HIDDEN : 'inherit';
	                    naturalY = labelPos[1];
	
	                    if (distanceOption > 0) {
	                        slot = usedSlots.pop();
	                        slotIndex = slot.i;
	
	                        // if the slot next to currrent slot is free, the y value is allowed
	                        // to fall back to the natural position
	                        y = slot.y;
	                        if ((naturalY > y && slots[slotIndex + 1] !== null) ||
	                                (naturalY < y &&  slots[slotIndex - 1] !== null)) {
	                            y = mathMin(mathMax(0, naturalY), chart.plotHeight);
	                        }
	
	                    } else {
	                        y = naturalY;
	                    }
	
	                    // get the x - use the natural x position for first and last slot, to prevent the top
	                    // and botton slice connectors from touching each other on either side
	                    x = options.justify ?
	                        seriesCenter[0] + (i ? -1 : 1) * (radius + distanceOption) :
	                        series.getX(y === centerY - radius - distanceOption || y === centerY + radius + distanceOption ? naturalY : y, i);
	
	
	                    // Record the placement and visibility
	                    dataLabel._attr = {
	                        visibility: visibility,
	                        align: labelPos[6]
	                    };
	                    dataLabel._pos = {
	                        x: x + options.x +
	                            ({ left: connectorPadding, right: -connectorPadding }[labelPos[6]] || 0),
	                        y: y + options.y - 10 // 10 is for the baseline (label vs text)
	                    };
	                    dataLabel.connX = x;
	                    dataLabel.connY = y;
	
	
	                    // Detect overflowing data labels
	                    if (this.options.size === null) {
	                        dataLabelWidth = dataLabel.width;
	                        // Overflow left
	                        if (x - dataLabelWidth < connectorPadding) {
	                            overflow[3] = mathMax(mathRound(dataLabelWidth - x + connectorPadding), overflow[3]);
	
	                        // Overflow right
	                        } else if (x + dataLabelWidth > plotWidth - connectorPadding) {
	                            overflow[1] = mathMax(mathRound(x + dataLabelWidth - plotWidth + connectorPadding), overflow[1]);
	                        }
	
	                        // Overflow top
	                        if (y - labelHeight / 2 < 0) {
	                            overflow[0] = mathMax(mathRound(-y + labelHeight / 2), overflow[0]);
	
	                        // Overflow left
	                        } else if (y + labelHeight / 2 > plotHeight) {
	                            overflow[2] = mathMax(mathRound(y + labelHeight / 2 - plotHeight), overflow[2]);
	                        }
	                    }
	                } // for each point
	            } // for each half
	
	            // Do not apply the final placement and draw the connectors until we have verified
	            // that labels are not spilling over.
	            if (arrayMax(overflow) === 0 || this.verifyDataLabelOverflow(overflow)) {
	
	                // Place the labels in the final position
	                this.placeDataLabels();
	
	                // Draw the connectors
	                if (outside && connectorWidth) {
	                    each(this.points, function (point) {
	                        connector = point.connector;
	                        labelPos = point.labelPos;
	                        dataLabel = point.dataLabel;
	
	                        if (dataLabel && dataLabel._pos && point.visible) {
	                            visibility = dataLabel._attr.visibility;
	                            x = dataLabel.connX;
	                            y = dataLabel.connY;
	                            connectorPath = softConnector ? [
	                                M,
	                                x + (labelPos[6] === 'left' ? 5 : -5), y, // end of the string at the label
	                                'C',
	                                x, y, // first break, next to the label
	                                2 * labelPos[2] - labelPos[4], 2 * labelPos[3] - labelPos[5],
	                                labelPos[2], labelPos[3], // second break
	                                L,
	                                labelPos[4], labelPos[5] // base
	                            ] : [
	                                M,
	                                x + (labelPos[6] === 'left' ? 5 : -5), y, // end of the string at the label
	                                L,
	                                labelPos[2], labelPos[3], // second break
	                                L,
	                                labelPos[4], labelPos[5] // base
	                            ];
	
	                            if (connector) {
	                                connector.animate({ d: connectorPath });
	                                connector.attr('visibility', visibility);
	
	                            } else {
	                                point.connector = connector = series.chart.renderer.path(connectorPath).attr({
	                                    'stroke-width': connectorWidth,
	                                    stroke: options.connectorColor || point.color || '#606060',
	                                    visibility: visibility
	                                    //zIndex: 0 // #2722 (reversed)
	                                })
	                                .add(series.dataLabelsGroup);
	                            }
	                        } else if (connector) {
	                            point.connector = connector.destroy();
	                        }
	                    });
	                }
	            }
	        };
	        /**
	         * Perform the final placement of the data labels after we have verified that they
	         * fall within the plot area.
	         */
	        seriesTypes.pie.prototype.placeDataLabels = function () {
	            each(this.points, function (point) {
	                var dataLabel = point.dataLabel,
	                    _pos;
	
	                if (dataLabel && point.visible) {
	                    _pos = dataLabel._pos;
	                    if (_pos) {
	                        dataLabel.attr(dataLabel._attr);
	                        dataLabel[dataLabel.moved ? 'animate' : 'attr'](_pos);
	                        dataLabel.moved = true;
	                    } else if (dataLabel) {
	                        dataLabel.attr({ y: -9999 });
	                    }
	                }
	            });
	        };
	
	        seriesTypes.pie.prototype.alignDataLabel =  noop;
	
	        /**
	         * Verify whether the data labels are allowed to draw, or we should run more translation and data
	         * label positioning to keep them inside the plot area. Returns true when data labels are ready
	         * to draw.
	         */
	        seriesTypes.pie.prototype.verifyDataLabelOverflow = function (overflow) {
	
	            var center = this.center,
	                options = this.options,
	                centerOption = options.center,
	                minSize = options.minSize || 80,
	                newSize = minSize,
	                ret;
	
	            // Handle horizontal size and center
	            if (centerOption[0] !== null) { // Fixed center
	                newSize = mathMax(center[2] - mathMax(overflow[1], overflow[3]), minSize);
	
	            } else { // Auto center
	                newSize = mathMax(
	                    center[2] - overflow[1] - overflow[3], // horizontal overflow
	                    minSize
	                );
	                center[0] += (overflow[3] - overflow[1]) / 2; // horizontal center
	            }
	
	            // Handle vertical size and center
	            if (centerOption[1] !== null) { // Fixed center
	                newSize = mathMax(mathMin(newSize, center[2] - mathMax(overflow[0], overflow[2])), minSize);
	
	            } else { // Auto center
	                newSize = mathMax(
	                    mathMin(
	                        newSize,
	                        center[2] - overflow[0] - overflow[2] // vertical overflow
	                    ),
	                    minSize
	                );
	                center[1] += (overflow[0] - overflow[2]) / 2; // vertical center
	            }
	
	            // If the size must be decreased, we need to run translate and drawDataLabels again
	            if (newSize < center[2]) {
	                center[2] = newSize;
	                center[3] = Math.min(relativeLength(options.innerSize || 0, newSize), newSize); // #3632
	                this.translate(center);
	            
	                if (this.drawDataLabels) {
	                    this.drawDataLabels();
	                }
	            // Else, return true to indicate that the pie and its labels is within the plot area
	            } else {
	                ret = true;
	            }
	            return ret;
	        };
	    }
	
	    if (seriesTypes.column) {
	
	        /**
	         * Override the basic data label alignment by adjusting for the position of the column
	         */
	        seriesTypes.column.prototype.alignDataLabel = function (point, dataLabel, options,  alignTo, isNew) {
	            var inverted = this.chart.inverted,
	                series = point.series,
	                dlBox = point.dlBox || point.shapeArgs, // data label box for alignment
	                below = pick(point.below, point.plotY > pick(this.translatedThreshold, series.yAxis.len)), // point.below is used in range series
	                inside = pick(options.inside, !!this.options.stacking), // draw it inside the box?
	                overshoot;
	
	            // Align to the column itself, or the top of it
	            if (dlBox) { // Area range uses this method but not alignTo
	                alignTo = merge(dlBox);
	
	                if (alignTo.y < 0) {
	                    alignTo.height += alignTo.y;
	                    alignTo.y = 0;
	                }
	                overshoot = alignTo.y + alignTo.height - series.yAxis.len;
	                if (overshoot > 0) {
	                    alignTo.height -= overshoot;
	                }
	
	                if (inverted) {
	                    alignTo = {
	                        x: series.yAxis.len - alignTo.y - alignTo.height,
	                        y: series.xAxis.len - alignTo.x - alignTo.width,
	                        width: alignTo.height,
	                        height: alignTo.width
	                    };
	                }
	
	                // Compute the alignment box
	                if (!inside) {
	                    if (inverted) {
	                        alignTo.x += below ? 0 : alignTo.width;
	                        alignTo.width = 0;
	                    } else {
	                        alignTo.y += below ? alignTo.height : 0;
	                        alignTo.height = 0;
	                    }
	                }
	            }
	
	
	            // When alignment is undefined (typically columns and bars), display the individual
	            // point below or above the point depending on the threshold
	            options.align = pick(
	                options.align,
	                !inverted || inside ? 'center' : below ? 'right' : 'left'
	            );
	            options.verticalAlign = pick(
	                options.verticalAlign,
	                inverted || inside ? 'middle' : below ? 'top' : 'bottom'
	            );
	
	            // Call the parent method
	            Series.prototype.alignDataLabel.call(this, point, dataLabel, options, alignTo, isNew);
	        };
	    }
	
	
	
	    /**
	     * Highcharts module to hide overlapping data labels. This module is included in Highcharts.
	     */
	    (function (H) {
	        var Chart = H.Chart,
	            each = H.each,
	            pick = H.pick,
	            addEvent = H.addEvent;
	
	        // Collect potensial overlapping data labels. Stack labels probably don't need to be 
	        // considered because they are usually accompanied by data labels that lie inside the columns.
	        Chart.prototype.callbacks.push(function (chart) {
	            function collectAndHide() {
	                var labels = [];
	
	                each(chart.series, function (series) {
	                    var dlOptions = series.options.dataLabels,
	                        collections = series.dataLabelCollections || ['dataLabel']; // Range series have two collections
	                    if ((dlOptions.enabled || series._hasPointLabels) && !dlOptions.allowOverlap && series.visible) { // #3866
	                        each(collections, function (coll) {
	                            each(series.points, function (point) {
	                                if (point[coll]) {
	                                    point[coll].labelrank = pick(point.labelrank, point.shapeArgs && point.shapeArgs.height); // #4118
	                                    labels.push(point[coll]);
	                                }
	                            });
	                        });
	                    }
	                });
	                chart.hideOverlappingLabels(labels);
	            }
	
	            // Do it now ...
	            collectAndHide();
	
	            // ... and after each chart redraw
	            addEvent(chart, 'redraw', collectAndHide);
	
	        });
	
	        /**
	         * Hide overlapping labels. Labels are moved and faded in and out on zoom to provide a smooth 
	         * visual imression.
	         */    
	        Chart.prototype.hideOverlappingLabels = function (labels) {
	
	            var len = labels.length,
	                label,
	                i,
	                j,
	                label1,
	                label2,
	                isIntersecting,
	                pos1,
	                pos2,
	                parent1,
	                parent2,
	                padding,
	                intersectRect = function (x1, y1, w1, h1, x2, y2, w2, h2) {
	                    return !(
	                        x2 > x1 + w1 ||
	                        x2 + w2 < x1 ||
	                        y2 > y1 + h1 ||
	                        y2 + h2 < y1
	                    );
	                };
	    
	            // Mark with initial opacity
	            for (i = 0; i < len; i++) {
	                label = labels[i];
	                if (label) {
	                    label.oldOpacity = label.opacity;
	                    label.newOpacity = 1;
	                }
	            }
	
	            // Prevent a situation in a gradually rising slope, that each label
	            // will hide the previous one because the previous one always has
	            // lower rank.
	            labels.sort(function (a, b) {
	                return (b.labelrank || 0) - (a.labelrank || 0);
	            });
	
	            // Detect overlapping labels
	            for (i = 0; i < len; i++) {
	                label1 = labels[i];
	
	                for (j = i + 1; j < len; ++j) {
	                    label2 = labels[j];
	                    if (label1 && label2 && label1.placed && label2.placed && label1.newOpacity !== 0 && label2.newOpacity !== 0) {
	                        pos1 = label1.alignAttr;
	                        pos2 = label2.alignAttr;
	                        parent1 = label1.parentGroup; // Different panes have different positions
	                        parent2 = label2.parentGroup;
	                        padding = 2 * (label1.box ? 0 : label1.padding); // Substract the padding if no background or border (#4333)
	                        isIntersecting = intersectRect(
	                            pos1.x + parent1.translateX,
	                            pos1.y + parent1.translateY,
	                            label1.width - padding,
	                            label1.height - padding,
	                            pos2.x + parent2.translateX,
	                            pos2.y + parent2.translateY,
	                            label2.width - padding,
	                            label2.height - padding
	                        );
	
	                        if (isIntersecting) {
	                            (label1.labelrank < label2.labelrank ? label1 : label2).newOpacity = 0;
	                        }
	                    }
	                }
	            }
	
	            // Hide or show
	            each(labels, function (label) {
	                var complete,
	                    newOpacity;
	
	                if (label) {
	                    newOpacity = label.newOpacity;
	
	                    if (label.oldOpacity !== newOpacity && label.placed) {
	
	                        // Make sure the label is completely hidden to avoid catching clicks (#4362)
	                        if (newOpacity) {
	                            label.show(true);
	                        } else {
	                            complete = function () {
	                                label.hide();
	                            };
	                        }
	
	                        // Animate or set the opacity                
	                        label.alignAttr.opacity = newOpacity;
	                        label[label.isOld ? 'animate' : 'attr'](label.alignAttr, null, complete);
	                    
	                    }
	                    label.isOld = true;
	                }
	            });
	        };
	    }(Highcharts));
	    /**
	     * TrackerMixin for points and graphs
	     */
	
	    var TrackerMixin = Highcharts.TrackerMixin = {
	
	        drawTrackerPoint: function () {
	            var series = this,
	                chart = series.chart,
	                pointer = chart.pointer,
	                cursor = series.options.cursor,
	                css = cursor && { cursor: cursor },
	                onMouseOver = function (e) {
	                    var target = e.target,
	                        point;
	
	                    while (target && !point) {
	                        point = target.point;
	                        target = target.parentNode;
	                    }
	
	                    if (point !== UNDEFINED && point !== chart.hoverPoint) { // undefined on graph in scatterchart
	                        point.onMouseOver(e);
	                    }
	                };
	
	            // Add reference to the point
	            each(series.points, function (point) {
	                if (point.graphic) {
	                    point.graphic.element.point = point;
	                }
	                if (point.dataLabel) {
	                    point.dataLabel.element.point = point;
	                }
	            });
	
	            // Add the event listeners, we need to do this only once
	            if (!series._hasTracking) {
	                each(series.trackerGroups, function (key) {
	                    if (series[key]) { // we don't always have dataLabelsGroup
	                        series[key]
	                            .addClass(PREFIX + 'tracker')
	                            .on('mouseover', onMouseOver)
	                            .on('mouseout', function (e) {
	                                pointer.onTrackerMouseOut(e);
	                            })
	                            .css(css);
	                        if (hasTouch) {
	                            series[key].on('touchstart', onMouseOver);
	                        }
	                    }
	                });
	                series._hasTracking = true;
	            }
	        },
	
	        /**
	         * Draw the tracker object that sits above all data labels and markers to
	         * track mouse events on the graph or points. For the line type charts
	         * the tracker uses the same graphPath, but with a greater stroke width
	         * for better control.
	         */
	        drawTrackerGraph: function () {
	            var series = this,
	                options = series.options,
	                trackByArea = options.trackByArea,
	                trackerPath = [].concat(trackByArea ? series.areaPath : series.graphPath),
	                trackerPathLength = trackerPath.length,
	                chart = series.chart,
	                pointer = chart.pointer,
	                renderer = chart.renderer,
	                snap = chart.options.tooltip.snap,
	                tracker = series.tracker,
	                cursor = options.cursor,
	                css = cursor && { cursor: cursor },
	                i,
	                onMouseOver = function () {
	                    if (chart.hoverSeries !== series) {
	                        series.onMouseOver();
	                    }
	                },
	                /*
	                 * Empirical lowest possible opacities for TRACKER_FILL for an element to stay invisible but clickable
	                 * IE6: 0.002
	                 * IE7: 0.002
	                 * IE8: 0.002
	                 * IE9: 0.00000000001 (unlimited)
	                 * IE10: 0.0001 (exporting only)
	                 * FF: 0.00000000001 (unlimited)
	                 * Chrome: 0.000001
	                 * Safari: 0.000001
	                 * Opera: 0.00000000001 (unlimited)
	                 */
	                TRACKER_FILL = 'rgba(192,192,192,' + (hasSVG ? 0.0001 : 0.002) + ')';
	
	            // Extend end points. A better way would be to use round linecaps,
	            // but those are not clickable in VML.
	            if (trackerPathLength && !trackByArea) {
	                i = trackerPathLength + 1;
	                while (i--) {
	                    if (trackerPath[i] === M) { // extend left side
	                        trackerPath.splice(i + 1, 0, trackerPath[i + 1] - snap, trackerPath[i + 2], L);
	                    }
	                    if ((i && trackerPath[i] === M) || i === trackerPathLength) { // extend right side
	                        trackerPath.splice(i, 0, L, trackerPath[i - 2] + snap, trackerPath[i - 1]);
	                    }
	                }
	            }
	
	            // handle single points
	            /*for (i = 0; i < singlePoints.length; i++) {
	                singlePoint = singlePoints[i];
	                trackerPath.push(M, singlePoint.plotX - snap, singlePoint.plotY,
	                L, singlePoint.plotX + snap, singlePoint.plotY);
	            }*/
	
	            // draw the tracker
	            if (tracker) {
	                tracker.attr({ d: trackerPath });
	            } else { // create
	
	                series.tracker = renderer.path(trackerPath)
	                .attr({
	                    'stroke-linejoin': 'round', // #1225
	                    visibility: series.visible ? VISIBLE : HIDDEN,
	                    stroke: TRACKER_FILL,
	                    fill: trackByArea ? TRACKER_FILL : NONE,
	                    'stroke-width': options.lineWidth + (trackByArea ? 0 : 2 * snap),
	                    zIndex: 2
	                })
	                .add(series.group);
	
	                // The tracker is added to the series group, which is clipped, but is covered
	                // by the marker group. So the marker group also needs to capture events.
	                each([series.tracker, series.markerGroup], function (tracker) {
	                    tracker.addClass(PREFIX + 'tracker')
	                        .on('mouseover', onMouseOver)
	                        .on('mouseout', function (e) {
	                            pointer.onTrackerMouseOut(e);
	                        })
	                        .css(css);
	
	                    if (hasTouch) {
	                        tracker.on('touchstart', onMouseOver);
	                    }
	                });
	            }
	        }
	    };
	    /* End TrackerMixin */
	
	
	    /**
	     * Add tracking event listener to the series group, so the point graphics
	     * themselves act as trackers
	     */
	
	    if (seriesTypes.column) {
	        ColumnSeries.prototype.drawTracker = TrackerMixin.drawTrackerPoint;
	    }
	
	    if (seriesTypes.pie) {
	        seriesTypes.pie.prototype.drawTracker = TrackerMixin.drawTrackerPoint;
	    }
	
	    if (seriesTypes.scatter) {
	        ScatterSeries.prototype.drawTracker = TrackerMixin.drawTrackerPoint;
	    }
	
	    /*
	     * Extend Legend for item events
	     */
	    extend(Legend.prototype, {
	
	        setItemEvents: function (item, legendItem, useHTML, itemStyle, itemHiddenStyle) {
	            var legend = this;
	            // Set the events on the item group, or in case of useHTML, the item itself (#1249)
	            (useHTML ? legendItem : item.legendGroup).on('mouseover', function () {
	                item.setState(HOVER_STATE);
	                legendItem.css(legend.options.itemHoverStyle);
	            })
	            .on('mouseout', function () {
	                legendItem.css(item.visible ? itemStyle : itemHiddenStyle);
	                item.setState();
	            })
	            .on('click', function (event) {
	                var strLegendItemClick = 'legendItemClick',
	                    fnLegendItemClick = function () {
	                        if (item.setVisible) {
	                            item.setVisible();
	                        }
	                    };
	
	                // Pass over the click/touch event. #4.
	                event = {
	                    browserEvent: event
	                };
	
	                // click the name or symbol
	                if (item.firePointEvent) { // point
	                    item.firePointEvent(strLegendItemClick, event, fnLegendItemClick);
	                } else {
	                    fireEvent(item, strLegendItemClick, event, fnLegendItemClick);
	                }
	            });
	        },
	
	        createCheckboxForItem: function (item) {
	            var legend = this;
	
	            item.checkbox = createElement('input', {
	                type: 'checkbox',
	                checked: item.selected,
	                defaultChecked: item.selected // required by IE7
	            }, legend.options.itemCheckboxStyle, legend.chart.container);
	
	            addEvent(item.checkbox, 'click', function (event) {
	                var target = event.target;
	                fireEvent(
	                    item.series || item, 
	                    'checkboxClick', 
	                    { // #3712
	                        checked: target.checked,
	                        item: item
	                    },
	                    function () {
	                        item.select();
	                    }
	                );
	            });
	        }
	    });
	
	    /*
	     * Add pointer cursor to legend itemstyle in defaultOptions
	     */
	    defaultOptions.legend.itemStyle.cursor = 'pointer';
	
	
	    /*
	     * Extend the Chart object with interaction
	     */
	
	    extend(Chart.prototype, {
	        /**
	         * Display the zoom button
	         */
	        showResetZoom: function () {
	            var chart = this,
	                lang = defaultOptions.lang,
	                btnOptions = chart.options.chart.resetZoomButton,
	                theme = btnOptions.theme,
	                states = theme.states,
	                alignTo = btnOptions.relativeTo === 'chart' ? null : 'plotBox';
	
	            function zoomOut() {
	                chart.zoomOut();
	            }
	
	            this.resetZoomButton = chart.renderer.button(lang.resetZoom, null, null, zoomOut, theme, states && states.hover)
	                .attr({
	                    align: btnOptions.position.align,
	                    title: lang.resetZoomTitle
	                })
	                .add()
	                .align(btnOptions.position, false, alignTo);
	
	        },
	
	        /**
	         * Zoom out to 1:1
	         */
	        zoomOut: function () {
	            var chart = this;
	            fireEvent(chart, 'selection', { resetSelection: true }, function () {
	                chart.zoom();
	            });
	        },
	
	        /**
	         * Zoom into a given portion of the chart given by axis coordinates
	         * @param {Object} event
	         */
	        zoom: function (event) {
	            var chart = this,
	                hasZoomed,
	                pointer = chart.pointer,
	                displayButton = false,
	                resetZoomButton;
	
	            // If zoom is called with no arguments, reset the axes
	            if (!event || event.resetSelection) {
	                each(chart.axes, function (axis) {
	                    hasZoomed = axis.zoom();
	                });
	            } else { // else, zoom in on all axes
	                each(event.xAxis.concat(event.yAxis), function (axisData) {
	                    var axis = axisData.axis,
	                        isXAxis = axis.isXAxis;
	
	                    // don't zoom more than minRange
	                    if (pointer[isXAxis ? 'zoomX' : 'zoomY'] || pointer[isXAxis ? 'pinchX' : 'pinchY']) {
	                        hasZoomed = axis.zoom(axisData.min, axisData.max);
	                        if (axis.displayBtn) {
	                            displayButton = true;
	                        }
	                    }
	                });
	            }
	
	            // Show or hide the Reset zoom button
	            resetZoomButton = chart.resetZoomButton;
	            if (displayButton && !resetZoomButton) {
	                chart.showResetZoom();
	            } else if (!displayButton && isObject(resetZoomButton)) {
	                chart.resetZoomButton = resetZoomButton.destroy();
	            }
	
	
	            // Redraw
	            if (hasZoomed) {
	                chart.redraw(
	                    pick(chart.options.chart.animation, event && event.animation, chart.pointCount < 100) // animation
	                );
	            }
	        },
	
	        /**
	         * Pan the chart by dragging the mouse across the pane. This function is called
	         * on mouse move, and the distance to pan is computed from chartX compared to
	         * the first chartX position in the dragging operation.
	         */
	        pan: function (e, panning) {
	
	            var chart = this,
	                hoverPoints = chart.hoverPoints,
	                doRedraw;
	
	            // remove active points for shared tooltip
	            if (hoverPoints) {
	                each(hoverPoints, function (point) {
	                    point.setState();
	                });
	            }
	
	            each(panning === 'xy' ? [1, 0] : [1], function (isX) { // xy is used in maps
	                var axis = chart[isX ? 'xAxis' : 'yAxis'][0],
	                    horiz = axis.horiz,
	                    mousePos = e[horiz ? 'chartX' : 'chartY'],
	                    mouseDown = horiz ? 'mouseDownX' : 'mouseDownY',
	                    startPos = chart[mouseDown],
	                    halfPointRange = (axis.pointRange || 0) / 2,
	                    extremes = axis.getExtremes(),
	                    newMin = axis.toValue(startPos - mousePos, true) + halfPointRange,
	                    newMax = axis.toValue(startPos + axis.len - mousePos, true) - halfPointRange,
	                    goingLeft = startPos > mousePos; // #3613
	            
	                if (axis.series.length &&
	                        (goingLeft || newMin > mathMin(extremes.dataMin, extremes.min)) &&    
	                        (!goingLeft || newMax < mathMax(extremes.dataMax, extremes.max))) {
	                    axis.setExtremes(newMin, newMax, false, false, { trigger: 'pan' });
	                    doRedraw = true;
	                }
	
	                chart[mouseDown] = mousePos; // set new reference for next run
	            });
	
	            if (doRedraw) {
	                chart.redraw(false);
	            }
	            css(chart.container, { cursor: 'move' });
	        }
	    });
	
	    /*
	     * Extend the Point object with interaction
	     */
	    extend(Point.prototype, {
	        /**
	         * Toggle the selection status of a point
	         * @param {Boolean} selected Whether to select or unselect the point.
	         * @param {Boolean} accumulate Whether to add to the previous selection. By default,
	         *         this happens if the control key (Cmd on Mac) was pressed during clicking.
	         */
	        select: function (selected, accumulate) {
	            var point = this,
	                series = point.series,
	                chart = series.chart;
	
	            selected = pick(selected, !point.selected);
	
	            // fire the event with the default handler
	            point.firePointEvent(selected ? 'select' : 'unselect', { accumulate: accumulate }, function () {
	                point.selected = point.options.selected = selected;
	                series.options.data[inArray(point, series.data)] = point.options;
	
	                point.setState(selected && SELECT_STATE);
	
	                // unselect all other points unless Ctrl or Cmd + click
	                if (!accumulate) {
	                    each(chart.getSelectedPoints(), function (loopPoint) {
	                        if (loopPoint.selected && loopPoint !== point) {
	                            loopPoint.selected = loopPoint.options.selected = false;
	                            series.options.data[inArray(loopPoint, series.data)] = loopPoint.options;
	                            loopPoint.setState(NORMAL_STATE);
	                            loopPoint.firePointEvent('unselect');
	                        }
	                    });
	                }
	            });
	        },
	
	        /**
	         * Runs on mouse over the point
	         *
	         * @param {Object} e The event arguments
	         * @param {Boolean} byProximity Falsy for kd points that are closest to the mouse, or to
	         *        actually hovered points. True for other points in shared tooltip.
	         */
	        onMouseOver: function (e, byProximity) {
	            var point = this,
	                series = point.series,
	                chart = series.chart,
	                tooltip = chart.tooltip,
	                hoverPoint = chart.hoverPoint;
	
	            if (chart.hoverSeries !== series) {
	                series.onMouseOver();
	            }
	
	            // set normal state to previous series
	            if (hoverPoint && hoverPoint !== point) {
	                hoverPoint.onMouseOut();
	            }
	
	            if (point.series) { // It may have been destroyed, #4130
	
	                // trigger the event
	                point.firePointEvent('mouseOver');
	
	                // update the tooltip
	                if (tooltip && (!tooltip.shared || series.noSharedTooltip)) {
	                    tooltip.refresh(point, e);
	                }
	
	                // hover this
	                point.setState(HOVER_STATE);
	                if (!byProximity) {
	                    chart.hoverPoint = point;
	                }
	            }
	        },
	
	        /**
	         * Runs on mouse out from the point
	         */
	        onMouseOut: function () {
	            var chart = this.series.chart,
	                hoverPoints = chart.hoverPoints;
	
	            this.firePointEvent('mouseOut');
	
	            if (!hoverPoints || inArray(this, hoverPoints) === -1) { // #887, #2240
	                this.setState();
	                chart.hoverPoint = null;
	            }
	        },
	
	        /**
	         * Import events from the series' and point's options. Only do it on
	         * demand, to save processing time on hovering.
	         */
	        importEvents: function () {
	            if (!this.hasImportedEvents) {
	                var point = this,
	                    options = merge(point.series.options.point, point.options),
	                    events = options.events,
	                    eventType;
	
	                point.events = events;
	
	                for (eventType in events) {
	                    addEvent(point, eventType, events[eventType]);
	                }
	                this.hasImportedEvents = true;
	
	            }
	        },
	
	        /**
	         * Set the point's state
	         * @param {String} state
	         */
	        setState: function (state, move) {
	            var point = this,
	                plotX = mathFloor(point.plotX), // #4586
	                plotY = point.plotY,
	                series = point.series,
	                stateOptions = series.options.states,
	                markerOptions = defaultPlotOptions[series.type].marker && series.options.marker,
	                normalDisabled = markerOptions && !markerOptions.enabled,
	                markerStateOptions = markerOptions && markerOptions.states[state],
	                stateDisabled = markerStateOptions && markerStateOptions.enabled === false,
	                stateMarkerGraphic = series.stateMarkerGraphic,
	                pointMarker = point.marker || {},
	                chart = series.chart,
	                radius,
	                halo = series.halo,
	                haloOptions,
	                newSymbol,
	                pointAttr;
	
	            state = state || NORMAL_STATE; // empty string
	            pointAttr = point.pointAttr[state] || series.pointAttr[state];
	
	            if (
	                    // already has this state
	                    (state === point.state && !move) ||
	                    // selected points don't respond to hover
	                    (point.selected && state !== SELECT_STATE) ||
	                    // series' state options is disabled
	                    (stateOptions[state] && stateOptions[state].enabled === false) ||
	                    // general point marker's state options is disabled
	                    (state && (stateDisabled || (normalDisabled && markerStateOptions.enabled === false))) ||
	                    // individual point marker's state options is disabled
	                    (state && pointMarker.states && pointMarker.states[state] && pointMarker.states[state].enabled === false) // #1610
	
	                ) {
	                return;
	            }
	
	            // apply hover styles to the existing point
	            if (point.graphic) {
	                radius = markerOptions && point.graphic.symbolName && pointAttr.r;
	                point.graphic.attr(merge(
	                    pointAttr,
	                    radius ? { // new symbol attributes (#507, #612)
	                        x: plotX - radius,
	                        y: plotY - radius,
	                        width: 2 * radius,
	                        height: 2 * radius
	                    } : {}
	                ));
	
	                // Zooming in from a range with no markers to a range with markers
	                if (stateMarkerGraphic) {
	                    stateMarkerGraphic.hide();
	                }
	            } else {
	                // if a graphic is not applied to each point in the normal state, create a shared
	                // graphic for the hover state
	                if (state && markerStateOptions) {
	                    radius = markerStateOptions.radius;
	                    newSymbol = pointMarker.symbol || series.symbol;
	
	                    // If the point has another symbol than the previous one, throw away the
	                    // state marker graphic and force a new one (#1459)
	                    if (stateMarkerGraphic && stateMarkerGraphic.currentSymbol !== newSymbol) {
	                        stateMarkerGraphic = stateMarkerGraphic.destroy();
	                    }
	
	                    // Add a new state marker graphic
	                    if (!stateMarkerGraphic) {
	                        if (newSymbol) {
	                            series.stateMarkerGraphic = stateMarkerGraphic = chart.renderer.symbol(
	                                newSymbol,
	                                plotX - radius,
	                                plotY - radius,
	                                2 * radius,
	                                2 * radius
	                            )
	                            .attr(pointAttr)
	                            .add(series.markerGroup);
	                            stateMarkerGraphic.currentSymbol = newSymbol;
	                        }
	
	                    // Move the existing graphic
	                    } else {
	                        stateMarkerGraphic[move ? 'animate' : 'attr']({ // #1054
	                            x: plotX - radius,
	                            y: plotY - radius
	                        });
	                    }
	                }
	
	                if (stateMarkerGraphic) {
	                    stateMarkerGraphic[state && chart.isInsidePlot(plotX, plotY, chart.inverted) ? 'show' : 'hide'](); // #2450
	                    stateMarkerGraphic.element.point = point; // #4310
	                }
	            }
	
	            // Show me your halo
	            haloOptions = stateOptions[state] && stateOptions[state].halo;
	            if (haloOptions && haloOptions.size) {
	                if (!halo) {
	                    series.halo = halo = chart.renderer.path()
	                        .add(chart.seriesGroup);
	                }
	                halo.attr(extend({
	                    'fill': point.color || series.color,
	                    'fill-opacity': haloOptions.opacity,
	                    'zIndex': -1 // #4929, IE8 added halo above everything
	                },
	                haloOptions.attributes))[move ? 'animate' : 'attr']({
	                    d: point.haloPath(haloOptions.size)
	                });
	            } else if (halo) {
	                halo.attr({ d: [] });
	            }
	
	            point.state = state;
	        },
	
	        /**
	         * Get the circular path definition for the halo
	         * @param  {Number} size The radius of the circular halo
	         * @returns {Array} The path definition
	         */
	        haloPath: function (size) {
	            var series = this.series,
	                chart = series.chart,
	                plotBox = series.getPlotBox(),
	                inverted = chart.inverted,
	                plotX = Math.floor(this.plotX);
	
	            return chart.renderer.symbols.circle(
	                plotBox.translateX + (inverted ? series.yAxis.len - this.plotY : plotX) - size, 
	                plotBox.translateY + (inverted ? series.xAxis.len - plotX : this.plotY) - size, 
	                size * 2, 
	                size * 2
	            );
	        }
	    });
	
	    /*
	     * Extend the Series object with interaction
	     */
	
	    extend(Series.prototype, {
	        /**
	         * Series mouse over handler
	         */
	        onMouseOver: function () {
	            var series = this,
	                chart = series.chart,
	                hoverSeries = chart.hoverSeries;
	
	            // set normal state to previous series
	            if (hoverSeries && hoverSeries !== series) {
	                hoverSeries.onMouseOut();
	            }
	
	            // trigger the event, but to save processing time,
	            // only if defined
	            if (series.options.events.mouseOver) {
	                fireEvent(series, 'mouseOver');
	            }
	
	            // hover this
	            series.setState(HOVER_STATE);
	            chart.hoverSeries = series;
	        },
	
	        /**
	         * Series mouse out handler
	         */
	        onMouseOut: function () {
	            // trigger the event only if listeners exist
	            var series = this,
	                options = series.options,
	                chart = series.chart,
	                tooltip = chart.tooltip,
	                hoverPoint = chart.hoverPoint;
	
	            chart.hoverSeries = null; // #182, set to null before the mouseOut event fires
	
	            // trigger mouse out on the point, which must be in this series
	            if (hoverPoint) {
	                hoverPoint.onMouseOut();
	            }
	
	            // fire the mouse out event
	            if (series && options.events.mouseOut) {
	                fireEvent(series, 'mouseOut');
	            }
	
	
	            // hide the tooltip
	            if (tooltip && !options.stickyTracking && (!tooltip.shared || series.noSharedTooltip)) {
	                tooltip.hide();
	            }
	
	            // set normal state
	            series.setState();
	        },
	
	        /**
	         * Set the state of the graph
	         */
	        setState: function (state) {
	            var series = this,
	                options = series.options,
	                graph = series.graph,
	                stateOptions = options.states,
	                lineWidth = options.lineWidth,
	                attribs,
	                i = 0;
	
	            state = state || NORMAL_STATE;
	
	            if (series.state !== state) {
	                series.state = state;
	
	                if (stateOptions[state] && stateOptions[state].enabled === false) {
	                    return;
	                }
	
	                if (state) {
	                    lineWidth = stateOptions[state].lineWidth || lineWidth + (stateOptions[state].lineWidthPlus || 0); // #4035
	                }
	
	                if (graph && !graph.dashstyle) { // hover is turned off for dashed lines in VML
	                    attribs = {
	                        'stroke-width': lineWidth
	                    };
	                    // use attr because animate will cause any other animation on the graph to stop
	                    graph.attr(attribs);
	                    while (series['zoneGraph' + i]) {
	                        series['zoneGraph' + i].attr(attribs);
	                        i = i + 1;
	                    }
	                }
	            }
	        },
	
	        /**
	         * Set the visibility of the graph
	         *
	         * @param vis {Boolean} True to show the series, false to hide. If UNDEFINED,
	         *                the visibility is toggled.
	         */
	        setVisible: function (vis, redraw) {
	            var series = this,
	                chart = series.chart,
	                legendItem = series.legendItem,
	                showOrHide,
	                ignoreHiddenSeries = chart.options.chart.ignoreHiddenSeries,
	                oldVisibility = series.visible;
	
	            // if called without an argument, toggle visibility
	            series.visible = vis = series.options.visible = series.userOptions.visible = vis === undefined ? !oldVisibility : vis; // #5618
	            showOrHide = vis ? 'show' : 'hide';
	
	            // show or hide elements
	            each(['group', 'dataLabelsGroup', 'markerGroup', 'tracker'], function (key) {
	                if (series[key]) {
	                    series[key][showOrHide]();
	                }
	            });
	
	
	            // hide tooltip (#1361)
	            if (chart.hoverSeries === series || (chart.hoverPoint && chart.hoverPoint.series) === series) {
	                series.onMouseOut();
	            }
	
	
	            if (legendItem) {
	                chart.legend.colorizeItem(series, vis);
	            }
	
	
	            // rescale or adapt to resized chart
	            series.isDirty = true;
	            // in a stack, all other series are affected
	            if (series.options.stacking) {
	                each(chart.series, function (otherSeries) {
	                    if (otherSeries.options.stacking && otherSeries.visible) {
	                        otherSeries.isDirty = true;
	                    }
	                });
	            }
	
	            // show or hide linked series
	            each(series.linkedSeries, function (otherSeries) {
	                otherSeries.setVisible(vis, false);
	            });
	
	            if (ignoreHiddenSeries) {
	                chart.isDirtyBox = true;
	            }
	            if (redraw !== false) {
	                chart.redraw();
	            }
	
	            fireEvent(series, showOrHide);
	        },
	
	        /**
	         * Show the graph
	         */
	        show: function () {
	            this.setVisible(true);
	        },
	
	        /**
	         * Hide the graph
	         */
	        hide: function () {
	            this.setVisible(false);
	        },
	
	
	        /**
	         * Set the selected state of the graph
	         *
	         * @param selected {Boolean} True to select the series, false to unselect. If
	         *                UNDEFINED, the selection state is toggled.
	         */
	        select: function (selected) {
	            var series = this;
	            // if called without an argument, toggle
	            series.selected = selected = (selected === UNDEFINED) ? !series.selected : selected;
	
	            if (series.checkbox) {
	                series.checkbox.checked = selected;
	            }
	
	            fireEvent(series, selected ? 'select' : 'unselect');
	        },
	
	        drawTracker: TrackerMixin.drawTrackerGraph
	    });
	
	    // global variables
	    extend(Highcharts, {
	
	        // Constructors
	        Color: Color,
	        Point: Point,
	        Tick: Tick,
	        Renderer: Renderer,
	        SVGElement: SVGElement,
	        SVGRenderer: SVGRenderer,
	
	        // Various
	        arrayMin: arrayMin,
	        arrayMax: arrayMax,
	        charts: charts,
	        correctFloat: correctFloat,
	        dateFormat: dateFormat,
	        error: error,
	        format: format,
	        pathAnim: pathAnim,
	        getOptions: getOptions,
	        hasBidiBug: hasBidiBug,
	        isTouchDevice: isTouchDevice,
	        setOptions: setOptions,
	        addEvent: addEvent,
	        removeEvent: removeEvent,
	        createElement: createElement,
	        discardElement: discardElement,
	        css: css,
	        each: each,
	        map: map,
	        merge: merge,
	        splat: splat,
	        stableSort: stableSort,
	        extendClass: extendClass,
	        pInt: pInt,
	        svg: hasSVG,
	        canvas: useCanVG,
	        vml: !hasSVG && !useCanVG,
	        product: PRODUCT,
	        version: VERSION
	    });
	    
	    return Highcharts;
	}));


/***/ },

/***/ 3583:
/*!*********************************************************!*\
  !*** ./atlas_bundles/heatmap/~/highcharts-more/more.js ***!
  \*********************************************************/
/***/ function(module, exports) {

	/*
	 Highcharts JS v4.2.3 (2016-02-08)
	
	 (c) 2009-2016 Torstein Honsi
	
	 License: www.highcharts.com/license
	*/
	(function(m){typeof module==="object"&&module.exports?module.exports=m:m(Highcharts)})(function(m){function J(a,b,c){this.init(a,b,c)}var O=m.arrayMin,P=m.arrayMax,s=m.each,F=m.extend,t=m.merge,Q=m.map,q=m.pick,A=m.pInt,o=m.getOptions().plotOptions,k=m.seriesTypes,u=m.extendClass,K=m.splat,v=m.wrap,L=m.Axis,y=m.Tick,G=m.Point,R=m.Pointer,S=m.CenteredSeriesMixin,B=m.TrackerMixin,w=m.Series,x=Math,E=x.round,C=x.floor,M=x.max,T=m.Color,r=function(){};F(J.prototype,{init:function(a,b,c){var d=this,g=
	d.defaultOptions;d.chart=b;d.options=a=t(g,b.angular?{background:{}}:void 0,a);(a=a.background)&&s([].concat(K(a)).reverse(),function(a){var g=a.backgroundColor,b=c.userOptions,a=t(d.defaultBackgroundOptions,a);if(g)a.backgroundColor=g;a.color=a.backgroundColor;c.options.plotBands.unshift(a);b.plotBands=b.plotBands||[];b.plotBands!==c.options.plotBands&&b.plotBands.unshift(a)})},defaultOptions:{center:["50%","50%"],size:"85%",startAngle:0},defaultBackgroundOptions:{shape:"circle",borderWidth:1,borderColor:"silver",
	backgroundColor:{linearGradient:{x1:0,y1:0,x2:0,y2:1},stops:[[0,"#FFF"],[1,"#DDD"]]},from:-Number.MAX_VALUE,innerRadius:0,to:Number.MAX_VALUE,outerRadius:"105%"}});var z=L.prototype,y=y.prototype,U={getOffset:r,redraw:function(){this.isDirty=!1},render:function(){this.isDirty=!1},setScale:r,setCategories:r,setTitle:r},N={isRadial:!0,defaultRadialGaugeOptions:{labels:{align:"center",x:0,y:null},minorGridLineWidth:0,minorTickInterval:"auto",minorTickLength:10,minorTickPosition:"inside",minorTickWidth:1,
	tickLength:10,tickPosition:"inside",tickWidth:2,title:{rotation:0},zIndex:2},defaultRadialXOptions:{gridLineWidth:1,labels:{align:null,distance:15,x:0,y:null},maxPadding:0,minPadding:0,showLastLabel:!1,tickLength:0},defaultRadialYOptions:{gridLineInterpolation:"circle",labels:{align:"right",x:-3,y:-2},showLastLabel:!1,title:{x:4,text:null,rotation:90}},setOptions:function(a){a=this.options=t(this.defaultOptions,this.defaultRadialOptions,a);if(!a.plotBands)a.plotBands=[]},getOffset:function(){z.getOffset.call(this);
	this.chart.axisOffset[this.side]=0;this.center=this.pane.center=S.getCenter.call(this.pane)},getLinePath:function(a,b){var c=this.center,b=q(b,c[2]/2-this.offset);return this.chart.renderer.symbols.arc(this.left+c[0],this.top+c[1],b,b,{start:this.startAngleRad,end:this.endAngleRad,open:!0,innerR:0})},setAxisTranslation:function(){z.setAxisTranslation.call(this);if(this.center)this.transA=this.isCircular?(this.endAngleRad-this.startAngleRad)/(this.max-this.min||1):this.center[2]/2/(this.max-this.min||
	1),this.minPixelPadding=this.isXAxis?this.transA*this.minPointOffset:0},beforeSetTickPositions:function(){this.autoConnect&&(this.max+=this.categories&&1||this.pointRange||this.closestPointRange||0)},setAxisSize:function(){z.setAxisSize.call(this);if(this.isRadial){this.center=this.pane.center=m.CenteredSeriesMixin.getCenter.call(this.pane);if(this.isCircular)this.sector=this.endAngleRad-this.startAngleRad;this.len=this.width=this.height=this.center[2]*q(this.sector,1)/2}},getPosition:function(a,
	b){return this.postTranslate(this.isCircular?this.translate(a):0,q(this.isCircular?b:this.translate(a),this.center[2]/2)-this.offset)},postTranslate:function(a,b){var c=this.chart,d=this.center,a=this.startAngleRad+a;return{x:c.plotLeft+d[0]+Math.cos(a)*b,y:c.plotTop+d[1]+Math.sin(a)*b}},getPlotBandPath:function(a,b,c){var d=this.center,g=this.startAngleRad,e=d[2]/2,j=[q(c.outerRadius,"100%"),c.innerRadius,q(c.thickness,10)],l=/%$/,i,f=this.isCircular;this.options.gridLineInterpolation==="polygon"?
	d=this.getPlotLinePath(a).concat(this.getPlotLinePath(b,!0)):(a=Math.max(a,this.min),b=Math.min(b,this.max),f||(j[0]=this.translate(a),j[1]=this.translate(b)),j=Q(j,function(a){l.test(a)&&(a=A(a,10)*e/100);return a}),c.shape==="circle"||!f?(a=-Math.PI/2,b=Math.PI*1.5,i=!0):(a=g+this.translate(a),b=g+this.translate(b)),d=this.chart.renderer.symbols.arc(this.left+d[0],this.top+d[1],j[0],j[0],{start:Math.min(a,b),end:Math.max(a,b),innerR:q(j[1],j[0]-j[2]),open:i}));return d},getPlotLinePath:function(a,
	b){var c=this,d=c.center,g=c.chart,e=c.getPosition(a),j,l,i;c.isCircular?i=["M",d[0]+g.plotLeft,d[1]+g.plotTop,"L",e.x,e.y]:c.options.gridLineInterpolation==="circle"?(a=c.translate(a))&&(i=c.getLinePath(0,a)):(s(g.xAxis,function(a){a.pane===c.pane&&(j=a)}),i=[],a=c.translate(a),d=j.tickPositions,j.autoConnect&&(d=d.concat([d[0]])),b&&(d=[].concat(d).reverse()),s(d,function(e,b){l=j.getPosition(e,a);i.push(b?"L":"M",l.x,l.y)}));return i},getTitlePosition:function(){var a=this.center,b=this.chart,
	c=this.options.title;return{x:b.plotLeft+a[0]+(c.x||0),y:b.plotTop+a[1]-{high:0.5,middle:0.25,low:0}[c.align]*a[2]+(c.y||0)}}};v(z,"init",function(a,b,c){var h;var d=b.angular,g=b.polar,e=c.isX,j=d&&e,l,i;i=b.options;var f=c.pane||0;if(d){if(F(this,j?U:N),l=!e)this.defaultRadialOptions=this.defaultRadialGaugeOptions}else if(g)F(this,N),this.defaultRadialOptions=(l=e)?this.defaultRadialXOptions:t(this.defaultYAxisOptions,this.defaultRadialYOptions);a.call(this,b,c);if(!j&&(d||g)){a=this.options;if(!b.panes)b.panes=
	[];this.pane=(h=b.panes[f]=b.panes[f]||new J(K(i.pane)[f],b,this),f=h);f=f.options;b.inverted=!1;i.chart.zoomType=null;this.startAngleRad=b=(f.startAngle-90)*Math.PI/180;this.endAngleRad=i=(q(f.endAngle,f.startAngle+360)-90)*Math.PI/180;this.offset=a.offset||0;if((this.isCircular=l)&&c.max===void 0&&i-b===2*Math.PI)this.autoConnect=!0}});v(z,"autoLabelAlign",function(a){if(!this.isRadial)return a.apply(this,[].slice.call(arguments,1))});v(y,"getPosition",function(a,b,c,d,g){var e=this.axis;return e.getPosition?
	e.getPosition(c):a.call(this,b,c,d,g)});v(y,"getLabelPosition",function(a,b,c,d,g,e,j,l,i){var f=this.axis,h=e.y,n=20,k=e.align,m=(f.translate(this.pos)+f.startAngleRad+Math.PI/2)/Math.PI*180%360;f.isRadial?(a=f.getPosition(this.pos,f.center[2]/2+q(e.distance,-25)),e.rotation==="auto"?d.attr({rotation:m}):h===null&&(h=f.chart.renderer.fontMetrics(d.styles.fontSize).b-d.getBBox().height/2),k===null&&(f.isCircular?(this.label.getBBox().width>f.len*f.tickInterval/(f.max-f.min)&&(n=0),k=m>n&&m<180-n?
	"left":m>180+n&&m<360-n?"right":"center"):k="center",d.attr({align:k})),a.x+=e.x,a.y+=h):a=a.call(this,b,c,d,g,e,j,l,i);return a});v(y,"getMarkPath",function(a,b,c,d,g,e,j){var l=this.axis;l.isRadial?(a=l.getPosition(this.pos,l.center[2]/2+d),b=["M",b,c,"L",a.x,a.y]):b=a.call(this,b,c,d,g,e,j);return b});o.arearange=t(o.area,{lineWidth:1,marker:null,threshold:null,tooltip:{pointFormat:'<span style="color:{series.color}">\u25cf</span> {series.name}: <b>{point.low}</b> - <b>{point.high}</b><br/>'},
	trackByArea:!0,dataLabels:{align:null,verticalAlign:null,xLow:0,xHigh:0,yLow:0,yHigh:0},states:{hover:{halo:!1}}});k.arearange=u(k.area,{type:"arearange",pointArrayMap:["low","high"],dataLabelCollections:["dataLabel","dataLabelUpper"],toYData:function(a){return[a.low,a.high]},pointValKey:"low",deferTranslatePolar:!0,highToXY:function(a){var b=this.chart,c=this.xAxis.postTranslate(a.rectPlotX,this.yAxis.len-a.plotHigh);a.plotHighX=c.x-b.plotLeft;a.plotHigh=c.y-b.plotTop},translate:function(){var a=
	this,b=a.yAxis;k.area.prototype.translate.apply(a);s(a.points,function(a){var d=a.low,g=a.high,e=a.plotY;g===null||d===null?a.isNull=!0:(a.plotLow=e,a.plotHigh=b.translate(g,0,1,0,1))});this.chart.polar&&s(this.points,function(b){a.highToXY(b)})},getGraphPath:function(){var a=this.points,b=[],c=[],d=a.length,g=w.prototype.getGraphPath,e,j,l;l=this.options;for(var i=l.step,d=a.length;d--;)e=a[d],!e.isNull&&(!a[d+1]||a[d+1].isNull)&&c.push({plotX:e.plotX,plotY:e.plotLow}),j={plotX:e.plotX,plotY:e.plotHigh,
	isNull:e.isNull},c.push(j),b.push(j),!e.isNull&&(!a[d-1]||a[d-1].isNull)&&c.push({plotX:e.plotX,plotY:e.plotLow});a=g.call(this,a);if(i)i===!0&&(i="left"),l.step={left:"right",center:"center",right:"left"}[i];b=g.call(this,b);c=g.call(this,c);l.step=i;l=[].concat(a,b);!this.chart.polar&&c[0]==="M"&&(c[0]="L");this.areaPath=this.areaPath.concat(a,c);return l},drawDataLabels:function(){var a=this.data,b=a.length,c,d=[],g=w.prototype,e=this.options.dataLabels,j=e.align,l=e.verticalAlign,i=e.inside,f,
	h,n=this.chart.inverted;if(e.enabled||this._hasPointLabels){for(c=b;c--;)if(f=a[c]){h=i?f.plotHigh<f.plotLow:f.plotHigh>f.plotLow;f.y=f.high;f._plotY=f.plotY;f.plotY=f.plotHigh;d[c]=f.dataLabel;f.dataLabel=f.dataLabelUpper;f.below=h;if(n){if(!j)e.align=h?"right":"left"}else if(!l)e.verticalAlign=h?"top":"bottom";e.x=e.xHigh;e.y=e.yHigh}g.drawDataLabels&&g.drawDataLabels.apply(this,arguments);for(c=b;c--;)if(f=a[c]){h=i?f.plotHigh<f.plotLow:f.plotHigh>f.plotLow;f.dataLabelUpper=f.dataLabel;f.dataLabel=
	d[c];f.y=f.low;f.plotY=f._plotY;f.below=!h;if(n){if(!j)e.align=h?"left":"right"}else if(!l)e.verticalAlign=h?"bottom":"top";e.x=e.xLow;e.y=e.yLow}g.drawDataLabels&&g.drawDataLabels.apply(this,arguments)}e.align=j;e.verticalAlign=l},alignDataLabel:function(){k.column.prototype.alignDataLabel.apply(this,arguments)},setStackedPoints:r,getSymbol:r,drawPoints:r});o.areasplinerange=t(o.arearange);k.areasplinerange=u(k.arearange,{type:"areasplinerange",getPointSpline:k.spline.prototype.getPointSpline});
	(function(){var a=k.column.prototype;o.columnrange=t(o.column,o.arearange,{lineWidth:1,pointRange:null});k.columnrange=u(k.arearange,{type:"columnrange",translate:function(){var b=this,c=b.yAxis,d=b.xAxis,g=b.chart,e;a.translate.apply(b);s(b.points,function(a){var l=a.shapeArgs,i=b.options.minPointLength,f,h;a.plotHigh=e=c.translate(a.high,0,1,0,1);a.plotLow=a.plotY;h=e;f=a.plotY-e;Math.abs(f)<i?(i-=f,f+=i,h-=i/2):f<0&&(f*=-1,h-=f);l.height=f;l.y=h;a.tooltipPos=g.inverted?[c.len+c.pos-g.plotLeft-
	h-f/2,d.len+d.pos-g.plotTop-l.x-l.width/2,f]:[d.left-g.plotLeft+l.x+l.width/2,c.pos-g.plotTop+h+f/2,f]})},directTouch:!0,trackerGroups:["group","dataLabelsGroup"],drawGraph:r,crispCol:a.crispCol,pointAttrToOptions:a.pointAttrToOptions,drawPoints:a.drawPoints,drawTracker:a.drawTracker,animate:a.animate,getColumnMetrics:a.getColumnMetrics})})();o.gauge=t(o.line,{dataLabels:{enabled:!0,defer:!1,y:15,borderWidth:1,borderColor:"silver",borderRadius:3,crop:!1,verticalAlign:"top",zIndex:2},dial:{},pivot:{},
	tooltip:{headerFormat:""},showInLegend:!1});B={type:"gauge",pointClass:u(G,{setState:function(a){this.state=a}}),angular:!0,drawGraph:r,fixedBox:!0,forceDL:!0,trackerGroups:["group","dataLabelsGroup"],translate:function(){var a=this.yAxis,b=this.options,c=a.center;this.generatePoints();s(this.points,function(d){var g=t(b.dial,d.dial),e=A(q(g.radius,80))*c[2]/200,j=A(q(g.baseLength,70))*e/100,l=A(q(g.rearLength,10))*e/100,i=g.baseWidth||3,f=g.topWidth||1,h=b.overshoot,n=a.startAngleRad+a.translate(d.y,
	null,null,null,!0);h&&typeof h==="number"?(h=h/180*Math.PI,n=Math.max(a.startAngleRad-h,Math.min(a.endAngleRad+h,n))):b.wrap===!1&&(n=Math.max(a.startAngleRad,Math.min(a.endAngleRad,n)));n=n*180/Math.PI;d.shapeType="path";d.shapeArgs={d:g.path||["M",-l,-i/2,"L",j,-i/2,e,-f/2,e,f/2,j,i/2,-l,i/2,"z"],translateX:c[0],translateY:c[1],rotation:n};d.plotX=c[0];d.plotY=c[1]})},drawPoints:function(){var a=this,b=a.yAxis.center,c=a.pivot,d=a.options,g=d.pivot,e=a.chart.renderer;s(a.points,function(b){var g=
	b.graphic,c=b.shapeArgs,f=c.d,h=t(d.dial,b.dial);g?(g.animate(c),c.d=f):b.graphic=e[b.shapeType](c).attr({stroke:h.borderColor||"none","stroke-width":h.borderWidth||0,fill:h.backgroundColor||"black",rotation:c.rotation,zIndex:1}).add(a.group)});c?c.animate({translateX:b[0],translateY:b[1]}):a.pivot=e.circle(0,0,q(g.radius,5)).attr({"stroke-width":g.borderWidth||0,stroke:g.borderColor||"silver",fill:g.backgroundColor||"black",zIndex:2}).translate(b[0],b[1]).add(a.group)},animate:function(a){var b=
	this;if(!a)s(b.points,function(a){var d=a.graphic;d&&(d.attr({rotation:b.yAxis.startAngleRad*180/Math.PI}),d.animate({rotation:a.shapeArgs.rotation},b.options.animation))}),b.animate=null},render:function(){this.group=this.plotGroup("group","series",this.visible?"visible":"hidden",this.options.zIndex,this.chart.seriesGroup);w.prototype.render.call(this);this.group.clip(this.chart.clipRect)},setData:function(a,b){w.prototype.setData.call(this,a,!1);this.processData();this.generatePoints();q(b,!0)&&
	this.chart.redraw()},drawTracker:B&&B.drawTrackerPoint};k.gauge=u(k.line,B);o.boxplot=t(o.column,{fillColor:"#FFFFFF",lineWidth:1,medianWidth:2,states:{hover:{brightness:-0.3}},threshold:null,tooltip:{pointFormat:'<span style="color:{point.color}">\u25cf</span> <b> {series.name}</b><br/>Maximum: {point.high}<br/>Upper quartile: {point.q3}<br/>Median: {point.median}<br/>Lower quartile: {point.q1}<br/>Minimum: {point.low}<br/>'},whiskerLength:"50%",whiskerWidth:2});k.boxplot=u(k.column,{type:"boxplot",
	pointArrayMap:["low","q1","median","q3","high"],toYData:function(a){return[a.low,a.q1,a.median,a.q3,a.high]},pointValKey:"high",pointAttrToOptions:{fill:"fillColor",stroke:"color","stroke-width":"lineWidth"},drawDataLabels:r,translate:function(){var a=this.yAxis,b=this.pointArrayMap;k.column.prototype.translate.apply(this);s(this.points,function(c){s(b,function(b){c[b]!==null&&(c[b+"Plot"]=a.translate(c[b],0,1,0,1))})})},drawPoints:function(){var a=this,b=a.options,c=a.chart.renderer,d,g,e,j,l,i,
	f,h,n,k,m,H,I,o,t,r,v,u,w,x,B,A,y=a.doQuartiles!==!1,z,D=a.options.whiskerLength;s(a.points,function(p){n=p.graphic;B=p.shapeArgs;m={};o={};r={};A=p.color||a.color;if(p.plotY!==void 0)if(d=p.pointAttr[p.selected?"selected":""],v=B.width,u=C(B.x),w=u+v,x=E(v/2),g=C(y?p.q1Plot:p.lowPlot),e=C(y?p.q3Plot:p.lowPlot),j=C(p.highPlot),l=C(p.lowPlot),m.stroke=p.stemColor||b.stemColor||A,m["stroke-width"]=q(p.stemWidth,b.stemWidth,b.lineWidth),m.dashstyle=p.stemDashStyle||b.stemDashStyle,o.stroke=p.whiskerColor||
	b.whiskerColor||A,o["stroke-width"]=q(p.whiskerWidth,b.whiskerWidth,b.lineWidth),r.stroke=p.medianColor||b.medianColor||A,r["stroke-width"]=q(p.medianWidth,b.medianWidth,b.lineWidth),f=m["stroke-width"]%2/2,h=u+x+f,k=["M",h,e,"L",h,j,"M",h,g,"L",h,l],y&&(f=d["stroke-width"]%2/2,h=C(h)+f,g=C(g)+f,e=C(e)+f,u+=f,w+=f,H=["M",u,e,"L",u,g,"L",w,g,"L",w,e,"L",u,e,"z"]),D&&(f=o["stroke-width"]%2/2,j+=f,l+=f,z=/%$/.test(D)?x*parseFloat(D)/100:D/2,I=["M",h-z,j,"L",h+z,j,"M",h-z,l,"L",h+z,l]),f=r["stroke-width"]%
	2/2,i=E(p.medianPlot)+f,t=["M",u,i,"L",w,i],n)p.stem.animate({d:k}),D&&p.whiskers.animate({d:I}),y&&p.box.animate({d:H}),p.medianShape.animate({d:t});else{p.graphic=n=c.g().add(a.group);p.stem=c.path(k).attr(m).add(n);if(D)p.whiskers=c.path(I).attr(o).add(n);if(y)p.box=c.path(H).attr(d).add(n);p.medianShape=c.path(t).attr(r).add(n)}})},setStackedPoints:r});o.errorbar=t(o.boxplot,{color:"#000000",grouping:!1,linkedTo:":previous",tooltip:{pointFormat:'<span style="color:{point.color}">\u25cf</span> {series.name}: <b>{point.low}</b> - <b>{point.high}</b><br/>'},
	whiskerWidth:null});k.errorbar=u(k.boxplot,{type:"errorbar",pointArrayMap:["low","high"],toYData:function(a){return[a.low,a.high]},pointValKey:"high",doQuartiles:!1,drawDataLabels:k.arearange?k.arearange.prototype.drawDataLabels:r,getColumnMetrics:function(){return this.linkedParent&&this.linkedParent.columnMetrics||k.column.prototype.getColumnMetrics.call(this)}});o.waterfall=t(o.column,{lineWidth:1,lineColor:"#333",dashStyle:"dot",borderColor:"#333",dataLabels:{inside:!0},states:{hover:{lineWidthPlus:0}}});
	k.waterfall=u(k.column,{type:"waterfall",upColorProp:"fill",pointValKey:"y",translate:function(){var a=this.options,b=this.yAxis,c,d,g,e,j,l,i,f,h,n=q(a.minPointLength,5),m=a.threshold,o=a.stacking;k.column.prototype.translate.apply(this);this.minPointLengthOffset=0;i=f=m;d=this.points;for(c=0,a=d.length;c<a;c++){g=d[c];l=this.processedYData[c];e=g.shapeArgs;h=(j=o&&b.stacks[(this.negStacks&&l<m?"-":"")+this.stackKey])?j[g.x].points[this.index+","+c]:[0,l];if(g.isSum)g.y=l;else if(g.isIntermediateSum)g.y=
	l-f;j=M(i,i+g.y)+h[0];e.y=b.translate(j,0,1);if(g.isSum)e.y=b.translate(h[1],0,1),e.height=Math.min(b.translate(h[0],0,1),b.len)-e.y+this.minPointLengthOffset;else if(g.isIntermediateSum)e.y=b.translate(h[1],0,1),e.height=Math.min(b.translate(f,0,1),b.len)-e.y+this.minPointLengthOffset,f=h[1];else{if(i!==0)e.height=l>0?b.translate(i,0,1)-e.y:b.translate(i,0,1)-b.translate(i-l,0,1);i+=l}e.height<0&&(e.y+=e.height,e.height*=-1);g.plotY=e.y=E(e.y)-this.borderWidth%2/2;e.height=M(E(e.height),0.001);g.yBottom=
	e.y+e.height;if(e.height<=n)e.height=n,this.minPointLengthOffset+=n;e.y-=this.minPointLengthOffset;e=g.plotY+(g.negative?e.height:0)-this.minPointLengthOffset;this.chart.inverted?g.tooltipPos[0]=b.len-e:g.tooltipPos[1]=e}},processData:function(a){var b=this.yData,c=this.options.data,d,g=b.length,e,j,l,i,f,h;j=e=l=i=this.options.threshold||0;for(h=0;h<g;h++)f=b[h],d=c&&c[h]?c[h]:{},f==="sum"||d.isSum?b[h]=j:f==="intermediateSum"||d.isIntermediateSum?b[h]=e:(j+=f,e+=f),l=Math.min(j,l),i=Math.max(j,
	i);w.prototype.processData.call(this,a);this.dataMin=l;this.dataMax=i},toYData:function(a){return a.isSum?a.x===0?null:"sum":a.isIntermediateSum?a.x===0?null:"intermediateSum":a.y},getAttribs:function(){k.column.prototype.getAttribs.apply(this,arguments);var a=this,b=a.options,c=b.states,d=b.upColor||a.color,b=m.Color(d).brighten(0.1).get(),g=t(a.pointAttr),e=a.upColorProp;g[""][e]=d;g.hover[e]=c.hover.upColor||b;g.select[e]=c.select.upColor||d;s(a.points,function(e){if(!e.options.color)e.y>0?(e.pointAttr=
	g,e.color=d):e.pointAttr=a.pointAttr})},getGraphPath:function(){var a=this.data,b=a.length,c=E(this.options.lineWidth+this.borderWidth)%2/2,d=[],g,e,j;for(j=1;j<b;j++)e=a[j].shapeArgs,g=a[j-1].shapeArgs,e=["M",g.x+g.width,g.y+c,"L",e.x,g.y+c],a[j-1].y<0&&(e[2]+=g.height,e[5]+=g.height),d=d.concat(e);return d},getExtremes:r,drawGraph:w.prototype.drawGraph});o.polygon=t(o.scatter,{marker:{enabled:!1}});k.polygon=u(k.scatter,{type:"polygon",fillGraph:!0,getSegmentPath:function(a){return w.prototype.getSegmentPath.call(this,
	a).concat("z")},drawGraph:w.prototype.drawGraph,drawLegendSymbol:m.LegendSymbolMixin.drawRectangle});o.bubble=t(o.scatter,{dataLabels:{formatter:function(){return this.point.z},inside:!0,verticalAlign:"middle"},marker:{lineColor:null,lineWidth:1},minSize:8,maxSize:"20%",softThreshold:!1,states:{hover:{halo:{size:5}}},tooltip:{pointFormat:"({point.x}, {point.y}), Size: {point.z}"},turboThreshold:0,zThreshold:0,zoneAxis:"z"});B=u(G,{haloPath:function(){return G.prototype.haloPath.call(this,this.shapeArgs.r+
	this.series.options.states.hover.halo.size)},ttBelow:!1});k.bubble=u(k.scatter,{type:"bubble",pointClass:B,pointArrayMap:["y","z"],parallelArrays:["x","y","z"],trackerGroups:["group","dataLabelsGroup"],bubblePadding:!0,zoneAxis:"z",pointAttrToOptions:{stroke:"lineColor","stroke-width":"lineWidth",fill:"fillColor"},applyOpacity:function(a){var b=this.options.marker,c=q(b.fillOpacity,0.5),a=a||b.fillColor||this.color;c!==1&&(a=T(a).setOpacity(c).get("rgba"));return a},convertAttribs:function(){var a=
	w.prototype.convertAttribs.apply(this,arguments);a.fill=this.applyOpacity(a.fill);return a},getRadii:function(a,b,c,d){var g,e,j,l=this.zData,i=[],f=this.options,h=f.sizeBy!=="width",n=f.zThreshold,k=b-a;for(e=0,g=l.length;e<g;e++)j=l[e],f.sizeByAbsoluteValue&&j!==null&&(j=Math.abs(j-n),b=Math.max(b-n,Math.abs(a-n)),a=0),j===null?j=null:j<a?j=c/2-1:(j=k>0?(j-a)/k:0.5,h&&j>=0&&(j=Math.sqrt(j)),j=x.ceil(c+j*(d-c))/2),i.push(j);this.radii=i},animate:function(a){var b=this.options.animation;if(!a)s(this.points,
	function(a){var d=a.graphic,a=a.shapeArgs;d&&a&&(d.attr("r",1),d.animate({r:a.r},b))}),this.animate=null},translate:function(){var a,b=this.data,c,d,g=this.radii;k.scatter.prototype.translate.call(this);for(a=b.length;a--;)c=b[a],d=g?g[a]:0,typeof d==="number"&&d>=this.minPxSize/2?(c.shapeType="circle",c.shapeArgs={x:c.plotX,y:c.plotY,r:d},c.dlBox={x:c.plotX-d,y:c.plotY-d,width:2*d,height:2*d}):c.shapeArgs=c.plotY=c.dlBox=void 0},drawLegendSymbol:function(a,b){var c=this.chart.renderer,d=c.fontMetrics(a.itemStyle.fontSize).f/
	2;b.legendSymbol=c.circle(d,a.baseline-d,d).attr({zIndex:3}).add(b.legendGroup);b.legendSymbol.isMarker=!0},drawPoints:k.column.prototype.drawPoints,alignDataLabel:k.column.prototype.alignDataLabel,buildKDTree:r,applyZones:r});L.prototype.beforePadding=function(){var a=this,b=this.len,c=this.chart,d=0,g=b,e=this.isXAxis,j=e?"xData":"yData",l=this.min,i={},f=x.min(c.plotWidth,c.plotHeight),h=Number.MAX_VALUE,n=-Number.MAX_VALUE,k=this.max-l,m=b/k,o=[];s(this.series,function(b){var g=b.options;if(b.bubblePadding&&
	(b.visible||!c.options.chart.ignoreHiddenSeries))if(a.allowZoomOutside=!0,o.push(b),e)s(["minSize","maxSize"],function(a){var b=g[a],e=/%$/.test(b),b=A(b);i[a]=e?f*b/100:b}),b.minPxSize=i.minSize,b.maxPxSize=i.maxSize,b=b.zData,b.length&&(h=q(g.zMin,x.min(h,x.max(O(b),g.displayNegative===!1?g.zThreshold:-Number.MAX_VALUE))),n=q(g.zMax,x.max(n,P(b))))});s(o,function(a){var b=a[j],c=b.length,f;e&&a.getRadii(h,n,a.minPxSize,a.maxPxSize);if(k>0)for(;c--;)typeof b[c]==="number"&&(f=a.radii[c],d=Math.min((b[c]-
	l)*m-f,d),g=Math.max((b[c]-l)*m+f,g))});o.length&&k>0&&!this.isLog&&(g-=b,m*=(b+d-g)/b,s([["min","userMin",d],["max","userMax",g]],function(b){q(a.options[b[0]],a[b[1]])===void 0&&(a[b[0]]+=b[2]/m)}))};(function(){function a(a,b){var c=this.chart,d=this.options.animation,i=this.group,f=this.markerGroup,h=this.xAxis.center,n=c.plotLeft,k=c.plotTop;if(c.polar){if(c.renderer.isSVG)d===!0&&(d={}),b?(c={translateX:h[0]+n,translateY:h[1]+k,scaleX:0.001,scaleY:0.001},i.attr(c),f&&f.attr(c)):(c={translateX:n,
	translateY:k,scaleX:1,scaleY:1},i.animate(c,d),f&&f.animate(c,d),this.animate=null)}else a.call(this,b)}var b=w.prototype,c=R.prototype,d;b.searchPointByAngle=function(a){var b=this.chart,c=this.xAxis.pane.center;return this.searchKDTree({clientX:180+Math.atan2(a.chartX-c[0]-b.plotLeft,a.chartY-c[1]-b.plotTop)*(-180/Math.PI)})};v(b,"buildKDTree",function(a){if(this.chart.polar)this.kdByAngle?this.searchPoint=this.searchPointByAngle:this.kdDimensions=2;a.apply(this)});b.toXY=function(a){var b,c=this.chart,
	d=a.plotX;b=a.plotY;a.rectPlotX=d;a.rectPlotY=b;b=this.xAxis.postTranslate(a.plotX,this.yAxis.len-b);a.plotX=a.polarPlotX=b.x-c.plotLeft;a.plotY=a.polarPlotY=b.y-c.plotTop;this.kdByAngle?(c=(d/Math.PI*180+this.xAxis.pane.options.startAngle)%360,c<0&&(c+=360),a.clientX=c):a.clientX=a.plotX};k.spline&&v(k.spline.prototype,"getPointSpline",function(a,b,c,d){var i,f,h,n,k,m,o;if(this.chart.polar){i=c.plotX;f=c.plotY;a=b[d-1];h=b[d+1];this.connectEnds&&(a||(a=b[b.length-2]),h||(h=b[1]));if(a&&h)n=a.plotX,
	k=a.plotY,b=h.plotX,m=h.plotY,n=(1.5*i+n)/2.5,k=(1.5*f+k)/2.5,h=(1.5*i+b)/2.5,o=(1.5*f+m)/2.5,b=Math.sqrt(Math.pow(n-i,2)+Math.pow(k-f,2)),m=Math.sqrt(Math.pow(h-i,2)+Math.pow(o-f,2)),n=Math.atan2(k-f,n-i),k=Math.atan2(o-f,h-i),o=Math.PI/2+(n+k)/2,Math.abs(n-o)>Math.PI/2&&(o-=Math.PI),n=i+Math.cos(o)*b,k=f+Math.sin(o)*b,h=i+Math.cos(Math.PI+o)*m,o=f+Math.sin(Math.PI+o)*m,c.rightContX=h,c.rightContY=o;d?(c=["C",a.rightContX||a.plotX,a.rightContY||a.plotY,n||i,k||f,i,f],a.rightContX=a.rightContY=null):
	c=["M",i,f]}else c=a.call(this,b,c,d);return c});v(b,"translate",function(a){var b=this.chart;a.call(this);if(b.polar&&(this.kdByAngle=b.tooltip&&b.tooltip.shared,!this.preventPostTranslate)){a=this.points;for(b=a.length;b--;)this.toXY(a[b])}});v(b,"getGraphPath",function(a,b){var c=this;if(this.chart.polar){b=b||this.points;if(this.options.connectEnds!==!1&&b[0].y!==null)this.connectEnds=!0,b.splice(b.length,0,b[0]);s(b,function(a){a.polarPlotY===void 0&&c.toXY(a)})}return a.apply(this,[].slice.call(arguments,
	1))});v(b,"animate",a);if(k.column)d=k.column.prototype,v(d,"animate",a),v(d,"translate",function(a){var b=this.xAxis,c=this.yAxis.len,d=b.center,i=b.startAngleRad,f=this.chart.renderer,h,k;this.preventPostTranslate=!0;a.call(this);if(b.isRadial){b=this.points;for(k=b.length;k--;)h=b[k],a=h.barX+i,h.shapeType="path",h.shapeArgs={d:f.symbols.arc(d[0],d[1],c-h.plotY,null,{start:a,end:a+h.pointWidth,innerR:c-q(h.yBottom,c)})},this.toXY(h),h.tooltipPos=[h.plotX,h.plotY],h.ttBelow=h.plotY>d[1]}}),v(d,
	"alignDataLabel",function(a,c,d,l,i,f){if(this.chart.polar){a=c.rectPlotX/Math.PI*180;if(l.align===null)l.align=a>20&&a<160?"left":a>200&&a<340?"right":"center";if(l.verticalAlign===null)l.verticalAlign=a<45||a>315?"bottom":a>135&&a<225?"top":"middle";b.alignDataLabel.call(this,c,d,l,i,f)}else a.call(this,c,d,l,i,f)});v(c,"getCoordinates",function(a,b){var c=this.chart,d={xAxis:[],yAxis:[]};c.polar?s(c.axes,function(a){var f=a.isXAxis,g=a.center,k=b.chartX-g[0]-c.plotLeft,g=b.chartY-g[1]-c.plotTop;
	d[f?"xAxis":"yAxis"].push({axis:a,value:a.translate(f?Math.PI-Math.atan2(k,g):Math.sqrt(Math.pow(k,2)+Math.pow(g,2)),!0)})}):d=a.call(this,b);return d})})()});


/***/ },

/***/ 3584:
/*!******************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/expression-atlas-legend/index.js ***!
  \******************************************************************/
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	//*------------------------------------------------------------------*
	
	exports.LegendDifferential = __webpack_require__(/*! ./src/LegendDifferential.jsx */ 3585);
	exports.LegendBaseline = __webpack_require__(/*! ./src/LegendBaseline.jsx */ 3595);

/***/ },

/***/ 3585:
/*!************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/expression-atlas-legend/src/LegendDifferential.jsx ***!
  \************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	//*------------------------------------------------------------------*
	
	var React = __webpack_require__(/*! react */ 2919);
	var ReactDOM = __webpack_require__(/*! react-dom */ 2951);
	
	//*------------------------------------------------------------------*
	
	var LegendRow = __webpack_require__(/*! ./LegendRow.jsx */ 3586);
	var HelpTooltips = __webpack_require__(/*! expression-atlas-help-tooltips */ 3589);
	
	//*------------------------------------------------------------------*
	
	__webpack_require__(/*! ./gxaLegend.css */ 3593);
	
	//*------------------------------------------------------------------*
	
	var LegendDifferential = React.createClass({
	    displayName: 'LegendDifferential',
	
	
	    propTypes: {
	        atlasBaseURL: React.PropTypes.string.isRequired,
	        minDownLevel: React.PropTypes.number.isRequired,
	        maxDownLevel: React.PropTypes.number.isRequired,
	        minUpLevel: React.PropTypes.number.isRequired,
	        maxUpLevel: React.PropTypes.number.isRequired
	    },
	
	    render: function render() {
	        return React.createElement(
	            'div',
	            { className: 'gxaLegend' },
	            React.createElement(
	                'div',
	                { style: { display: "inline-table" } },
	                isNaN(this.props.minDownLevel) && isNaN(this.props.maxDownLevel) ? null : React.createElement(LegendRow, { lowExpressionLevel: React.createElement(
	                        'span',
	                        null,
	                        this.props.minDownLevel
	                    ),
	                    highExpressionLevel: React.createElement(
	                        'span',
	                        null,
	                        this.props.maxDownLevel
	                    ),
	                    lowValueColour: '#C0C0C0',
	                    highValueColour: '#0000FF' }),
	                isNaN(this.props.minUpLevel) && isNaN(this.props.maxUpLevel) ? null : React.createElement(LegendRow, { lowExpressionLevel: React.createElement(
	                        'span',
	                        null,
	                        this.props.minUpLevel
	                    ),
	                    highExpressionLevel: React.createElement(
	                        'span',
	                        null,
	                        this.props.maxUpLevel
	                    ),
	                    lowValueColour: '#FFAFAF',
	                    highValueColour: '#FF0000' })
	            ),
	            React.createElement('div', { ref: 'legendHelp', 'data-help-loc': '#gradient-differential', className: 'gxaLegendHelp' })
	        );
	    },
	
	    componentDidMount: function componentDidMount() {
	        HelpTooltips(this.props.atlasBaseURL, "experiment", ReactDOM.findDOMNode(this.refs.legendHelp));
	    }
	});
	
	//*------------------------------------------------------------------*
	
	module.exports = LegendDifferential;

/***/ },

/***/ 3586:
/*!***************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/expression-atlas-legend/src/LegendRow.jsx ***!
  \***************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var React = __webpack_require__(/*! react */ 2919);
	
	__webpack_require__(/*! ./gxaGradient.css */ 3587);
	
	var LegendRow = React.createClass({
	    displayName: 'LegendRow',
	
	
	    propTypes: {
	        lowValueColour: React.PropTypes.string.isRequired,
	        highValueColour: React.PropTypes.string.isRequired,
	        lowExpressionLevel: React.PropTypes.element.isRequired,
	        highExpressionLevel: React.PropTypes.element.isRequired
	    },
	
	    render: function render() {
	        var spanStyle = {
	            backgroundImage: 'linear-gradient(to right, ' + this.props.lowValueColour + ', ' + this.props.highValueColour + ')'
	        };
	
	        return this.props.lowExpressionLevel || this.props.highExpressionLevel ? React.createElement(
	            'div',
	            { style: { display: "table-row" } },
	            React.createElement(
	                'div',
	                { className: 'gxaGradientLevel gxaGradientLevelMin' },
	                this.props.lowExpressionLevel
	            ),
	            React.createElement(
	                'div',
	                { style: { display: "table-cell" } },
	                React.createElement('span', { className: 'gxaGradientColour', style: spanStyle })
	            ),
	            React.createElement(
	                'div',
	                { className: 'gxaGradientLevel gxaGradientLevelMax' },
	                this.props.highExpressionLevel
	            )
	        ) : null;
	    }
	});
	
	module.exports = LegendRow;

/***/ },

/***/ 3587:
/*!*****************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/expression-atlas-legend/src/gxaGradient.css ***!
  \*****************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(/*! !../../css-loader!./gxaGradient.css */ 3588);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(/*! ../../style-loader/addStyles.js */ 3155)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!../../css-loader/index.js!./gxaGradient.css", function() {
				var newContent = require("!!../../css-loader/index.js!./gxaGradient.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },

/***/ 3588:
/*!******************************************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/css-loader!./atlas_bundles/heatmap/~/expression-atlas-legend/src/gxaGradient.css ***!
  \******************************************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(/*! ../../css-loader/lib/css-base.js */ 3154)();
	// imports
	
	
	// module
	exports.push([module.id, ".gxaGradientColour {\n    overflow: auto;\n    vertical-align: middle;\n    width: 200px;\n    height: 15px;\n    margin: 2px 6px 2px 6px;\n    display: inline-block;\n}\n\n.gxaGradientLevel {\n    white-space: nowrap;\n    font-size: 10px;\n    vertical-align: middle;\n    display: table-cell;\n}\n\n.gxaGradientLevelMin {\n    text-align: right;\n}\n\n.gxaGradientLevelMax {\n    text-align: left;\n}", ""]);
	
	// exports


/***/ },

/***/ 3589:
/*!*************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/expression-atlas-help-tooltips/index.js ***!
  \*************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	//*------------------------------------------------------------------*
	
	module.exports = __webpack_require__(/*! ./src/helpTooltipsModule.js */ 3590);

/***/ },

/***/ 3590:
/*!******************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/expression-atlas-help-tooltips/src/helpTooltipsModule.js ***!
  \******************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	//*------------------------------------------------------------------*
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var $ = __webpack_require__(/*! jquery */ 3090);
	__webpack_require__(/*! jquery-ui-bundle */ 3565);
	
	//*------------------------------------------------------------------*
	
	__webpack_require__(/*! ./gxaHelpTooltip.css */ 3591);
	
	//*------------------------------------------------------------------*
	
	function buildHelpAnchor() {
	    return $("<a/>", {
	        class: "help-icon",
	        href: "#",
	        title: "",
	        text: "?"
	    });
	}
	
	function getHelpFileName(pageName) {
	    return "help-tooltips." + pageName + "-page.html";
	}
	
	function initTooltips(atlasBaseURL, pageName, parentElementId) {
	
	    var anchor = buildHelpAnchor();
	
	    var helpSelector = (typeof parentElementId === 'undefined' ? 'undefined' : _typeof(parentElementId)) === "object" ? parentElementId : parentElementId == "" ? "[data-help-loc]" : "#" + parentElementId + " [data-help-loc]";
	
	    $(helpSelector).append(anchor).click(function (e) {
	        e.preventDefault();
	    }).tooltip({
	        tooltipClass: "gxaHelpTooltip",
	        content: function content(callback) {
	            var tooltipHelpHtmlId = $(this).parent().attr("data-help-loc");
	
	            $.get(atlasBaseURL + "/resources/html/" + getHelpFileName(pageName), function (response, status, xhr) {
	                var tooltipContent;
	
	                if (status === "error") {
	                    tooltipContent = "Sorry but there was an error: " + xhr.status + " " + xhr.statusText;
	                    callback(tooltipContent);
	                    return;
	                }
	
	                tooltipContent = $(response).filter(tooltipHelpHtmlId).text();
	                if (!tooltipContent) {
	                    tooltipContent = "Missing help section for id = " + tooltipHelpHtmlId + " in html file " + getHelpFileName(pageName);
	                }
	
	                callback(tooltipContent);
	            });
	        }
	    });
	}
	
	//*------------------------------------------------------------------*
	
	module.exports = function (atlasBaseURL, pageName, parentElementId) {
	    initTooltips(atlasBaseURL, pageName, parentElementId);
	};

/***/ },

/***/ 3591:
/*!***************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/expression-atlas-help-tooltips/src/gxaHelpTooltip.css ***!
  \***************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(/*! !../../css-loader!./gxaHelpTooltip.css */ 3592);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(/*! ../../style-loader/addStyles.js */ 3155)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!../../css-loader/index.js!./gxaHelpTooltip.css", function() {
				var newContent = require("!!../../css-loader/index.js!./gxaHelpTooltip.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },

/***/ 3592:
/*!****************************************************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/css-loader!./atlas_bundles/heatmap/~/expression-atlas-help-tooltips/src/gxaHelpTooltip.css ***!
  \****************************************************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(/*! ../../css-loader/lib/css-base.js */ 3154)();
	// imports
	
	
	// module
	exports.push([module.id, ".gxaHelpTooltip {\n    background: white;\n    border-width: 1px !important;\n    border: solid cornflowerblue;\n    padding: 4px;\n    color: cornflowerblue;\n    font: 10px Verdana, Helvetica, Arial, sans-serif;\n}\n\na.help-icon {\n    color: darkorange;\n    vertical-align: top;\n    font: 10px Verdana, Helvetica, Arial, sans-serif;\n    font-weight: bold;\n}\n", ""]);
	
	// exports


/***/ },

/***/ 3593:
/*!***************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/expression-atlas-legend/src/gxaLegend.css ***!
  \***************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(/*! !../../css-loader!./gxaLegend.css */ 3594);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(/*! ../../style-loader/addStyles.js */ 3155)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!../../css-loader/index.js!./gxaLegend.css", function() {
				var newContent = require("!!../../css-loader/index.js!./gxaLegend.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },

/***/ 3594:
/*!****************************************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/css-loader!./atlas_bundles/heatmap/~/expression-atlas-legend/src/gxaLegend.css ***!
  \****************************************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(/*! ../../css-loader/lib/css-base.js */ 3154)();
	// imports
	
	
	// module
	exports.push([module.id, ".gxaLegendHelp {\n    display: inline-block;\n    vertical-align: top;\n    padding-left: 2px;\n}\n\n.gxaLegend {\n    display: inline-block;\n    padding-left: 20px;\n}\n", ""]);
	
	// exports


/***/ },

/***/ 3595:
/*!********************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/expression-atlas-legend/src/LegendBaseline.jsx ***!
  \********************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	//*------------------------------------------------------------------*
	
	var React = __webpack_require__(/*! react */ 2919);
	var ReactDOM = __webpack_require__(/*! react-dom */ 2951);
	
	//*------------------------------------------------------------------*
	
	var LegendRow = __webpack_require__(/*! ./LegendRow.jsx */ 3586);
	var NumberFormat = __webpack_require__(/*! expression-atlas-number-format */ 3596).default;
	var HelpTooltips = __webpack_require__(/*! expression-atlas-help-tooltips */ 3589);
	
	//*------------------------------------------------------------------*
	
	__webpack_require__(/*! ./gxaLegend.css */ 3593);
	
	//*------------------------------------------------------------------*
	
	var LegendBaseline = React.createClass({
	    displayName: 'LegendBaseline',
	
	
	    propTypes: {
	        atlasBaseURL: React.PropTypes.string.isRequired,
	        minExpressionLevel: React.PropTypes.number.isRequired,
	        maxExpressionLevel: React.PropTypes.number.isRequired,
	        isMultiExperiment: React.PropTypes.bool.isRequired
	    },
	
	    render: function render() {
	        var _this = this;
	
	        var dataHelpLoc = this.props.isMultiExperiment ? "#gradient-base-crossexp" : "#gradient-base";
	
	        // The class gxaHeatmapLegendGradient is used for Selenium tests but isn’t styled
	        return React.createElement(
	            'div',
	            { className: 'gxaHeatmapLegendGradient' },
	            React.createElement(
	                'div',
	                { style: { display: "inline-table" } },
	                React.createElement(LegendRow, { lowExpressionLevel: NumberFormat.baselineExpression(this.props.minExpressionLevel),
	                    highExpressionLevel: NumberFormat.baselineExpression(this.props.maxExpressionLevel),
	                    lowValueColour: '#C0C0C0',
	                    highValueColour: '#0000FF' })
	            ),
	            React.createElement('div', { ref: function ref(legendHelpDiv) {
	                    _this.legendHelpDiv = legendHelpDiv;
	                }, 'data-help-loc': dataHelpLoc, className: 'gxaLegendHelp' })
	        );
	    },
	
	    componentDidMount: function componentDidMount() {
	        HelpTooltips(this.props.atlasBaseURL, "experiment", ReactDOM.findDOMNode(this.legendHelpDiv));
	    }
	});
	
	//*------------------------------------------------------------------*
	
	module.exports = LegendBaseline;

/***/ },

/***/ 3596:
/*!***************************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/expression-atlas-legend/~/expression-atlas-number-format/index.js ***!
  \***************************************************************************************************/
[7522, 3597],

/***/ 3597:
/*!***************************************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/expression-atlas-legend/~/expression-atlas-number-format/src/NumberFormat.jsx ***!
  \***************************************************************************************************************/
[7523, 2919],

/***/ 3598:
/*!*****************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/expression-atlas-cell-differential/index.js ***!
  \*****************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = __webpack_require__(/*! ./src/CellDifferential.jsx */ 3599);

/***/ },

/***/ 3599:
/*!*********************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/expression-atlas-cell-differential/src/CellDifferential.jsx ***!
  \*********************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var React = __webpack_require__(/*! react */ 2919);
	var ReactDOM = __webpack_require__(/*! react-dom */ 2951);
	var ReactDOMServer = __webpack_require__(/*! react-dom/server */ 3445);
	var $ = __webpack_require__(/*! jquery */ 3090);
	__webpack_require__(/*! jquery-ui-bundle */ 3565);
	
	var NumberFormat = __webpack_require__(/*! expression-atlas-number-format */ 3600).default;
	
	__webpack_require__(/*! ./gxaShowHideCell.css */ 3602);
	__webpack_require__(/*! ./gxaDifferentialCellTooltip.css */ 3604);
	
	var CellDifferential = React.createClass({
	    displayName: 'CellDifferential',
	
	
	    propTypes: {
	        fontSize: React.PropTypes.number,
	        colour: React.PropTypes.string,
	        foldChange: React.PropTypes.number,
	        pValue: React.PropTypes.number,
	        tStat: React.PropTypes.number,
	        displayLevels: React.PropTypes.bool.isRequired
	    },
	
	    _hasValue: function _hasValue() {
	        return !!this.props.foldChange;
	    },
	    _getStyle: function _getStyle() {
	        return this.props.fontSize ? { fontSize: this.props.fontSize + 'px' } : {};
	    },
	    render: function render() {
	        if (!this._hasValue()) {
	            return React.createElement('td', null);
	        }
	
	        return React.createElement(
	            'td',
	            { style: { backgroundColor: this.props.colour, verticalAlign: 'middle' } },
	            React.createElement(
	                'div',
	                { style: this._getStyle(), className: this.props.displayLevels ? 'gxaShowCell' : 'gxaHideCell' },
	                this.props.foldChange
	            )
	        );
	    },
	    componentDidMount: function componentDidMount() {
	        if (this._hasValue()) {
	            this._initTooltip(ReactDOM.findDOMNode(this));
	        }
	    },
	    _initTooltip: function _initTooltip(element) {
	        var _this = this;
	
	        function buildHeatmapCellTooltip(pValue, tStatistic, foldChange) {
	            return React.createElement(
	                'table',
	                null,
	                React.createElement(
	                    'thead',
	                    null,
	                    React.createElement(
	                        'tr',
	                        null,
	                        pValue ? React.createElement(
	                            'th',
	                            null,
	                            'Adjusted ',
	                            React.createElement(
	                                'em',
	                                null,
	                                'p'
	                            ),
	                            '-value'
	                        ) : null,
	                        tStatistic ? React.createElement(
	                            'th',
	                            null,
	                            React.createElement(
	                                'em',
	                                null,
	                                't'
	                            ),
	                            '-statistic'
	                        ) : null,
	                        React.createElement(
	                            'th',
	                            null,
	                            'Log',
	                            React.createElement(
	                                'sub',
	                                null,
	                                '2'
	                            ),
	                            '-fold change'
	                        )
	                    )
	                ),
	                React.createElement(
	                    'tbody',
	                    null,
	                    React.createElement(
	                        'tr',
	                        null,
	                        pValue ? React.createElement(
	                            'td',
	                            null,
	                            NumberFormat.scientificNotation(pValue)
	                        ) : null,
	                        tStatistic ? React.createElement(
	                            'td',
	                            null,
	                            Math.floor(tStatistic * 1e4) / 1e4
	                        ) : null,
	                        React.createElement(
	                            'td',
	                            null,
	                            foldChange
	                        )
	                    )
	                )
	            );
	        }
	
	        $(element).attr('title', '').tooltip({
	            open: function open(event, ui) {
	                ui.tooltip.css('background', _this.props.colour);
	            },
	
	            tooltipClass: 'gxaDifferentialCellTooltip',
	
	            content: function content() {
	                return ReactDOMServer.renderToStaticMarkup(buildHeatmapCellTooltip(_this.props.pValue, _this.props.tStat, _this.props.foldChange));
	            }
	        });
	    }
	});
	
	module.exports = CellDifferential;

/***/ },

/***/ 3600:
/*!*************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/expression-atlas-number-format/index.js ***!
  \*************************************************************************/
[7522, 3601],

/***/ 3601:
/*!*************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/expression-atlas-number-format/src/NumberFormat.jsx ***!
  \*************************************************************************************/
[7523, 2919],

/***/ 3602:
/*!********************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/expression-atlas-cell-differential/src/gxaShowHideCell.css ***!
  \********************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(/*! !../../css-loader!./gxaShowHideCell.css */ 3603);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(/*! ../../style-loader/addStyles.js */ 3155)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!../../css-loader/index.js!./gxaShowHideCell.css", function() {
				var newContent = require("!!../../css-loader/index.js!./gxaShowHideCell.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },

/***/ 3603:
/*!*********************************************************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/css-loader!./atlas_bundles/heatmap/~/expression-atlas-cell-differential/src/gxaShowHideCell.css ***!
  \*********************************************************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(/*! ../../css-loader/lib/css-base.js */ 3154)();
	// imports
	
	
	// module
	exports.push([module.id, ".gxaShowCell {\n    background-color: white;\n    white-space: nowrap;\n    text-align: center;\n    margin: 4px;\n    padding: 2px;\n}\n\n.gxaHideCell {\n    display: none;\n    visibility: hidden;\n}\n", ""]);
	
	// exports


/***/ },

/***/ 3604:
/*!*******************************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/expression-atlas-cell-differential/src/gxaDifferentialCellTooltip.css ***!
  \*******************************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(/*! !../../css-loader!./gxaDifferentialCellTooltip.css */ 3605);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(/*! ../../style-loader/addStyles.js */ 3155)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!../../css-loader/index.js!./gxaDifferentialCellTooltip.css", function() {
				var newContent = require("!!../../css-loader/index.js!./gxaDifferentialCellTooltip.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },

/***/ 3605:
/*!********************************************************************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/css-loader!./atlas_bundles/heatmap/~/expression-atlas-cell-differential/src/gxaDifferentialCellTooltip.css ***!
  \********************************************************************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(/*! ../../css-loader/lib/css-base.js */ 3154)();
	// imports
	
	
	// module
	exports.push([module.id, ".gxaDifferentialCellTooltip {\n    width: 26%;\n    left: 300px;\n    border: solid transparent;\n    color: darkslategray;\n    padding: 2px;\n    font: 10px Verdana, Helvetica, Arial, sans-serif;\n}\n\n.gxaDifferentialCellTooltip table {\n    margin: 0; /* overrides ebi-visual.css:134 */\n    background-color: white;\n    border: 1px solid lightgrey;\n    border-collapse: collapse;\n}\n\n.gxaDifferentialCellTooltip th {\n    border-bottom: 1px solid lightgrey;\n    background-color: floralwhite;\n}\n\n.gxaDifferentialCellTooltip td, .gxaDifferentialCellTooltip th {\n    text-align: center;\n    white-space: nowrap;\n    vertical-align: middle;\n    padding: 8px;\n    width: 25px;\n}\n.gxaDifferentialCellTooltip thead {\n    font-size: 0.9em;\n}\n\n.gxaDifferentialCellTooltip tbody {\n    font-size: smaller;\n}\n", ""]);
	
	// exports


/***/ },

/***/ 3606:
/*!*********************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/expression-atlas-display-levels-button/index.js ***!
  \*********************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = __webpack_require__(/*! ./src/DisplayLevelsButton.jsx */ 3607);

/***/ },

/***/ 3607:
/*!****************************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/expression-atlas-display-levels-button/src/DisplayLevelsButton.jsx ***!
  \****************************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var React = __webpack_require__(/*! react */ 2919);
	var ReactDOM = __webpack_require__(/*! react-dom */ 2951);
	
	var $ = __webpack_require__(/*! jquery */ 3090);
	__webpack_require__(/*! jquery-ui-bundle */ 3565);
	
	var DisplayLevelsButton = React.createClass({
	    displayName: 'DisplayLevelsButton',
	
	
	    propTypes: {
	        hideText: React.PropTypes.string.isRequired,
	        showText: React.PropTypes.string.isRequired,
	        onClickCallback: React.PropTypes.func.isRequired,
	        displayLevels: React.PropTypes.bool.isRequired,
	        width: React.PropTypes.string,
	        fontSize: React.PropTypes.string
	    },
	
	    _buttonText: function _buttonText() {
	        return this.props.displayLevels ? this.props.hideText : this.props.showText;
	    },
	
	    _updateButtonText: function _updateButtonText() {
	        $(ReactDOM.findDOMNode(this)).button({ label: this._buttonText() });
	    },
	
	    render: function render() {
	        var style = {};
	        if (this.props.width) {
	            style.width = this.props.width;
	        }
	        if (this.props.fontSize) {
	            style.fontSize = this.props.fontSize;
	        }
	
	        return React.createElement('button', { style: style, onClick: this.props.onClickCallback });
	    },
	
	    componentDidMount: function componentDidMount() {
	        this._updateButtonText();
	    },
	
	    componentDidUpdate: function componentDidUpdate() {
	        this._updateButtonText();
	    }
	
	});
	
	//*------------------------------------------------------------------*
	
	module.exports = DisplayLevelsButton;

/***/ },

/***/ 3608:
/*!*****************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/expression-atlas-contrast-tooltips/index.js ***!
  \*****************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	//*------------------------------------------------------------------*
	
	module.exports = __webpack_require__(/*! ./src/contrastTooltipModule.js */ 3609);

/***/ },

/***/ 3609:
/*!*************************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/expression-atlas-contrast-tooltips/src/contrastTooltipModule.js ***!
  \*************************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var React = __webpack_require__(/*! react */ 2919);
	var ReactDOMServer = __webpack_require__(/*! react-dom/server */ 3445);
	
	var $ = __webpack_require__(/*! jquery */ 3090);
	__webpack_require__(/*! jquery-ui-bundle */ 3565);
	
	//*------------------------------------------------------------------*
	
	var ContrastTooltip = __webpack_require__(/*! ./ContrastTooltip.jsx */ 3610);
	
	//*------------------------------------------------------------------*
	
	__webpack_require__(/*! ./gxaContrastTooltip.css */ 3611);
	
	//*------------------------------------------------------------------*
	
	function initTooltip(contextRoot, accessKey, element, experimentAccession, contrastId) {
	
	    $(element).attr("title", "").tooltip({
	
	        hide: false,
	
	        show: false,
	
	        tooltipClass: "gxaContrastTooltip",
	
	        position: { collision: "none" },
	
	        close: function close() {
	            $(".gxaContrastTooltip").remove();
	        },
	
	        content: function content(callback) {
	            $.ajax({
	                url: contextRoot + "/rest/contrast-summary",
	                data: {
	                    experimentAccession: experimentAccession,
	                    contrastId: contrastId,
	                    accessKey: accessKey
	                },
	                type: "GET",
	                success: function success(data) {
	                    var html = ReactDOMServer.renderToString(React.createElement(ContrastTooltip, {
	                        experimentDescription: data.experimentDescription,
	                        contrastDescription: data.contrastDescription,
	                        testReplicates: data.testReplicates,
	                        referenceReplicates: data.referenceReplicates,
	                        properties: data.properties
	                    }));
	                    callback(html);
	                }
	            }).fail(function (data) {
	                console.log("ERROR:  " + data);
	                callback("ERROR: " + data);
	            });
	        }
	
	    });
	}
	
	//*------------------------------------------------------------------*
	
	module.exports = function (contextRoot, accessKey, element, experimentAccession, contrastId) {
	    initTooltip(contextRoot, accessKey, element, experimentAccession, contrastId);
	};

/***/ },

/***/ 3610:
/*!********************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/expression-atlas-contrast-tooltips/src/ContrastTooltip.jsx ***!
  \********************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var React = __webpack_require__(/*! react */ 2919);
	
	var ContrastTooltip = React.createClass({
	    displayName: "ContrastTooltip",
	
	    propTypes: {
	        experimentDescription: React.PropTypes.string.isRequired,
	        contrastDescription: React.PropTypes.string.isRequired,
	        testReplicates: React.PropTypes.number.isRequired,
	        referenceReplicates: React.PropTypes.number.isRequired,
	        properties: React.PropTypes.arrayOf(React.PropTypes.shape({
	            contrastPropertyType: React.PropTypes.string,
	            propertyName: React.PropTypes.string.isRequired,
	            referenceValue: React.PropTypes.string.isRequired,
	            testValue: React.PropTypes.string.isRequired
	        }))
	    },
	
	    propertyRow: function propertyRow(property) {
	        if (!property.testValue && !property.referenceValue) {
	            return null;
	        }
	
	        function isFactor(property) {
	            return property.contrastPropertyType === "FACTOR";
	        }
	
	        var style = { whiteSpace: "normal" };
	
	        if (isFactor(property)) {
	            style.fontWeight = "bold";
	        } else {
	            style.color = "gray";
	        }
	
	        return React.createElement(
	            "tr",
	            { key: property.contrastPropertyType + "-" + property.propertyName },
	            React.createElement(
	                "td",
	                { style: style },
	                property.propertyName
	            ),
	            React.createElement(
	                "td",
	                { style: style },
	                property.testValue
	            ),
	            React.createElement(
	                "td",
	                { style: style },
	                property.referenceValue
	            )
	        );
	    },
	
	    render: function render() {
	        return React.createElement(
	            "div",
	            null,
	            React.createElement(
	                "div",
	                { id: "contrastExperimentDescription", style: { fontWeight: "bold", color: "blue", textAlign: "center" } },
	                this.props.experimentDescription
	            ),
	            React.createElement(
	                "div",
	                { id: "contrastDescription", style: { textAlign: "center" } },
	                this.props.contrastDescription
	            ),
	            React.createElement(
	                "table",
	                { style: { padding: "0px", margin: "0px", width: "100%" } },
	                React.createElement(
	                    "thead",
	                    null,
	                    React.createElement(
	                        "tr",
	                        null,
	                        React.createElement(
	                            "th",
	                            null,
	                            "Property"
	                        ),
	                        React.createElement(
	                            "th",
	                            null,
	                            "Test value (N=",
	                            this.props.testReplicates,
	                            ")"
	                        ),
	                        React.createElement(
	                            "th",
	                            null,
	                            "Reference value (N=",
	                            this.props.referenceReplicates,
	                            ")"
	                        )
	                    )
	                ),
	                React.createElement(
	                    "tbody",
	                    null,
	                    this.props.properties.map(this.propertyRow)
	                )
	            )
	        );
	    }
	
	});
	
	//*------------------------------------------------------------------*
	
	module.exports = ContrastTooltip;

/***/ },

/***/ 3611:
/*!***********************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/expression-atlas-contrast-tooltips/src/gxaContrastTooltip.css ***!
  \***********************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(/*! !../../css-loader!./gxaContrastTooltip.css */ 3612);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(/*! ../../style-loader/addStyles.js */ 3155)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!../../css-loader/index.js!./gxaContrastTooltip.css", function() {
				var newContent = require("!!../../css-loader/index.js!./gxaContrastTooltip.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },

/***/ 3612:
/*!************************************************************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/css-loader!./atlas_bundles/heatmap/~/expression-atlas-contrast-tooltips/src/gxaContrastTooltip.css ***!
  \************************************************************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(/*! ../../css-loader/lib/css-base.js */ 3154)();
	// imports
	
	
	// module
	exports.push([module.id, ".gxaContrastTooltip {\n    position: relative;\n    border: solid transparent;\n    color: darkslategray;\n    padding: 2px;\n    font: 10px Verdana, Helvetica, Arial, sans-serif;\n    max-width: 500px;\n}\n\n.gxaContrastTooltip table {\n    margin: 0; /* overrides ebi-visual.css:134 */\n    background-color: white;\n    border: 1px solid lightgrey;\n    border-collapse: collapse;\n    font-size: 0.8em;\n}\n\n.gxaContrastTooltip th {\n    border-bottom: 1px solid lightgrey;\n    background-color: floralwhite;\n}\n\n.gxaContrastTooltip td {\n    border: 1px solid lightgrey;\n}\n\n.gxaContrastTooltip td, .gxaContrastTooltip th {\n    vertical-align: middle;\n    padding: 8px;\n}\n\n#contrastExperimentDescription {\n    font-size: small;\n}\n", ""]);
	
	// exports


/***/ },

/***/ 3613:
/*!******************************************************************!*\
  !*** ./atlas_bundles/heatmap/src/genePropertiesTooltipModule.js ***!
  \******************************************************************/
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	//*------------------------------------------------------------------*
	
	var $ = __webpack_require__(/*! jquery */ 3090);
	__webpack_require__(/*! jquery-ui-bundle */ 3565);
	
	//*------------------------------------------------------------------*
	
	__webpack_require__(/*! ./genePropertiesTooltipModule.css */ 3614);
	
	//*------------------------------------------------------------------*
	
	/**
	 * @param {Object} options
	 * @param {string} options.contextRoot
	 * @param {string} options.geneName
	 * @param {string} options.identifier
	 * @param {Object} options.element
	 */
	function initTooltip(options) {
	
	    $(options.element).attr("title", "").tooltip({
	
	        hide: false,
	
	        show: false,
	
	        tooltipClass: "gxaGeneNameTooltip",
	
	        close: function close() {
	            $(".gxaGeneNameTooltip").remove();
	        },
	
	        position: { my: "left+10 top", at: "right" },
	
	        content: function content(callback) {
	            if (options.identifier) {
	                $.ajax({
	                    url: options.contextRoot + "/rest/genename-tooltip",
	                    data: {
	                        geneName: options.geneName,
	                        identifier: options.identifier
	                    },
	                    type: "GET",
	                    success: function success(response) {
	                        if (!response) {
	                            callback("Missing properties for id = " + options.identifier + " in Solr.");
	                        }
	
	                        callback(response);
	                    }
	                }).fail(function (data) {
	                    console.log("ERROR:  " + data);
	                    callback("ERROR: " + data);
	                });
	            }
	        }
	
	    });
	}
	
	//*------------------------------------------------------------------*
	
	exports.init = function (contextRoot, element, identifier, geneName) {
	    initTooltip({ contextRoot: contextRoot, element: element, identifier: identifier, geneName: geneName });
	};

/***/ },

/***/ 3614:
/*!*******************************************************************!*\
  !*** ./atlas_bundles/heatmap/src/genePropertiesTooltipModule.css ***!
  \*******************************************************************/
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(/*! !../~/css-loader!./genePropertiesTooltipModule.css */ 3615);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(/*! ../~/style-loader/addStyles.js */ 3155)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!../node_modules/css-loader/index.js!./genePropertiesTooltipModule.css", function() {
				var newContent = require("!!../node_modules/css-loader/index.js!./genePropertiesTooltipModule.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },

/***/ 3615:
/*!********************************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/css-loader!./atlas_bundles/heatmap/src/genePropertiesTooltipModule.css ***!
  \********************************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(/*! ../~/css-loader/lib/css-base.js */ 3154)();
	// imports
	
	
	// module
	exports.push([module.id, ".gxaGeneNameTooltip {\n    border: solid transparent;\n    color: darkslategray;\n    padding: 2px;\n    font: 10px Verdana, Helvetica, Arial, sans-serif;\n    background: floralwhite;\n}\n\nspan.gxaGenePropertyLabel {\n    color: brown;\n    font-weight: bold;\n    display: inline-block;\n    text-align: left;\n}\n\n.gxaPropertyValueMarkup {\n    text-align: center;\n    background-color: rgb(223, 213, 213);\n\n}\n\n.gxaGeneNameTooltip {\n    text-align: justify;\n}", ""]);
	
	// exports


/***/ },

/***/ 3616:
/*!**********************************************************!*\
  !*** ./atlas_bundles/heatmap/src/factorTooltipModule.js ***!
  \**********************************************************/
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	//*------------------------------------------------------------------*
	
	var React = __webpack_require__(/*! react */ 2919);
	var ReactDOMServer = __webpack_require__(/*! react-dom/server */ 3445);
	
	var $ = __webpack_require__(/*! jquery */ 3090);
	__webpack_require__(/*! jquery-ui-bundle */ 3565);
	
	//*------------------------------------------------------------------*
	
	var FactorTooltip = __webpack_require__(/*! ./FactorTooltip.jsx */ 3617);
	
	//*------------------------------------------------------------------*
	
	__webpack_require__(/*! ./factorTooltipModule.css */ 3618);
	
	//*------------------------------------------------------------------*
	
	/**
	 * @param {Object} options
	 * @param {string} options.contextRoot
	 * @param {string} options.accessKey
	 * @param {string} options.experimentAccession
	 * @param {string} options.assayGroupId
	 * @param {Object} options.element
	 */
	function initTooltip(options) {
	
	    $(options.element).attr("title", "").tooltip({
	
	        hide: false,
	
	        show: false,
	
	        tooltipClass: "gxaFactorTooltip",
	
	        close: function close() {
	            $(".gxaFactorTooltip").remove();
	        },
	
	        content: function content(callback) {
	            $.ajax({
	                url: options.contextRoot + "/rest/assayGroup-summary",
	                data: {
	                    experimentAccession: options.experimentAccession,
	                    assayGroupId: options.assayGroupId,
	                    accessKey: options.accessKey
	                },
	                type: "GET",
	                success: function success(data) {
	                    var html = ReactDOMServer.renderToString(React.createElement(FactorTooltip, {
	                        properties: data.properties,
	                        replicates: data.replicates
	                    }));
	                    callback(html);
	                }
	            }).fail(function (data) {
	                console.log("ERROR:  " + data);
	                callback("ERROR: " + data);
	            });
	        }
	    });
	}
	
	//*------------------------------------------------------------------*
	
	exports.init = function (contextRoot, accessKey, element, experimentAccession, assayGroupId) {
	    initTooltip({ contextRoot: contextRoot, accessKey: accessKey, element: element, experimentAccession: experimentAccession, assayGroupId: assayGroupId });
	};

/***/ },

/***/ 3617:
/*!*****************************************************!*\
  !*** ./atlas_bundles/heatmap/src/FactorTooltip.jsx ***!
  \*****************************************************/
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	//*------------------------------------------------------------------*
	
	var React = __webpack_require__(/*! react */ 2919);
	
	//*------------------------------------------------------------------*
	
	var FactorTooltip = React.createClass({
	    displayName: 'FactorTooltip',
	
	
	    propertyRow: function propertyRow(property) {
	        if (!property.testValue) {
	            return null;
	        }
	
	        function isFactor(property) {
	            return property.contrastPropertyType === 'FACTOR';
	        }
	
	        var style = { 'whiteSpace': 'normal' };
	
	        if (isFactor(property)) {
	            style['fontWeight'] = 'bold';
	        } else {
	            style['color'] = 'gray';
	        }
	
	        return React.createElement(
	            'tr',
	            { key: property.propertyName },
	            React.createElement(
	                'td',
	                { style: style },
	                property.propertyName
	            ),
	            React.createElement(
	                'td',
	                { style: style },
	                property.testValue
	            )
	        );
	    },
	
	    render: function render() {
	        return React.createElement(
	            'div',
	            null,
	            React.createElement(
	                'table',
	                null,
	                React.createElement(
	                    'thead',
	                    null,
	                    React.createElement(
	                        'tr',
	                        null,
	                        React.createElement(
	                            'th',
	                            null,
	                            'Property'
	                        ),
	                        React.createElement(
	                            'th',
	                            null,
	                            'Value (N=',
	                            this.props.replicates,
	                            ')'
	                        )
	                    )
	                ),
	                React.createElement(
	                    'tbody',
	                    null,
	                    this.props.properties.map(this.propertyRow)
	                )
	            )
	        );
	    }
	});
	
	//*------------------------------------------------------------------*
	
	module.exports = FactorTooltip;

/***/ },

/***/ 3618:
/*!***********************************************************!*\
  !*** ./atlas_bundles/heatmap/src/factorTooltipModule.css ***!
  \***********************************************************/
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(/*! !../~/css-loader!./factorTooltipModule.css */ 3619);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(/*! ../~/style-loader/addStyles.js */ 3155)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!../node_modules/css-loader/index.js!./factorTooltipModule.css", function() {
				var newContent = require("!!../node_modules/css-loader/index.js!./factorTooltipModule.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },

/***/ 3619:
/*!************************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/css-loader!./atlas_bundles/heatmap/src/factorTooltipModule.css ***!
  \************************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(/*! ../~/css-loader/lib/css-base.js */ 3154)();
	// imports
	
	
	// module
	exports.push([module.id, ".gxaFactorTooltip {\n    border: solid transparent;\n    color: darkslategray;\n    padding: 2px;\n    font: 10px Verdana, Helvetica, Arial, sans-serif;\n    max-width: 600px;\n}\n\n.gxaFactorTooltip table {\n    margin: 0; /* overrides ebi-visual.css:134 */\n    background-color: white;\n    border: 1px solid lightgrey;\n    border-collapse: collapse;\n}\n\n.gxaFactorTooltip th {\n    border-bottom: 1px solid lightgrey;\n    background-color: floralwhite;\n}\n\n.gxaFactorTooltip td {\n    border: 1px solid lightgrey;\n    white-space: nowrap;\n}\n\n.gxaFactorTooltip td, .gxaFactorTooltip th {\n    vertical-align: middle;\n    padding: 8px;\n}\n", ""]);
	
	// exports


/***/ },

/***/ 3620:
/*!*********************************************************!*\
  !*** ./atlas_bundles/heatmap/src/stickyHeaderModule.js ***!
  \*********************************************************/
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	//*------------------------------------------------------------------*
	
	var $ = __webpack_require__(/*! jquery */ 3090);
	
	//*------------------------------------------------------------------*
	
	function StickyHeaderModule(table, stickyIntersect, stickyColumn, stickyHeadRow, stickyWrap, tableHeader) {
	    var $t = $(table),
	        $stickyIntersect = $(stickyIntersect),
	        $stickyColumn = $(stickyColumn),
	        $stickyHeadRow = $(stickyHeadRow),
	        $stickyWrap = $(stickyWrap),
	        $tableHeader = $(tableHeader);
	
	    var calculateAllowance = createStickyAllowanceCallback($t, $stickyHeadRow);
	    var stickyReposition = createStickyRepositionCallback($t, $stickyIntersect, $stickyColumn, $stickyHeadRow, $stickyWrap, $tableHeader, calculateAllowance);
	    var setWidthAndHeight = createSetStickyWidthHeight($t, $stickyIntersect, $stickyColumn, $stickyHeadRow, $stickyWrap);
	    var setWidthsAndReposition = createSetStickyWidthHeightAndRepositionCallback(setWidthAndHeight, stickyReposition);
	
	    return {
	        calculateAllowance: calculateAllowance,
	        stickyReposition: stickyReposition,
	        setWidthAndHeight: setWidthAndHeight,
	        setWidthsAndReposition: setWidthsAndReposition
	    };
	
	    function createSetStickyWidthHeight($t, $stickyIntersect, $stickyColumn, $stickyHeadRow, $stickyWrap) {
	        return function () {
	            $t.find("thead th").each(function (i) {
	                $stickyHeadRow.find("th").eq(i).width($(this).width());
	            }).end().find("tr").each(function (i) {
	                $stickyColumn.find("tr").eq(i).height($(this).height());
	                $stickyIntersect.find("tr").eq(i).height($(this).height());
	            });
	
	            $stickyHeadRow.width($stickyWrap.width()).find("table").width($t.width());
	            $stickyIntersect.find("table").outerWidth($t.find("thead th").eq(0).outerWidth());
	            $stickyColumn.find("table").outerWidth($t.find("thead th").eq(0).outerWidth());
	
	            // Set width of sticky table col
	            $stickyIntersect.find("tr:nth-child(2) th").each(function (i) {
	                $(this).width($t.find("tr:nth-child(2) th").eq(i).width());
	            });
	        };
	    }
	
	    function createStickyRepositionCallback($t, $stickyIntersect, $stickyColumn, $stickyHeadRow, $stickyWrap, $tableHeader, stickyAllowanceCallback) {
	        return function () {
	            var $w = $(window);
	
	            // Set position sticky col
	            $stickyHeadRow.add($stickyIntersect).add($stickyColumn).css({
	                left: $stickyWrap.offset().left,
	                top: $stickyWrap.offset().top
	            });
	
	            var allowance = stickyAllowanceCallback();
	
	            $stickyHeadRow.find("table").css({
	                left: -$stickyWrap.scrollLeft()
	            });
	            $stickyColumn.css({
	                top: $stickyWrap.offset().top - $w.scrollTop(),
	                left: $stickyWrap.offset().left
	            });
	
	            // 1. Position sticky header based on viewport scrollTop
	            if ($w.scrollTop() + $tableHeader.outerHeight() > $t.offset().top && $w.scrollTop() + $tableHeader.outerHeight() < $t.offset().top + $t.outerHeight() - allowance) {
	                // When top of viewport is in the table itself
	                $stickyHeadRow.add($stickyIntersect).css({
	                    visibility: "visible",
	                    top: $tableHeader.outerHeight()
	                });
	            } else if ($w.scrollTop() + $tableHeader.outerHeight() > $t.offset().top + $t.outerHeight() - allowance) {
	                $stickyHeadRow.add($stickyIntersect).css({
	                    visibility: "visible",
	                    top: $t.offset().top + $t.outerHeight() - allowance - $w.scrollTop()
	                });
	            } else {
	                // When top of viewport is above or below table
	                $stickyHeadRow.add($stickyIntersect).css({
	                    visibility: "hidden",
	                    top: $stickyWrap.offset().top - $w.scrollTop()
	                });
	            }
	
	            // 2. Now deal with positioning of sticky column
	            if ($stickyWrap.scrollLeft() > 0) {
	                // When left of wrapping parent is out of view
	                $stickyColumn.css({
	                    visibility: "visible",
	                    "z-index": 40
	                });
	            } else {
	                $stickyColumn.css({
	                    visibility: "hidden",
	                    "z-index": -5
	                });
	            }
	        };
	    }
	
	    function createSetStickyWidthHeightAndRepositionCallback(setWidthAndHeightCallback, stickyRepositionCallback) {
	        return function () {
	            setWidthAndHeightCallback();
	            stickyRepositionCallback();
	        };
	    }
	
	    function createStickyAllowanceCallback($t, $stickyHeadRow) {
	        return function () {
	            var rowHeight = 0;
	            // Calculate allowance
	            $t.find("tbody tr:lt(1)").each(function () {
	                rowHeight += $(this).height();
	            });
	            return rowHeight + $stickyHeadRow.height();
	        };
	    }
	}
	
	//*------------------------------------------------------------------*
	
	module.exports = StickyHeaderModule;

/***/ },

/***/ 3621:
/*!**********************************************************!*\
  !*** ./atlas_bundles/heatmap/src/stickyHeaderModule.css ***!
  \**********************************************************/
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(/*! !../~/css-loader!./stickyHeaderModule.css */ 3622);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(/*! ../~/style-loader/addStyles.js */ 3155)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!../node_modules/css-loader/index.js!./stickyHeaderModule.css", function() {
				var newContent = require("!!../node_modules/css-loader/index.js!./stickyHeaderModule.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },

/***/ 3622:
/*!***********************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/css-loader!./atlas_bundles/heatmap/src/stickyHeaderModule.css ***!
  \***********************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(/*! ../~/css-loader/lib/css-base.js */ 3154)();
	// imports
	
	
	// module
	exports.push([module.id, ".gxaStickyTableWrap {\n    overflow-x: auto;\n    overflow-y: hidden;\n    position: relative;\n    width: 100%;\n}\n\n.gxaStickyTableWrap div[class^='gxaSticky'] {\n    overflow: hidden;\n}\n.gxaStickyTableWrap tfoot {\n    display: none;\n}\n.gxaStickyTableWrap div table {\n    margin: 0;\n    position: relative;\n    width: auto; /* Prevent table from stretching to full size */\n    border-collapse: collapse;\n}\n.gxaStickyTableWrap .gxaStickyTableHeader,\n.gxaStickyTableWrap .gxaStickyTableColumn,\n.gxaStickyTableWrap .gxaStickyTableIntersect {\n    visibility: hidden;\n    position: fixed;\n    z-index: 40;\n}\n.gxaStickyTableWrap .gxaStickyTableHeader {\n    z-index: 50;\n    width: 100%; /* Force stretch */\n}\n.gxaStickyTableWrap .gxaStickyTableIntersect {\n    z-index: 60;\n}\n.gxaStickyTableWrap td,\n.gxaStickyTableWrap th {\n    box-sizing: border-box;\n}\n.gxaStickyTableWrap thead th {\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n}\n.gxaStickyEnabled {\n    margin: 0;\n    width: auto;\n}\n\n.wrapper-sticky {\n    z-index: 45;\n}\n\n/* To hide sticky column and intersect when screen gets too narrow */\n@media only screen and (max-width: 768px) {\n    .gxaStickyTableColumn, .gxaStickyTableIntersect {\n        display: none;\n    }\n}\n", ""]);
	
	// exports


/***/ },

/***/ 3623:
/*!***********************************************!*\
  !*** ./atlas_bundles/heatmap/src/Heatmap.css ***!
  \***********************************************/
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(/*! !../~/css-loader!./Heatmap.css */ 3624);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(/*! ../~/style-loader/addStyles.js */ 3155)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!../node_modules/css-loader/index.js!./Heatmap.css", function() {
				var newContent = require("!!../node_modules/css-loader/index.js!./Heatmap.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },

/***/ 3624:
/*!************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/css-loader!./atlas_bundles/heatmap/src/Heatmap.css ***!
  \************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(/*! ../~/css-loader/lib/css-base.js */ 3154)();
	// imports
	
	
	// module
	exports.push([module.id, ".gxaHeatmapMatrixTopLeftCorner {\n    position: relative;\n    display: table;\n    height: 110px;\n    width: 100%;\n    min-width: 160px;\n}\n\n.gxaTableGrid {\n    color: #404040;\n    background-color: white;\n    border: 1px solid #cdcdcd !important;\n    border-spacing: 0;\n    empty-cells: show;\n    height: 100%;\n    text-align: left;\n    width: auto;\n    border-collapse: collapse;\n}\n\n.gxaTableGrid>tbody>tr>td, .gxaTableGrid>thead>tr>td {\n    color: #3D3D3D;\n    vertical-align: middle;\n    border: 1px solid #cdcdcd !important;\n    height: 25px;\n    width: 25px;\n    white-space: nowrap;\n}\n\nth.gxaVerticalHeaderCell, .gxaHorizontalHeaderCell {\n    font-weight: normal;\n    background-color: rgb(237, 246, 246) !important;\n}\n\nth.gxaHoverableHeader:hover, th.gxaHeaderHover {\n    background-color: #deebeb !important;\n}\n\nth.gxaSelectableHeader:hover {\n    cursor: pointer;\n}\n\nth.gxaVerticalHeaderCell-selected, th.gxaVerticalHeaderCell-selected:hover, th.gxaHorizontalHeaderCell-selected, th.gxaHorizontalHeaderCell-selected:hover {\n    background-color: rgb(181, 234, 234) !important;\n    border: 1px solid #cdcdcd;\n    padding:5px;\n}\n\nth.gxaHorizontalHeaderCell {\n    border: 1px solid #cdcdcd;\n    white-space: nowrap;\n    padding:5px;\n    text-align: left !important;\n}\n\ntr.gxaProteomicsExperiment td.gxaHorizontalHeaderCell {\n    background-color: rgb(210, 233, 233) !important;\n}\n\ntr.gxaProteomicsExperiment td.gxaHorizontalHeaderCell-selected, tr.gxaProteomicsExperiment td.gxaHorizontalHeaderCell:hover {\n    background-color: rgb(200, 220, 220) !important;\n}\n\n.gxaHeatmapCell {\n    font-size: 9px;\n    background-color: white;\n    margin: 4px;\n    padding: 2px;\n    white-space: nowrap;\n    text-align: center;\n}\n\nth.gxaHeatmapTableDesignElement {\n    font-weight: normal;\n    text-align: left;\n    border: 1px solid #CDCDCD;\n}\n\n.gxaHeatmapCountAndLegend {\n    background: white;\n}\n\n.csstransforms .rotated_cell {\n    height: 130px;\n    border: 1px solid #cdcdcd;\n    vertical-align: bottom;\n    padding-bottom: 10px\n}\n\n.csstransforms .rotate_text {\n    position: relative;\n    top: 27px;\n    width: 25px;\n    padding-top: 5px;\n    white-space: nowrap;\n    -moz-transform: rotate(-90deg);\n    -moz-transform-origin: top left;\n    -ms-transform: rotate(-90deg);\n    -ms-transform-origin: top left;\n    -webkit-transform: rotate(-90deg);\n    -webkit-transform-origin: top left;\n    -o-transform: rotate(-90deg);\n    -o-transform-origin: top left;\n}\n\n.csstransforms .rotate_tick {\n    -moz-transform: rotate(-270deg);\n    -webkit-transform: rotate(-270deg);\n    -ms-transform: rotate(-270deg);\n    -o-transform: rotate(-270deg);\n}\n\n.gxaNoTextButton {\n    border: 1px solid #ccc !important; /* overrides ebi-visual.css */\n}\n\n.gxaNoTextButton .ui-button-text {\n    padding: 2px;\n}\n\n.gxaFeedbackBoxWrapper {\n  margin-top: 15px;\n}\n\n.gxaDisplayCoexpressionOffer {\n  margin-top: 30px;\n}\n\n.gxaDisplayCoexpressionOffer .gxaSlider {\n  width: 250px;\n  margin: 15px;\n  padding-bottom: 20px;\n}\n\n.gxaDisplayCoexpressionOffer p {\n  font-size: 93%;\n}\n", ""]);
	
	// exports


/***/ },

/***/ 3858:
/*!******************************************************!*\
  !*** ./atlas_bundles/heatmap/src/experimentTypes.js ***!
  \******************************************************/
/***/ function(module, exports) {

	"use strict";
	
	//*------------------------------------------------------------------*
	
	module.exports = {
	    BASELINE: { isBaseline: true, heatmapTooltip: "#heatMapTableCellInfo-baseline" },
	    PROTEOMICS_BASELINE: { isBaseline: true, isProteomics: true, heatmapTooltip: "#heatMapTableCellInfo-proteomics" },
	    DIFFERENTIAL: { isDifferential: true, heatmapTooltip: "#heatMapTableCellInfo-differential" },
	    MULTIEXPERIMENT: { isMultiExperiment: true, heatmapTooltip: "#heatMapTableCellInfo-multiexperiment" }
	};

/***/ },

/***/ 6190:
/*!****************************************!*\
  !*** ./atlas_bundles/heatmap/index.js ***!
  \****************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = __webpack_require__(/*! ./src/heatmapAnatomogramRenderer.js */ 6191);

/***/ },

/***/ 6191:
/*!*****************************************************************!*\
  !*** ./atlas_bundles/heatmap/src/heatmapAnatomogramRenderer.js ***!
  \*****************************************************************/
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var React = __webpack_require__(/*! react */ 2919);
	var ReactDOM = __webpack_require__(/*! react-dom */ 2951);
	
	//*------------------------------------------------------------------*
	
	var EventEmitter = __webpack_require__(/*! events */ 3093);
	
	var HeatmapAnatomogramContainer = __webpack_require__(/*! ./HeatmapAnatomogramContainer.jsx */ 6192);
	
	var ExperimentTypes = __webpack_require__(/*! ./experimentTypes.js */ 3858);
	
	//*------------------------------------------------------------------*
	
	/**
	 * @param {Object}      options
	 * @param {string}          options.proxyPrefix - optionally set as "http(s?)://" or to proxy URL
	 * @param {string}          options.selfHosted - Set this as true if you want to host our content yourself, but have outwards links pointing to our original site
	 * @param {boolean=}        options.disableGoogleAnalytics - Disable Google Analytics: required by CTTV
	 * @param {string=}         options.atlasHost - Atlas host with port (note: don’t include port)
	 * @param {string}          options.params
	 * @param {boolean=}        options.isMultiExperiment
	 * @param {boolean=}        options.showAnatomogram
	 * @param {boolean=}        options.isWidget
	 * @param {string | Object} options.target - a <div> id or a DOM element, as returned by ReactDOM.findDOMNode()
	 * @param {function}        options.fail - Callback to run if the AJAX request to the server fails. (jqXHR, textStatus)
	 */
	exports.render = function (options) {
	
	    var atlasHost = options.atlasHost === undefined ? "https://www.ebi.ac.uk" : options.atlasHost,
	        atlasPath = "/gxa";
	
	    var atlasBaseURL = (atlasHost.indexOf("http://") === 0 || atlasHost.indexOf("https://") === 0 ? "" : options.proxyPrefix || "https://") + atlasHost + atlasPath;
	
	    var linksAtlasBaseURL = options.selfHosted ? (options.proxyPrefix || "https://") + "www.ebi.ac.uk/gxa" : atlasBaseURL;
	
	    var endpointPath = options.isMultiExperiment ? "/widgets/heatmap/baselineAnalytics" : "/widgets/heatmap/referenceExperiment";
	
	    var sourceURL = atlasBaseURL + endpointPath + "?" + options.params;
	
	    var anatomogramEventEmitter = new EventEmitter();
	    anatomogramEventEmitter.setMaxListeners(0);
	
	    ReactDOM.render(React.createElement(HeatmapAnatomogramContainer, { key: JSON.stringify(options.params),
	        sourceURL: sourceURL,
	        atlasBaseURL: atlasBaseURL,
	        pathToFolderWithBundledResources: linksAtlasBaseURL + "/resources/js-bundles/",
	        linksAtlasBaseURL: linksAtlasBaseURL,
	        type: options.isMultiExperiment ? ExperimentTypes.MULTIEXPERIMENT : ExperimentTypes.BASELINE,
	        showAnatomogram: options.showAnatomogram === undefined ? true : options.showAnatomogram,
	        isWidget: options.isWidget === undefined ? true : options.isWidget,
	        disableGoogleAnalytics: options.disableGoogleAnalytics === undefined ? false : options.disableGoogleAnalytics,
	        fail: options.fail,
	        anatomogramEventEmitter: anatomogramEventEmitter
	    }), typeof options.target === "string" ? document.getElementById(options.target) : options.target);
	};

/***/ },

/***/ 6192:
/*!*******************************************************************!*\
  !*** ./atlas_bundles/heatmap/src/HeatmapAnatomogramContainer.jsx ***!
  \*******************************************************************/
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	//*------------------------------------------------------------------*
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var React = __webpack_require__(/*! react */ 2919);
	var ReactDOM = __webpack_require__(/*! react-dom */ 2951);
	
	var $ = __webpack_require__(/*! jquery */ 3090);
	__webpack_require__(/*! jquery-hc-sticky */ 3092);
	
	var URI = __webpack_require__(/*! urijs */ 6193);
	
	//*------------------------------------------------------------------*
	
	var Anatomogram = __webpack_require__(/*! anatomogram */ 3094);
	var Heatmap = __webpack_require__(/*! ./Heatmap.jsx */ 3444);
	var ExperimentsList = __webpack_require__(/*! ./ExperimentsList.jsx */ 6197);
	var ExperimentTypes = __webpack_require__(/*! ./experimentTypes.js */ 3858);
	
	//*------------------------------------------------------------------*
	
	__webpack_require__(/*! ./HeatmapAnatomogramContainer.css */ 6198);
	
	//*------------------------------------------------------------------*
	
	var ExperimentDescription = React.createClass({
	    displayName: 'ExperimentDescription',
	
	    propTypes: {
	        linksAtlasBaseURL: React.PropTypes.string.isRequired,
	        experiment: React.PropTypes.shape({
	            URL: React.PropTypes.string.isRequired,
	            description: React.PropTypes.string.isRequired,
	            species: React.PropTypes.string.isRequired
	        }).isRequired
	    },
	
	    render: function render() {
	
	        var experimentURL = this.props.linksAtlasBaseURL + this.props.experiment.URL;
	
	        return React.createElement(
	            'div',
	            { style: { width: "100%", paddingBottom: "20px" } },
	            React.createElement(
	                'div',
	                { id: 'experimentDescription' },
	                React.createElement(
	                    'a',
	                    { id: 'goto-experiment', className: 'gxaThickLink', title: 'Experiment Page', href: experimentURL },
	                    this.props.experiment.description
	                )
	            ),
	            React.createElement(
	                'div',
	                { id: 'experimentOrganisms' },
	                'Organism: ',
	                React.createElement(
	                    'span',
	                    { style: { "fontStyle": "italic" } },
	                    this.props.experiment.species
	                )
	            )
	        );
	    }
	
	});
	var AsynchronouslyLoadedHeatmapAnatomogramContainer = React.createClass({
	    displayName: 'AsynchronouslyLoadedHeatmapAnatomogramContainer',
	
	    getDefaultProps: function getDefaultProps() {
	        return {
	            referenceToAnatomogramContainer: "anatomogramContainer"
	        };
	    },
	
	    _ontologyIdsForTissuesExpressedInAllRows: function _ontologyIdsForTissuesExpressedInAllRows() {
	        //TODO be less copypastey
	        var _expressedFactors = function _expressedFactors(expressedFactorsPerRow) {
	            var o = expressedFactorsPerRow;
	            var vs = Object.keys(o).map(function (e) {
	                return o[e];
	            });
	            return [].concat.apply([], vs).filter(function uniq(e, ix, self) {
	                return self.indexOf(e) === ix;
	            });
	        };
	        var _expressedFactorsPerRow = function _expressedFactorsPerRow(profileRows) {
	            return profileRows.reduce(function (result, row) {
	                result[row.name] = row.expressions.filter(function (expression) {
	                    return expression.value;
	                }).map(function (expression) {
	                    return expression.svgPathId;
	                });
	                return result;
	            }, {});
	        };
	        return _expressedFactors(_expressedFactorsPerRow(this.props.profiles.rows));
	    },
	    _ontologyIdsForTissuesExpressedInRow: function _ontologyIdsForTissuesExpressedInRow(rowTitle) {
	        //TODO be more sane
	        var _expressedFactorsPerRow = function _expressedFactorsPerRow(profileRows) {
	            return profileRows.reduce(function (result, row) {
	                result[row.name] = row.expressions.filter(function (expression) {
	                    return expression.value;
	                }).map(function (expression) {
	                    return expression.svgPathId;
	                });
	                return result;
	            }, {});
	        };
	        return _expressedFactorsPerRow(this.props.profiles.rows)[rowTitle];
	    },
	    render: function render() {
	
	        var anatomogramExpressedTissueColour = this.props.type.isMultiExperiment ? "red" : "gray";
	        var anatomogramHoveredTissueColour = this.props.type.isMultiExperiment ? "indigo" : "red";
	        var anatomogramConfig = {
	            pathToFolderWithBundledResources: this.props.pathToFolderWithBundledResources,
	            anatomogramData: this.props.anatomogramData,
	            expressedTissueColour: anatomogramExpressedTissueColour,
	            hoveredTissueColour: anatomogramHoveredTissueColour,
	            idsExpressedInExperiment: this._ontologyIdsForTissuesExpressedInAllRows(),
	            eventEmitter: this.props.anatomogramEventEmitter,
	            atlasBaseURL: this.props.atlasBaseURL
	        };
	
	        var homoSapiensCellLine = this.props.heatmapConfig.species === "homo sapiens" && new URI(this.props.sourceURL).search(true).source === "CELL_LINE";
	        var Component, componentProps;
	        if (homoSapiensCellLine) {
	            Component = ExperimentsList;
	            componentProps = {
	                profiles: this.props.profiles,
	                atlasBaseURL: this.props.atlasBaseURL,
	                linksAtlasBaseURL: this.props.linksAtlasBaseURL,
	                geneQuery: this.props.heatmapConfig.geneQuery
	            };
	        } else {
	            Component = Heatmap;
	            componentProps = {
	                type: this.props.type,
	                heatmapConfig: this.props.heatmapConfig,
	                columnHeaders: this.props.columnHeaders,
	                profiles: this.props.profiles,
	                geneSetProfiles: this.props.geneSetProfiles,
	                anatomogramEventEmitter: this.props.anatomogramEventEmitter,
	                atlasBaseURL: this.props.atlasBaseURL,
	                linksAtlasBaseURL: this.props.linksAtlasBaseURL,
	                googleAnalyticsCallback: this.props.googleAnalyticsCallback
	            };
	        }
	        var Wrapped = Anatomogram.wrapComponent(anatomogramConfig, Component, componentProps);
	        return this.props.anatomogramData ? React.createElement(Wrapped, { ref: this.props.referenceToAnatomogramContainer }) : React.createElement(Component, componentProps);
	    },
	    componentDidMount: function componentDidMount() {
	        this.props.anatomogramEventEmitter.addListener('gxaHeatmapColumnHoverChange', function (columnId) {
	            this.refs[this.props.referenceToAnatomogramContainer].setState({ ontologyIdsForComponentContentUnderFocus: columnId ? [columnId] : [] });
	        }.bind(this));
	        this.props.anatomogramEventEmitter.addListener('gxaHeatmapRowHoverChange', function (rowId) {
	            this.refs[this.props.referenceToAnatomogramContainer].setState({ ontologyIdsForComponentContentUnderFocus: rowId ? this._ontologyIdsForTissuesExpressedInRow(rowId) : [] });
	        }.bind(this));
	    }
	});
	var HeatmapAnatomogramContainer = React.createClass({
	    displayName: 'HeatmapAnatomogramContainer',
	
	    propTypes: {
	        pathToFolderWithBundledResources: React.PropTypes.string.isRequired,
	        sourceURL: React.PropTypes.string.isRequired,
	        atlasBaseURL: React.PropTypes.string.isRequired,
	        linksAtlasBaseURL: React.PropTypes.string.isRequired,
	        type: React.PropTypes.oneOf([ExperimentTypes.BASELINE, ExperimentTypes.MULTIEXPERIMENT, ExperimentTypes.DIFFERENTIAL, ExperimentTypes.PROTEOMICS_BASELINE]).isRequired,
	        showAnatomogram: React.PropTypes.bool.isRequired,
	        isWidget: React.PropTypes.bool.isRequired,
	        disableGoogleAnalytics: React.PropTypes.bool.isRequired,
	        fail: React.PropTypes.func,
	        googleAnalyticsCallback: React.PropTypes.func,
	        anatomogramEventEmitter: React.PropTypes.object.isRequired,
	        facetsEventEmitter: React.PropTypes.object
	    },
	
	    render: function render() {
	
	        var geneURL = this.props.linksAtlasBaseURL + "/query" + "?geneQuery=" + this.state.heatmapConfig.geneQuery + "&organism=" + this.state.heatmapConfig.species;
	
	        return React.createElement(
	            'div',
	            { ref: 'this' },
	            this.state.experimentData ? React.createElement(ExperimentDescription, { experiment: this.state.experimentData, linksAtlasBaseURL: this.props.linksAtlasBaseURL }) : null,
	            this.state.heatmapConfig ? React.createElement(AsynchronouslyLoadedHeatmapAnatomogramContainer, _extends({}, this.props, this.state)) : React.createElement(
	                'div',
	                { ref: 'loadingImagePlaceholder' },
	                React.createElement('img', { src: this.props.atlasBaseURL + "/resources/images/loading.gif" })
	            ),
	            this.props.isWidget ? React.createElement(
	                'div',
	                null,
	                React.createElement(
	                    'p',
	                    null,
	                    React.createElement(
	                        'a',
	                        { href: geneURL },
	                        'See more expression data at Expression Atlas.'
	                    ),
	                    React.createElement('br', null),
	                    'This expression view is provided by ',
	                    React.createElement(
	                        'a',
	                        { href: this.props.linksAtlasBaseURL },
	                        'Expression Atlas'
	                    ),
	                    '.',
	                    React.createElement('br', null),
	                    'Please direct any queries or feedback to ',
	                    React.createElement(
	                        'a',
	                        { href: 'mailto:arrayexpress-atlas@ebi.ac.uk' },
	                        'arrayexpress-atlas@ebi.ac.uk'
	                    )
	                )
	            ) : null
	        );
	    },
	
	    getInitialState: function getInitialState() {
	        return {
	            heatmapConfig: '',
	            columnHeaders: [],
	            profiles: {
	                rows: [],
	                minExpressionLevel: 0,
	                maxExpressionLevel: 0
	            },
	            jsonCoexpressions: [],
	            geneSetProfiles: {},
	            anatomogramData: {},
	            experimentData: '',
	            googleAnalyticsCallback: function googleAnalyticsCallback() {}
	        };
	    },
	
	    _updateStateAsynchronously: function _updateStateAsynchronously(data) {
	        this.setState({
	            heatmapConfig: data.config,
	            columnHeaders: data.columnHeaders,
	            profiles: data.profiles,
	            jsonCoexpressions: data.jsonCoexpressions,
	            geneSetProfiles: data.geneSetProfiles,
	            anatomogramData: data.anatomogram,
	            experimentData: data.experiment
	        });
	    },
	
	    componentDidMount: function componentDidMount() {
	        var handleError = function (jqXHR, textStatus, errorThrown) {
	            if (this.props.fail) {
	                this.props.fail(jqXHR, textStatus, errorThrown);
	            } else if (textStatus === "parsererror") {
	                $(ReactDOM.findDOMNode(this.refs.this)).html('<div class="gxaError">Could not parse JSON response</div>');
	            } else {
	                $(ReactDOM.findDOMNode(this.refs.this)).html('<div class="gxaError">' + jqXHR.responseText + '</div>');
	            }
	        }.bind(this);
	
	        var handleSuccess = function (data) {
	            if ("error" in data) {
	                handleError({ responseText: data.error });
	            } else {
	                this._updateStateAsynchronously(data);
	            }
	        }.bind(this);
	
	        var httpRequest = {
	            url: this.props.sourceURL,
	            dataType: "json",
	            method: "GET",
	            success: handleSuccess,
	            error: handleError
	        };
	
	        this.serverRequest = $.ajax(httpRequest);
	
	        if (!this.props.disableGoogleAnalytics) {
	            (function (i, s, o, g, r, a, m) {
	                i['GoogleAnalyticsObject'] = r;i[r] = i[r] || function () {
	                    (i[r].q = i[r].q || []).push(arguments);
	                }, i[r].l = 1 * new Date();a = s.createElement(o), m = s.getElementsByTagName(o)[0];a.async = 1;a.src = g;m.parentNode.insertBefore(a, m);
	            })(window, document, 'script', 'https://www.google-analytics.com/analytics.js', 'ga');
	
	            ga('create', 'UA-37676851-1', 'auto');
	            ga('send', 'pageview');
	            this.setState({ googleAnalyticsCallback: ga });
	        }
	    },
	
	    componentDidUpdate: function componentDidUpdate() {
	        // This mounted component is only going to be updated when changing this.props.showAnatomogram, so we only take
	        // care of the anatomogram, the legend and the sticky header (the last two through an event)
	        var $anatomogram = $(ReactDOM.findDOMNode(this.refs.anatomogramEnsembl));
	
	        if (this.props.showAnatomogram) {
	            $anatomogram.hcSticky({ responsive: true });
	        }
	
	        $(window).trigger("gxaResizeHeatmapAnatomogramHeader");
	    },
	    componentWillUnmount: function componentWillUnmount() {
	        this.serverRequest.abort();
	    }
	});
	
	//*------------------------------------------------------------------*
	
	module.exports = HeatmapAnatomogramContainer;

/***/ },

/***/ 6193:
/*!**************************************************!*\
  !*** ./atlas_bundles/heatmap/~/urijs/src/URI.js ***!
  \**************************************************/
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * URI.js - Mutating URLs
	 *
	 * Version: 1.17.1
	 *
	 * Author: Rodney Rehm
	 * Web: http://medialize.github.io/URI.js/
	 *
	 * Licensed under
	 *   MIT License http://www.opensource.org/licenses/mit-license
	 *
	 */
	(function (root, factory) {
	  'use strict';
	  // https://github.com/umdjs/umd/blob/master/returnExports.js
	  if (true) {
	    // Node
	    module.exports = factory(__webpack_require__(/*! ./punycode */ 6194), __webpack_require__(/*! ./IPv6 */ 6195), __webpack_require__(/*! ./SecondLevelDomains */ 6196));
	  } else if (typeof define === 'function' && define.amd) {
	    // AMD. Register as an anonymous module.
	    define(['./punycode', './IPv6', './SecondLevelDomains'], factory);
	  } else {
	    // Browser globals (root is window)
	    root.URI = factory(root.punycode, root.IPv6, root.SecondLevelDomains, root);
	  }
	}(this, function (punycode, IPv6, SLD, root) {
	  'use strict';
	  /*global location, escape, unescape */
	  // FIXME: v2.0.0 renamce non-camelCase properties to uppercase
	  /*jshint camelcase: false */
	
	  // save current URI variable, if any
	  var _URI = root && root.URI;
	
	  function URI(url, base) {
	    var _urlSupplied = arguments.length >= 1;
	    var _baseSupplied = arguments.length >= 2;
	
	    // Allow instantiation without the 'new' keyword
	    if (!(this instanceof URI)) {
	      if (_urlSupplied) {
	        if (_baseSupplied) {
	          return new URI(url, base);
	        }
	
	        return new URI(url);
	      }
	
	      return new URI();
	    }
	
	    if (url === undefined) {
	      if (_urlSupplied) {
	        throw new TypeError('undefined is not a valid argument for URI');
	      }
	
	      if (typeof location !== 'undefined') {
	        url = location.href + '';
	      } else {
	        url = '';
	      }
	    }
	
	    this.href(url);
	
	    // resolve to base according to http://dvcs.w3.org/hg/url/raw-file/tip/Overview.html#constructor
	    if (base !== undefined) {
	      return this.absoluteTo(base);
	    }
	
	    return this;
	  }
	
	  URI.version = '1.17.1';
	
	  var p = URI.prototype;
	  var hasOwn = Object.prototype.hasOwnProperty;
	
	  function escapeRegEx(string) {
	    // https://github.com/medialize/URI.js/commit/85ac21783c11f8ccab06106dba9735a31a86924d#commitcomment-821963
	    return string.replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1');
	  }
	
	  function getType(value) {
	    // IE8 doesn't return [Object Undefined] but [Object Object] for undefined value
	    if (value === undefined) {
	      return 'Undefined';
	    }
	
	    return String(Object.prototype.toString.call(value)).slice(8, -1);
	  }
	
	  function isArray(obj) {
	    return getType(obj) === 'Array';
	  }
	
	  function filterArrayValues(data, value) {
	    var lookup = {};
	    var i, length;
	
	    if (getType(value) === 'RegExp') {
	      lookup = null;
	    } else if (isArray(value)) {
	      for (i = 0, length = value.length; i < length; i++) {
	        lookup[value[i]] = true;
	      }
	    } else {
	      lookup[value] = true;
	    }
	
	    for (i = 0, length = data.length; i < length; i++) {
	      /*jshint laxbreak: true */
	      var _match = lookup && lookup[data[i]] !== undefined
	        || !lookup && value.test(data[i]);
	      /*jshint laxbreak: false */
	      if (_match) {
	        data.splice(i, 1);
	        length--;
	        i--;
	      }
	    }
	
	    return data;
	  }
	
	  function arrayContains(list, value) {
	    var i, length;
	
	    // value may be string, number, array, regexp
	    if (isArray(value)) {
	      // Note: this can be optimized to O(n) (instead of current O(m * n))
	      for (i = 0, length = value.length; i < length; i++) {
	        if (!arrayContains(list, value[i])) {
	          return false;
	        }
	      }
	
	      return true;
	    }
	
	    var _type = getType(value);
	    for (i = 0, length = list.length; i < length; i++) {
	      if (_type === 'RegExp') {
	        if (typeof list[i] === 'string' && list[i].match(value)) {
	          return true;
	        }
	      } else if (list[i] === value) {
	        return true;
	      }
	    }
	
	    return false;
	  }
	
	  function arraysEqual(one, two) {
	    if (!isArray(one) || !isArray(two)) {
	      return false;
	    }
	
	    // arrays can't be equal if they have different amount of content
	    if (one.length !== two.length) {
	      return false;
	    }
	
	    one.sort();
	    two.sort();
	
	    for (var i = 0, l = one.length; i < l; i++) {
	      if (one[i] !== two[i]) {
	        return false;
	      }
	    }
	
	    return true;
	  }
	
	  function trimSlashes(text) {
	    var trim_expression = /^\/+|\/+$/g;
	    return text.replace(trim_expression, '');
	  }
	
	  URI._parts = function() {
	    return {
	      protocol: null,
	      username: null,
	      password: null,
	      hostname: null,
	      urn: null,
	      port: null,
	      path: null,
	      query: null,
	      fragment: null,
	      // state
	      duplicateQueryParameters: URI.duplicateQueryParameters,
	      escapeQuerySpace: URI.escapeQuerySpace
	    };
	  };
	  // state: allow duplicate query parameters (a=1&a=1)
	  URI.duplicateQueryParameters = false;
	  // state: replaces + with %20 (space in query strings)
	  URI.escapeQuerySpace = true;
	  // static properties
	  URI.protocol_expression = /^[a-z][a-z0-9.+-]*$/i;
	  URI.idn_expression = /[^a-z0-9\.-]/i;
	  URI.punycode_expression = /(xn--)/i;
	  // well, 333.444.555.666 matches, but it sure ain't no IPv4 - do we care?
	  URI.ip4_expression = /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/;
	  // credits to Rich Brown
	  // source: http://forums.intermapper.com/viewtopic.php?p=1096#1096
	  // specification: http://www.ietf.org/rfc/rfc4291.txt
	  URI.ip6_expression = /^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$/;
	  // expression used is "gruber revised" (@gruber v2) determined to be the
	  // best solution in a regex-golf we did a couple of ages ago at
	  // * http://mathiasbynens.be/demo/url-regex
	  // * http://rodneyrehm.de/t/url-regex.html
	  URI.find_uri_expression = /\b((?:[a-z][\w-]+:(?:\/{1,3}|[a-z0-9%])|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}\/)(?:[^\s()<>]+|\(([^\s()<>]+|(\([^\s()<>]+\)))*\))+(?:\(([^\s()<>]+|(\([^\s()<>]+\)))*\)|[^\s`!()\[\]{};:'".,<>?«»“”‘’]))/ig;
	  URI.findUri = {
	    // valid "scheme://" or "www."
	    start: /\b(?:([a-z][a-z0-9.+-]*:\/\/)|www\.)/gi,
	    // everything up to the next whitespace
	    end: /[\s\r\n]|$/,
	    // trim trailing punctuation captured by end RegExp
	    trim: /[`!()\[\]{};:'".,<>?«»“”„‘’]+$/
	  };
	  // http://www.iana.org/assignments/uri-schemes.html
	  // http://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers#Well-known_ports
	  URI.defaultPorts = {
	    http: '80',
	    https: '443',
	    ftp: '21',
	    gopher: '70',
	    ws: '80',
	    wss: '443'
	  };
	  // allowed hostname characters according to RFC 3986
	  // ALPHA DIGIT "-" "." "_" "~" "!" "$" "&" "'" "(" ")" "*" "+" "," ";" "=" %encoded
	  // I've never seen a (non-IDN) hostname other than: ALPHA DIGIT . -
	  URI.invalid_hostname_characters = /[^a-zA-Z0-9\.-]/;
	  // map DOM Elements to their URI attribute
	  URI.domAttributes = {
	    'a': 'href',
	    'blockquote': 'cite',
	    'link': 'href',
	    'base': 'href',
	    'script': 'src',
	    'form': 'action',
	    'img': 'src',
	    'area': 'href',
	    'iframe': 'src',
	    'embed': 'src',
	    'source': 'src',
	    'track': 'src',
	    'input': 'src', // but only if type="image"
	    'audio': 'src',
	    'video': 'src'
	  };
	  URI.getDomAttribute = function(node) {
	    if (!node || !node.nodeName) {
	      return undefined;
	    }
	
	    var nodeName = node.nodeName.toLowerCase();
	    // <input> should only expose src for type="image"
	    if (nodeName === 'input' && node.type !== 'image') {
	      return undefined;
	    }
	
	    return URI.domAttributes[nodeName];
	  };
	
	  function escapeForDumbFirefox36(value) {
	    // https://github.com/medialize/URI.js/issues/91
	    return escape(value);
	  }
	
	  // encoding / decoding according to RFC3986
	  function strictEncodeURIComponent(string) {
	    // see https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/encodeURIComponent
	    return encodeURIComponent(string)
	      .replace(/[!'()*]/g, escapeForDumbFirefox36)
	      .replace(/\*/g, '%2A');
	  }
	  URI.encode = strictEncodeURIComponent;
	  URI.decode = decodeURIComponent;
	  URI.iso8859 = function() {
	    URI.encode = escape;
	    URI.decode = unescape;
	  };
	  URI.unicode = function() {
	    URI.encode = strictEncodeURIComponent;
	    URI.decode = decodeURIComponent;
	  };
	  URI.characters = {
	    pathname: {
	      encode: {
	        // RFC3986 2.1: For consistency, URI producers and normalizers should
	        // use uppercase hexadecimal digits for all percent-encodings.
	        expression: /%(24|26|2B|2C|3B|3D|3A|40)/ig,
	        map: {
	          // -._~!'()*
	          '%24': '$',
	          '%26': '&',
	          '%2B': '+',
	          '%2C': ',',
	          '%3B': ';',
	          '%3D': '=',
	          '%3A': ':',
	          '%40': '@'
	        }
	      },
	      decode: {
	        expression: /[\/\?#]/g,
	        map: {
	          '/': '%2F',
	          '?': '%3F',
	          '#': '%23'
	        }
	      }
	    },
	    reserved: {
	      encode: {
	        // RFC3986 2.1: For consistency, URI producers and normalizers should
	        // use uppercase hexadecimal digits for all percent-encodings.
	        expression: /%(21|23|24|26|27|28|29|2A|2B|2C|2F|3A|3B|3D|3F|40|5B|5D)/ig,
	        map: {
	          // gen-delims
	          '%3A': ':',
	          '%2F': '/',
	          '%3F': '?',
	          '%23': '#',
	          '%5B': '[',
	          '%5D': ']',
	          '%40': '@',
	          // sub-delims
	          '%21': '!',
	          '%24': '$',
	          '%26': '&',
	          '%27': '\'',
	          '%28': '(',
	          '%29': ')',
	          '%2A': '*',
	          '%2B': '+',
	          '%2C': ',',
	          '%3B': ';',
	          '%3D': '='
	        }
	      }
	    },
	    urnpath: {
	      // The characters under `encode` are the characters called out by RFC 2141 as being acceptable
	      // for usage in a URN. RFC2141 also calls out "-", ".", and "_" as acceptable characters, but
	      // these aren't encoded by encodeURIComponent, so we don't have to call them out here. Also
	      // note that the colon character is not featured in the encoding map; this is because URI.js
	      // gives the colons in URNs semantic meaning as the delimiters of path segements, and so it
	      // should not appear unencoded in a segment itself.
	      // See also the note above about RFC3986 and capitalalized hex digits.
	      encode: {
	        expression: /%(21|24|27|28|29|2A|2B|2C|3B|3D|40)/ig,
	        map: {
	          '%21': '!',
	          '%24': '$',
	          '%27': '\'',
	          '%28': '(',
	          '%29': ')',
	          '%2A': '*',
	          '%2B': '+',
	          '%2C': ',',
	          '%3B': ';',
	          '%3D': '=',
	          '%40': '@'
	        }
	      },
	      // These characters are the characters called out by RFC2141 as "reserved" characters that
	      // should never appear in a URN, plus the colon character (see note above).
	      decode: {
	        expression: /[\/\?#:]/g,
	        map: {
	          '/': '%2F',
	          '?': '%3F',
	          '#': '%23',
	          ':': '%3A'
	        }
	      }
	    }
	  };
	  URI.encodeQuery = function(string, escapeQuerySpace) {
	    var escaped = URI.encode(string + '');
	    if (escapeQuerySpace === undefined) {
	      escapeQuerySpace = URI.escapeQuerySpace;
	    }
	
	    return escapeQuerySpace ? escaped.replace(/%20/g, '+') : escaped;
	  };
	  URI.decodeQuery = function(string, escapeQuerySpace) {
	    string += '';
	    if (escapeQuerySpace === undefined) {
	      escapeQuerySpace = URI.escapeQuerySpace;
	    }
	
	    try {
	      return URI.decode(escapeQuerySpace ? string.replace(/\+/g, '%20') : string);
	    } catch(e) {
	      // we're not going to mess with weird encodings,
	      // give up and return the undecoded original string
	      // see https://github.com/medialize/URI.js/issues/87
	      // see https://github.com/medialize/URI.js/issues/92
	      return string;
	    }
	  };
	  // generate encode/decode path functions
	  var _parts = {'encode':'encode', 'decode':'decode'};
	  var _part;
	  var generateAccessor = function(_group, _part) {
	    return function(string) {
	      try {
	        return URI[_part](string + '').replace(URI.characters[_group][_part].expression, function(c) {
	          return URI.characters[_group][_part].map[c];
	        });
	      } catch (e) {
	        // we're not going to mess with weird encodings,
	        // give up and return the undecoded original string
	        // see https://github.com/medialize/URI.js/issues/87
	        // see https://github.com/medialize/URI.js/issues/92
	        return string;
	      }
	    };
	  };
	
	  for (_part in _parts) {
	    URI[_part + 'PathSegment'] = generateAccessor('pathname', _parts[_part]);
	    URI[_part + 'UrnPathSegment'] = generateAccessor('urnpath', _parts[_part]);
	  }
	
	  var generateSegmentedPathFunction = function(_sep, _codingFuncName, _innerCodingFuncName) {
	    return function(string) {
	      // Why pass in names of functions, rather than the function objects themselves? The
	      // definitions of some functions (but in particular, URI.decode) will occasionally change due
	      // to URI.js having ISO8859 and Unicode modes. Passing in the name and getting it will ensure
	      // that the functions we use here are "fresh".
	      var actualCodingFunc;
	      if (!_innerCodingFuncName) {
	        actualCodingFunc = URI[_codingFuncName];
	      } else {
	        actualCodingFunc = function(string) {
	          return URI[_codingFuncName](URI[_innerCodingFuncName](string));
	        };
	      }
	
	      var segments = (string + '').split(_sep);
	
	      for (var i = 0, length = segments.length; i < length; i++) {
	        segments[i] = actualCodingFunc(segments[i]);
	      }
	
	      return segments.join(_sep);
	    };
	  };
	
	  // This takes place outside the above loop because we don't want, e.g., encodeUrnPath functions.
	  URI.decodePath = generateSegmentedPathFunction('/', 'decodePathSegment');
	  URI.decodeUrnPath = generateSegmentedPathFunction(':', 'decodeUrnPathSegment');
	  URI.recodePath = generateSegmentedPathFunction('/', 'encodePathSegment', 'decode');
	  URI.recodeUrnPath = generateSegmentedPathFunction(':', 'encodeUrnPathSegment', 'decode');
	
	  URI.encodeReserved = generateAccessor('reserved', 'encode');
	
	  URI.parse = function(string, parts) {
	    var pos;
	    if (!parts) {
	      parts = {};
	    }
	    // [protocol"://"[username[":"password]"@"]hostname[":"port]"/"?][path]["?"querystring]["#"fragment]
	
	    // extract fragment
	    pos = string.indexOf('#');
	    if (pos > -1) {
	      // escaping?
	      parts.fragment = string.substring(pos + 1) || null;
	      string = string.substring(0, pos);
	    }
	
	    // extract query
	    pos = string.indexOf('?');
	    if (pos > -1) {
	      // escaping?
	      parts.query = string.substring(pos + 1) || null;
	      string = string.substring(0, pos);
	    }
	
	    // extract protocol
	    if (string.substring(0, 2) === '//') {
	      // relative-scheme
	      parts.protocol = null;
	      string = string.substring(2);
	      // extract "user:pass@host:port"
	      string = URI.parseAuthority(string, parts);
	    } else {
	      pos = string.indexOf(':');
	      if (pos > -1) {
	        parts.protocol = string.substring(0, pos) || null;
	        if (parts.protocol && !parts.protocol.match(URI.protocol_expression)) {
	          // : may be within the path
	          parts.protocol = undefined;
	        } else if (string.substring(pos + 1, pos + 3) === '//') {
	          string = string.substring(pos + 3);
	
	          // extract "user:pass@host:port"
	          string = URI.parseAuthority(string, parts);
	        } else {
	          string = string.substring(pos + 1);
	          parts.urn = true;
	        }
	      }
	    }
	
	    // what's left must be the path
	    parts.path = string;
	
	    // and we're done
	    return parts;
	  };
	  URI.parseHost = function(string, parts) {
	    // Copy chrome, IE, opera backslash-handling behavior.
	    // Back slashes before the query string get converted to forward slashes
	    // See: https://github.com/joyent/node/blob/386fd24f49b0e9d1a8a076592a404168faeecc34/lib/url.js#L115-L124
	    // See: https://code.google.com/p/chromium/issues/detail?id=25916
	    // https://github.com/medialize/URI.js/pull/233
	    string = string.replace(/\\/g, '/');
	
	    // extract host:port
	    var pos = string.indexOf('/');
	    var bracketPos;
	    var t;
	
	    if (pos === -1) {
	      pos = string.length;
	    }
	
	    if (string.charAt(0) === '[') {
	      // IPv6 host - http://tools.ietf.org/html/draft-ietf-6man-text-addr-representation-04#section-6
	      // I claim most client software breaks on IPv6 anyways. To simplify things, URI only accepts
	      // IPv6+port in the format [2001:db8::1]:80 (for the time being)
	      bracketPos = string.indexOf(']');
	      parts.hostname = string.substring(1, bracketPos) || null;
	      parts.port = string.substring(bracketPos + 2, pos) || null;
	      if (parts.port === '/') {
	        parts.port = null;
	      }
	    } else {
	      var firstColon = string.indexOf(':');
	      var firstSlash = string.indexOf('/');
	      var nextColon = string.indexOf(':', firstColon + 1);
	      if (nextColon !== -1 && (firstSlash === -1 || nextColon < firstSlash)) {
	        // IPv6 host contains multiple colons - but no port
	        // this notation is actually not allowed by RFC 3986, but we're a liberal parser
	        parts.hostname = string.substring(0, pos) || null;
	        parts.port = null;
	      } else {
	        t = string.substring(0, pos).split(':');
	        parts.hostname = t[0] || null;
	        parts.port = t[1] || null;
	      }
	    }
	
	    if (parts.hostname && string.substring(pos).charAt(0) !== '/') {
	      pos++;
	      string = '/' + string;
	    }
	
	    return string.substring(pos) || '/';
	  };
	  URI.parseAuthority = function(string, parts) {
	    string = URI.parseUserinfo(string, parts);
	    return URI.parseHost(string, parts);
	  };
	  URI.parseUserinfo = function(string, parts) {
	    // extract username:password
	    var firstSlash = string.indexOf('/');
	    var pos = string.lastIndexOf('@', firstSlash > -1 ? firstSlash : string.length - 1);
	    var t;
	
	    // authority@ must come before /path
	    if (pos > -1 && (firstSlash === -1 || pos < firstSlash)) {
	      t = string.substring(0, pos).split(':');
	      parts.username = t[0] ? URI.decode(t[0]) : null;
	      t.shift();
	      parts.password = t[0] ? URI.decode(t.join(':')) : null;
	      string = string.substring(pos + 1);
	    } else {
	      parts.username = null;
	      parts.password = null;
	    }
	
	    return string;
	  };
	  URI.parseQuery = function(string, escapeQuerySpace) {
	    if (!string) {
	      return {};
	    }
	
	    // throw out the funky business - "?"[name"="value"&"]+
	    string = string.replace(/&+/g, '&').replace(/^\?*&*|&+$/g, '');
	
	    if (!string) {
	      return {};
	    }
	
	    var items = {};
	    var splits = string.split('&');
	    var length = splits.length;
	    var v, name, value;
	
	    for (var i = 0; i < length; i++) {
	      v = splits[i].split('=');
	      name = URI.decodeQuery(v.shift(), escapeQuerySpace);
	      // no "=" is null according to http://dvcs.w3.org/hg/url/raw-file/tip/Overview.html#collect-url-parameters
	      value = v.length ? URI.decodeQuery(v.join('='), escapeQuerySpace) : null;
	
	      if (hasOwn.call(items, name)) {
	        if (typeof items[name] === 'string' || items[name] === null) {
	          items[name] = [items[name]];
	        }
	
	        items[name].push(value);
	      } else {
	        items[name] = value;
	      }
	    }
	
	    return items;
	  };
	
	  URI.build = function(parts) {
	    var t = '';
	
	    if (parts.protocol) {
	      t += parts.protocol + ':';
	    }
	
	    if (!parts.urn && (t || parts.hostname)) {
	      t += '//';
	    }
	
	    t += (URI.buildAuthority(parts) || '');
	
	    if (typeof parts.path === 'string') {
	      if (parts.path.charAt(0) !== '/' && typeof parts.hostname === 'string') {
	        t += '/';
	      }
	
	      t += parts.path;
	    }
	
	    if (typeof parts.query === 'string' && parts.query) {
	      t += '?' + parts.query;
	    }
	
	    if (typeof parts.fragment === 'string' && parts.fragment) {
	      t += '#' + parts.fragment;
	    }
	    return t;
	  };
	  URI.buildHost = function(parts) {
	    var t = '';
	
	    if (!parts.hostname) {
	      return '';
	    } else if (URI.ip6_expression.test(parts.hostname)) {
	      t += '[' + parts.hostname + ']';
	    } else {
	      t += parts.hostname;
	    }
	
	    if (parts.port) {
	      t += ':' + parts.port;
	    }
	
	    return t;
	  };
	  URI.buildAuthority = function(parts) {
	    return URI.buildUserinfo(parts) + URI.buildHost(parts);
	  };
	  URI.buildUserinfo = function(parts) {
	    var t = '';
	
	    if (parts.username) {
	      t += URI.encode(parts.username);
	
	      if (parts.password) {
	        t += ':' + URI.encode(parts.password);
	      }
	
	      t += '@';
	    }
	
	    return t;
	  };
	  URI.buildQuery = function(data, duplicateQueryParameters, escapeQuerySpace) {
	    // according to http://tools.ietf.org/html/rfc3986 or http://labs.apache.org/webarch/uri/rfc/rfc3986.html
	    // being »-._~!$&'()*+,;=:@/?« %HEX and alnum are allowed
	    // the RFC explicitly states ?/foo being a valid use case, no mention of parameter syntax!
	    // URI.js treats the query string as being application/x-www-form-urlencoded
	    // see http://www.w3.org/TR/REC-html40/interact/forms.html#form-content-type
	
	    var t = '';
	    var unique, key, i, length;
	    for (key in data) {
	      if (hasOwn.call(data, key) && key) {
	        if (isArray(data[key])) {
	          unique = {};
	          for (i = 0, length = data[key].length; i < length; i++) {
	            if (data[key][i] !== undefined && unique[data[key][i] + ''] === undefined) {
	              t += '&' + URI.buildQueryParameter(key, data[key][i], escapeQuerySpace);
	              if (duplicateQueryParameters !== true) {
	                unique[data[key][i] + ''] = true;
	              }
	            }
	          }
	        } else if (data[key] !== undefined) {
	          t += '&' + URI.buildQueryParameter(key, data[key], escapeQuerySpace);
	        }
	      }
	    }
	
	    return t.substring(1);
	  };
	  URI.buildQueryParameter = function(name, value, escapeQuerySpace) {
	    // http://www.w3.org/TR/REC-html40/interact/forms.html#form-content-type -- application/x-www-form-urlencoded
	    // don't append "=" for null values, according to http://dvcs.w3.org/hg/url/raw-file/tip/Overview.html#url-parameter-serialization
	    return URI.encodeQuery(name, escapeQuerySpace) + (value !== null ? '=' + URI.encodeQuery(value, escapeQuerySpace) : '');
	  };
	
	  URI.addQuery = function(data, name, value) {
	    if (typeof name === 'object') {
	      for (var key in name) {
	        if (hasOwn.call(name, key)) {
	          URI.addQuery(data, key, name[key]);
	        }
	      }
	    } else if (typeof name === 'string') {
	      if (data[name] === undefined) {
	        data[name] = value;
	        return;
	      } else if (typeof data[name] === 'string') {
	        data[name] = [data[name]];
	      }
	
	      if (!isArray(value)) {
	        value = [value];
	      }
	
	      data[name] = (data[name] || []).concat(value);
	    } else {
	      throw new TypeError('URI.addQuery() accepts an object, string as the name parameter');
	    }
	  };
	  URI.removeQuery = function(data, name, value) {
	    var i, length, key;
	
	    if (isArray(name)) {
	      for (i = 0, length = name.length; i < length; i++) {
	        data[name[i]] = undefined;
	      }
	    } else if (getType(name) === 'RegExp') {
	      for (key in data) {
	        if (name.test(key)) {
	          data[key] = undefined;
	        }
	      }
	    } else if (typeof name === 'object') {
	      for (key in name) {
	        if (hasOwn.call(name, key)) {
	          URI.removeQuery(data, key, name[key]);
	        }
	      }
	    } else if (typeof name === 'string') {
	      if (value !== undefined) {
	        if (getType(value) === 'RegExp') {
	          if (!isArray(data[name]) && value.test(data[name])) {
	            data[name] = undefined;
	          } else {
	            data[name] = filterArrayValues(data[name], value);
	          }
	        } else if (data[name] === String(value) && (!isArray(value) || value.length === 1)) {
	          data[name] = undefined;
	        } else if (isArray(data[name])) {
	          data[name] = filterArrayValues(data[name], value);
	        }
	      } else {
	        data[name] = undefined;
	      }
	    } else {
	      throw new TypeError('URI.removeQuery() accepts an object, string, RegExp as the first parameter');
	    }
	  };
	  URI.hasQuery = function(data, name, value, withinArray) {
	    switch (getType(name)) {
	      case 'String':
	        // Nothing to do here
	        break;
	
	      case 'RegExp':
	        for (var key in data) {
	          if (hasOwn.call(data, key)) {
	            if (name.test(key) && (value === undefined || URI.hasQuery(data, key, value))) {
	              return true;
	            }
	          }
	        }
	
	        return false;
	
	      case 'Object':
	        for (var _key in name) {
	          if (hasOwn.call(name, _key)) {
	            if (!URI.hasQuery(data, _key, name[_key])) {
	              return false;
	            }
	          }
	        }
	
	        return true;
	
	      default:
	        throw new TypeError('URI.hasQuery() accepts a string, regular expression or object as the name parameter');
	    }
	
	    switch (getType(value)) {
	      case 'Undefined':
	        // true if exists (but may be empty)
	        return name in data; // data[name] !== undefined;
	
	      case 'Boolean':
	        // true if exists and non-empty
	        var _booly = Boolean(isArray(data[name]) ? data[name].length : data[name]);
	        return value === _booly;
	
	      case 'Function':
	        // allow complex comparison
	        return !!value(data[name], name, data);
	
	      case 'Array':
	        if (!isArray(data[name])) {
	          return false;
	        }
	
	        var op = withinArray ? arrayContains : arraysEqual;
	        return op(data[name], value);
	
	      case 'RegExp':
	        if (!isArray(data[name])) {
	          return Boolean(data[name] && data[name].match(value));
	        }
	
	        if (!withinArray) {
	          return false;
	        }
	
	        return arrayContains(data[name], value);
	
	      case 'Number':
	        value = String(value);
	        /* falls through */
	      case 'String':
	        if (!isArray(data[name])) {
	          return data[name] === value;
	        }
	
	        if (!withinArray) {
	          return false;
	        }
	
	        return arrayContains(data[name], value);
	
	      default:
	        throw new TypeError('URI.hasQuery() accepts undefined, boolean, string, number, RegExp, Function as the value parameter');
	    }
	  };
	
	
	  URI.commonPath = function(one, two) {
	    var length = Math.min(one.length, two.length);
	    var pos;
	
	    // find first non-matching character
	    for (pos = 0; pos < length; pos++) {
	      if (one.charAt(pos) !== two.charAt(pos)) {
	        pos--;
	        break;
	      }
	    }
	
	    if (pos < 1) {
	      return one.charAt(0) === two.charAt(0) && one.charAt(0) === '/' ? '/' : '';
	    }
	
	    // revert to last /
	    if (one.charAt(pos) !== '/' || two.charAt(pos) !== '/') {
	      pos = one.substring(0, pos).lastIndexOf('/');
	    }
	
	    return one.substring(0, pos + 1);
	  };
	
	  URI.withinString = function(string, callback, options) {
	    options || (options = {});
	    var _start = options.start || URI.findUri.start;
	    var _end = options.end || URI.findUri.end;
	    var _trim = options.trim || URI.findUri.trim;
	    var _attributeOpen = /[a-z0-9-]=["']?$/i;
	
	    _start.lastIndex = 0;
	    while (true) {
	      var match = _start.exec(string);
	      if (!match) {
	        break;
	      }
	
	      var start = match.index;
	      if (options.ignoreHtml) {
	        // attribut(e=["']?$)
	        var attributeOpen = string.slice(Math.max(start - 3, 0), start);
	        if (attributeOpen && _attributeOpen.test(attributeOpen)) {
	          continue;
	        }
	      }
	
	      var end = start + string.slice(start).search(_end);
	      var slice = string.slice(start, end).replace(_trim, '');
	      if (options.ignore && options.ignore.test(slice)) {
	        continue;
	      }
	
	      end = start + slice.length;
	      var result = callback(slice, start, end, string);
	      string = string.slice(0, start) + result + string.slice(end);
	      _start.lastIndex = start + result.length;
	    }
	
	    _start.lastIndex = 0;
	    return string;
	  };
	
	  URI.ensureValidHostname = function(v) {
	    // Theoretically URIs allow percent-encoding in Hostnames (according to RFC 3986)
	    // they are not part of DNS and therefore ignored by URI.js
	
	    if (v.match(URI.invalid_hostname_characters)) {
	      // test punycode
	      if (!punycode) {
	        throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-] and Punycode.js is not available');
	      }
	
	      if (punycode.toASCII(v).match(URI.invalid_hostname_characters)) {
	        throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-]');
	      }
	    }
	  };
	
	  // noConflict
	  URI.noConflict = function(removeAll) {
	    if (removeAll) {
	      var unconflicted = {
	        URI: this.noConflict()
	      };
	
	      if (root.URITemplate && typeof root.URITemplate.noConflict === 'function') {
	        unconflicted.URITemplate = root.URITemplate.noConflict();
	      }
	
	      if (root.IPv6 && typeof root.IPv6.noConflict === 'function') {
	        unconflicted.IPv6 = root.IPv6.noConflict();
	      }
	
	      if (root.SecondLevelDomains && typeof root.SecondLevelDomains.noConflict === 'function') {
	        unconflicted.SecondLevelDomains = root.SecondLevelDomains.noConflict();
	      }
	
	      return unconflicted;
	    } else if (root.URI === this) {
	      root.URI = _URI;
	    }
	
	    return this;
	  };
	
	  p.build = function(deferBuild) {
	    if (deferBuild === true) {
	      this._deferred_build = true;
	    } else if (deferBuild === undefined || this._deferred_build) {
	      this._string = URI.build(this._parts);
	      this._deferred_build = false;
	    }
	
	    return this;
	  };
	
	  p.clone = function() {
	    return new URI(this);
	  };
	
	  p.valueOf = p.toString = function() {
	    return this.build(false)._string;
	  };
	
	
	  function generateSimpleAccessor(_part){
	    return function(v, build) {
	      if (v === undefined) {
	        return this._parts[_part] || '';
	      } else {
	        this._parts[_part] = v || null;
	        this.build(!build);
	        return this;
	      }
	    };
	  }
	
	  function generatePrefixAccessor(_part, _key){
	    return function(v, build) {
	      if (v === undefined) {
	        return this._parts[_part] || '';
	      } else {
	        if (v !== null) {
	          v = v + '';
	          if (v.charAt(0) === _key) {
	            v = v.substring(1);
	          }
	        }
	
	        this._parts[_part] = v;
	        this.build(!build);
	        return this;
	      }
	    };
	  }
	
	  p.protocol = generateSimpleAccessor('protocol');
	  p.username = generateSimpleAccessor('username');
	  p.password = generateSimpleAccessor('password');
	  p.hostname = generateSimpleAccessor('hostname');
	  p.port = generateSimpleAccessor('port');
	  p.query = generatePrefixAccessor('query', '?');
	  p.fragment = generatePrefixAccessor('fragment', '#');
	
	  p.search = function(v, build) {
	    var t = this.query(v, build);
	    return typeof t === 'string' && t.length ? ('?' + t) : t;
	  };
	  p.hash = function(v, build) {
	    var t = this.fragment(v, build);
	    return typeof t === 'string' && t.length ? ('#' + t) : t;
	  };
	
	  p.pathname = function(v, build) {
	    if (v === undefined || v === true) {
	      var res = this._parts.path || (this._parts.hostname ? '/' : '');
	      return v ? (this._parts.urn ? URI.decodeUrnPath : URI.decodePath)(res) : res;
	    } else {
	      if (this._parts.urn) {
	        this._parts.path = v ? URI.recodeUrnPath(v) : '';
	      } else {
	        this._parts.path = v ? URI.recodePath(v) : '/';
	      }
	      this.build(!build);
	      return this;
	    }
	  };
	  p.path = p.pathname;
	  p.href = function(href, build) {
	    var key;
	
	    if (href === undefined) {
	      return this.toString();
	    }
	
	    this._string = '';
	    this._parts = URI._parts();
	
	    var _URI = href instanceof URI;
	    var _object = typeof href === 'object' && (href.hostname || href.path || href.pathname);
	    if (href.nodeName) {
	      var attribute = URI.getDomAttribute(href);
	      href = href[attribute] || '';
	      _object = false;
	    }
	
	    // window.location is reported to be an object, but it's not the sort
	    // of object we're looking for:
	    // * location.protocol ends with a colon
	    // * location.query != object.search
	    // * location.hash != object.fragment
	    // simply serializing the unknown object should do the trick
	    // (for location, not for everything...)
	    if (!_URI && _object && href.pathname !== undefined) {
	      href = href.toString();
	    }
	
	    if (typeof href === 'string' || href instanceof String) {
	      this._parts = URI.parse(String(href), this._parts);
	    } else if (_URI || _object) {
	      var src = _URI ? href._parts : href;
	      for (key in src) {
	        if (hasOwn.call(this._parts, key)) {
	          this._parts[key] = src[key];
	        }
	      }
	    } else {
	      throw new TypeError('invalid input');
	    }
	
	    this.build(!build);
	    return this;
	  };
	
	  // identification accessors
	  p.is = function(what) {
	    var ip = false;
	    var ip4 = false;
	    var ip6 = false;
	    var name = false;
	    var sld = false;
	    var idn = false;
	    var punycode = false;
	    var relative = !this._parts.urn;
	
	    if (this._parts.hostname) {
	      relative = false;
	      ip4 = URI.ip4_expression.test(this._parts.hostname);
	      ip6 = URI.ip6_expression.test(this._parts.hostname);
	      ip = ip4 || ip6;
	      name = !ip;
	      sld = name && SLD && SLD.has(this._parts.hostname);
	      idn = name && URI.idn_expression.test(this._parts.hostname);
	      punycode = name && URI.punycode_expression.test(this._parts.hostname);
	    }
	
	    switch (what.toLowerCase()) {
	      case 'relative':
	        return relative;
	
	      case 'absolute':
	        return !relative;
	
	      // hostname identification
	      case 'domain':
	      case 'name':
	        return name;
	
	      case 'sld':
	        return sld;
	
	      case 'ip':
	        return ip;
	
	      case 'ip4':
	      case 'ipv4':
	      case 'inet4':
	        return ip4;
	
	      case 'ip6':
	      case 'ipv6':
	      case 'inet6':
	        return ip6;
	
	      case 'idn':
	        return idn;
	
	      case 'url':
	        return !this._parts.urn;
	
	      case 'urn':
	        return !!this._parts.urn;
	
	      case 'punycode':
	        return punycode;
	    }
	
	    return null;
	  };
	
	  // component specific input validation
	  var _protocol = p.protocol;
	  var _port = p.port;
	  var _hostname = p.hostname;
	
	  p.protocol = function(v, build) {
	    if (v !== undefined) {
	      if (v) {
	        // accept trailing ://
	        v = v.replace(/:(\/\/)?$/, '');
	
	        if (!v.match(URI.protocol_expression)) {
	          throw new TypeError('Protocol "' + v + '" contains characters other than [A-Z0-9.+-] or doesn\'t start with [A-Z]');
	        }
	      }
	    }
	    return _protocol.call(this, v, build);
	  };
	  p.scheme = p.protocol;
	  p.port = function(v, build) {
	    if (this._parts.urn) {
	      return v === undefined ? '' : this;
	    }
	
	    if (v !== undefined) {
	      if (v === 0) {
	        v = null;
	      }
	
	      if (v) {
	        v += '';
	        if (v.charAt(0) === ':') {
	          v = v.substring(1);
	        }
	
	        if (v.match(/[^0-9]/)) {
	          throw new TypeError('Port "' + v + '" contains characters other than [0-9]');
	        }
	      }
	    }
	    return _port.call(this, v, build);
	  };
	  p.hostname = function(v, build) {
	    if (this._parts.urn) {
	      return v === undefined ? '' : this;
	    }
	
	    if (v !== undefined) {
	      var x = {};
	      var res = URI.parseHost(v, x);
	      if (res !== '/') {
	        throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-]');
	      }
	
	      v = x.hostname;
	    }
	    return _hostname.call(this, v, build);
	  };
	
	  // compound accessors
	  p.origin = function(v, build) {
	    if (this._parts.urn) {
	      return v === undefined ? '' : this;
	    }
	
	    if (v === undefined) {
	      var protocol = this.protocol();
	      var authority = this.authority();
	      if (!authority) {
	        return '';
	      }
	
	      return (protocol ? protocol + '://' : '') + this.authority();
	    } else {
	      var origin = URI(v);
	      this
	        .protocol(origin.protocol())
	        .authority(origin.authority())
	        .build(!build);
	      return this;
	    }
	  };
	  p.host = function(v, build) {
	    if (this._parts.urn) {
	      return v === undefined ? '' : this;
	    }
	
	    if (v === undefined) {
	      return this._parts.hostname ? URI.buildHost(this._parts) : '';
	    } else {
	      var res = URI.parseHost(v, this._parts);
	      if (res !== '/') {
	        throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-]');
	      }
	
	      this.build(!build);
	      return this;
	    }
	  };
	  p.authority = function(v, build) {
	    if (this._parts.urn) {
	      return v === undefined ? '' : this;
	    }
	
	    if (v === undefined) {
	      return this._parts.hostname ? URI.buildAuthority(this._parts) : '';
	    } else {
	      var res = URI.parseAuthority(v, this._parts);
	      if (res !== '/') {
	        throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-]');
	      }
	
	      this.build(!build);
	      return this;
	    }
	  };
	  p.userinfo = function(v, build) {
	    if (this._parts.urn) {
	      return v === undefined ? '' : this;
	    }
	
	    if (v === undefined) {
	      if (!this._parts.username) {
	        return '';
	      }
	
	      var t = URI.buildUserinfo(this._parts);
	      return t.substring(0, t.length -1);
	    } else {
	      if (v[v.length-1] !== '@') {
	        v += '@';
	      }
	
	      URI.parseUserinfo(v, this._parts);
	      this.build(!build);
	      return this;
	    }
	  };
	  p.resource = function(v, build) {
	    var parts;
	
	    if (v === undefined) {
	      return this.path() + this.search() + this.hash();
	    }
	
	    parts = URI.parse(v);
	    this._parts.path = parts.path;
	    this._parts.query = parts.query;
	    this._parts.fragment = parts.fragment;
	    this.build(!build);
	    return this;
	  };
	
	  // fraction accessors
	  p.subdomain = function(v, build) {
	    if (this._parts.urn) {
	      return v === undefined ? '' : this;
	    }
	
	    // convenience, return "www" from "www.example.org"
	    if (v === undefined) {
	      if (!this._parts.hostname || this.is('IP')) {
	        return '';
	      }
	
	      // grab domain and add another segment
	      var end = this._parts.hostname.length - this.domain().length - 1;
	      return this._parts.hostname.substring(0, end) || '';
	    } else {
	      var e = this._parts.hostname.length - this.domain().length;
	      var sub = this._parts.hostname.substring(0, e);
	      var replace = new RegExp('^' + escapeRegEx(sub));
	
	      if (v && v.charAt(v.length - 1) !== '.') {
	        v += '.';
	      }
	
	      if (v) {
	        URI.ensureValidHostname(v);
	      }
	
	      this._parts.hostname = this._parts.hostname.replace(replace, v);
	      this.build(!build);
	      return this;
	    }
	  };
	  p.domain = function(v, build) {
	    if (this._parts.urn) {
	      return v === undefined ? '' : this;
	    }
	
	    if (typeof v === 'boolean') {
	      build = v;
	      v = undefined;
	    }
	
	    // convenience, return "example.org" from "www.example.org"
	    if (v === undefined) {
	      if (!this._parts.hostname || this.is('IP')) {
	        return '';
	      }
	
	      // if hostname consists of 1 or 2 segments, it must be the domain
	      var t = this._parts.hostname.match(/\./g);
	      if (t && t.length < 2) {
	        return this._parts.hostname;
	      }
	
	      // grab tld and add another segment
	      var end = this._parts.hostname.length - this.tld(build).length - 1;
	      end = this._parts.hostname.lastIndexOf('.', end -1) + 1;
	      return this._parts.hostname.substring(end) || '';
	    } else {
	      if (!v) {
	        throw new TypeError('cannot set domain empty');
	      }
	
	      URI.ensureValidHostname(v);
	
	      if (!this._parts.hostname || this.is('IP')) {
	        this._parts.hostname = v;
	      } else {
	        var replace = new RegExp(escapeRegEx(this.domain()) + '$');
	        this._parts.hostname = this._parts.hostname.replace(replace, v);
	      }
	
	      this.build(!build);
	      return this;
	    }
	  };
	  p.tld = function(v, build) {
	    if (this._parts.urn) {
	      return v === undefined ? '' : this;
	    }
	
	    if (typeof v === 'boolean') {
	      build = v;
	      v = undefined;
	    }
	
	    // return "org" from "www.example.org"
	    if (v === undefined) {
	      if (!this._parts.hostname || this.is('IP')) {
	        return '';
	      }
	
	      var pos = this._parts.hostname.lastIndexOf('.');
	      var tld = this._parts.hostname.substring(pos + 1);
	
	      if (build !== true && SLD && SLD.list[tld.toLowerCase()]) {
	        return SLD.get(this._parts.hostname) || tld;
	      }
	
	      return tld;
	    } else {
	      var replace;
	
	      if (!v) {
	        throw new TypeError('cannot set TLD empty');
	      } else if (v.match(/[^a-zA-Z0-9-]/)) {
	        if (SLD && SLD.is(v)) {
	          replace = new RegExp(escapeRegEx(this.tld()) + '$');
	          this._parts.hostname = this._parts.hostname.replace(replace, v);
	        } else {
	          throw new TypeError('TLD "' + v + '" contains characters other than [A-Z0-9]');
	        }
	      } else if (!this._parts.hostname || this.is('IP')) {
	        throw new ReferenceError('cannot set TLD on non-domain host');
	      } else {
	        replace = new RegExp(escapeRegEx(this.tld()) + '$');
	        this._parts.hostname = this._parts.hostname.replace(replace, v);
	      }
	
	      this.build(!build);
	      return this;
	    }
	  };
	  p.directory = function(v, build) {
	    if (this._parts.urn) {
	      return v === undefined ? '' : this;
	    }
	
	    if (v === undefined || v === true) {
	      if (!this._parts.path && !this._parts.hostname) {
	        return '';
	      }
	
	      if (this._parts.path === '/') {
	        return '/';
	      }
	
	      var end = this._parts.path.length - this.filename().length - 1;
	      var res = this._parts.path.substring(0, end) || (this._parts.hostname ? '/' : '');
	
	      return v ? URI.decodePath(res) : res;
	
	    } else {
	      var e = this._parts.path.length - this.filename().length;
	      var directory = this._parts.path.substring(0, e);
	      var replace = new RegExp('^' + escapeRegEx(directory));
	
	      // fully qualifier directories begin with a slash
	      if (!this.is('relative')) {
	        if (!v) {
	          v = '/';
	        }
	
	        if (v.charAt(0) !== '/') {
	          v = '/' + v;
	        }
	      }
	
	      // directories always end with a slash
	      if (v && v.charAt(v.length - 1) !== '/') {
	        v += '/';
	      }
	
	      v = URI.recodePath(v);
	      this._parts.path = this._parts.path.replace(replace, v);
	      this.build(!build);
	      return this;
	    }
	  };
	  p.filename = function(v, build) {
	    if (this._parts.urn) {
	      return v === undefined ? '' : this;
	    }
	
	    if (v === undefined || v === true) {
	      if (!this._parts.path || this._parts.path === '/') {
	        return '';
	      }
	
	      var pos = this._parts.path.lastIndexOf('/');
	      var res = this._parts.path.substring(pos+1);
	
	      return v ? URI.decodePathSegment(res) : res;
	    } else {
	      var mutatedDirectory = false;
	
	      if (v.charAt(0) === '/') {
	        v = v.substring(1);
	      }
	
	      if (v.match(/\.?\//)) {
	        mutatedDirectory = true;
	      }
	
	      var replace = new RegExp(escapeRegEx(this.filename()) + '$');
	      v = URI.recodePath(v);
	      this._parts.path = this._parts.path.replace(replace, v);
	
	      if (mutatedDirectory) {
	        this.normalizePath(build);
	      } else {
	        this.build(!build);
	      }
	
	      return this;
	    }
	  };
	  p.suffix = function(v, build) {
	    if (this._parts.urn) {
	      return v === undefined ? '' : this;
	    }
	
	    if (v === undefined || v === true) {
	      if (!this._parts.path || this._parts.path === '/') {
	        return '';
	      }
	
	      var filename = this.filename();
	      var pos = filename.lastIndexOf('.');
	      var s, res;
	
	      if (pos === -1) {
	        return '';
	      }
	
	      // suffix may only contain alnum characters (yup, I made this up.)
	      s = filename.substring(pos+1);
	      res = (/^[a-z0-9%]+$/i).test(s) ? s : '';
	      return v ? URI.decodePathSegment(res) : res;
	    } else {
	      if (v.charAt(0) === '.') {
	        v = v.substring(1);
	      }
	
	      var suffix = this.suffix();
	      var replace;
	
	      if (!suffix) {
	        if (!v) {
	          return this;
	        }
	
	        this._parts.path += '.' + URI.recodePath(v);
	      } else if (!v) {
	        replace = new RegExp(escapeRegEx('.' + suffix) + '$');
	      } else {
	        replace = new RegExp(escapeRegEx(suffix) + '$');
	      }
	
	      if (replace) {
	        v = URI.recodePath(v);
	        this._parts.path = this._parts.path.replace(replace, v);
	      }
	
	      this.build(!build);
	      return this;
	    }
	  };
	  p.segment = function(segment, v, build) {
	    var separator = this._parts.urn ? ':' : '/';
	    var path = this.path();
	    var absolute = path.substring(0, 1) === '/';
	    var segments = path.split(separator);
	
	    if (segment !== undefined && typeof segment !== 'number') {
	      build = v;
	      v = segment;
	      segment = undefined;
	    }
	
	    if (segment !== undefined && typeof segment !== 'number') {
	      throw new Error('Bad segment "' + segment + '", must be 0-based integer');
	    }
	
	    if (absolute) {
	      segments.shift();
	    }
	
	    if (segment < 0) {
	      // allow negative indexes to address from the end
	      segment = Math.max(segments.length + segment, 0);
	    }
	
	    if (v === undefined) {
	      /*jshint laxbreak: true */
	      return segment === undefined
	        ? segments
	        : segments[segment];
	      /*jshint laxbreak: false */
	    } else if (segment === null || segments[segment] === undefined) {
	      if (isArray(v)) {
	        segments = [];
	        // collapse empty elements within array
	        for (var i=0, l=v.length; i < l; i++) {
	          if (!v[i].length && (!segments.length || !segments[segments.length -1].length)) {
	            continue;
	          }
	
	          if (segments.length && !segments[segments.length -1].length) {
	            segments.pop();
	          }
	
	          segments.push(trimSlashes(v[i]));
	        }
	      } else if (v || typeof v === 'string') {
	        v = trimSlashes(v);
	        if (segments[segments.length -1] === '') {
	          // empty trailing elements have to be overwritten
	          // to prevent results such as /foo//bar
	          segments[segments.length -1] = v;
	        } else {
	          segments.push(v);
	        }
	      }
	    } else {
	      if (v) {
	        segments[segment] = trimSlashes(v);
	      } else {
	        segments.splice(segment, 1);
	      }
	    }
	
	    if (absolute) {
	      segments.unshift('');
	    }
	
	    return this.path(segments.join(separator), build);
	  };
	  p.segmentCoded = function(segment, v, build) {
	    var segments, i, l;
	
	    if (typeof segment !== 'number') {
	      build = v;
	      v = segment;
	      segment = undefined;
	    }
	
	    if (v === undefined) {
	      segments = this.segment(segment, v, build);
	      if (!isArray(segments)) {
	        segments = segments !== undefined ? URI.decode(segments) : undefined;
	      } else {
	        for (i = 0, l = segments.length; i < l; i++) {
	          segments[i] = URI.decode(segments[i]);
	        }
	      }
	
	      return segments;
	    }
	
	    if (!isArray(v)) {
	      v = (typeof v === 'string' || v instanceof String) ? URI.encode(v) : v;
	    } else {
	      for (i = 0, l = v.length; i < l; i++) {
	        v[i] = URI.encode(v[i]);
	      }
	    }
	
	    return this.segment(segment, v, build);
	  };
	
	  // mutating query string
	  var q = p.query;
	  p.query = function(v, build) {
	    if (v === true) {
	      return URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
	    } else if (typeof v === 'function') {
	      var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
	      var result = v.call(this, data);
	      this._parts.query = URI.buildQuery(result || data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
	      this.build(!build);
	      return this;
	    } else if (v !== undefined && typeof v !== 'string') {
	      this._parts.query = URI.buildQuery(v, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
	      this.build(!build);
	      return this;
	    } else {
	      return q.call(this, v, build);
	    }
	  };
	  p.setQuery = function(name, value, build) {
	    var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
	
	    if (typeof name === 'string' || name instanceof String) {
	      data[name] = value !== undefined ? value : null;
	    } else if (typeof name === 'object') {
	      for (var key in name) {
	        if (hasOwn.call(name, key)) {
	          data[key] = name[key];
	        }
	      }
	    } else {
	      throw new TypeError('URI.addQuery() accepts an object, string as the name parameter');
	    }
	
	    this._parts.query = URI.buildQuery(data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
	    if (typeof name !== 'string') {
	      build = value;
	    }
	
	    this.build(!build);
	    return this;
	  };
	  p.addQuery = function(name, value, build) {
	    var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
	    URI.addQuery(data, name, value === undefined ? null : value);
	    this._parts.query = URI.buildQuery(data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
	    if (typeof name !== 'string') {
	      build = value;
	    }
	
	    this.build(!build);
	    return this;
	  };
	  p.removeQuery = function(name, value, build) {
	    var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
	    URI.removeQuery(data, name, value);
	    this._parts.query = URI.buildQuery(data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
	    if (typeof name !== 'string') {
	      build = value;
	    }
	
	    this.build(!build);
	    return this;
	  };
	  p.hasQuery = function(name, value, withinArray) {
	    var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
	    return URI.hasQuery(data, name, value, withinArray);
	  };
	  p.setSearch = p.setQuery;
	  p.addSearch = p.addQuery;
	  p.removeSearch = p.removeQuery;
	  p.hasSearch = p.hasQuery;
	
	  // sanitizing URLs
	  p.normalize = function() {
	    if (this._parts.urn) {
	      return this
	        .normalizeProtocol(false)
	        .normalizePath(false)
	        .normalizeQuery(false)
	        .normalizeFragment(false)
	        .build();
	    }
	
	    return this
	      .normalizeProtocol(false)
	      .normalizeHostname(false)
	      .normalizePort(false)
	      .normalizePath(false)
	      .normalizeQuery(false)
	      .normalizeFragment(false)
	      .build();
	  };
	  p.normalizeProtocol = function(build) {
	    if (typeof this._parts.protocol === 'string') {
	      this._parts.protocol = this._parts.protocol.toLowerCase();
	      this.build(!build);
	    }
	
	    return this;
	  };
	  p.normalizeHostname = function(build) {
	    if (this._parts.hostname) {
	      if (this.is('IDN') && punycode) {
	        this._parts.hostname = punycode.toASCII(this._parts.hostname);
	      } else if (this.is('IPv6') && IPv6) {
	        this._parts.hostname = IPv6.best(this._parts.hostname);
	      }
	
	      this._parts.hostname = this._parts.hostname.toLowerCase();
	      this.build(!build);
	    }
	
	    return this;
	  };
	  p.normalizePort = function(build) {
	    // remove port of it's the protocol's default
	    if (typeof this._parts.protocol === 'string' && this._parts.port === URI.defaultPorts[this._parts.protocol]) {
	      this._parts.port = null;
	      this.build(!build);
	    }
	
	    return this;
	  };
	  p.normalizePath = function(build) {
	    var _path = this._parts.path;
	    if (!_path) {
	      return this;
	    }
	
	    if (this._parts.urn) {
	      this._parts.path = URI.recodeUrnPath(this._parts.path);
	      this.build(!build);
	      return this;
	    }
	
	    if (this._parts.path === '/') {
	      return this;
	    }
	
	    _path = URI.recodePath(_path);
	
	    var _was_relative;
	    var _leadingParents = '';
	    var _parent, _pos;
	
	    // handle relative paths
	    if (_path.charAt(0) !== '/') {
	      _was_relative = true;
	      _path = '/' + _path;
	    }
	
	    // handle relative files (as opposed to directories)
	    if (_path.slice(-3) === '/..' || _path.slice(-2) === '/.') {
	      _path += '/';
	    }
	
	    // resolve simples
	    _path = _path
	      .replace(/(\/(\.\/)+)|(\/\.$)/g, '/')
	      .replace(/\/{2,}/g, '/');
	
	    // remember leading parents
	    if (_was_relative) {
	      _leadingParents = _path.substring(1).match(/^(\.\.\/)+/) || '';
	      if (_leadingParents) {
	        _leadingParents = _leadingParents[0];
	      }
	    }
	
	    // resolve parents
	    while (true) {
	      _parent = _path.search(/\/\.\.(\/|$)/);
	      if (_parent === -1) {
	        // no more ../ to resolve
	        break;
	      } else if (_parent === 0) {
	        // top level cannot be relative, skip it
	        _path = _path.substring(3);
	        continue;
	      }
	
	      _pos = _path.substring(0, _parent).lastIndexOf('/');
	      if (_pos === -1) {
	        _pos = _parent;
	      }
	      _path = _path.substring(0, _pos) + _path.substring(_parent + 3);
	    }
	
	    // revert to relative
	    if (_was_relative && this.is('relative')) {
	      _path = _leadingParents + _path.substring(1);
	    }
	
	    this._parts.path = _path;
	    this.build(!build);
	    return this;
	  };
	  p.normalizePathname = p.normalizePath;
	  p.normalizeQuery = function(build) {
	    if (typeof this._parts.query === 'string') {
	      if (!this._parts.query.length) {
	        this._parts.query = null;
	      } else {
	        this.query(URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace));
	      }
	
	      this.build(!build);
	    }
	
	    return this;
	  };
	  p.normalizeFragment = function(build) {
	    if (!this._parts.fragment) {
	      this._parts.fragment = null;
	      this.build(!build);
	    }
	
	    return this;
	  };
	  p.normalizeSearch = p.normalizeQuery;
	  p.normalizeHash = p.normalizeFragment;
	
	  p.iso8859 = function() {
	    // expect unicode input, iso8859 output
	    var e = URI.encode;
	    var d = URI.decode;
	
	    URI.encode = escape;
	    URI.decode = decodeURIComponent;
	    try {
	      this.normalize();
	    } finally {
	      URI.encode = e;
	      URI.decode = d;
	    }
	    return this;
	  };
	
	  p.unicode = function() {
	    // expect iso8859 input, unicode output
	    var e = URI.encode;
	    var d = URI.decode;
	
	    URI.encode = strictEncodeURIComponent;
	    URI.decode = unescape;
	    try {
	      this.normalize();
	    } finally {
	      URI.encode = e;
	      URI.decode = d;
	    }
	    return this;
	  };
	
	  p.readable = function() {
	    var uri = this.clone();
	    // removing username, password, because they shouldn't be displayed according to RFC 3986
	    uri.username('').password('').normalize();
	    var t = '';
	    if (uri._parts.protocol) {
	      t += uri._parts.protocol + '://';
	    }
	
	    if (uri._parts.hostname) {
	      if (uri.is('punycode') && punycode) {
	        t += punycode.toUnicode(uri._parts.hostname);
	        if (uri._parts.port) {
	          t += ':' + uri._parts.port;
	        }
	      } else {
	        t += uri.host();
	      }
	    }
	
	    if (uri._parts.hostname && uri._parts.path && uri._parts.path.charAt(0) !== '/') {
	      t += '/';
	    }
	
	    t += uri.path(true);
	    if (uri._parts.query) {
	      var q = '';
	      for (var i = 0, qp = uri._parts.query.split('&'), l = qp.length; i < l; i++) {
	        var kv = (qp[i] || '').split('=');
	        q += '&' + URI.decodeQuery(kv[0], this._parts.escapeQuerySpace)
	          .replace(/&/g, '%26');
	
	        if (kv[1] !== undefined) {
	          q += '=' + URI.decodeQuery(kv[1], this._parts.escapeQuerySpace)
	            .replace(/&/g, '%26');
	        }
	      }
	      t += '?' + q.substring(1);
	    }
	
	    t += URI.decodeQuery(uri.hash(), true);
	    return t;
	  };
	
	  // resolving relative and absolute URLs
	  p.absoluteTo = function(base) {
	    var resolved = this.clone();
	    var properties = ['protocol', 'username', 'password', 'hostname', 'port'];
	    var basedir, i, p;
	
	    if (this._parts.urn) {
	      throw new Error('URNs do not have any generally defined hierarchical components');
	    }
	
	    if (!(base instanceof URI)) {
	      base = new URI(base);
	    }
	
	    if (!resolved._parts.protocol) {
	      resolved._parts.protocol = base._parts.protocol;
	    }
	
	    if (this._parts.hostname) {
	      return resolved;
	    }
	
	    for (i = 0; (p = properties[i]); i++) {
	      resolved._parts[p] = base._parts[p];
	    }
	
	    if (!resolved._parts.path) {
	      resolved._parts.path = base._parts.path;
	      if (!resolved._parts.query) {
	        resolved._parts.query = base._parts.query;
	      }
	    } else if (resolved._parts.path.substring(-2) === '..') {
	      resolved._parts.path += '/';
	    }
	
	    if (resolved.path().charAt(0) !== '/') {
	      basedir = base.directory();
	      basedir = basedir ? basedir : base.path().indexOf('/') === 0 ? '/' : '';
	      resolved._parts.path = (basedir ? (basedir + '/') : '') + resolved._parts.path;
	      resolved.normalizePath();
	    }
	
	    resolved.build();
	    return resolved;
	  };
	  p.relativeTo = function(base) {
	    var relative = this.clone().normalize();
	    var relativeParts, baseParts, common, relativePath, basePath;
	
	    if (relative._parts.urn) {
	      throw new Error('URNs do not have any generally defined hierarchical components');
	    }
	
	    base = new URI(base).normalize();
	    relativeParts = relative._parts;
	    baseParts = base._parts;
	    relativePath = relative.path();
	    basePath = base.path();
	
	    if (relativePath.charAt(0) !== '/') {
	      throw new Error('URI is already relative');
	    }
	
	    if (basePath.charAt(0) !== '/') {
	      throw new Error('Cannot calculate a URI relative to another relative URI');
	    }
	
	    if (relativeParts.protocol === baseParts.protocol) {
	      relativeParts.protocol = null;
	    }
	
	    if (relativeParts.username !== baseParts.username || relativeParts.password !== baseParts.password) {
	      return relative.build();
	    }
	
	    if (relativeParts.protocol !== null || relativeParts.username !== null || relativeParts.password !== null) {
	      return relative.build();
	    }
	
	    if (relativeParts.hostname === baseParts.hostname && relativeParts.port === baseParts.port) {
	      relativeParts.hostname = null;
	      relativeParts.port = null;
	    } else {
	      return relative.build();
	    }
	
	    if (relativePath === basePath) {
	      relativeParts.path = '';
	      return relative.build();
	    }
	
	    // determine common sub path
	    common = URI.commonPath(relativePath, basePath);
	
	    // If the paths have nothing in common, return a relative URL with the absolute path.
	    if (!common) {
	      return relative.build();
	    }
	
	    var parents = baseParts.path
	      .substring(common.length)
	      .replace(/[^\/]*$/, '')
	      .replace(/.*?\//g, '../');
	
	    relativeParts.path = (parents + relativeParts.path.substring(common.length)) || './';
	
	    return relative.build();
	  };
	
	  // comparing URIs
	  p.equals = function(uri) {
	    var one = this.clone();
	    var two = new URI(uri);
	    var one_map = {};
	    var two_map = {};
	    var checked = {};
	    var one_query, two_query, key;
	
	    one.normalize();
	    two.normalize();
	
	    // exact match
	    if (one.toString() === two.toString()) {
	      return true;
	    }
	
	    // extract query string
	    one_query = one.query();
	    two_query = two.query();
	    one.query('');
	    two.query('');
	
	    // definitely not equal if not even non-query parts match
	    if (one.toString() !== two.toString()) {
	      return false;
	    }
	
	    // query parameters have the same length, even if they're permuted
	    if (one_query.length !== two_query.length) {
	      return false;
	    }
	
	    one_map = URI.parseQuery(one_query, this._parts.escapeQuerySpace);
	    two_map = URI.parseQuery(two_query, this._parts.escapeQuerySpace);
	
	    for (key in one_map) {
	      if (hasOwn.call(one_map, key)) {
	        if (!isArray(one_map[key])) {
	          if (one_map[key] !== two_map[key]) {
	            return false;
	          }
	        } else if (!arraysEqual(one_map[key], two_map[key])) {
	          return false;
	        }
	
	        checked[key] = true;
	      }
	    }
	
	    for (key in two_map) {
	      if (hasOwn.call(two_map, key)) {
	        if (!checked[key]) {
	          // two contains a parameter not present in one
	          return false;
	        }
	      }
	    }
	
	    return true;
	  };
	
	  // state
	  p.duplicateQueryParameters = function(v) {
	    this._parts.duplicateQueryParameters = !!v;
	    return this;
	  };
	
	  p.escapeQuerySpace = function(v) {
	    this._parts.escapeQuerySpace = !!v;
	    return this;
	  };
	
	  return URI;
	}));


/***/ },

/***/ 6194:
/*!*******************************************************!*\
  !*** ./atlas_bundles/heatmap/~/urijs/src/punycode.js ***!
  \*******************************************************/
1116,

/***/ 6195:
/*!***************************************************!*\
  !*** ./atlas_bundles/heatmap/~/urijs/src/IPv6.js ***!
  \***************************************************/
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * URI.js - Mutating URLs
	 * IPv6 Support
	 *
	 * Version: 1.17.1
	 *
	 * Author: Rodney Rehm
	 * Web: http://medialize.github.io/URI.js/
	 *
	 * Licensed under
	 *   MIT License http://www.opensource.org/licenses/mit-license
	 *
	 */
	
	(function (root, factory) {
	  'use strict';
	  // https://github.com/umdjs/umd/blob/master/returnExports.js
	  if (true) {
	    // Node
	    module.exports = factory();
	  } else if (typeof define === 'function' && define.amd) {
	    // AMD. Register as an anonymous module.
	    define(factory);
	  } else {
	    // Browser globals (root is window)
	    root.IPv6 = factory(root);
	  }
	}(this, function (root) {
	  'use strict';
	
	  /*
	  var _in = "fe80:0000:0000:0000:0204:61ff:fe9d:f156";
	  var _out = IPv6.best(_in);
	  var _expected = "fe80::204:61ff:fe9d:f156";
	
	  console.log(_in, _out, _expected, _out === _expected);
	  */
	
	  // save current IPv6 variable, if any
	  var _IPv6 = root && root.IPv6;
	
	  function bestPresentation(address) {
	    // based on:
	    // Javascript to test an IPv6 address for proper format, and to
	    // present the "best text representation" according to IETF Draft RFC at
	    // http://tools.ietf.org/html/draft-ietf-6man-text-addr-representation-04
	    // 8 Feb 2010 Rich Brown, Dartware, LLC
	    // Please feel free to use this code as long as you provide a link to
	    // http://www.intermapper.com
	    // http://intermapper.com/support/tools/IPV6-Validator.aspx
	    // http://download.dartware.com/thirdparty/ipv6validator.js
	
	    var _address = address.toLowerCase();
	    var segments = _address.split(':');
	    var length = segments.length;
	    var total = 8;
	
	    // trim colons (:: or ::a:b:c… or …a:b:c::)
	    if (segments[0] === '' && segments[1] === '' && segments[2] === '') {
	      // must have been ::
	      // remove first two items
	      segments.shift();
	      segments.shift();
	    } else if (segments[0] === '' && segments[1] === '') {
	      // must have been ::xxxx
	      // remove the first item
	      segments.shift();
	    } else if (segments[length - 1] === '' && segments[length - 2] === '') {
	      // must have been xxxx::
	      segments.pop();
	    }
	
	    length = segments.length;
	
	    // adjust total segments for IPv4 trailer
	    if (segments[length - 1].indexOf('.') !== -1) {
	      // found a "." which means IPv4
	      total = 7;
	    }
	
	    // fill empty segments them with "0000"
	    var pos;
	    for (pos = 0; pos < length; pos++) {
	      if (segments[pos] === '') {
	        break;
	      }
	    }
	
	    if (pos < total) {
	      segments.splice(pos, 1, '0000');
	      while (segments.length < total) {
	        segments.splice(pos, 0, '0000');
	      }
	
	      length = segments.length;
	    }
	
	    // strip leading zeros
	    var _segments;
	    for (var i = 0; i < total; i++) {
	      _segments = segments[i].split('');
	      for (var j = 0; j < 3 ; j++) {
	        if (_segments[0] === '0' && _segments.length > 1) {
	          _segments.splice(0,1);
	        } else {
	          break;
	        }
	      }
	
	      segments[i] = _segments.join('');
	    }
	
	    // find longest sequence of zeroes and coalesce them into one segment
	    var best = -1;
	    var _best = 0;
	    var _current = 0;
	    var current = -1;
	    var inzeroes = false;
	    // i; already declared
	
	    for (i = 0; i < total; i++) {
	      if (inzeroes) {
	        if (segments[i] === '0') {
	          _current += 1;
	        } else {
	          inzeroes = false;
	          if (_current > _best) {
	            best = current;
	            _best = _current;
	          }
	        }
	      } else {
	        if (segments[i] === '0') {
	          inzeroes = true;
	          current = i;
	          _current = 1;
	        }
	      }
	    }
	
	    if (_current > _best) {
	      best = current;
	      _best = _current;
	    }
	
	    if (_best > 1) {
	      segments.splice(best, _best, '');
	    }
	
	    length = segments.length;
	
	    // assemble remaining segments
	    var result = '';
	    if (segments[0] === '')  {
	      result = ':';
	    }
	
	    for (i = 0; i < length; i++) {
	      result += segments[i];
	      if (i === length - 1) {
	        break;
	      }
	
	      result += ':';
	    }
	
	    if (segments[length - 1] === '') {
	      result += ':';
	    }
	
	    return result;
	  }
	
	  function noConflict() {
	    /*jshint validthis: true */
	    if (root.IPv6 === this) {
	      root.IPv6 = _IPv6;
	    }
	  
	    return this;
	  }
	
	  return {
	    best: bestPresentation,
	    noConflict: noConflict
	  };
	}));


/***/ },

/***/ 6196:
/*!*****************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/urijs/src/SecondLevelDomains.js ***!
  \*****************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * URI.js - Mutating URLs
	 * Second Level Domain (SLD) Support
	 *
	 * Version: 1.17.1
	 *
	 * Author: Rodney Rehm
	 * Web: http://medialize.github.io/URI.js/
	 *
	 * Licensed under
	 *   MIT License http://www.opensource.org/licenses/mit-license
	 *
	 */
	
	(function (root, factory) {
	  'use strict';
	  // https://github.com/umdjs/umd/blob/master/returnExports.js
	  if (true) {
	    // Node
	    module.exports = factory();
	  } else if (typeof define === 'function' && define.amd) {
	    // AMD. Register as an anonymous module.
	    define(factory);
	  } else {
	    // Browser globals (root is window)
	    root.SecondLevelDomains = factory(root);
	  }
	}(this, function (root) {
	  'use strict';
	
	  // save current SecondLevelDomains variable, if any
	  var _SecondLevelDomains = root && root.SecondLevelDomains;
	
	  var SLD = {
	    // list of known Second Level Domains
	    // converted list of SLDs from https://github.com/gavingmiller/second-level-domains
	    // ----
	    // publicsuffix.org is more current and actually used by a couple of browsers internally.
	    // downside is it also contains domains like "dyndns.org" - which is fine for the security
	    // issues browser have to deal with (SOP for cookies, etc) - but is way overboard for URI.js
	    // ----
	    list: {
	      'ac':' com gov mil net org ',
	      'ae':' ac co gov mil name net org pro sch ',
	      'af':' com edu gov net org ',
	      'al':' com edu gov mil net org ',
	      'ao':' co ed gv it og pb ',
	      'ar':' com edu gob gov int mil net org tur ',
	      'at':' ac co gv or ',
	      'au':' asn com csiro edu gov id net org ',
	      'ba':' co com edu gov mil net org rs unbi unmo unsa untz unze ',
	      'bb':' biz co com edu gov info net org store tv ',
	      'bh':' biz cc com edu gov info net org ',
	      'bn':' com edu gov net org ',
	      'bo':' com edu gob gov int mil net org tv ',
	      'br':' adm adv agr am arq art ato b bio blog bmd cim cng cnt com coop ecn edu eng esp etc eti far flog fm fnd fot fst g12 ggf gov imb ind inf jor jus lel mat med mil mus net nom not ntr odo org ppg pro psc psi qsl rec slg srv tmp trd tur tv vet vlog wiki zlg ',
	      'bs':' com edu gov net org ',
	      'bz':' du et om ov rg ',
	      'ca':' ab bc mb nb nf nl ns nt nu on pe qc sk yk ',
	      'ck':' biz co edu gen gov info net org ',
	      'cn':' ac ah bj com cq edu fj gd gov gs gx gz ha hb he hi hl hn jl js jx ln mil net nm nx org qh sc sd sh sn sx tj tw xj xz yn zj ',
	      'co':' com edu gov mil net nom org ',
	      'cr':' ac c co ed fi go or sa ',
	      'cy':' ac biz com ekloges gov ltd name net org parliament press pro tm ',
	      'do':' art com edu gob gov mil net org sld web ',
	      'dz':' art asso com edu gov net org pol ',
	      'ec':' com edu fin gov info med mil net org pro ',
	      'eg':' com edu eun gov mil name net org sci ',
	      'er':' com edu gov ind mil net org rochest w ',
	      'es':' com edu gob nom org ',
	      'et':' biz com edu gov info name net org ',
	      'fj':' ac biz com info mil name net org pro ',
	      'fk':' ac co gov net nom org ',
	      'fr':' asso com f gouv nom prd presse tm ',
	      'gg':' co net org ',
	      'gh':' com edu gov mil org ',
	      'gn':' ac com gov net org ',
	      'gr':' com edu gov mil net org ',
	      'gt':' com edu gob ind mil net org ',
	      'gu':' com edu gov net org ',
	      'hk':' com edu gov idv net org ',
	      'hu':' 2000 agrar bolt casino city co erotica erotika film forum games hotel info ingatlan jogasz konyvelo lakas media news org priv reklam sex shop sport suli szex tm tozsde utazas video ',
	      'id':' ac co go mil net or sch web ',
	      'il':' ac co gov idf k12 muni net org ',
	      'in':' ac co edu ernet firm gen gov i ind mil net nic org res ',
	      'iq':' com edu gov i mil net org ',
	      'ir':' ac co dnssec gov i id net org sch ',
	      'it':' edu gov ',
	      'je':' co net org ',
	      'jo':' com edu gov mil name net org sch ',
	      'jp':' ac ad co ed go gr lg ne or ',
	      'ke':' ac co go info me mobi ne or sc ',
	      'kh':' com edu gov mil net org per ',
	      'ki':' biz com de edu gov info mob net org tel ',
	      'km':' asso com coop edu gouv k medecin mil nom notaires pharmaciens presse tm veterinaire ',
	      'kn':' edu gov net org ',
	      'kr':' ac busan chungbuk chungnam co daegu daejeon es gangwon go gwangju gyeongbuk gyeonggi gyeongnam hs incheon jeju jeonbuk jeonnam k kg mil ms ne or pe re sc seoul ulsan ',
	      'kw':' com edu gov net org ',
	      'ky':' com edu gov net org ',
	      'kz':' com edu gov mil net org ',
	      'lb':' com edu gov net org ',
	      'lk':' assn com edu gov grp hotel int ltd net ngo org sch soc web ',
	      'lr':' com edu gov net org ',
	      'lv':' asn com conf edu gov id mil net org ',
	      'ly':' com edu gov id med net org plc sch ',
	      'ma':' ac co gov m net org press ',
	      'mc':' asso tm ',
	      'me':' ac co edu gov its net org priv ',
	      'mg':' com edu gov mil nom org prd tm ',
	      'mk':' com edu gov inf name net org pro ',
	      'ml':' com edu gov net org presse ',
	      'mn':' edu gov org ',
	      'mo':' com edu gov net org ',
	      'mt':' com edu gov net org ',
	      'mv':' aero biz com coop edu gov info int mil museum name net org pro ',
	      'mw':' ac co com coop edu gov int museum net org ',
	      'mx':' com edu gob net org ',
	      'my':' com edu gov mil name net org sch ',
	      'nf':' arts com firm info net other per rec store web ',
	      'ng':' biz com edu gov mil mobi name net org sch ',
	      'ni':' ac co com edu gob mil net nom org ',
	      'np':' com edu gov mil net org ',
	      'nr':' biz com edu gov info net org ',
	      'om':' ac biz co com edu gov med mil museum net org pro sch ',
	      'pe':' com edu gob mil net nom org sld ',
	      'ph':' com edu gov i mil net ngo org ',
	      'pk':' biz com edu fam gob gok gon gop gos gov net org web ',
	      'pl':' art bialystok biz com edu gda gdansk gorzow gov info katowice krakow lodz lublin mil net ngo olsztyn org poznan pwr radom slupsk szczecin torun warszawa waw wroc wroclaw zgora ',
	      'pr':' ac biz com edu est gov info isla name net org pro prof ',
	      'ps':' com edu gov net org plo sec ',
	      'pw':' belau co ed go ne or ',
	      'ro':' arts com firm info nom nt org rec store tm www ',
	      'rs':' ac co edu gov in org ',
	      'sb':' com edu gov net org ',
	      'sc':' com edu gov net org ',
	      'sh':' co com edu gov net nom org ',
	      'sl':' com edu gov net org ',
	      'st':' co com consulado edu embaixada gov mil net org principe saotome store ',
	      'sv':' com edu gob org red ',
	      'sz':' ac co org ',
	      'tr':' av bbs bel biz com dr edu gen gov info k12 name net org pol tel tsk tv web ',
	      'tt':' aero biz cat co com coop edu gov info int jobs mil mobi museum name net org pro tel travel ',
	      'tw':' club com ebiz edu game gov idv mil net org ',
	      'mu':' ac co com gov net or org ',
	      'mz':' ac co edu gov org ',
	      'na':' co com ',
	      'nz':' ac co cri geek gen govt health iwi maori mil net org parliament school ',
	      'pa':' abo ac com edu gob ing med net nom org sld ',
	      'pt':' com edu gov int net nome org publ ',
	      'py':' com edu gov mil net org ',
	      'qa':' com edu gov mil net org ',
	      're':' asso com nom ',
	      'ru':' ac adygeya altai amur arkhangelsk astrakhan bashkiria belgorod bir bryansk buryatia cbg chel chelyabinsk chita chukotka chuvashia com dagestan e-burg edu gov grozny int irkutsk ivanovo izhevsk jar joshkar-ola kalmykia kaluga kamchatka karelia kazan kchr kemerovo khabarovsk khakassia khv kirov koenig komi kostroma kranoyarsk kuban kurgan kursk lipetsk magadan mari mari-el marine mil mordovia mosreg msk murmansk nalchik net nnov nov novosibirsk nsk omsk orenburg org oryol penza perm pp pskov ptz rnd ryazan sakhalin samara saratov simbirsk smolensk spb stavropol stv surgut tambov tatarstan tom tomsk tsaritsyn tsk tula tuva tver tyumen udm udmurtia ulan-ude vladikavkaz vladimir vladivostok volgograd vologda voronezh vrn vyatka yakutia yamal yekaterinburg yuzhno-sakhalinsk ',
	      'rw':' ac co com edu gouv gov int mil net ',
	      'sa':' com edu gov med net org pub sch ',
	      'sd':' com edu gov info med net org tv ',
	      'se':' a ac b bd c d e f g h i k l m n o org p parti pp press r s t tm u w x y z ',
	      'sg':' com edu gov idn net org per ',
	      'sn':' art com edu gouv org perso univ ',
	      'sy':' com edu gov mil net news org ',
	      'th':' ac co go in mi net or ',
	      'tj':' ac biz co com edu go gov info int mil name net nic org test web ',
	      'tn':' agrinet com defense edunet ens fin gov ind info intl mincom nat net org perso rnrt rns rnu tourism ',
	      'tz':' ac co go ne or ',
	      'ua':' biz cherkassy chernigov chernovtsy ck cn co com crimea cv dn dnepropetrovsk donetsk dp edu gov if in ivano-frankivsk kh kharkov kherson khmelnitskiy kiev kirovograd km kr ks kv lg lugansk lutsk lviv me mk net nikolaev od odessa org pl poltava pp rovno rv sebastopol sumy te ternopil uzhgorod vinnica vn zaporizhzhe zhitomir zp zt ',
	      'ug':' ac co go ne or org sc ',
	      'uk':' ac bl british-library co cym gov govt icnet jet lea ltd me mil mod national-library-scotland nel net nhs nic nls org orgn parliament plc police sch scot soc ',
	      'us':' dni fed isa kids nsn ',
	      'uy':' com edu gub mil net org ',
	      've':' co com edu gob info mil net org web ',
	      'vi':' co com k12 net org ',
	      'vn':' ac biz com edu gov health info int name net org pro ',
	      'ye':' co com gov ltd me net org plc ',
	      'yu':' ac co edu gov org ',
	      'za':' ac agric alt bourse city co cybernet db edu gov grondar iaccess imt inca landesign law mil net ngo nis nom olivetti org pix school tm web ',
	      'zm':' ac co com edu gov net org sch '
	    },
	    // gorhill 2013-10-25: Using indexOf() instead Regexp(). Significant boost
	    // in both performance and memory footprint. No initialization required.
	    // http://jsperf.com/uri-js-sld-regex-vs-binary-search/4
	    // Following methods use lastIndexOf() rather than array.split() in order
	    // to avoid any memory allocations.
	    has: function(domain) {
	      var tldOffset = domain.lastIndexOf('.');
	      if (tldOffset <= 0 || tldOffset >= (domain.length-1)) {
	        return false;
	      }
	      var sldOffset = domain.lastIndexOf('.', tldOffset-1);
	      if (sldOffset <= 0 || sldOffset >= (tldOffset-1)) {
	        return false;
	      }
	      var sldList = SLD.list[domain.slice(tldOffset+1)];
	      if (!sldList) {
	        return false;
	      }
	      return sldList.indexOf(' ' + domain.slice(sldOffset+1, tldOffset) + ' ') >= 0;
	    },
	    is: function(domain) {
	      var tldOffset = domain.lastIndexOf('.');
	      if (tldOffset <= 0 || tldOffset >= (domain.length-1)) {
	        return false;
	      }
	      var sldOffset = domain.lastIndexOf('.', tldOffset-1);
	      if (sldOffset >= 0) {
	        return false;
	      }
	      var sldList = SLD.list[domain.slice(tldOffset+1)];
	      if (!sldList) {
	        return false;
	      }
	      return sldList.indexOf(' ' + domain.slice(0, tldOffset) + ' ') >= 0;
	    },
	    get: function(domain) {
	      var tldOffset = domain.lastIndexOf('.');
	      if (tldOffset <= 0 || tldOffset >= (domain.length-1)) {
	        return null;
	      }
	      var sldOffset = domain.lastIndexOf('.', tldOffset-1);
	      if (sldOffset <= 0 || sldOffset >= (tldOffset-1)) {
	        return null;
	      }
	      var sldList = SLD.list[domain.slice(tldOffset+1)];
	      if (!sldList) {
	        return null;
	      }
	      if (sldList.indexOf(' ' + domain.slice(sldOffset+1, tldOffset) + ' ') < 0) {
	        return null;
	      }
	      return domain.slice(sldOffset+1);
	    },
	    noConflict: function(){
	      if (root.SecondLevelDomains === this) {
	        root.SecondLevelDomains = _SecondLevelDomains;
	      }
	      return this;
	    }
	  };
	
	  return SLD;
	}));


/***/ },

/***/ 6197:
/*!*******************************************************!*\
  !*** ./atlas_bundles/heatmap/src/ExperimentsList.jsx ***!
  \*******************************************************/
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	//*------------------------------------------------------------------*
	
	var React = __webpack_require__(/*! react */ 2919);
	var BootstrapButton = __webpack_require__(/*! react-bootstrap/lib/Button */ 3170);
	
	//*------------------------------------------------------------------*
	
	var ExperimentsList = React.createClass({
	    displayName: 'ExperimentsList',
	
	    propTypes: {
	        profiles: React.PropTypes.shape({
	            rows: React.PropTypes.array.isRequired
	        }).isRequired,
	        atlasBaseURL: React.PropTypes.string.isRequired,
	        linksAtlasBaseURL: React.PropTypes.string.isRequired,
	        geneQuery: React.PropTypes.string.isRequired
	    },
	
	    getInitialState: function getInitialState() {
	        return { "displayAll": this.props.profiles.rows.length < 10 };
	    },
	
	    _getRowsToDisplay: function _getRowsToDisplay() {
	        var rows = this.props.profiles.rows.sort(this._lexicalSort);
	        return this.state.displayAll ? rows : rows.slice(0, 10);
	    },
	
	    _displayAll: function _displayAll() {
	        this.setState({ "displayAll": true });
	    },
	
	    _lexicalSort: function _lexicalSort(thisProfile, thatProfile) {
	        if (thisProfile.name > thatProfile.name) {
	            return 1;
	        }
	        if (thisProfile.name < thatProfile.name) {
	            return -1;
	        }
	        return 0;
	    },
	
	    _renderListItem: function _renderListItem(profile) {
	        var experimentURL = this.props.linksAtlasBaseURL + "/experiments/" + profile.id + "?geneQuery=" + this.props.geneQuery + (profile.serializedFilterFactors ? "&serializedFilterFactors=" + encodeURIComponent(profile.serializedFilterFactors) : "");
	
	        return React.createElement(
	            'li',
	            { key: profile.name },
	            React.createElement(
	                'a',
	                { target: '_blank', href: experimentURL },
	                profile.name
	            )
	        );
	    },
	
	    _renderListItems: function _renderListItems(options) {
	        return this._getRowsToDisplay().map(this._renderListItem);
	    },
	
	    render: function render() {
	        return React.createElement(
	            'ul',
	            { style: { listStyleType: "none", paddingLeft: "0" } },
	            this._renderListItems(),
	            this.state.displayAll ? React.createElement('a', null) : React.createElement(
	                BootstrapButton,
	                { bsStyle: 'default', bsSize: 'xsmall', onClick: this._displayAll },
	                'More'
	            )
	        );
	    }
	});
	
	//*------------------------------------------------------------------*
	
	module.exports = ExperimentsList;

/***/ },

/***/ 6198:
/*!*******************************************************************!*\
  !*** ./atlas_bundles/heatmap/src/HeatmapAnatomogramContainer.css ***!
  \*******************************************************************/
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(/*! !../~/css-loader!./HeatmapAnatomogramContainer.css */ 6199);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(/*! ../~/style-loader/addStyles.js */ 3155)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!../node_modules/css-loader/index.js!./HeatmapAnatomogramContainer.css", function() {
				var newContent = require("!!../node_modules/css-loader/index.js!./HeatmapAnatomogramContainer.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },

/***/ 6199:
/*!********************************************************************************************************!*\
  !*** ./atlas_bundles/heatmap/~/css-loader!./atlas_bundles/heatmap/src/HeatmapAnatomogramContainer.css ***!
  \********************************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(/*! ../~/css-loader/lib/css-base.js */ 3154)();
	// imports
	
	
	// module
	exports.push([module.id, ".gxaHeatmapAnatomogramRow {\n    position: relative;\n}\n\n.gxaHeatmapAnatomogramRow:after {\n    clear: both;\n    content: \".\";\n    display: block;\n    visibility: hidden;\n}\n\n.gxaAside {\n    float: left;\n}", ""]);
	
	// exports


/***/ }

});
//# sourceMappingURL=expressionAtlasHeatmap.bundle.js.map