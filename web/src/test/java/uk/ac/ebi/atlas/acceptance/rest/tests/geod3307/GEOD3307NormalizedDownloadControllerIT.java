/*
 * Copyright 2008-2013 Microarray Informatics Team, EMBL-European Bioinformatics Institute
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 *
 * For further details of the Gene Expression Atlas project, including source code,
 * downloads and documentation, please see:
 *
 * http://gxa.github.com/gxa
 */

package uk.ac.ebi.atlas.acceptance.rest.tests.geod3307;


import com.jayway.restassured.response.Response;
import com.jayway.restassured.response.ResponseBody;
import org.junit.Test;
import uk.ac.ebi.atlas.acceptance.rest.EndPoint;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.is;

public class GEOD3307NormalizedDownloadControllerIT {

    private EndPoint subject = new EndPoint("/gxa/experiments/E-GEOD-3307/normalized.tsv");

    @Test
    public void verifyHeader() {
        Response response = subject.getResponse();

        // http status code OK
        assertThat(response.getStatusCode(), is(200));

        // unicode encoded plain text
        assertThat(response.getContentType(), is("application/octet-stream;charset=ISO-8859-1"));

        // filename of attachment should be a zip
        assertThat(response.getHeader("Content-Disposition"), is("attachment; filename=\"E-GEOD-3307-normalized-expressions.tsv.zip\""));
    }

    @Test
    public void verifyLenghtOfDocument() throws Exception {
        ResponseBody body = subject.getResponseBody();

        ZipInputStream zipInputStream = new ZipInputStream(body.asInputStream());
        int entries = 0;
        while (zipInputStream.getNextEntry() != null) {
            entries++;
        }
        assertThat(entries, is(2));
    }

    @Test
    public void verifyFirstEntry() throws Exception {
        ResponseBody body = subject.getResponseBody();

        ZipInputStream zipInputStream = new ZipInputStream(body.asInputStream());
        ZipEntry zipEntry = zipInputStream.getNextEntry();
        assertThat(zipEntry.getName(), is("E-GEOD-3307_A-AFFY-33-normalized-expressions.tsv"));

        BufferedReader reader = new BufferedReader(new InputStreamReader(zipInputStream));
        assertThat(reader.readLine(), is("Gene ID\tGene Name\tDesign Element\tGSM121393\tGSM74393\tGSM74394\tGSM74371\tGSM121369\tGSM74404\tGSM74409\tGSM74358\tGSM74397\tGSM74242\tGSM74366\tGSM74402\tGSM74368\tGSM74413\tGSM121383\tGSM74246\tGSM121362\tGSM121361\tGSM74375\tGSM121398\tGSM74360\tGSM74412\tGSM74355\tGSM121397\tGSM74405\tGSM121370\tGSM74363\tGSM121388\tGSM74406\tGSM74377\tGSM74351\tGSM74392\tGSM74361\tGSM121360\tGSM74400\tGSM121407\tGSM74362\tGSM74370\tGSM74379\tGSM74416\tGSM74243\tGSM74411\tGSM74372\tGSM74367\tGSM74396\tGSM121379\tGSM74365\tGSM74373\tGSM121384\tGSM74417\tGSM74359\tGSM74378\tGSM74401\tGSM74398\tGSM121396\tGSM121389\tGSM119936\tGSM74403\tGSM74354\tGSM121371\tGSM121366\tGSM119937\tGSM74388\tGSM74415\tGSM121380\tGSM74374\tGSM74381\tGSM121385\tGSM74380\tGSM74248\tGSM74410\tGSM74245\tGSM121395\tGSM74387\tGSM74382\tGSM121386\tGSM74385\tGSM74239\tGSM121358\tGSM121390\tGSM121373\tGSM74384\tGSM74353\tGSM74369\tGSM74244\tGSM121364\tGSM121363\tGSM121374\tGSM121391\tGSM74241\tGSM121372\tGSM74383\tGSM74391\tGSM74407\tGSM74364\tGSM121392\tGSM74356\tGSM74240\tGSM121394\tGSM121387\tGSM74386\tGSM121359\tGSM74390\tGSM121367\tGSM121357\tGSM74399\tGSM74414\tGSM121399\tGSM74352\tGSM74418\tGSM74247\tGSM74389\tGSM121382\tGSM74408\tGSM121381\tGSM74395\tGSM74376\tGSM74419\tGSM121365\tGSM74357\tGSM121368"));
        assertThat(reader.readLine(), is("ENSG00000000003\tTSPAN6\t209108_at\t8.55611960895003\t8.44492179570544\t8.83113207718693\t8.34750895062804\t8.53802409887579\t7.80330656935032\t7.88400060214515\t8.4631270995965\t8.23026172803457\t8.37381150689764\t8.52790494613367\t7.8853596738382\t7.82183868506274\t8.3104872107429\t8.73503221048447\t8.60023198662933\t8.21462455277807\t8.88285665876883\t8.36602795618201\t8.59441738346626\t8.48010686811284\t8.21144128880053\t8.03629298849821\t8.78288413929662\t8.39603086645132\t8.57186132448915\t8.21820204532948\t8.41375910201914\t7.77397920031029\t8.18161802306751\t7.84966924086872\t8.33821477301724\t8.61077694792593\t8.29881100559003\t8.02149430702439\t8.49992260150323\t8.52931311616294\t8.04690678385211\t8.3266883586869\t8.00683490210492\t8.27418171632245\t8.32150843676173\t8.21731019385471\t8.38555815984595\t8.28022777085944\t8.44523704061087\t7.9076221116374\t8.14102775957305\t8.23318959093871\t7.81700414065488\t7.74921328680687\t8.45349157539787\t7.92316563748175\t7.93881989157925\t8.99798638505491\t8.43804536478112\t7.85252488259559\t7.922133469824\t8.34686922633885\t8.23988464485632\t8.13239017402016\t8.21350766985454\t9.64612846348232\t8.38065765138275\t8.72754084499942\t7.9827355936224\t8.28715185825582\t8.58834389413356\t8.38292638279955\t8.40751835121313\t7.94272531940522\t8.52799861298315\t9.03431403418096\t8.56332964939357\t8.23270793181564\t8.57397794619913\t8.26909032788354\t7.96333353225187\t8.34881713786055\t8.60799524797404\t8.12806521198107\t9.01353987294826\t8.21636248760991\t7.85571868514855\t8.59610714987368\t8.07500130461865\t9.02152970115249\t7.95282136405966\t8.20013726706139\t8.38667065117346\t8.71910161386122\t8.30265993471457\t8.02841190849399\t8.32426148409793\t7.82137767063003\t8.84073919365277\t8.41011356747254\t8.42739825874725\t8.32426148409793\t8.53436542719517\t8.27551408916998\t8.91920169231663\t7.78364261433513\t8.62859189441194\t8.2801692297756\t8.18214836089364\t8.14649657748465\t8.49956135695682\t8.06914382016669\t7.85455681208742\t8.60901506156337\t8.71305134098362\t8.3647434438618\t8.31125206329892\t8.39976704746714\t8.36108652239013\t8.3252658879185\t7.69463658332858\t7.95261204651279\t8.38366955079063\t9.70985527962202"));
    }

    @Test
    public void verifySecondEntry() throws Exception {
        ResponseBody body = subject.getResponseBody();

        ZipInputStream zipInputStream = new ZipInputStream(body.asInputStream());
        zipInputStream.getNextEntry();
        ZipEntry zipEntry = zipInputStream.getNextEntry();
        assertThat(zipEntry.getName(), is("E-GEOD-3307_A-AFFY-34-normalized-expressions.tsv"));

        BufferedReader reader = new BufferedReader(new InputStreamReader(zipInputStream));
        assertThat(reader.readLine(), is("Gene ID\tGene Name\tDesign Element\tGSM120768\tGSM120785\tGSM120747\tGSM121402\tGSM121244\tGSM121248\tGSM121348\tGSM121344\tGSM120752\tGSM121412\tGSM120776\tGSM121338\tGSM120762\tGSM120766\tGSM120751\tGSM120782\tGSM121102\tGSM120787\tGSM121335\tGSM120761\tGSM120783\tGSM120591\tGSM121332\tGSM121414\tGSM120772\tGSM120759\tGSM121405\tGSM121210\tGSM120764\tGSM121351\tGSM121337\tGSM121208\tGSM121339\tGSM121209\tGSM120718\tGSM120765\tGSM121400\tGSM120773\tGSM121353\tGSM121409\tGSM120791\tGSM121349\tGSM120754\tGSM120775\tGSM121336\tGSM120769\tGSM120753\tGSM121205\tGSM121406\tGSM121246\tGSM121415\tGSM120757\tGSM121355\tGSM120786\tGSM121413\tGSM120744\tGSM121218\tGSM121350\tGSM121245\tGSM121247\tGSM121329\tGSM121214\tGSM121216\tGSM120746\tGSM121404\tGSM121203\tGSM121234\tGSM120788\tGSM121213\tGSM120792\tGSM120760\tGSM121354\tGSM120758\tGSM121207\tGSM121204\tGSM121408\tGSM121212\tGSM121340\tGSM121331\tGSM120745\tGSM120774\tGSM121211\tGSM120780\tGSM121416\tGSM120790\tGSM121403\tGSM121206\tGSM120779\tGSM120594\tGSM120778\tGSM121330\tGSM120750\tGSM120770\tGSM121346\tGSM120749\tGSM121243\tGSM120771\tGSM121343\tGSM120719\tGSM120767\tGSM120748\tGSM120720\tGSM121333\tGSM121410\tGSM120763\tGSM120781\tGSM120789\tGSM121215\tGSM120784\tGSM120755\tGSM121356\tGSM121217\tGSM121345\tGSM120756\tGSM121352\tGSM121341\tGSM120777\tGSM121342\tGSM121334\tGSM121401\tGSM121347"));
        assertThat(reader.readLine(), is("ENSG00000000457\tSCYL3\t231111_at\t5.8054275581545\t6.29710321084717\t6.10143063930557\t5.96670348049843\t6.37009329448668\t6.44800224963942\t6.04142845741942\t6.26427288956324\t6.12847944666436\t5.91549931881897\t5.9802518100087\t6.25230091061992\t5.68540842074228\t6.13478755911186\t6.21567848529761\t5.851017659243\t6.23101873149886\t5.84037222461264\t6.59616486966712\t6.06819812913721\t6.04063019123207\t6.14940712508113\t5.94978544952819\t6.09935258411796\t5.69966352197042\t5.97967403580146\t6.42157950254464\t6.16539350566448\t6.29449540395915\t6.25474036873736\t6.16153381956514\t6.27102096409303\t5.94227225641782\t6.31597155880312\t5.99144422253379\t6.02857140201098\t6.28434373546381\t6.21968408846973\t5.86952443893682\t5.89821991628999\t5.8967457671107\t5.62659019139234\t6.06555534349427\t5.9721324000692\t5.76774978426092\t5.76729242991571\t5.90343961830925\t6.55293328618031\t5.83079567386453\t6.17419974816011\t6.24235708418429\t6.0635693935435\t5.80744938482398\t5.87331841919653\t5.9724795013238\t6.02589180522896\t6.4175740593436\t6.11261321958809\t6.40990558656256\t6.76122835414211\t6.70956622720533\t6.52516616144077\t6.72358710846606\t5.98512706115584\t6.07728676893933\t6.20017465459225\t6.59513830519895\t5.93468751953057\t6.24209308794546\t5.8903778669015\t6.07260956753324\t6.550504210498\t5.77370735410328\t5.7663356993526\t6.24634378977316\t6.44424820124698\t6.0286554892123\t5.80121804531126\t6.14027151003898\t6.29888044342012\t5.98515913745786\t6.80551289486669\t6.02090171683459\t5.9741110774322\t6.11130153635674\t5.90598587934961\t6.14693128321282\t6.00743085394588\t6.11593962685034\t5.89740119842914\t6.37594067674985\t6.3467489500234\t6.00663147632747\t6.2409766767861\t6.2261583617255\t6.52522647793819\t5.98837892232163\t6.26186720658435\t6.06909609912518\t6.00558460834513\t6.21034539272681\t6.22734810312323\t6.43830495602943\t6.25048287786366\t5.95049584145937\t5.67280461098884\t5.82943343851928\t6.90998602205011\t6.00597701833835\t5.88801664603481\t6.22495160577436\t6.21997590377901\t6.11463444916096\t6.15026514746541\t6.20152288175419\t6.49070037323816\t5.95530767439829\t6.57097530113966\t5.8070185786602\t6.44672459165875\t6.23392909252044"));
    }

}